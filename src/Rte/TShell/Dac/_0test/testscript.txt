#
# set baseline
#
set v0-c3 a
set v0-c1 a
set v0-mc3 a
set v1-c2 a
set v2-c2 a
set v3-mc3 a
set v3-c3 a
set v3-c1 a
set t1 a
set t2 a

viewers clear
viewers
readm ll
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed. Bad initial state"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
set
try IF $v0-c3$ != 0 OR $v0-mc3$ != 0 OR $v0-c1$ != 0
	print "Failed. Bad initial viewer counts for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 0 OR $v3-mc3$ != 0 OR $v3-c1$ != 0
	print "Failed. Bad initial viewer counts for V3"
	bye app 1
try ENDIF
set


#
# Write an entire point
#
writem bar1 {( bob, t, 0 )}
readm bar1
try IF $_lastout$ != "{ (`"bob`", T, 0) }"
	print "Failed Point write of bar1"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 0 OR $v0-mc3$ != 0 OR $v0-c1$ != 1
	print "Failed. Bad viewer counts for Point update of bar1 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 0 OR $v3-mc3$ != 0 OR $v3-c1$ != 1
	print "Failed. Bad viewer counts for Point update of bar1 for V3"
	bye app 1
try ENDIF


#
# Write a single tuple (and test empty field notation)
#
writem bar1 0 ( , , 1 )
readm bar1
try IF $_lastout$ != "{ (`"bob`", T, 1) }"
	print "Failed Tuple write of bar1"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 0 OR $v0-mc3$ != 0 OR $v0-c1$ != 2
	print "Failed. Bad viewer counts for Tuple update of bar1 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 0 OR $v3-mc3$ != 0 OR $v3-c1$ != 2
	print "Failed. Bad viewer counts for Tuple update of bar1 for V3"
	bye app 1
try ENDIF


#
# Write an entire point
#
viewers clear
writem bar3 {(t,a,t,0),(f,b,t,1),(f,c,f,2),(t,d,t,3)}
readm bar3
try IF $_lastout$ != "{ (T, `"a`", T, 0), (F, `"b`", T, 1), (F, `"c`", F, 2), (T, `"d`", T, 3) }"
	print "Failed. Failed Point write of bar3"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 1 OR $v0-mc3$ != 1 OR $v0-c1$ != 0
	print "Failed. Bad viewer counts for Point update of bar3 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 1 OR $v3-mc3$ != 1 OR $v3-c1$ != 0
	print "Failed. Bad viewer counts for Point update of bar3 for V3"
	bye app 1
try ENDIF


#
# Write a single tuple (and test empty field notation)
#
writem bar3 3 (,,, 44 )
readm bar3 3
try IF $_lastout$ != "(T, `"d`", T, 44)"
	print "Failed Tuple[3] write of bar3"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 2 OR $v0-mc3$ != 1 OR $v0-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[3] update of bar3 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 2 OR $v3-mc3$ != 1 OR $v3-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[3] update of bar3 for V3"
	bye app 1
try ENDIF


#
# Write a single tuple (and test empty field notation AND membership fields)
#
writem bar3 2 (t,,,)
readm bar3 2
try IF $_lastout$ != "(T, `"c`", F, 2)"
	print "Failed Tuple[2] write of bar3"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 3 OR $v0-mc3$ != 2 OR $v0-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[2] update of bar3 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 3 OR $v3-mc3$ != 2 OR $v3-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[2] update of bar3 for V3"
	bye app 1
try ENDIF


#
# Write a single tuple (and test empty field notation AND viewer by value vs seqnumber)
#
writem bar3 3 (,,, 44 )
readm bar3 3
try IF $_lastout$ != "(T, `"d`", T, 44)"
	print "Failed Tuple[3] 'duplicate' write of bar3"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 v0-c1 4
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 v3-c1 4
try IF $v0-c3$ != 3 OR $v0-mc3$ != 2 OR $v0-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[3] 'duplicate' update of bar3 for V0"
	bye app 1
try ENDIF
try IF $v3-c3$ != 4 OR $v3-mc3$ != 2 OR $v3-c1$ != 0
	print "Failed. Bad viewer counts for Tuple[3] 'duplicate' update of bar3 for V3"
	bye app 1
try ENDIF



#
# Test Bit flag operators  (Bar2)
#
writem bar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem bar2 {(?,?,?), (0x3,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. Bitflags: Bar2: Bad viewer counts for Normal set value semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00000003, ?, ?, ?) }"
	print "Failed. Normal set value for Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x20070002,?,?,?)}
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00070001, ?, ?, ?) }"
	print "Failed. Toggle Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x40020002,?,?,?)}
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00050001, ?, ?, ?) }"
	print "Failed. Clear Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x80e20002,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 4 
	print "Failed. Bitflags: Bar2: Bad viewer counts for clear semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. Set Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0xC000aa00,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 4 
	print "Failed. Bitflags: Bar2: Bad viewer counts for Out-of-range operation V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. Out-of-range Bitflags operation"
	bye app 1
try ENDIF


#
# Test Bit flag operators  (Bar2 -->compare by value semantics)
#
writem bar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem bar2 {(?,?,?), (0x3,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. Bitflags: Bar2: Bad viewer counts for Normal set value semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00000003, ?, ?, ?) }"
	print "Failed. Bar2: Normal set value for Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x20070002,?,?,?)}
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00070001, ?, ?, ?) }"
	print "Failed. Bar2: Toggle Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x40020002,?,?,?)}
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00050001, ?, ?, ?) }"
	print "Failed. Bar2: Clear Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0x80e20002,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 4 
	print "Failed. Bitflags: Bar2: Bad viewer counts for clear semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. Bar2: Set Bitflags"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (0xC000aa00,?,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 4 
	print "Failed. Bitflags: Bar2: Bad viewer counts for Out-of-range operation V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. Bar2 Out-of-range Bitflags operation"
	bye app 1
try ENDIF


#
# Test Bit flag operators  (foobar2 -->compare by seqnumber semantics)
#
writem foobar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem foobar2 {(?,?,?), (0x3,?,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 1 
	print "Failed. Bitflags: FooBar2: Bad viewer counts for Normal set value semantics V1"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (00000003, ?, ?, ?) }"
	print "Failed. FooBar2: Normal set value for Bitflags"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (0x20070002,?,?,?)}
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (00070001, ?, ?, ?) }"
	print "Failed. FooBar2: Toggle Bitflags"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (0x40020002,?,?,?)}
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (00050001, ?, ?, ?) }"
	print "Failed. FooBar2: Clear Bitflags"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (0x80e20002,?,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 4 
	print "Failed. Bitflags: FooBar2: Bad viewer counts for clear semantics V1"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. FooBar2: Set Bitflags"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (0xC000aa00,?,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 5 
	print "Failed. Bitflags: FooBar2: Bad viewer counts for Out-of-range operation V1"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (00E70003, ?, ?, ?) }"
	print "Failed. FooBar2: Out-of-range Bitflags operation"
	bye app 1
try ENDIF


#
# Test Sequence number operations (on bar2 which has compare value semantics)
#
writem bar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem bar2 {(?,?,?), (?,0,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 0 
	print "Failed. SeqNumber: Bar2: Bad viewer counts for test of update with '0' semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, ?) }"
	print "Failed. SeqNumber: Bar2: test of update with '0' semantics"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,10,?,?)}
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 10, ?, ?) }"
	print "Failed. SeqNumber: Bar2: set value semantic"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,-33,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. SeqNumber: Bar2: Bad viewer counts for increment semantic V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 11, ?, ?) }"
	print "Failed. SeqNumber: Bar2: increment semantic"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,0,?,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. SeqNumber: Bar2: Bad viewer counts for test (#2) of update with '0' semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 11, ?, ?) }"
	print "Failed. SeqNumber: Bar2: test of update with '0' semantics (test#2)"
	bye app 1
try ENDIF


#
# Test Sequence number operations (on foobar2 which has 'seqnumber compare' semantics)
#
writem foobar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem foobar2 {(?,?,?), (?,0,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 1 
	print "Failed. SeqNumber: FooBar2: Bad viewer counts for test of update with '0' semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, ?) }"
	print "Failed. SeqNumber: FooBar2: test of update with '0' semantics"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,110,?,?)}
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 110, ?, ?) }"
	print "Failed. SeqNumber: FooBar2: set value semantic"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,-33,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 3 
	print "Failed. SeqNumber: FooBar2: Bad viewer counts for increment semantic V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 111, ?, ?) }"
	print "Failed. SeqNumber: FooBar2: increment semantic"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,0,?,?)}
viewers 2
tokenize * $_lastout$ v2-c2 5
try IF $v2-c2$ != 4 
	print "Failed. SeqNumber: FooBar2: Bad viewer counts for test (#2) of update with '0' semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, 111, ?, ?) }"
	print "Failed. SeqNumber: FooBar2: test of update with '0' semantics (test#2)"
	bye app 1
try ENDIF



#
# Test Delta  (Bar2 -->compare by value semantics)
#
writem bar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem bar2 {(?,?,?), (?,?,1000,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. DeltaTime: Bar2: Bad viewer counts for set value semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1000, ?) }"
	print "Failed. DeltaTime: Bar2: set value"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,?,1032,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. DeltaTime: Bar2: Bad viewer counts  set value#1 - Less than delta threshold semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1032, ?) }"
	print "Failed. DeltaTime: Bar2: set value#1 - Less than delta threshold"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,?,1060,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. DeltaTime: Bar2: Bad viewer counts  set value#2 - Less than delta threshold semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1060, ?) }"
	print "Failed. DeltaTime: Bar2: set value#2 - Less than delta threshold"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,?,1061,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. DeltaTime: Bar2: Bad viewer counts  set value#3 - greater than delta threshold semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1061, ?) }"
	print "Failed. DeltaTime: Bar2: set value#3 - greater than delta threshold"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,?,999,?)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 3 
	print "Failed. DeltaTime: Bar2: Bad viewer counts  set value#4 - greater than delta threshold semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 999, ?) }"
	print "Failed. DeltaTime: Bar2: set value#4 - greater than delta threshold"
	bye app 1
try ENDIF


#
# Test Delta  (FooBar2 -->compare by seqnumber semantics)
#
writem foobar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem foobar2 {(?,?,?), (?,?,1000,?)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. DeltaTime: FooBar2: Bad viewer counts for set value semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1000, ?) }"
	print "Failed. DeltaTime: FooBar2: set value"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,?,1032,?)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. DeltaTime: FooBar2: Bad viewer counts  set value#1 - Less than delta threshold semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1032, ?) }"
	print "Failed. DeltaTime: FooBar2: set value#1 - Less than delta threshold"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,?,1060,?)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 3 
	print "Failed. DeltaTime: FooBar2: Bad viewer counts  set value#2 - Less than delta threshold semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1060, ?) }"
	print "Failed. DeltaTime: FooBar2: set value#2 - Less than delta threshold"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,?,1061,?)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 4 
	print "Failed. DeltaTime: FooBar2: Bad viewer counts  set value#3 - greater than delta threshold semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 1061, ?) }"
	print "Failed. DeltaTime: FooBar2: set value#3 - greater than delta threshold"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,?,999,?)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 5 
	print "Failed. DeltaTime: FooBar2: Bad viewer counts  set value#4 - greater than delta threshold semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, 999, ?) }"
	print "Failed. DeltaTime: FooBar2: set value#4 - greater than delta threshold"
	bye app 1
try ENDIF


#
# Test MD5 Checksum  (Bar2 -->compare by value semantics)
#
writem bar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem bar2 {(?,?,?), (?,?,?,E0000000000000000000000000000007)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. Md5: Bar2: Bad viewer counts for set value semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, E0000000000000000000000000000007) }"
	print "Failed. Md5: Bar2: set value"
	bye app 1
try ENDIF
writem bar2 {(?,?,?), (?,?,?,123)}
viewers 1
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. Md5: Bar2: Bad viewer counts for set value semantics V1"
	bye app 1
try ENDIF
readm bar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, 12300000000000000000000000000000) }"
	print "Failed. Md5: Bar2: set value"
	bye app 1
try ENDIF


#
# Test MD5 Checksum  (FooBar2 -->compare by seqnumber semantics)
#
writem foobar2 {(?,?,?), (?,?,?,?)}
viewers clear
writem foobar2 {(?,?,?), (?,?,?,E0000000000000000000000000000007)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 1 
	print "Failed. Md5: FooBar2: Bad viewer counts for set value semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, E0000000000000000000000000000007) }"
	print "Failed. Md5: FooBar2: set value"
	bye app 1
try ENDIF
writem foobar2 {(?,?,?), (?,?,?,123)}
viewers 2
tokenize * $_lastout$ v1-c2 5
try IF $v1-c2$ != 2 
	print "Failed. Md5: FooBar2: Bad viewer counts for set value semantics V2"
	bye app 1
try ENDIF
readm foobar2
try IF $_lastout$ != "{ (?, ?, ?), (?, ?, ?, 12300000000000000000000000000000) }"
	print "Failed. Md5: FooBar2: set value"
	bye app 1
try ENDIF



#
# Test remaining data type conversion
#

# Float
writem bar4 {(3.14159274,,,,,,,)}
readm bar4
tokenize * $_lastout$ t1 1
strip $t1$ t1 "(" ","
try IF $t1$ != 3.14159274
    print "Failed. Float. set#1 value"
    bye app 1
try ENDIF

writem bar4 {(-3e14,,,,,,,)}
readm bar4
tokenize * $_lastout$ t1 1
strip $t1$ t1 "(" ","
try IF $t1$ != -3.0000001E+014
    print "Failed. Float. set#2 value"
    bye app 1
try ENDIF

writem bar4 {( 3 ,,,,,,,)}
readm bar4
tokenize * $_lastout$ t1 1
strip $t1$ t1 "(" ","
try IF $t1$ != 3
    print "Failed. Float. set#3 value"
    bye app 1
try ENDIF
writem bar4 {( ? ,,,,,,,)}


# Double
writem bar4 {(,3.1415926535897931,,,,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 2
strip $t1$ t1 " " ","
try IF $t1$ != 3.1415926535897931 
    print "Failed. Double. set#1 value"
    bye app 1
try ENDIF

writem bar4 {(?,-3e14 ,,,,,,)}
readm bar4
tokenize * $_lastout$ t1 2
strip $t1$ t1 " " ","
try IF $t1$ != -300000000000000 
    print "Failed. Double. set#2"
    bye app 1
try ENDIF

writem bar4 {( ?, 3 ,,,,,,)}
readm bar4
tokenize * $_lastout$ t1 2
strip $t1$ t1 " " ","
try IF $t1$ != 3
    print "Failed. Double. set#3 value"
    bye app 1
try ENDIF
writem bar4 {( ,?,,,,,,)}


# Size_t.
writem bar4 {(,,12345,,,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 3
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 12345
    print "Failed: Size_t. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,0xffffffff,,,,,)}
readm bar4
tokenize * $_lastout$ t1 3
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 4294967295
    print "Failed: Size_t. Set#2 value"
    bye app 1
try ENDIF

writem bar4 {(,,0,,,,,)}
readm bar4
tokenize * $_lastout$ t1 3
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 0
    print "Failed: Size_t. Set#3 value"
    bye app 1
try ENDIF
writem bar4 {(,,?,,,,,)}


# Void Pointer.
writem bar4 {(,,,212345,,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 4
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 212345
    print "Failed: VointPtr. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,,0xfffffffe,,,,)}
readm bar4
tokenize * $_lastout$ t1 4
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 4294967294
    print "Failed: VointPtr. Set#2 value"
    bye app 1
try ENDIF

writem bar4 {(,,,0,,,,)}
readm bar4
tokenize * $_lastout$ t1 4
strip $t1$ t1 " " ","
todec $t1$ t1
try IF $t1$ != 0
    print "Failed: VointPtr. Set#3 value"
    bye app 1
try ENDIF
writem bar4 {(,,,?,,,,)}


# Int64.
writem bar4 {(,,,,-2,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 5
strip $t1$ t1 " " ","
try IF $t1$ != -2
    print "Failed: Int64. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,0x7fff0000aaaa5555,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 5
strip $t1$ t1 " " ","
try IF $t1$ != 9223090564741354837
    print "Failed: Int64. Set#2 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,-8070732004361349803,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 5
strip $t1$ t1 " " ","
try IF $t1$ != -8070732004361349803
    print "Failed: Int64. Set#3 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,3,,,)}
readm bar4                                        
tokenize * $_lastout$ t1 5
strip $t1$ t1 " " ","
try IF $t1$ != 3
    print "Failed: Int64. Set#4 value"
    bye app 1
try ENDIF
writem bar4 {(,,,,?,,,)}


# Int8.
writem bar4 {(,,,,,-2,,)}
readm bar4                                        
tokenize * $_lastout$ t1 6
strip $t1$ t1 " " ","
try IF $t1$ != -2
    print "Failed: Int8. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,0x7f,,)}
readm bar4                                        
tokenize * $_lastout$ t1 6
strip $t1$ t1 " " ","
try IF $t1$ != 127
    print "Failed: Int8. Set#2 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,-128,,)}
readm bar4                                        
tokenize * $_lastout$ t1 6
strip $t1$ t1 " " ","
try IF $t1$ != -128
    print "Failed: Int8. Set#3 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,3,,)}
readm bar4                                        
tokenize * $_lastout$ t1 6
strip $t1$ t1 " " ","
try IF $t1$ != 3
    print "Failed: Int8. Set#4 value"
    bye app 1
try ENDIF
writem bar4 {(,,,,,?,,)}



# Uint16.
writem bar4 {(,,,,,,2,)}
readm bar4                                        
tokenize * $_lastout$ t1 7
strip $t1$ t1 " " ","
try IF $t1$ != 2
    print "Failed: Uint16. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,,0x7fff,)}
readm bar4                                        
tokenize * $_lastout$ t1 7
strip $t1$ t1 " " ","
try IF $t1$ != 32767
    print "Failed: Uint16. Set#2 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,,0xFFFF,)}
readm bar4                                        
tokenize * $_lastout$ t1 7
strip $t1$ t1 " " ","
try IF $t1$ != 65535
    print "Failed: Uint16. Set#3 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,,0x8000,)}
readm bar4                                        
tokenize * $_lastout$ t1 7
strip $t1$ t1 " " ","
try IF $t1$ != 32768
    print "Failed: Uint16. Set#4 value"
    bye app 1
try ENDIF
writem bar4 {(,,,,,,?,)}


# Token4.
writem bar4 {(,,,,,,,AbcD)}
readm bar4                                        
tokenize * $_lastout$ t1 8
strip $t1$ t1 " " ")"
try IF $t1$ != AbcD
    print "Failed: Token4. Set#1 value"
    bye app 1
try ENDIF

writem bar4 {(,,,,,,,"abcd")}
readm bar4                                        
tokenize * $_lastout$ t1 8
strip $t1$ t1 " " ")"
try IF $t1$ != abcd
    print "Failed: Token4. Set#2 value"
    bye app 1
try ENDIF


#
# Test lock
#
writem bar3 {(f,a,t,0),(f,b,t,1),(f,c,f,2),(t,d,t,3)}
readm bar3
try IF $_lastout$ != "{ (F, `"a`", T, 0), (F, `"b`", T, 1), (F, `"c`", F, 2), (T, `"d`", T, 3) }"
	print "Failed Lock Test#1 (initialization)"
	bye app 1
try ENDIF
writem bar3 {(?,?,?,?),,(?,?,?,?),(?,?,?,?)}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, 1), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#2 (initialization)"
	bye app 1
try ENDIF
viewers clear
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 0 OR $v0-mc3$ != 0 OR $v3-c3$ != 0 OR $v3-mc3$ != 0
	print "Failed Lock Test#3 (initialization)"
	bye app 1
try ENDIF

writem bar3 {,(,,,!11),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !11), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#4 (lock + write)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 1 OR $v0-mc3$ != 0 OR $v3-c3$ != 1 OR $v3-mc3$ != 0
	print "Failed Lock Test#5 (lock + write)"
	bye app 1
try ENDIF

writem bar3 {,(,,,!12),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !11), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#6 (lock + write when locked)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 1 OR $v0-mc3$ != 0 OR $v3-c3$ != 1 OR $v3-mc3$ != 0
	print "Failed Lock Test#7 (lock + write when locked)"
	bye app 1
try ENDIF

writem bar3 {,(,,,14),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !11), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#8 (write when locked)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 1 OR $v0-mc3$ != 0 OR $v3-c3$ != 1 OR $v3-mc3$ != 0
	print "Failed Lock Test#9 (write when locked)"
	bye app 1
try ENDIF

writem bar3 {,(,,,^),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, 11), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#10 (unlock)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 1 OR $v0-mc3$ != 0 OR $v3-c3$ != 2 OR $v3-mc3$ != 0
	print "Failed Lock Test#11 (unlock)"
	bye app 1
try ENDIF

writem bar3 {,(,,,13),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, 13), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#12 (lock)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 2 OR $v0-mc3$ != 0 OR $v3-c3$ != 3 OR $v3-mc3$ != 0
	print "Failed Lock Test#13 (lock)"
	bye app 1
try ENDIF
writem bar3 {,(,,,!),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !13), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#14 (lock)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 2 OR $v0-mc3$ != 0 OR $v3-c3$ != 4 OR $v3-mc3$ != 0
	print "Failed Lock Test#15 (lock)"
	bye app 1
try ENDIF
writem bar3 {,(,,,!),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !13), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#16 (lock)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 2 OR $v0-mc3$ != 0 OR $v3-c3$ != 4 OR $v3-mc3$ != 0
	print "Failed Lock Test#17 (lock)"
	bye app 1
try ENDIF

writem bar3 {,(,,,^),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, 13), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#18 (unlock again)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 2 OR $v0-mc3$ != 0 OR $v3-c3$ != 5 OR $v3-mc3$ != 0
	print "Failed Lock Test#19 (unlock again)"
	bye app 1
try ENDIF

writem bar3 {,(,,,!?),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !?), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#20 (lock + invalidate )"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 3 OR $v0-mc3$ != 0 OR $v3-c3$ != 6 OR $v3-mc3$ != 0
	print "Failed Lock Test#21 (lock + invalidate )"
	bye app 1
try ENDIF
writem bar3 {,(,,,^),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, ?), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#22 (lock + invalidate)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 3 OR $v0-mc3$ != 0 OR $v3-c3$ != 7 OR $v3-mc3$ != 0
	print "Failed Lock Test#23 (lock + invalidate)"
	bye app 1
try ENDIF
writem bar3 {,(,,,!?3),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, !?3), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#24 (lock + invalidate )"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 4 OR $v0-mc3$ != 0 OR $v3-c3$ != 8 OR $v3-mc3$ != 0
	print "Failed Lock Test#25 (lock + invalidate )"
	bye app 1
try ENDIF
writem bar3 {,(,,,^),,}
readm bar3
try IF $_lastout$ != "{ (?, ?, ?, ?), (F, `"b`", T, ?3), (?, ?, ?, ?), (?, ?, ?, ?) }"
	print "Failed Lock Test#26 (lock + invalidate)"
	bye app 1
try ENDIF
viewers 0
tokenize * $_lastout$ v0-c3 6 v0-mc3 10 
viewers 3
tokenize * $_lastout$ v3-c3 6 v3-mc3 10 
try IF $v0-c3$ != 4 OR $v0-mc3$ != 0 OR $v3-c3$ != 9 OR $v3-mc3$ != 0
	print "Failed Lock Test#26 (lock + invalidate )"
	bye app 1
try ENDIF




#
# ALL DONE (and ALL passed)
print "ALL TESTS PASSED!"
bye app 0

trace on
trace section on _0test
