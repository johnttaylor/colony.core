
cplsystem-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001188  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000004c  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000004c  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800a774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012f14  20000080  0800a7f4  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00008c04  20012f94  0800a7f4  00022f94  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00061467  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e14e  00000000  00000000  00081517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000b6d7  00000000  00000000  0008f665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001be8  00000000  00000000  0009ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001fc0  00000000  00000000  0009c924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033401  00000000  00000000  0009e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000341c2  00000000  00000000  000d1ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000de171  00000000  00000000  00105ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001e4018  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006ae0  00000000  00000000  001e4068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009534 	.word	0x08009534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08009534 	.word	0x08009534

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_ldivmod>:
 8000c3c:	b97b      	cbnz	r3, 8000c5e <__aeabi_ldivmod+0x22>
 8000c3e:	b972      	cbnz	r2, 8000c5e <__aeabi_ldivmod+0x22>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bfbe      	ittt	lt
 8000c44:	2000      	movlt	r0, #0
 8000c46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c4a:	e006      	blt.n	8000c5a <__aeabi_ldivmod+0x1e>
 8000c4c:	bf08      	it	eq
 8000c4e:	2800      	cmpeq	r0, #0
 8000c50:	bf1c      	itt	ne
 8000c52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c56:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5a:	f000 b9bf 	b.w	8000fdc <__aeabi_idiv0>
 8000c5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c66:	2900      	cmp	r1, #0
 8000c68:	db09      	blt.n	8000c7e <__aeabi_ldivmod+0x42>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db1a      	blt.n	8000ca4 <__aeabi_ldivmod+0x68>
 8000c6e:	f000 f84d 	bl	8000d0c <__udivmoddi4>
 8000c72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7a:	b004      	add	sp, #16
 8000c7c:	4770      	bx	lr
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db1b      	blt.n	8000cc0 <__aeabi_ldivmod+0x84>
 8000c88:	f000 f840 	bl	8000d0c <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	4770      	bx	lr
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000caa:	f000 f82f 	bl	8000d0c <__udivmoddi4>
 8000cae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb6:	b004      	add	sp, #16
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f821 	bl	8000d0c <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cda:	4770      	bx	lr

08000cdc <__aeabi_uldivmod>:
 8000cdc:	b953      	cbnz	r3, 8000cf4 <__aeabi_uldivmod+0x18>
 8000cde:	b94a      	cbnz	r2, 8000cf4 <__aeabi_uldivmod+0x18>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	2800      	cmpeq	r0, #0
 8000ce6:	bf1c      	itt	ne
 8000ce8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cec:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf0:	f000 b974 	b.w	8000fdc <__aeabi_idiv0>
 8000cf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cfc:	f000 f806 	bl	8000d0c <__udivmoddi4>
 8000d00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d08:	b004      	add	sp, #16
 8000d0a:	4770      	bx	lr

08000d0c <__udivmoddi4>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	9d08      	ldr	r5, [sp, #32]
 8000d12:	4604      	mov	r4, r0
 8000d14:	468e      	mov	lr, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14d      	bne.n	8000db6 <__udivmoddi4+0xaa>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	d969      	bls.n	8000df4 <__udivmoddi4+0xe8>
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	b152      	cbz	r2, 8000d3c <__udivmoddi4+0x30>
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	f1c2 0120 	rsb	r1, r2, #32
 8000d2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d36:	ea41 0e03 	orr.w	lr, r1, r3
 8000d3a:	4094      	lsls	r4, r2
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	0c21      	lsrs	r1, r4, #16
 8000d42:	fbbe f6f8 	udiv	r6, lr, r8
 8000d46:	fa1f f78c 	uxth.w	r7, ip
 8000d4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d52:	fb06 f107 	mul.w	r1, r6, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x64>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d62:	f080 811f 	bcs.w	8000fa4 <__udivmoddi4+0x298>
 8000d66:	4299      	cmp	r1, r3
 8000d68:	f240 811c 	bls.w	8000fa4 <__udivmoddi4+0x298>
 8000d6c:	3e02      	subs	r6, #2
 8000d6e:	4463      	add	r3, ip
 8000d70:	1a5b      	subs	r3, r3, r1
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d80:	fb00 f707 	mul.w	r7, r0, r7
 8000d84:	42a7      	cmp	r7, r4
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x92>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	f080 810a 	bcs.w	8000fa8 <__udivmoddi4+0x29c>
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	f240 8107 	bls.w	8000fa8 <__udivmoddi4+0x29c>
 8000d9a:	4464      	add	r4, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da2:	1be4      	subs	r4, r4, r7
 8000da4:	2600      	movs	r6, #0
 8000da6:	b11d      	cbz	r5, 8000db0 <__udivmoddi4+0xa4>
 8000da8:	40d4      	lsrs	r4, r2
 8000daa:	2300      	movs	r3, #0
 8000dac:	e9c5 4300 	strd	r4, r3, [r5]
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0xc2>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	f000 80ef 	beq.w	8000f9e <__udivmoddi4+0x292>
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	fab3 f683 	clz	r6, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d14a      	bne.n	8000e6c <__udivmoddi4+0x160>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xd4>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 80f9 	bhi.w	8000fd2 <__udivmoddi4+0x2c6>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb61 0303 	sbc.w	r3, r1, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	469e      	mov	lr, r3
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e0      	beq.n	8000db0 <__udivmoddi4+0xa4>
 8000dee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000df2:	e7dd      	b.n	8000db0 <__udivmoddi4+0xa4>
 8000df4:	b902      	cbnz	r2, 8000df8 <__udivmoddi4+0xec>
 8000df6:	deff      	udf	#255	; 0xff
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	f040 8092 	bne.w	8000f26 <__udivmoddi4+0x21a>
 8000e02:	eba1 010c 	sub.w	r1, r1, ip
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f fe8c 	uxth.w	lr, ip
 8000e0e:	2601      	movs	r6, #1
 8000e10:	0c20      	lsrs	r0, r4, #16
 8000e12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e16:	fb07 1113 	mls	r1, r7, r3, r1
 8000e1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1e:	fb0e f003 	mul.w	r0, lr, r3
 8000e22:	4288      	cmp	r0, r1
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x12c>
 8000e26:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x12a>
 8000e30:	4288      	cmp	r0, r1
 8000e32:	f200 80cb 	bhi.w	8000fcc <__udivmoddi4+0x2c0>
 8000e36:	4643      	mov	r3, r8
 8000e38:	1a09      	subs	r1, r1, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e40:	fb07 1110 	mls	r1, r7, r0, r1
 8000e44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e48:	fb0e fe00 	mul.w	lr, lr, r0
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x156>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x154>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f200 80bb 	bhi.w	8000fd6 <__udivmoddi4+0x2ca>
 8000e60:	4608      	mov	r0, r1
 8000e62:	eba4 040e 	sub.w	r4, r4, lr
 8000e66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e6a:	e79c      	b.n	8000da6 <__udivmoddi4+0x9a>
 8000e6c:	f1c6 0720 	rsb	r7, r6, #32
 8000e70:	40b3      	lsls	r3, r6
 8000e72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e82:	431c      	orrs	r4, r3
 8000e84:	40f9      	lsrs	r1, r7
 8000e86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e92:	0c20      	lsrs	r0, r4, #16
 8000e94:	fa1f fe8c 	uxth.w	lr, ip
 8000e98:	fb09 1118 	mls	r1, r9, r8, r1
 8000e9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eaa:	d90b      	bls.n	8000ec4 <__udivmoddi4+0x1b8>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb4:	f080 8088 	bcs.w	8000fc8 <__udivmoddi4+0x2bc>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f240 8085 	bls.w	8000fc8 <__udivmoddi4+0x2bc>
 8000ebe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	1a09      	subs	r1, r1, r0
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ecc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed8:	458e      	cmp	lr, r1
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x1e2>
 8000edc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee4:	d26c      	bcs.n	8000fc0 <__udivmoddi4+0x2b4>
 8000ee6:	458e      	cmp	lr, r1
 8000ee8:	d96a      	bls.n	8000fc0 <__udivmoddi4+0x2b4>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4461      	add	r1, ip
 8000eee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ef2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef6:	eba1 010e 	sub.w	r1, r1, lr
 8000efa:	42a1      	cmp	r1, r4
 8000efc:	46c8      	mov	r8, r9
 8000efe:	46a6      	mov	lr, r4
 8000f00:	d356      	bcc.n	8000fb0 <__udivmoddi4+0x2a4>
 8000f02:	d053      	beq.n	8000fac <__udivmoddi4+0x2a0>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x212>
 8000f06:	ebb3 0208 	subs.w	r2, r3, r8
 8000f0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f12:	fa22 f306 	lsr.w	r3, r2, r6
 8000f16:	40f1      	lsrs	r1, r6
 8000f18:	431f      	orrs	r7, r3
 8000f1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	f1c2 0320 	rsb	r3, r2, #32
 8000f2a:	40d8      	lsrs	r0, r3
 8000f2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f30:	fa21 f303 	lsr.w	r3, r1, r3
 8000f34:	4091      	lsls	r1, r2
 8000f36:	4301      	orrs	r1, r0
 8000f38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f3c:	fa1f fe8c 	uxth.w	lr, ip
 8000f40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f44:	fb07 3610 	mls	r6, r7, r0, r3
 8000f48:	0c0b      	lsrs	r3, r1, #16
 8000f4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f52:	429e      	cmp	r6, r3
 8000f54:	fa04 f402 	lsl.w	r4, r4, r2
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x260>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f62:	d22f      	bcs.n	8000fc4 <__udivmoddi4+0x2b8>
 8000f64:	429e      	cmp	r6, r3
 8000f66:	d92d      	bls.n	8000fc4 <__udivmoddi4+0x2b8>
 8000f68:	3802      	subs	r0, #2
 8000f6a:	4463      	add	r3, ip
 8000f6c:	1b9b      	subs	r3, r3, r6
 8000f6e:	b289      	uxth	r1, r1
 8000f70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f74:	fb07 3316 	mls	r3, r7, r6, r3
 8000f78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x28a>
 8000f84:	eb1c 0101 	adds.w	r1, ip, r1
 8000f88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f8c:	d216      	bcs.n	8000fbc <__udivmoddi4+0x2b0>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d914      	bls.n	8000fbc <__udivmoddi4+0x2b0>
 8000f92:	3e02      	subs	r6, #2
 8000f94:	4461      	add	r1, ip
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f9c:	e738      	b.n	8000e10 <__udivmoddi4+0x104>
 8000f9e:	462e      	mov	r6, r5
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e705      	b.n	8000db0 <__udivmoddi4+0xa4>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	e6e3      	b.n	8000d70 <__udivmoddi4+0x64>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6f8      	b.n	8000d9e <__udivmoddi4+0x92>
 8000fac:	454b      	cmp	r3, r9
 8000fae:	d2a9      	bcs.n	8000f04 <__udivmoddi4+0x1f8>
 8000fb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb8:	3801      	subs	r0, #1
 8000fba:	e7a3      	b.n	8000f04 <__udivmoddi4+0x1f8>
 8000fbc:	4646      	mov	r6, r8
 8000fbe:	e7ea      	b.n	8000f96 <__udivmoddi4+0x28a>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	e794      	b.n	8000eee <__udivmoddi4+0x1e2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	e7d1      	b.n	8000f6c <__udivmoddi4+0x260>
 8000fc8:	46d0      	mov	r8, sl
 8000fca:	e77b      	b.n	8000ec4 <__udivmoddi4+0x1b8>
 8000fcc:	3b02      	subs	r3, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	e732      	b.n	8000e38 <__udivmoddi4+0x12c>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e709      	b.n	8000dea <__udivmoddi4+0xde>
 8000fd6:	4464      	add	r4, ip
 8000fd8:	3802      	subs	r0, #2
 8000fda:	e742      	b.n	8000e62 <__udivmoddi4+0x156>

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000fe0:	4770      	bx	lr

08000fe2 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000fe2:	4770      	bx	lr

08000fe4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <vApplicationGetIdleTaskMemory+0x10>)
 8000fe6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <vApplicationGetIdleTaskMemory+0x14>)
 8000fea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff0:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000c9c 	.word	0x20000c9c
 8000ff8:	2000009c 	.word	0x2000009c

08000ffc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <vApplicationGetTimerTaskMemory+0x10>)
 8000ffe:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <vApplicationGetTimerTaskMemory+0x14>)
 8001002:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001004:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001008:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800100a:	4770      	bx	lr
 800100c:	20002500 	.word	0x20002500
 8001010:	20000d00 	.word	0x20000d00

08001014 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001018:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	2214      	movs	r2, #20
 800101c:	2100      	movs	r1, #0
 800101e:	a809      	add	r0, sp, #36	; 0x24
 8001020:	f007 fc91 	bl	8008946 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001024:	2400      	movs	r4, #0
 8001026:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <MX_GPIO_Init+0x1c4>)
 8001028:	9401      	str	r4, [sp, #4]
 800102a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800102c:	4f6b      	ldr	r7, [pc, #428]	; (80011dc <MX_GPIO_Init+0x1c8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800102e:	4e6c      	ldr	r6, [pc, #432]	; (80011e0 <MX_GPIO_Init+0x1cc>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80011f0 <MX_GPIO_Init+0x1dc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f002 0210 	and.w	r2, r2, #16
 8001040:	9201      	str	r2, [sp, #4]
 8001042:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	9402      	str	r4, [sp, #8]
 8001046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
 800104e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001050:	f002 0204 	and.w	r2, r2, #4
 8001054:	9202      	str	r2, [sp, #8]
 8001056:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001058:	9403      	str	r4, [sp, #12]
 800105a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	f002 0220 	and.w	r2, r2, #32
 8001068:	9203      	str	r2, [sp, #12]
 800106a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106c:	9404      	str	r4, [sp, #16]
 800106e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
 8001076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001078:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800107c:	9204      	str	r2, [sp, #16]
 800107e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	9405      	str	r4, [sp, #20]
 8001082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108c:	f002 0201 	and.w	r2, r2, #1
 8001090:	9205      	str	r2, [sp, #20]
 8001092:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	9406      	str	r4, [sp, #24]
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	f042 0202 	orr.w	r2, r2, #2
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
 800109e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a0:	f002 0202 	and.w	r2, r2, #2
 80010a4:	9206      	str	r2, [sp, #24]
 80010a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	9407      	str	r4, [sp, #28]
 80010aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
 80010b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010b8:	9207      	str	r2, [sp, #28]
 80010ba:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	9408      	str	r4, [sp, #32]
 80010be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c0:	f042 0208 	orr.w	r2, r2, #8
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010ce:	4622      	mov	r2, r4
 80010d0:	4638      	mov	r0, r7
 80010d2:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010d8:	f004 f836 	bl	8005148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010dc:	4622      	mov	r2, r4
 80010de:	4630      	mov	r0, r6
 80010e0:	2140      	movs	r1, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e2:	2503      	movs	r5, #3
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e4:	f004 f830 	bl	8005148 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e8:	f64f 79ff 	movw	r9, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ec:	a909      	add	r1, sp, #36	; 0x24
 80010ee:	483d      	ldr	r0, [pc, #244]	; (80011e4 <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f6:	f003 ff53 	bl	8004fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001102:	a909      	add	r1, sp, #36	; 0x24
 8001104:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001106:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800110c:	f003 ff48 	bl	8004fa0 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001110:	a909      	add	r1, sp, #36	; 0x24
 8001112:	4835      	ldr	r0, [pc, #212]	; (80011e8 <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800111a:	f003 ff41 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800111e:	f641 73ff 	movw	r3, #8191	; 0x1fff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	a909      	add	r1, sp, #36	; 0x24
 8001124:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f003 ff36 	bl	8004fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001134:	f248 03ff 	movw	r3, #33023	; 0x80ff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	a909      	add	r1, sp, #36	; 0x24
 800113a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f003 ff2b 	bl	8004fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	a909      	add	r1, sp, #36	; 0x24
 8001150:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f003 ff21 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800115e:	f64b 7376 	movw	r3, #49014	; 0xbf76
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	a909      	add	r1, sp, #36	; 0x24
 8001164:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f003 ff18 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001170:	f64f 733f 	movw	r3, #65343	; 0xff3f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001174:	a909      	add	r1, sp, #36	; 0x24
 8001176:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001178:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f003 ff0f 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001182:	f64f 43ff 	movw	r3, #64767	; 0xfcff
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	a909      	add	r1, sp, #36	; 0x24
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_GPIO_Init+0x1d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f003 ff06 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001194:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001196:	a909      	add	r1, sp, #36	; 0x24
 8001198:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f003 fefd 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011a6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011a8:	a909      	add	r1, sp, #36	; 0x24
 80011aa:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f003 fef5 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80011ba:	2302      	movs	r3, #2
 80011bc:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011c2:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ca:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f003 fee8 	bl	8004fa0 <HAL_GPIO_Init>

}
 80011d0:	b00f      	add	sp, #60	; 0x3c
 80011d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40020800 	.word	0x40020800

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f8:	2210      	movs	r2, #16
 80011fa:	2100      	movs	r1, #0
 80011fc:	a809      	add	r0, sp, #36	; 0x24
 80011fe:	f007 fba2 	bl	8008946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001202:	2214      	movs	r2, #20
 8001204:	2100      	movs	r1, #0
 8001206:	a802      	add	r0, sp, #8
 8001208:	f007 fb9d 	bl	8008946 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <SystemClock_Config+0x9c>)
 800120e:	2100      	movs	r1, #0
 8001210:	9100      	str	r1, [sp, #0]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <SystemClock_Config+0xa0>)
 8001226:	9101      	str	r1, [sp, #4]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001236:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001238:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800123c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001240:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	2402      	movs	r4, #2
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 384;
 800124a:	f44f 72c0 	mov.w	r2, #384	; 0x180
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001252:	2308      	movs	r3, #8
 8001254:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800125a:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800125c:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f003 ff7f 	bl	8005164 <HAL_RCC_OscConfig>
 8001266:	b108      	cbz	r0, 800126c <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126a:	e7fe      	b.n	800126a <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127c:	2103      	movs	r1, #3
 800127e:	a802      	add	r0, sp, #8
 8001280:	f004 f954 	bl	800552c <HAL_RCC_ClockConfig>
 8001284:	b108      	cbz	r0, 800128a <SystemClock_Config+0x96>
 8001286:	b672      	cpsid	i
  while (1)
 8001288:	e7fe      	b.n	8001288 <SystemClock_Config+0x94>
}
 800128a:	b014      	add	sp, #80	; 0x50
 800128c:	bd10      	pop	{r4, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <Error_Handler>:
 8001298:	b672      	cpsid	i
  while (1)
 800129a:	e7fe      	b.n	800129a <Error_Handler+0x2>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_MspInit+0x3c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012a6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80012aa:	6459      	str	r1, [r3, #68]	; 0x44
 80012ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80012ae:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80012b2:	9100      	str	r1, [sp, #0]
 80012b4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80012ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80012be:	6419      	str	r1, [r3, #64]	; 0x40
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	210f      	movs	r1, #15
 80012cc:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012d2:	f003 be11 	b.w	8004ef8 <HAL_NVIC_SetPriority>
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler>

080012de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler>

080012e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler>

080012e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler>

080012e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler>

080012e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f003 fde1 	bl	8004eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012ee:	f005 fe89 	bl	8007004 <xTaskGetSchedulerState>
 80012f2:	2801      	cmp	r0, #1
 80012f4:	d003      	beq.n	80012fe <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80012fa:	f006 bbeb 	b.w	8007ad4 <xPortSysTickHandler>
}
 80012fe:	bd08      	pop	{r3, pc}

08001300 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <USART3_IRQHandler+0x8>)
 8001302:	f004 bb7f 	b.w	8005a04 <HAL_UART_IRQHandler>
 8001306:	bf00      	nop
 8001308:	20002564 	.word	0x20002564

0800130c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <SystemInit+0x10>)
 800130e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001312:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <MX_USART3_UART_Init+0x34>)
{
 8001324:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 8001326:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800132a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001332:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133a:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800133e:	f004 fa7b 	bl	8005838 <HAL_UART_Init>
 8001342:	b118      	cbz	r0, 800134c <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001348:	f7ff bfa6 	b.w	8001298 <Error_Handler>
}
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	20002564 	.word	0x20002564
 8001354:	40004800 	.word	0x40004800

08001358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b510      	push	{r4, lr}
 800135a:	4604      	mov	r4, r0
 800135c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	2214      	movs	r2, #20
 8001360:	2100      	movs	r1, #0
 8001362:	a803      	add	r0, sp, #12
 8001364:	f007 faef 	bl	8008946 <memset>
  if(uartHandle->Instance==USART3)
 8001368:	6822      	ldr	r2, [r4, #0]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_UART_MspInit+0x74>)
 800136c:	429a      	cmp	r2, r3
 800136e:	d12b      	bne.n	80013c8 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001370:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001374:	2400      	movs	r4, #0
 8001376:	9401      	str	r4, [sp, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800137c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	9402      	str	r4, [sp, #8]
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f042 0208 	orr.w	r2, r2, #8
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013aa:	2103      	movs	r1, #3
 80013ac:	2307      	movs	r3, #7
 80013ae:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	a903      	add	r1, sp, #12
 80013b4:	f003 fdf4 	bl	8004fa0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80013b8:	2027      	movs	r0, #39	; 0x27
 80013ba:	4622      	mov	r2, r4
 80013bc:	2105      	movs	r1, #5
 80013be:	f003 fd9b 	bl	8004ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013c2:	2027      	movs	r0, #39	; 0x27
 80013c4:	f003 fdca 	bl	8004f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013c8:	b008      	add	sp, #32
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	40004800 	.word	0x40004800
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 80013d4:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFFFFFF);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
{
 80013da:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFFFFFF);
 80013dc:	2201      	movs	r2, #1
 80013de:	a901      	add	r1, sp, #4
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <__io_putchar+0x1c>)
 80013e2:	f004 fa57 	bl	8005894 <HAL_UART_Transmit>
  return ch;
}
 80013e6:	9801      	ldr	r0, [sp, #4]
 80013e8:	b003      	add	sp, #12
 80013ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ee:	bf00      	nop
 80013f0:	20002564 	.word	0x20002564

080013f4 <main>:

extern void runtests( void );


int main( void )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    // Initialize the board
    Bsp_Api_initialize();
 80013f8:	f003 fcd0 	bl	8004d9c <Bsp_Api_initialize>

    // Initialize CPL
    Cpl::System::Api::initialize();
 80013fc:	f002 ffc6 	bl	800438c <_ZN3Cpl6System3Api10initializeEv>

    CPL_SYSTEM_TRACE_ENABLE();
 8001400:	f002 fdb0 	bl	8003f64 <_ZN3Cpl6System5Trace7enable_Ev>
    CPL_SYSTEM_TRACE_ENABLE_SECTION( "_0test" );
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <main+0x24>)
 8001406:	f002 fde1 	bl	8003fcc <_ZN3Cpl6System5Trace14enableSection_EPKc>
    //    CPL_SYSTEM_TRACE_SET_INFO_LEVEL( Cpl::System::Trace::eBRIEF );
    CPL_SYSTEM_TRACE_SET_INFO_LEVEL( Cpl::System::Trace::eINFO );
 800140a:	2002      	movs	r0, #2
 800140c:	f002 fdc0 	bl	8003f90 <_ZN3Cpl6System5Trace13setInfoLevel_ENS1_11InfoLevel_TE>

    // Go run the test(s) (Note: This method should never return)
    runtests();
 8001410:	f000 fb6e 	bl	8001af0 <_Z8runtestsv>

    // I should never get here!
    for ( ;; );
 8001414:	e7fe      	b.n	8001414 <main+0x20>
 8001416:	bf00      	nop
 8001418:	0800954c 	.word	0x0800954c

0800141c <_Z41__static_initialization_and_destruction_0ii>:
    return 0;
}
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d107      	bne.n	800143c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001432:	4293      	cmp	r3, r2
 8001434:	d102      	bne.n	800143c <_Z41__static_initialization_and_destruction_0ii+0x20>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001438:	f003 fcbc 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	4293      	cmp	r3, r2
 800144a:	d102      	bne.n	8001452 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800144e:	f003 fcbc 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200025a8 	.word	0x200025a8

08001460 <_GLOBAL__sub_I_main>:
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
 8001464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff ffd7 	bl	800141c <_Z41__static_initialization_and_destruction_0ii>
 800146e:	bd80      	pop	{r7, pc}

08001470 <_GLOBAL__sub_D_main>:
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
 8001474:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ffcf 	bl	800141c <_Z41__static_initialization_and_destruction_0ii>
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN3Cpl6System8RunnableD1Ev>:
 */
class Runnable
{
public:
    /// Virtual destructor
    virtual ~Runnable() {};
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <_ZN3Cpl6System8RunnableD1Ev+0x1c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	0800a18c 	.word	0x0800a18c

080014a0 <_ZN3Cpl6System8RunnableD0Ev>:
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe9 	bl	8001480 <_ZN3Cpl6System8RunnableD1Ev>
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f007 ff84 	bl	80093bc <_ZdlPv>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_ZN3Cpl6System8Runnable10pleaseStopEv>:
            2) This method is an attempted work-around for terminating
               threads by having the thread run itself to completion.
               Not all OSes support a polite way (i.e. reclaiming
               resource, memory, etc.) of killing threads.
     */
    virtual void pleaseStop() {}
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN3Cpl6System8Runnable21setThreadOfExecution_EPNS0_6ThreadE>:
        to help terminate a thread when pleaseStop() is called. A default
        implementation is provided that does NOTHING.  It is up the concrete
        child class to decide how (if at all) to use this information.  The
        Cpl::System::Thread will call this method BEFORE the run() is called.
     */
    virtual void setThreadOfExecution_( Thread* myThreadPtr ) {}
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>:
        /// Reference to the mutex to be used for synchronization
        Mutex & m_mutex;

    public:
        /// Constructor.  This will block until the mutex lock is acquired.
        inline ScopeBlock( Mutex& mutex ) noexcept:m_mutex( mutex ) { m_mutex.lock(); }
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f825 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>:

        /// Destructor.  This method releases ownership of the mutex
        inline ~ScopeBlock() { m_mutex.unlock(); }
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f003 f82b 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>:
            return m_seconds * 1000 + m_thousandths;
        }
         
    public:
        /// Constructor (to ensure any pad bytes get zero'd)
        Precision_T()
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
        {
            memset( (void*) this, 0, sizeof( Precision_T ) );   
 8001530:	2208      	movs	r2, #8
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f007 fa06 	bl	8008946 <memset>
        }
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>:
            memset( (void*) this, 0, sizeof( Precision_T ) );
            setFlatTime( flatTimeInMs );
        }
        
        /// Copy Constructor (to ensure any pad bytes get zero'd)
        Precision_T( const Precision_T& other )
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
        {
            memcpy( (void*) this, (void*) &other, sizeof( Precision_T ) );
 800154e:	2208      	movs	r2, #8
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f007 f9cf 	bl	80088f6 <memcpy>
        }
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>:

        /// Copy operator
        Precision_T& operator =( const Precision_T& other )
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
        {
            memcpy( (void*) this, (void*) &other, sizeof( Precision_T ) );
 800156c:	2208      	movs	r2, #8
 800156e:	6839      	ldr	r1, [r7, #0]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f007 f9c0 	bl	80088f6 <memcpy>
            return *this;
 8001576:	687b      	ldr	r3, [r7, #4]
        }
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN3Cpl6System11ElapsedTime17deltaMillisecondsEmm>:
        specified 'startTime' and 'endTime'.  'endTime' is defaulted to
        NOW (i.e. a call to milliseconds(). The calculation properly
        handles the scenario of when the has been 'roll over' between the
        two times.
     */
    inline static unsigned long deltaMilliseconds( unsigned long startTime, unsigned long endTime = milliseconds() ) noexcept
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    {
        return endTime - startTime;
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1ad3      	subs	r3, r2, r3
    }
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	0000      	movs	r0, r0
	...

080015a0 <_ZL13modifyGlobal_fff>:

Mutex myLock_;
float testGlobal_;

static bool modifyGlobal_( float op1, float op2, float expected )
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80015aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80015ae:	ed87 1a01 	vstr	s2, [r7, #4]
    Mutex::ScopeBlock guard( myLock_ );
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4936      	ldr	r1, [pc, #216]	; (8001690 <_ZL13modifyGlobal_fff+0xf0>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff95 	bl	80014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    bool result = true;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    testGlobal_ = (op1 * 2.0) / (op2 + op1);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7fe fff8 	bl	80005b8 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	f7fe fe96 	bl	80002fc <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4614      	mov	r4, r2
 80015d6:	461d      	mov	r5, r3
 80015d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	ee17 0a90 	vmov	r0, s15
 80015e8:	f7fe ffe6 	bl	80005b8 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7ff f962 	bl	80008bc <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff facc 	bl	8000b9c <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <_ZL13modifyGlobal_fff+0xf4>)
 8001608:	6013      	str	r3, [r2, #0]
    if ( testGlobal_ < (expected - 0.0001) || testGlobal_ >( expected + 0.0001 ) )
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <_ZL13modifyGlobal_fff+0xf4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffd2 	bl	80005b8 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7fe ffcd 	bl	80005b8 <__aeabi_f2d>
 800161e:	a31a      	add	r3, pc, #104	; (adr r3, 8001688 <_ZL13modifyGlobal_fff+0xe8>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe68 	bl	80002f8 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7ff fa8c 	bl	8000b4c <__aeabi_dcmplt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d117      	bne.n	800166a <_ZL13modifyGlobal_fff+0xca>
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <_ZL13modifyGlobal_fff+0xf4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ffba 	bl	80005b8 <__aeabi_f2d>
 8001644:	4604      	mov	r4, r0
 8001646:	460d      	mov	r5, r1
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7fe ffb5 	bl	80005b8 <__aeabi_f2d>
 800164e:	a30e      	add	r3, pc, #56	; (adr r3, 8001688 <_ZL13modifyGlobal_fff+0xe8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe fe52 	bl	80002fc <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7ff fa92 	bl	8000b88 <__aeabi_dcmpgt>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <_ZL13modifyGlobal_fff+0xce>
        result = false;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]

    return result;
 800166e:	7dfc      	ldrb	r4, [r7, #23]
    Mutex::ScopeBlock guard( myLock_ );
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff49 	bl	800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return result;
 800167a:	4623      	mov	r3, r4
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bdb0      	pop	{r4, r5, r7, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	eb1c432d 	.word	0xeb1c432d
 800168c:	3f1a36e2 	.word	0x3f1a36e2
 8001690:	200025b0 	.word	0x200025b0
 8001694:	200025b4 	.word	0x200025b4

08001698 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>:
    ///
    size_t      m_tlsCounter;

public:
    ///
    MyRunnable( Tls& tlsKey, uint8_t ledNum )
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
        :m_ledNum( ledNum ),
        m_tlsKey( tlsKey ),
        m_tlsCounter( ledNum )
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 fb47 	bl	8003d3c <_ZN3Cpl6System8RunnableC1Ev>
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh+0x38>)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	79fa      	ldrb	r2, [r7, #7]
 80016b8:	715a      	strb	r2, [r3, #5]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	60da      	str	r2, [r3, #12]
    {
    }
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08009bec 	.word	0x08009bec

080016d4 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv>:

public:
    ///
    void appRun()
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    {
        if ( m_tlsKey.get() != 0 )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fb05 	bl	8004cf0 <_ZN3Cpl6System3Tls3getEv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x3e>
        {
            FatalError::logf( "(%s) Bad initial TLS value (%p)", Thread::myName(), m_tlsKey.get() );
 80016f6:	f003 f929 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 80016fa:	4604      	mov	r4, r0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 faf5 	bl	8004cf0 <_ZN3Cpl6System3Tls3getEv>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4621      	mov	r1, r4
 800170c:	482a      	ldr	r0, [pc, #168]	; (80017b8 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xe4>)
 800170e:	f000 fc31 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
        }

        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable::appRun()") );
 8001712:	482a      	ldr	r0, [pc, #168]	; (80017bc <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xe8>)
 8001714:	f002 fcac 	bl	8004070 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00a      	beq.n	8001734 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x60>
 800171e:	f003 f915 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f002 fd29 	bl	800417c <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x60>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x62>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x78>
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xec>)
 800173c:	224e      	movs	r2, #78	; 0x4e
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xf0>)
 8001740:	481e      	ldr	r0, [pc, #120]	; (80017bc <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xe8>)
 8001742:	f002 fba9 	bl	8003e98 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_>
 8001746:	4820      	ldr	r0, [pc, #128]	; (80017c8 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xf4>)
 8001748:	f002 fbda 	bl	8003f00 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz>
            m_tlsKey.set( (void*) m_tlsCounter );
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f003 fadb 	bl	8004d12 <_ZN3Cpl6System3Tls3setEPv>
            toggleLED();
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f837 	bl	80017d0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>
            Thread::wait();
 8001762:	f003 f8ea 	bl	800493a <_ZN3Cpl6System6Thread4waitEv>
            toggleLED();
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f832 	bl	80017d0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>
            Thread::wait();
 800176c:	f003 f8e5 	bl	800493a <_ZN3Cpl6System6Thread4waitEv>
            if ( m_tlsKey.get() != (void*) m_tlsCounter )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fabb 	bl	8004cf0 <_ZN3Cpl6System3Tls3getEv>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00e      	beq.n	80017ac <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xd8>
            {
                FatalError::logf( "(%s) Bad TLS value (%p) - should be (%p)", Thread::myName(), m_tlsKey.get(), m_tlsCounter );
 800178e:	f003 f8dd 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8001792:	4604      	mov	r4, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 faa9 	bl	8004cf0 <_ZN3Cpl6System3Tls3getEv>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4621      	mov	r1, r4
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xf8>)
 80017a8:	f000 fbe4 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }
            m_tlsCounter++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60da      	str	r2, [r3, #12]
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable::appRun()") );
 80017b6:	e7ac      	b.n	8001712 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x3e>
 80017b8:	08009554 	.word	0x08009554
 80017bc:	08009574 	.word	0x08009574
 80017c0:	0800957c 	.word	0x0800957c
 80017c4:	080095ac 	.word	0x080095ac
 80017c8:	080095f4 	.word	0x080095f4
 80017cc:	08009610 	.word	0x08009610

080017d0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>:
        }
    }


    void toggleLED()
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    {
        if ( m_ledNum == 1 )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	795b      	ldrb	r3, [r3, #5]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x1a>
        {
            Bsp_Api_toggle_debug1();
 80017e0:	2101      	movs	r1, #1
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x2c>)
 80017e4:	f003 fcb5 	bl	8005152 <HAL_GPIO_TogglePin>
        }
        else
        {
            Bsp_Api_toggle_debug2();
        }
    }
 80017e8:	e003      	b.n	80017f2 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x22>
            Bsp_Api_toggle_debug2();
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x2c>)
 80017ee:	f003 fcb0 	bl	8005152 <HAL_GPIO_TogglePin>
    }
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020400 	.word	0x40020400

08001800 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>:
    ElapsedTime::Precision_T    m_ptime;
    ///
    unsigned long               m_msec;

public:
    MyRunnable2( Thread& ledThread, uint16_t onTime_ms, uint16_t offTime_ms )
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	460b      	mov	r3, r1
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	4613      	mov	r3, r2
 8001814:	80bb      	strh	r3, [r7, #4]
        :m_ledThread( ledThread ),
        m_onTime_ms( onTime_ms ),
        m_offTime_ms( offTime_ms )
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fa8f 	bl	8003d3c <_ZN3Cpl6System8RunnableC1Ev>
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt+0x4c>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	819a      	strh	r2, [r3, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	88ba      	ldrh	r2, [r7, #4]
 8001834:	81da      	strh	r2, [r3, #14]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3310      	adds	r3, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe74 	bl	8001528 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>
    {
    }
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	08009bc8 	.word	0x08009bc8

08001850 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv>:

public:
    void appRun()
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b091      	sub	sp, #68	; 0x44
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    {
        unsigned long sleepTime = m_onTime_ms + m_offTime_ms;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	899b      	ldrh	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	89db      	ldrh	r3, [r3, #14]
 8001862:	4413      	add	r3, r2
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
        m_ptime                 = ElapsedTime::precision();
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f103 0410 	add.w	r4, r3, #16
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fe38 	bl	80044e6 <_ZN3Cpl6System11ElapsedTime9precisionEv>
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	4619      	mov	r1, r3
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fe70 	bl	8001562 <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>
        m_msec                  = ElapsedTime::milliseconds();
 8001882:	f002 fe29 	bl	80044d8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]

        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable2::appRun()") );
 800188c:	4849      	ldr	r0, [pc, #292]	; (80019b4 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x164>)
 800188e:	f002 fbef 	bl	8004070 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x5e>
 8001898:	f003 f858 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 800189c:	4603      	mov	r3, r0
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fc6c 	bl	800417c <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x5e>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x60>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x76>
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x168>)
 80018b6:	2289      	movs	r2, #137	; 0x89
 80018b8:	4940      	ldr	r1, [pc, #256]	; (80019bc <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x16c>)
 80018ba:	483e      	ldr	r0, [pc, #248]	; (80019b4 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x164>)
 80018bc:	f002 faec 	bl	8003e98 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_>
 80018c0:	483f      	ldr	r0, [pc, #252]	; (80019c0 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x170>)
 80018c2:	f002 fb1d 	bl	8003f00 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz>

            Api::sleep( m_onTime_ms );
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	899b      	ldrh	r3, [r3, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fd7e 	bl	80043cc <_ZN3Cpl6System3Api5sleepEm>
            m_ledThread.signal();
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3308      	adds	r3, #8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4610      	mov	r0, r2
 80018e2:	4798      	blx	r3
            Api::sleep( m_offTime_ms );
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	89db      	ldrh	r3, [r3, #14]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fd6f 	bl	80043cc <_ZN3Cpl6System3Api5sleepEm>
            m_ledThread.signal();
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3308      	adds	r3, #8
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4610      	mov	r0, r2
 8001900:	4798      	blx	r3


            ElapsedTime::Precision_T ptime     = ElapsedTime::precision();
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fded 	bl	80044e6 <_ZN3Cpl6System11ElapsedTime9precisionEv>
            unsigned long            msec      = ElapsedTime::milliseconds();
 800190c:	f002 fde4 	bl	80044d8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8001910:	63b8      	str	r0, [r7, #56]	; 0x38
            unsigned long            deltaM    = ElapsedTime::deltaMilliseconds( m_msec, msec );
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe31 	bl	8001580 <_ZN3Cpl6System11ElapsedTime17deltaMillisecondsEmm>
 800191e:	6378      	str	r0, [r7, #52]	; 0x34
            ElapsedTime::Precision_T deltaP    = ElapsedTime::deltaPrecision( m_ptime, ptime );
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f103 0210 	add.w	r2, r3, #16
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe09 	bl	8001544 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>
 8001932:	f107 0210 	add.w	r2, r7, #16
 8001936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe01 	bl	8001544 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800194a:	f107 0120 	add.w	r1, r7, #32
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f9c6 	bl	8003ce0 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_>
            unsigned long            flatten   = deltaP.m_seconds * 1000 + deltaP.m_thousandths;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	89ba      	ldrh	r2, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30

            if ( flatten < sleepTime )
 8001964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001968:	429a      	cmp	r2, r3
 800196a:	d202      	bcs.n	8001972 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x122>
            {
                FatalError::logf( "Elapsed Precision_T delta is wrong" );
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x174>)
 800196e:	f000 fb01 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            if ( deltaM < sleepTime )
 8001972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	429a      	cmp	r2, r3
 8001978:	d202      	bcs.n	8001980 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x130>
            {
                FatalError::logf( "Elapsed msec delta is wrong" );
 800197a:	4813      	ldr	r0, [pc, #76]	; (80019c8 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x178>)
 800197c:	f000 fafa 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            if ( flatten < deltaM - 1 || flatten > deltaM + 1 )
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	3b01      	subs	r3, #1
 8001984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001986:	429a      	cmp	r2, r3
 8001988:	d304      	bcc.n	8001994 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x144>
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	3301      	adds	r3, #1
 800198e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001990:	429a      	cmp	r2, r3
 8001992:	d902      	bls.n	800199a <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x14a>
            {
                FatalError::logf( "Precision time is not insync with milliseconds time" );
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x17c>)
 8001996:	f000 faed 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            m_ptime = ptime;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3310      	adds	r3, #16
 800199e:	f107 0210 	add.w	r2, r7, #16
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fddc 	bl	8001562 <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>
            m_msec  = msec;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019ae:	619a      	str	r2, [r3, #24]
        }
 80019b0:	e76c      	b.n	800188c <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x3c>
 80019b2:	bf00      	nop
 80019b4:	08009574 	.word	0x08009574
 80019b8:	0800963c 	.word	0x0800963c
 80019bc:	080095ac 	.word	0x080095ac
 80019c0:	0800966c 	.word	0x0800966c
 80019c4:	0800968c 	.word	0x0800968c
 80019c8:	080096b0 	.word	0x080096b0
 80019cc:	080096cc 	.word	0x080096cc

080019d0 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>:
    ///
    float m_expected;

public:
    ///
    MyRunnable3( float op1, float op2 )
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019dc:	edc7 0a01 	vstr	s1, [r7, #4]
        :m_op1( op1 ),
        m_op2( op2 ),
        m_expected( (op1 * 2.0) / (op2 + op1) )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f9aa 	bl	8003d3c <_ZN3Cpl6System8RunnableC1Ev>
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <_ZN12_GLOBAL__N_111MyRunnable3C1Eff+0x7c>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f7fe fddc 	bl	80005b8 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	f7fe fc7a 	bl	80002fc <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	461d      	mov	r5, r3
 8001a10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a14:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fdca 	bl	80005b8 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe ff46 	bl	80008bc <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8b0 	bl	8000b9c <__aeabi_d2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	611a      	str	r2, [r3, #16]
    {
    }
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4c:	08009ba4 	.word	0x08009ba4

08001a50 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv>:


public:
    ///
    void appRun()
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    {
        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable3::appRun()") );
 8001a58:	4820      	ldr	r0, [pc, #128]	; (8001adc <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x8c>)
 8001a5a:	f002 fb09 	bl	8004070 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x2a>
 8001a64:	f002 ff72 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fb86 	bl	800417c <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x2a>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x2c>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x42>
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x90>)
 8001a82:	22c7      	movs	r2, #199	; 0xc7
 8001a84:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x94>)
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x8c>)
 8001a88:	f002 fa06 	bl	8003e98 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_>
 8001a8c:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x98>)
 8001a8e:	f002 fa37 	bl	8003f00 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz>

            if ( modifyGlobal_( m_op1, m_op2, m_expected ) == false )
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001aa4:	eeb0 1a66 	vmov.f32	s2, s13
 8001aa8:	eef0 0a47 	vmov.f32	s1, s14
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f7ff fd76 	bl	80015a0 <_ZL13modifyGlobal_fff>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x82>
            {
                FatalError::logf( "Mutex failed. Thread=%s", Thread::myName() );
 8001ac4:	f002 ff42 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x9c>)
 8001ace:	f000 fa51 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            Api::sleep( 30 );
 8001ad2:	201e      	movs	r0, #30
 8001ad4:	f002 fc7a 	bl	80043cc <_ZN3Cpl6System3Api5sleepEm>
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable3::appRun()") );
 8001ad8:	e7be      	b.n	8001a58 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x8>
 8001ada:	bf00      	nop
 8001adc:	08009574 	.word	0x08009574
 8001ae0:	08009700 	.word	0x08009700
 8001ae4:	080095ac 	.word	0x080095ac
 8001ae8:	08009730 	.word	0x08009730
 8001aec:	08009750 	.word	0x08009750

08001af0 <_Z8runtestsv>:
// NOTE: I create the Runnable objects on the Heap - because depending on the
//       platform - FreeRTOS will corrupt the raw 'main stack' when it starts
//       the first thread.

void runtests( void )
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b08d      	sub	sp, #52	; 0x34
 8001af4:	af02      	add	r7, sp, #8
    // Create my TLS key (can't be done statically)
    Tls* keyPtr = new(std::nothrow) Tls();
 8001af6:	4972      	ldr	r1, [pc, #456]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001af8:	2001      	movs	r0, #1
 8001afa:	f007 fc7a 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461c      	mov	r4, r3
 8001b02:	2c00      	cmp	r4, #0
 8001b04:	d002      	beq.n	8001b0c <_Z8runtestsv+0x1c>
 8001b06:	4620      	mov	r0, r4
 8001b08:	f003 f8be 	bl	8004c88 <_ZN3Cpl6System3TlsC1Ev>
 8001b0c:	627c      	str	r4, [r7, #36]	; 0x24


    // Create some threads....
    MyRunnable*  appleLed     = new(std::nothrow) MyRunnable( *keyPtr, 1 );
 8001b0e:	496c      	ldr	r1, [pc, #432]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001b10:	2010      	movs	r0, #16
 8001b12:	f007 fc6e 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461c      	mov	r4, r3
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	d004      	beq.n	8001b28 <_Z8runtestsv+0x38>
 8001b1e:	2201      	movs	r2, #1
 8001b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fdb8 	bl	8001698 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>
 8001b28:	623c      	str	r4, [r7, #32]
    Thread*      appledLedPtr = Thread::create( *appleLed, "AppleLED" );
 8001b2a:	6a38      	ldr	r0, [r7, #32]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2203      	movs	r2, #3
 8001b38:	4962      	ldr	r1, [pc, #392]	; (8001cc4 <_Z8runtestsv+0x1d4>)
 8001b3a:	f002 ff7b 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
 8001b3e:	61f8      	str	r0, [r7, #28]
    MyRunnable2* appleTimer   = new(std::nothrow) MyRunnable2( *appledLedPtr, 1000, 1000 );
 8001b40:	495f      	ldr	r1, [pc, #380]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001b42:	201c      	movs	r0, #28
 8001b44:	f007 fc55 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	2c00      	cmp	r4, #0
 8001b4e:	d007      	beq.n	8001b60 <_Z8runtestsv+0x70>
 8001b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b58:	69f9      	ldr	r1, [r7, #28]
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fe50 	bl	8001800 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>
 8001b60:	61bc      	str	r4, [r7, #24]
    Thread::create( *appleTimer, "AppleTimer" );
 8001b62:	69b8      	ldr	r0, [r7, #24]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4955      	ldr	r1, [pc, #340]	; (8001cc8 <_Z8runtestsv+0x1d8>)
 8001b72:	f002 ff5f 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    MyRunnable* orangeLed    = new(std::nothrow)MyRunnable( *keyPtr, 2 );
 8001b76:	4952      	ldr	r1, [pc, #328]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001b78:	2010      	movs	r0, #16
 8001b7a:	f007 fc3a 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461c      	mov	r4, r3
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d004      	beq.n	8001b90 <_Z8runtestsv+0xa0>
 8001b86:	2202      	movs	r2, #2
 8001b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fd84 	bl	8001698 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>
 8001b90:	617c      	str	r4, [r7, #20]
    Thread* orangeLedPtr     = Thread::create( *orangeLed, "OrangeLED" );
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	2301      	movs	r3, #1
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	494a      	ldr	r1, [pc, #296]	; (8001ccc <_Z8runtestsv+0x1dc>)
 8001ba2:	f002 ff47 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
 8001ba6:	6138      	str	r0, [r7, #16]
    MyRunnable2* orangeTimer = new(std::nothrow) MyRunnable2( *orangeLedPtr, 1500, 250 );
 8001ba8:	4945      	ldr	r1, [pc, #276]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001baa:	201c      	movs	r0, #28
 8001bac:	f007 fc21 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	2c00      	cmp	r4, #0
 8001bb6:	d006      	beq.n	8001bc6 <_Z8runtestsv+0xd6>
 8001bb8:	23fa      	movs	r3, #250	; 0xfa
 8001bba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff fe1d 	bl	8001800 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>
 8001bc6:	60fc      	str	r4, [r7, #12]
    Thread::create( *orangeTimer, "OrangeTimer" );
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	493e      	ldr	r1, [pc, #248]	; (8001cd0 <_Z8runtestsv+0x1e0>)
 8001bd8:	f002 ff2c 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    MyRunnable3* t1 = new(std::nothrow) MyRunnable3( 3.14159, 3 );
 8001bdc:	4938      	ldr	r1, [pc, #224]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001bde:	2014      	movs	r0, #20
 8001be0:	f007 fc07 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461c      	mov	r4, r3
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d006      	beq.n	8001bfa <_Z8runtestsv+0x10a>
 8001bec:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001bf0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001cd4 <_Z8runtestsv+0x1e4>
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff feeb 	bl	80019d0 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001bfa:	60bc      	str	r4, [r7, #8]
    Thread::create( *t1, "T1" );
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4933      	ldr	r1, [pc, #204]	; (8001cd8 <_Z8runtestsv+0x1e8>)
 8001c0c:	f002 ff12 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
    MyRunnable3* t2 = new(std::nothrow) MyRunnable3( 2.71828, 7 );
 8001c10:	492b      	ldr	r1, [pc, #172]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001c12:	2014      	movs	r0, #20
 8001c14:	f007 fbed 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	2c00      	cmp	r4, #0
 8001c1e:	d006      	beq.n	8001c2e <_Z8runtestsv+0x13e>
 8001c20:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001c24:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001cdc <_Z8runtestsv+0x1ec>
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fed1 	bl	80019d0 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001c2e:	607c      	str	r4, [r7, #4]
    Thread::create( *t2, "T2" );
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	2301      	movs	r3, #1
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4928      	ldr	r1, [pc, #160]	; (8001ce0 <_Z8runtestsv+0x1f0>)
 8001c40:	f002 fef8 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
    MyRunnable3* t3 = new(std::nothrow) MyRunnable3( 64.0, 128.0 );
 8001c44:	491e      	ldr	r1, [pc, #120]	; (8001cc0 <_Z8runtestsv+0x1d0>)
 8001c46:	2014      	movs	r0, #20
 8001c48:	f007 fbd3 	bl	80093f2 <_ZnwjRKSt9nothrow_t>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461c      	mov	r4, r3
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	d006      	beq.n	8001c62 <_Z8runtestsv+0x172>
 8001c54:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001ce4 <_Z8runtestsv+0x1f4>
 8001c58:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001ce8 <_Z8runtestsv+0x1f8>
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff feb7 	bl	80019d0 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001c62:	603c      	str	r4, [r7, #0]
    Thread::create( *t3, "T3" );
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2203      	movs	r2, #3
 8001c72:	491e      	ldr	r1, [pc, #120]	; (8001cec <_Z8runtestsv+0x1fc>)
 8001c74:	f002 fede 	bl	8004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    // Start the scheduler
    CPL_SYSTEM_TRACE_MSG( SECT_, ("Starting scheduler...") );
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <_Z8runtestsv+0x200>)
 8001c7a:	f002 f9f9 	bl	8004070 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <_Z8runtestsv+0x1aa>
 8001c84:	f002 fe62 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fa76 	bl	800417c <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <_Z8runtestsv+0x1aa>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <_Z8runtestsv+0x1ac>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <_Z8runtestsv+0x1c2>
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <_Z8runtestsv+0x204>)
 8001ca2:	22f5      	movs	r2, #245	; 0xf5
 8001ca4:	4914      	ldr	r1, [pc, #80]	; (8001cf8 <_Z8runtestsv+0x208>)
 8001ca6:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <_Z8runtestsv+0x200>)
 8001ca8:	f002 f8f6 	bl	8003e98 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_>
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <_Z8runtestsv+0x20c>)
 8001cae:	f002 f927 	bl	8003f00 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz>
    Api::enableScheduling();
 8001cb2:	f002 fb71 	bl	8004398 <_ZN3Cpl6System3Api16enableSchedulingEv>
}
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	; 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800a6d0 	.word	0x0800a6d0
 8001cc4:	08009768 	.word	0x08009768
 8001cc8:	08009774 	.word	0x08009774
 8001ccc:	08009780 	.word	0x08009780
 8001cd0:	0800978c 	.word	0x0800978c
 8001cd4:	40490fd0 	.word	0x40490fd0
 8001cd8:	08009798 	.word	0x08009798
 8001cdc:	402df84d 	.word	0x402df84d
 8001ce0:	0800979c 	.word	0x0800979c
 8001ce4:	43000000 	.word	0x43000000
 8001ce8:	42800000 	.word	0x42800000
 8001cec:	080097a0 	.word	0x080097a0
 8001cf0:	08009574 	.word	0x08009574
 8001cf4:	080097a4 	.word	0x080097a4
 8001cf8:	080095ac 	.word	0x080095ac
 8001cfc:	080097b4 	.word	0x080097b4

08001d00 <_ZN12_GLOBAL__N_111MyRunnable3D1Ev>:
class MyRunnable3 : public Runnable
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_ZN12_GLOBAL__N_111MyRunnable3D1Ev+0x20>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fbb5 	bl	8001480 <_ZN3Cpl6System8RunnableD1Ev>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	08009ba4 	.word	0x08009ba4

08001d24 <_ZN12_GLOBAL__N_111MyRunnable3D0Ev>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_ZN12_GLOBAL__N_111MyRunnable3D1Ev>
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f007 fb42 	bl	80093bc <_ZdlPv>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev>:
class MyRunnable2 : public Runnable
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev+0x20>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fb93 	bl	8001480 <_ZN3Cpl6System8RunnableD1Ev>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	08009bc8 	.word	0x08009bc8

08001d68 <_ZN12_GLOBAL__N_111MyRunnable2D0Ev>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffe7 	bl	8001d44 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev>
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f007 fb20 	bl	80093bc <_ZdlPv>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <_ZN12_GLOBAL__N_110MyRunnableD1Ev>:
class MyRunnable : public Runnable
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_ZN12_GLOBAL__N_110MyRunnableD1Ev+0x20>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fb71 	bl	8001480 <_ZN3Cpl6System8RunnableD1Ev>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08009bec 	.word	0x08009bec

08001dac <_ZN12_GLOBAL__N_110MyRunnableD0Ev>:
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffe7 	bl	8001d88 <_ZN12_GLOBAL__N_110MyRunnableD1Ev>
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f007 fafe 	bl	80093bc <_ZdlPv>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <_Z41__static_initialization_and_destruction_0ii>:
}
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d105      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001de8:	f002 ffe4 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
Mutex myLock_;
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001dee:	f002 fb87 	bl	8004500 <_ZN3Cpl6System5MutexC1Ev>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d105      	bne.n	8001e0e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001e04:	f002 fb94 	bl	8004530 <_ZN3Cpl6System5MutexD1Ev>
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001e0a:	f002 ffde 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200025ac 	.word	0x200025ac
 8001e1c:	200025b0 	.word	0x200025b0

08001e20 <_GLOBAL__sub_I_myLock_>:
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff ffcf 	bl	8001dcc <_Z41__static_initialization_and_destruction_0ii>
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_GLOBAL__sub_D_myLock_>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ffc7 	bl	8001dcc <_Z41__static_initialization_and_destruction_0ii>
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <_ZN3Cpl9Container3KeyD1Ev>:
 */
class Key
{
public:
    /// Ensure a Virtual destructor
    virtual ~Key() {}
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <_ZN3Cpl9Container3KeyD1Ev+0x1c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	08009e40 	.word	0x08009e40

08001e60 <_ZN3Cpl9Container3KeyD0Ev>:
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ffe9 	bl	8001e40 <_ZN3Cpl9Container3KeyD1Ev>
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f007 faa4 	bl	80093bc <_ZdlPv>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <_ZN3Cpl4Text6StringD1Ev>:

class String : public Cpl::Container::Key
{
public:
	/// Virtual destructor!
	virtual ~String() {}
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_ZN3Cpl4Text6StringD1Ev+0x20>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ffd5 	bl	8001e40 <_ZN3Cpl9Container3KeyD1Ev>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	08009d28 	.word	0x08009d28

08001ea4 <_ZN3Cpl4Text6StringD0Ev>:
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_ZN3Cpl4Text6StringD1Ev>
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f007 fa82 	bl	80093bc <_ZdlPv>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <_ZN3Cpl6System10FatalError3logEPKcj>:

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
}

void FatalError::log( const char* message, size_t value )
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001ece:	f005 f899 	bl	8007004 <xTaskGetSchedulerState>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d039      	beq.n	8001f56 <_ZN3Cpl6System10FatalError3logEPKcj+0x92>
    {
        int              dummy = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
        Cpl::Io::Output* ptr   = Cpl::System::Trace::getDefaultOutputStream_();
 8001ee6:	f000 fa71 	bl	80023cc <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8001eea:	60f8      	str	r0, [r7, #12]

        ptr->write( EXTRA_INFO );
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	491b      	ldr	r1, [pc, #108]	; (8001f64 <_ZN3Cpl6System10FatalError3logEPKcj+0xa0>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	4798      	blx	r3
        ptr->write( message );
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3310      	adds	r3, #16
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	4798      	blx	r3
        ptr->write( ". v:= " );
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4915      	ldr	r1, [pc, #84]	; (8001f68 <_ZN3Cpl6System10FatalError3logEPKcj+0xa4>)
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	4798      	blx	r3
        ptr->write( Cpl::Text::sizetToStr( value, buffer_.getBuffer( dummy ), SIZET_SIZE, 16 ) );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	681c      	ldr	r4, [r3, #0]
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	4811      	ldr	r0, [pc, #68]	; (8001f6c <_ZN3Cpl6System10FatalError3logEPKcj+0xa8>)
 8001f26:	f001 fb90 	bl	800364a <_ZN3Cpl4Text7String_9getBufferERi>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2310      	movs	r3, #16
 8001f32:	220b      	movs	r2, #11
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f000 fb4d 	bl	80025d4 <_ZN3Cpl4Text10sizetToStrEjPcjjc>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	47a0      	blx	r4
        ptr->write( "\n" );
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3310      	adds	r3, #16
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4909      	ldr	r1, [pc, #36]	; (8001f70 <_ZN3Cpl6System10FatalError3logEPKcj+0xac>)
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	4798      	blx	r3

        // Allow time for the error message to be outputted
        Cpl::System::Api::sleep( 150 );
 8001f50:	2096      	movs	r0, #150	; 0x96
 8001f52:	f002 fa3b 	bl	80043cc <_ZN3Cpl6System3Api5sleepEm>
    }

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
 8001f56:	2002      	movs	r0, #2
 8001f58:	f002 fb37 	bl	80045ca <_ZN3Cpl6System8Shutdown7failureEi>
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	080097cc 	.word	0x080097cc
 8001f68:	080097e4 	.word	0x080097e4
 8001f6c:	200025bc 	.word	0x200025bc
 8001f70:	080097e0 	.word	0x080097e0

08001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>:


void FatalError::logf( const char* format, ... )
{
 8001f74:	b40f      	push	{r0, r1, r2, r3}
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
    va_list ap;
    va_start( ap, format );
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	607b      	str	r3, [r7, #4]

    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001f82:	f005 f83f 	bl	8007004 <xTaskGetSchedulerState>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d011      	beq.n	8001fba <_ZN3Cpl6System10FatalError4logfEPKcz+0x46>
    {
        buffer_ = EXTRA_INFO;
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <_ZN3Cpl6System10FatalError4logfEPKcz+0x5c>)
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001f9a:	f001 fbe7 	bl	800376c <_ZN3Cpl4Text7String_aSEPKc>
        buffer_.vformatAppend( format, ap );
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6939      	ldr	r1, [r7, #16]
 8001fa2:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001fa4:	f001 f8b8 	bl	8003118 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>
        Cpl::System::Trace::getDefaultOutputStream_()->write( buffer_ );
 8001fa8:	f000 fa10 	bl	80023cc <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8001fac:	4603      	mov	r3, r0
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	3214      	adds	r2, #20
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4790      	blx	r2
    }

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
 8001fba:	2002      	movs	r0, #2
 8001fbc:	f002 fb05 	bl	80045ca <_ZN3Cpl6System8Shutdown7failureEi>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fca:	b004      	add	sp, #16
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	080097cc 	.word	0x080097cc
 8001fd4:	200025bc 	.word	0x200025bc

08001fd8 <_ZN3Cpl6System10FatalError6logRawEPKcj>:
{
    log( message );
}

void FatalError::logRaw( const char* message, size_t value )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    log( message, value );
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff6d 	bl	8001ec4 <_ZN3Cpl6System10FatalError3logEPKcj>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <_ZN3Cpl4Text7String_D1Ev>:

/** This partially concrete class implements the portions of the String Api
	that is independent of the internal storage mechanisms.
 */

class String_ : public String
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <_ZN3Cpl4Text7String_D1Ev+0x20>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff3b 	bl	8001e80 <_ZN3Cpl4Text6StringD1Ev>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	0800a074 	.word	0x0800a074

08002018 <_ZN3Cpl4Text7String_D0Ev>:
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffe7 	bl	8001ff4 <_ZN3Cpl4Text7String_D1Ev>
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f007 f9c8 	bl	80093bc <_ZdlPv>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <_ZN3Cpl4Text8FString_D1Ev>:
		  storage limit is not exceeded and the string is always NULL
		  terminated.  The "incoming" data is silently truncated if the data
		  size exceeds the storage limit.
 */

class FString_ : public String_
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_ZN3Cpl4Text8FString_D1Ev+0x20>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ffd3 	bl	8001ff4 <_ZN3Cpl4Text7String_D1Ev>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	08009f5c 	.word	0x08009f5c

0800205c <_ZN3Cpl4Text8FString_D0Ev>:
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffe7 	bl	8002038 <_ZN3Cpl4Text8FString_D1Ev>
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f007 f9a6 	bl	80093bc <_ZdlPv>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <_ZN3Cpl4Text7FStringILi128EEC1EPKc>:

	/// Constructor
	FString( const Cpl::Text::String& string ) :FString_( string.getString(), m_strMem, S ) {}

	/// Constructor
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0210 	add.w	r2, r3, #16
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	f000 faf9 	bl	8002688 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8002096:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <_ZN3Cpl4Text7FStringILi128EEC1EPKc+0x2c>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	08009c10 	.word	0x08009c10

080020ac <_ZN3Cpl4Text7FStringILi128EED1Ev>:
class FString : public FString_
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <_ZN3Cpl4Text7FStringILi128EED1Ev+0x20>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ffbb 	bl	8002038 <_ZN3Cpl4Text8FString_D1Ev>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08009c10 	.word	0x08009c10

080020d0 <_ZN3Cpl4Text7FStringILi128EED0Ev>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ffe7 	bl	80020ac <_ZN3Cpl4Text7FStringILi128EED1Ev>
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f007 f96c 	bl	80093bc <_ZdlPv>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <_Z41__static_initialization_and_destruction_0ii>:
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10b      	bne.n	8002118 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002106:	4293      	cmp	r3, r2
 8002108:	d106      	bne.n	8002118 <_Z41__static_initialization_and_destruction_0ii+0x28>
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800210c:	f002 fe52 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Cpl::Text::FString<CPL_SYSTEM_FREERTOS_FATAL_ERROR_BUFSIZE> buffer_;
 8002110:	490b      	ldr	r1, [pc, #44]	; (8002140 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002114:	f7ff ffb2 	bl	800207c <_ZN3Cpl4Text7FStringILi128EEC1EPKc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	4293      	cmp	r3, r2
 8002126:	d105      	bne.n	8002134 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002128:	4806      	ldr	r0, [pc, #24]	; (8002144 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800212a:	f7ff ffbf 	bl	80020ac <_ZN3Cpl4Text7FStringILi128EED1Ev>
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002130:	f002 fe4b 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200025b8 	.word	0x200025b8
 8002140:	080097ec 	.word	0x080097ec
 8002144:	200025bc 	.word	0x200025bc

08002148 <_GLOBAL__sub_I__ZN3Cpl6System10FatalError3logEPKc>:
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
 800214c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff ffcd 	bl	80020f0 <_Z41__static_initialization_and_destruction_0ii>
 8002156:	bd80      	pop	{r7, pc}

08002158 <_GLOBAL__sub_D__ZN3Cpl6System10FatalError3logEPKc>:
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
 800215c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ffc5 	bl	80020f0 <_Z41__static_initialization_and_destruction_0ii>
 8002166:	bd80      	pop	{r7, pc}

08002168 <_ZN3Cpl9Container4ItemC1Ev>:
     */
    void*  m_inListPtr_;

protected:
    /// Constructor
    Item():m_nextPtr_( 0 ), m_inListPtr_( 0 ) {}
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN3Cpl2Io5CloseD1Ev>:
    virtual void close() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Close() {}
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <_ZN3Cpl2Io5CloseD1Ev+0x1c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	08009f48 	.word	0x08009f48

080021ac <_ZN3Cpl2Io5CloseD0Ev>:
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffe9 	bl	800218c <_ZN3Cpl2Io5CloseD1Ev>
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f007 f8fe 	bl	80093bc <_ZdlPv>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <_ZN3Cpl2Io5IsEosD1Ev>:
    virtual bool isEos() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~IsEos() {}
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <_ZN3Cpl2Io5IsEosD1Ev+0x1c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	08009f34 	.word	0x08009f34

080021ec <_ZN3Cpl2Io5IsEosD0Ev>:
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe9 	bl	80021cc <_ZN3Cpl2Io5IsEosD1Ev>
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f007 f8de 	bl	80093bc <_ZdlPv>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZN3Cpl2Io6OutputD2Ev>:
    virtual void flush() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Output() {}
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3b14      	subs	r3, #20
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	6852      	ldr	r2, [r2, #4]
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3b18      	subs	r3, #24
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <_ZN3Cpl2Io5CloseC1Ev>:
class Close : public Cpl::Container::Item
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff81 	bl	8002168 <_ZN3Cpl9Container4ItemC1Ev>
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <_ZN3Cpl2Io5CloseC1Ev+0x24>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	08009f48 	.word	0x08009f48

0800227c <_ZN3Cpl2Io5IsEosC1Ev>:
class IsEos 
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <_ZN3Cpl2Io5IsEosC1Ev+0x1c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	08009f34 	.word	0x08009f34

0800229c <_ZN3Cpl2Io6OutputC2Ev>:
class Output : virtual public Close, virtual public IsEos
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3b14      	subs	r3, #20
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3b18      	subs	r3, #24
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	6892      	ldr	r2, [r2, #8]
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_ZN12_GLOBAL__N_19IoPutCharC1Ev>:
 */
class IoPutChar : public Cpl::Io::Output
{
public:
    /// Constructor
    IoPutChar(){}
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ffaf 	bl	8002254 <_ZN3Cpl2Io5CloseC1Ev>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ffbf 	bl	800227c <_ZN3Cpl2Io5IsEosC1Ev>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <_ZN12_GLOBAL__N_19IoPutCharC1Ev+0x44>)
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ffc9 	bl	800229c <_ZN3Cpl2Io6OutputC2Ev>
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <_ZN12_GLOBAL__N_19IoPutCharC1Ev+0x48>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <_ZN12_GLOBAL__N_19IoPutCharC1Ev+0x4c>)
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <_ZN12_GLOBAL__N_19IoPutCharC1Ev+0x48>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	08009eb8 	.word	0x08009eb8
 800232c:	08009e68 	.word	0x08009e68
 8002330:	08009ea8 	.word	0x08009ea8

08002334 <_ZN12_GLOBAL__N_19IoPutChar5writeEPKviRi>:

    /// See Cpl::Io::Output
    bool write( const void* buffer, int maxBytes, int& bytesWritten )
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
    {
        bytesWritten = maxBytes;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
        const uint8_t* pt = (const uint8_t*) buffer;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	617b      	str	r3, [r7, #20]
        while ( maxBytes-- )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <_ZN12_GLOBAL__N_19IoPutChar5writeEPKviRi+0x3c>
        {
            CALL_PUTCHAR( *pt++ );
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	617a      	str	r2, [r7, #20]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f833 	bl	80013d4 <__io_putchar>
        while ( maxBytes-- )
 800236e:	e7ed      	b.n	800234c <_ZN12_GLOBAL__N_19IoPutChar5writeEPKviRi+0x18>
        }
        return true;
 8002370:	2301      	movs	r3, #1
    }
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_ZN12_GLOBAL__N_19IoPutChar5flushEv>:

    /// See Cpl::Io::Output
    void flush() {}
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_ZN12_GLOBAL__N_19IoPutChar5closeEv>:
    void close() {}
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <_ZTv0_n12_N12_GLOBAL__N_19IoPutChar5closeEv>:
 80023a2:	f8d0 c000 	ldr.w	ip, [r0]
 80023a6:	f1ac 0c0c 	sub.w	ip, ip, #12
 80023aa:	f8dc c000 	ldr.w	ip, [ip]
 80023ae:	4460      	add	r0, ip
 80023b0:	f7ff bfed 	b.w	800238e <_ZN12_GLOBAL__N_19IoPutChar5closeEv>

080023b4 <_ZN12_GLOBAL__N_19IoPutChar5isEosEv>:
    bool isEos() { return false; }
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	2300      	movs	r3, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
////////////////////////////////////////////////////////////////////////////////
///
static IoPutChar fd_;

Cpl::Io::Output* Cpl::System::Trace::getDefaultOutputStream_( void ) noexcept
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
    return &fd_;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev+0x10>)
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20002654 	.word	0x20002654

080023e0 <_ZN12_GLOBAL__N_19IoPutCharD1Ev>:
class IoPutChar : public Cpl::Io::Output
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <_ZN12_GLOBAL__N_19IoPutCharD1Ev+0x44>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <_ZN12_GLOBAL__N_19IoPutCharD1Ev+0x48>)
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <_ZN12_GLOBAL__N_19IoPutCharD1Ev+0x44>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <_ZN12_GLOBAL__N_19IoPutCharD1Ev+0x4c>)
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff01 	bl	800220a <_ZN3Cpl2Io6OutputD2Ev>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fede 	bl	80021cc <_ZN3Cpl2Io5IsEosD1Ev>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff feb9 	bl	800218c <_ZN3Cpl2Io5CloseD1Ev>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	08009e68 	.word	0x08009e68
 8002428:	08009ea8 	.word	0x08009ea8
 800242c:	08009eb8 	.word	0x08009eb8

08002430 <_ZTv0_n16_N12_GLOBAL__N_19IoPutCharD1Ev>:
 8002430:	f8d0 c000 	ldr.w	ip, [r0]
 8002434:	f1ac 0c10 	sub.w	ip, ip, #16
 8002438:	f8dc c000 	ldr.w	ip, [ip]
 800243c:	4460      	add	r0, ip
 800243e:	f7ff bfcf 	b.w	80023e0 <_ZN12_GLOBAL__N_19IoPutCharD1Ev>

08002442 <_ZN12_GLOBAL__N_19IoPutCharD0Ev>:
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffc8 	bl	80023e0 <_ZN12_GLOBAL__N_19IoPutCharD1Ev>
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f006 ffb3 	bl	80093bc <_ZdlPv>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_ZTv0_n16_N12_GLOBAL__N_19IoPutCharD0Ev>:
 8002460:	f8d0 c000 	ldr.w	ip, [r0]
 8002464:	f1ac 0c10 	sub.w	ip, ip, #16
 8002468:	f8dc c000 	ldr.w	ip, [ip]
 800246c:	4460      	add	r0, ip
 800246e:	f7ff bfe8 	b.w	8002442 <_ZN12_GLOBAL__N_19IoPutCharD0Ev>
	...

08002474 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10a      	bne.n	800249a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248a:	4293      	cmp	r3, r2
 800248c:	d105      	bne.n	800249a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800248e:	480c      	ldr	r0, [pc, #48]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002490:	f002 fc90 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static IoPutChar fd_;
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002496:	f7ff ff25 	bl	80022e4 <_ZN12_GLOBAL__N_19IoPutCharC1Ev>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d105      	bne.n	80024b6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80024ac:	f7ff ff98 	bl	80023e0 <_ZN12_GLOBAL__N_19IoPutCharD1Ev>
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80024b2:	f002 fc8a 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20002650 	.word	0x20002650
 80024c4:	20002654 	.word	0x20002654

080024c8 <_GLOBAL__sub_I__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff ffcf 	bl	8002474 <_Z41__static_initialization_and_destruction_0ii>
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_GLOBAL__sub_D__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
 80024dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7ff ffc7 	bl	8002474 <_Z41__static_initialization_and_destruction_0ii>
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_ZL8convert_jPcjjcb>:
#define SECT_   "_0test"


////////////////////////////////////////////
static const char* convert_( size_t num, char* dstString, size_t maxChars, unsigned base, char padChar, bool isNegative )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
	// Error check the base argument
	if ( base < 2 || base > 36 )
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d902      	bls.n	8002502 <_ZL8convert_jPcjjcb+0x1a>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b24      	cmp	r3, #36	; 0x24
 8002500:	d901      	bls.n	8002506 <_ZL8convert_jPcjjcb+0x1e>
	{
		return 0;
 8002502:	2300      	movs	r3, #0
 8002504:	e062      	b.n	80025cc <_ZL8convert_jPcjjcb+0xe4>
	}

	// When convert a negative value, I need to leave room for the minus sign
	size_t sign = isNegative ? 1 : 0;
 8002506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZL8convert_jPcjjcb+0x2a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <_ZL8convert_jPcjjcb+0x2c>
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]

	// Null terminate the string
	dstString[--maxChars] = '\0';
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3b01      	subs	r3, #1
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]

	// Handle  special case: original number is zero
	if ( num == 0 )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <_ZL8convert_jPcjjcb+0x56>
	{
		dstString[--maxChars] = '0';
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	2230      	movs	r2, #48	; 0x30
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e02d      	b.n	800259a <_ZL8convert_jPcjjcb+0xb2>

	// Convert the number 
	else
	{
		// Conversion is done LSB first
		while ( num != 0 && maxChars > sign )
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02a      	beq.n	800259a <_ZL8convert_jPcjjcb+0xb2>
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	d926      	bls.n	800259a <_ZL8convert_jPcjjcb+0xb2>
		{
			char remainder = (char) ( num % base );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	fbb3 f2f2 	udiv	r2, r3, r2
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	fb01 f202 	mul.w	r2, r1, r2
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	74fb      	strb	r3, [r7, #19]
			if ( remainder <= 9 )
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b09      	cmp	r3, #9
 8002562:	d80a      	bhi.n	800257a <_ZL8convert_jPcjjcb+0x92>
			{
				dstString[--maxChars] = remainder + '0';
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4413      	add	r3, r2
 8002570:	7cfa      	ldrb	r2, [r7, #19]
 8002572:	3230      	adds	r2, #48	; 0x30
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e009      	b.n	800258e <_ZL8convert_jPcjjcb+0xa6>
			}
			else
			{
				dstString[--maxChars] = remainder - 10 + 'A';
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3b01      	subs	r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	7cfa      	ldrb	r2, [r7, #19]
 8002588:	3237      	adds	r2, #55	; 0x37
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
			}

			num /= base;
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]
		while ( num != 0 && maxChars > sign )
 8002598:	e7d1      	b.n	800253e <_ZL8convert_jPcjjcb+0x56>
		}
	}

	// Add the minus when needed
	if ( isNegative )
 800259a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <_ZL8convert_jPcjjcb+0xca>
	{
		dstString[--maxChars] = '-';
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	222d      	movs	r2, #45	; 0x2d
 80025b0:	701a      	strb	r2, [r3, #0]
	}

	// Add pad character(s) 
	if ( maxChars > 0 )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <_ZL8convert_jPcjjcb+0xde>
	{
		memset( dstString, padChar, maxChars );
 80025b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4619      	mov	r1, r3
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f006 f9c0 	bl	8008946 <memset>
	}


	// Return the 'left justified' string
	return dstString + maxChars;
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_ZN3Cpl4Text10sizetToStrEjPcjjc>:
	return convert_( num, dstString, maxChars, base, padChar, false );
}


const char* Cpl::Text::sizetToStr( size_t num, char* dstString, size_t maxChars, unsigned base, char padChar )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
	return convert_( num, dstString, maxChars, base, padChar, false );
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	7e3b      	ldrb	r3, [r7, #24]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff ff79 	bl	80024e8 <_ZL8convert_jPcjjcb>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_Z41__static_initialization_and_destruction_0ii>:
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002616:	4293      	cmp	r3, r2
 8002618:	d102      	bne.n	8002620 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800261a:	4809      	ldr	r0, [pc, #36]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800261c:	f002 fbca 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002632:	f002 fbca 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20002664 	.word	0x20002664

08002644 <_GLOBAL__sub_I__ZN3Cpl4Text9longToStrElPcjjc>:
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
 8002648:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff ffd7 	bl	8002600 <_Z41__static_initialization_and_destruction_0ii>
 8002652:	bd80      	pop	{r7, pc}

08002654 <_GLOBAL__sub_D__ZN3Cpl4Text9longToStrElPcjjc>:
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
 8002658:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff ffcf 	bl	8002600 <_Z41__static_initialization_and_destruction_0ii>
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZL6my_minii>:
//
char FString_::m_noMemory[1] = { '\0' };


// 'ole basic min/max methods
inline static int my_min( int a, int b ) { return a < b ? a : b; }
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	da01      	bge.n	800267a <_ZL6my_minii+0x16>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e000      	b.n	800267c <_ZL6my_minii+0x18>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_ZN3Cpl4Text8FString_C1EPKcPci>:
//inline static int max(int a, int b) { return a>b? a:b;}


///////////////////////////////
FString_::FString_( const char* string, char* internalString, int maxLen )
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
	:String_( internalString ),
	m_internalMaxlen( maxLen )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa84 	bl	8002ba8 <_ZN3Cpl4Text7String_C1EPc>
 80026a0:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <_ZN3Cpl4Text8FString_C1EPKcPci+0x88>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	60da      	str	r2, [r3, #12]
{
	// Handle failed memory alloc from DFString
	if ( !internalString )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <_ZN3Cpl4Text8FString_C1EPKcPci+0x3e>
	{
		m_strPtr         = m_noMemory;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <_ZN3Cpl4Text8FString_C1EPKcPci+0x8c>)
 80026b6:	609a      	str	r2, [r3, #8]
		m_internalMaxlen = 0;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
		m_truncated      = true;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	711a      	strb	r2, [r3, #4]
 80026c4:	e01f      	b.n	8002706 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else if ( !string )      // trap the case of a NULL initializer string
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <_ZN3Cpl4Text8FString_C1EPKcPci+0x4c>
	{
		internalString[0] = '\0';
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e018      	b.n	8002706 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else
	{
		int inStrLen = (int) strlen( string );
 80026d4:	68b8      	ldr	r0, [r7, #8]
 80026d6:	f7fd fdad 	bl	8000234 <strlen>
 80026da:	4603      	mov	r3, r0
 80026dc:	617b      	str	r3, [r7, #20]
		m_truncated  = inStrLen <= maxLen ? false : true;
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	bfcc      	ite	gt
 80026e6:	2301      	movgt	r3, #1
 80026e8:	2300      	movle	r3, #0
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	711a      	strb	r2, [r3, #4]
		strncpy( internalString, string, maxLen );
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f006 f9b1 	bl	8008a5e <strncpy>
		internalString[maxLen] = '\0';
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
	}
}
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	08009f5c 	.word	0x08009f5c
 8002714:	2000266c 	.word	0x2000266c

08002718 <_ZN3Cpl4Text8FString_6copyInEPKci>:


///////////////////////////////
void
FString_::copyIn( const char* src, int len )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
	// Trap null pointer for 'src' string
	if (!src)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <_ZN3Cpl4Text8FString_6copyInEPKci+0x22>
	{
		m_truncated = true;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	711a      	strb	r2, [r3, #4]
		m_strPtr[0] = '\0';
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
		m_truncated = len <= m_internalMaxlen ? false : true;
		len = my_min(m_internalMaxlen, len);
		strncpy(m_strPtr, src, len);
		m_strPtr[len] = '\0';
	}
}
 8002738:	e01d      	b.n	8002776 <_ZN3Cpl4Text8FString_6copyInEPKci+0x5e>
		m_truncated = len <= m_internalMaxlen ? false : true;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	bfcc      	ite	gt
 8002744:	2301      	movgt	r3, #1
 8002746:	2300      	movle	r3, #0
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	711a      	strb	r2, [r3, #4]
		len = my_min(m_internalMaxlen, len);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff85 	bl	8002664 <_ZL6my_minii>
 800275a:	6078      	str	r0, [r7, #4]
		strncpy(m_strPtr, src, len);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f006 f97a 	bl	8008a5e <strncpy>
		m_strPtr[len] = '\0';
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZN3Cpl4Text8FString_8appendToEPKci>:

void
FString_::appendTo( const char* string, int len )
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b088      	sub	sp, #32
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	// Note: Do NOTHING if null string pointer is passed
	if (string)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <_ZN3Cpl4Text8FString_8appendToEPKci+0x64>
	{
		int   curlen = strlen(m_strPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fd4d 	bl	8000234 <strlen>
 800279a:	4603      	mov	r3, r0
 800279c:	61fb      	str	r3, [r7, #28]
		int   avail = m_internalMaxlen - curlen;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	61bb      	str	r3, [r7, #24]
		int   copylen = my_min(len, avail);
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff5a 	bl	8002664 <_ZL6my_minii>
 80027b0:	6178      	str	r0, [r7, #20]
		m_truncated = copylen == len ? false : true;
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf14      	ite	ne
 80027ba:	2301      	movne	r3, #1
 80027bc:	2300      	moveq	r3, #0
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	711a      	strb	r2, [r3, #4]
		strncat(m_strPtr, string, copylen);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 f91f 	bl	8008a10 <strncat>
		m_strPtr[curlen + copylen] = '\0';
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	440a      	add	r2, r1
 80027dc:	4413      	add	r3, r2
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	}
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZN3Cpl4Text8FString_8insertAtEiPKc>:


void
FString_::insertAt( int insertOffset, const char* stringToInsert )
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b08c      	sub	sp, #48	; 0x30
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
	// Insure offset is NOT negative
	if ( insertOffset < 0 )
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da01      	bge.n	8002800 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x16>
	{
		insertOffset = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
	}

	// If insertOffset is past the '\0', then simply append stringToInsert
	int curlen    = strlen( m_strPtr );
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fd15 	bl	8000234 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int insertlen = strlen( stringToInsert );
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fd fd10 	bl	8000234 <strlen>
 8002814:	4603      	mov	r3, r0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
	if ( insertOffset >= curlen )
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	429a      	cmp	r2, r3
 800281e:	db08      	blt.n	8002832 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x48>
	{
		appendTo( stringToInsert, insertlen );
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3364      	adds	r3, #100	; 0x64
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	4798      	blx	r3
		return;
 8002830:	e04e      	b.n	80028d0 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xe6>
	}

	// Valid insertOffset
	int avail        = m_internalMaxlen - insertOffset;     // Amount left in the buffer starting with from insertOffset
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
	int copylen      = my_min( insertlen, avail );          // Amount of stringToInsert that can be copied in
 800283c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002840:	f7ff ff10 	bl	8002664 <_ZL6my_minii>
 8002844:	6238      	str	r0, [r7, #32]
	int remainderlen = avail - copylen;                     // Amount of room left after stringToInsert has been copied in
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	61fb      	str	r3, [r7, #28]
	int shiftlen     = curlen - insertOffset;               // Amount of characters needing to be shifted
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	61bb      	str	r3, [r7, #24]
	int movelen      = my_min( shiftlen, remainderlen );    // Amount of characters that can be SAFELY shifted
 8002856:	69f9      	ldr	r1, [r7, #28]
 8002858:	69b8      	ldr	r0, [r7, #24]
 800285a:	f7ff ff03 	bl	8002664 <_ZL6my_minii>
 800285e:	6178      	str	r0, [r7, #20]
	if ( movelen > 0 )
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	dd17      	ble.n	8002896 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xac>
	{
		memmove( m_strPtr + insertOffset + copylen, m_strPtr + insertOffset, movelen );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	440b      	add	r3, r1
 8002870:	18d0      	adds	r0, r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4619      	mov	r1, r3
 800287e:	f006 f848 	bl	8008912 <memmove>
		m_strPtr[insertOffset + copylen + movelen] = '\0';
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6a3a      	ldr	r2, [r7, #32]
 800288a:	4411      	add	r1, r2
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	440a      	add	r2, r1
 8002890:	4413      	add	r3, r2
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
	}
	memmove( m_strPtr + insertOffset, stringToInsert, copylen );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	6a3a      	ldr	r2, [r7, #32]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 f835 	bl	8008912 <memmove>
	m_truncated = movelen != shiftlen || copylen != insertlen ? true : false;
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d103      	bne.n	80028b8 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xce>
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd2>
 80028b8:	2201      	movs	r2, #1
 80028ba:	e000      	b.n	80028be <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd4>
 80028bc:	2200      	movs	r2, #0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	711a      	strb	r2, [r3, #4]
	m_strPtr[m_internalMaxlen] = '\0';
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
}
 80028d0:	3730      	adds	r7, #48	; 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZNK3Cpl4Text8FString_9maxLengthEv>:

int
FString_::maxLength() const
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return m_internalMaxlen;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <_ZN3Cpl4Text8FString_aSEi>:



////////////////////////////
Cpl::Text::String& FString_::operator=( int num ) { format( "%d", num ); return *this; }
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	33cc      	adds	r3, #204	; 0xcc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4903      	ldr	r1, [pc, #12]	; (8002914 <_ZN3Cpl4Text8FString_aSEi+0x24>)
 8002908:	4798      	blx	r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	080097f0 	.word	0x080097f0

08002918 <_ZN3Cpl4Text8FString_aSEj>:
Cpl::Text::String& FString_::operator=( unsigned int num ) { format( "%u", num ); return *this; }
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	33cc      	adds	r3, #204	; 0xcc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	4903      	ldr	r1, [pc, #12]	; (800293c <_ZN3Cpl4Text8FString_aSEj+0x24>)
 8002930:	4798      	blx	r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	080097f4 	.word	0x080097f4

08002940 <_ZN3Cpl4Text8FString_aSEl>:
Cpl::Text::String& FString_::operator=( long num ) { format( "%ld", num ); return *this; }
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	33cc      	adds	r3, #204	; 0xcc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4903      	ldr	r1, [pc, #12]	; (8002964 <_ZN3Cpl4Text8FString_aSEl+0x24>)
 8002958:	4798      	blx	r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	080097f8 	.word	0x080097f8

08002968 <_ZN3Cpl4Text8FString_aSEx>:
Cpl::Text::String& FString_::operator=( long long num ) { format( "%lld", num ); return *this; }
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	e9c7 2300 	strd	r2, r3, [r7]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	33cc      	adds	r3, #204	; 0xcc
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002982:	4903      	ldr	r1, [pc, #12]	; (8002990 <_ZN3Cpl4Text8FString_aSEx+0x28>)
 8002984:	47a0      	blx	r4
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	080097fc 	.word	0x080097fc

08002994 <_ZN3Cpl4Text8FString_aSEm>:
Cpl::Text::String& FString_::operator=( unsigned long num ) { format( "%lu", num ); return *this; }
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	33cc      	adds	r3, #204	; 0xcc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4903      	ldr	r1, [pc, #12]	; (80029b8 <_ZN3Cpl4Text8FString_aSEm+0x24>)
 80029ac:	4798      	blx	r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	08009804 	.word	0x08009804

080029bc <_ZN3Cpl4Text8FString_aSEy>:
Cpl::Text::String& FString_::operator=( unsigned long long num ) { format( "%llu", num ); return *this; }
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	e9c7 2300 	strd	r2, r3, [r7]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	33cc      	adds	r3, #204	; 0xcc
 80029d0:	681c      	ldr	r4, [r3, #0]
 80029d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d6:	4903      	ldr	r1, [pc, #12]	; (80029e4 <_ZN3Cpl4Text8FString_aSEy+0x28>)
 80029d8:	47a0      	blx	r4
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	08009808 	.word	0x08009808

080029e8 <_ZN3Cpl4Text8FString_pLEi>:
Cpl::Text::String& FString_::operator +=( int num ) { formatAppend( "%d", num ); return *this; }
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	33d0      	adds	r3, #208	; 0xd0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	4903      	ldr	r1, [pc, #12]	; (8002a0c <_ZN3Cpl4Text8FString_pLEi+0x24>)
 8002a00:	4798      	blx	r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	080097f0 	.word	0x080097f0

08002a10 <_ZN3Cpl4Text8FString_pLEj>:
Cpl::Text::String& FString_::operator +=( unsigned int num ) { formatAppend( "%u", num ); return *this; }
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	33d0      	adds	r3, #208	; 0xd0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	4903      	ldr	r1, [pc, #12]	; (8002a34 <_ZN3Cpl4Text8FString_pLEj+0x24>)
 8002a28:	4798      	blx	r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	080097f4 	.word	0x080097f4

08002a38 <_ZN3Cpl4Text8FString_pLEl>:
Cpl::Text::String& FString_::operator +=( long num ) { formatAppend( "%ld", num ); return *this; }
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	33d0      	adds	r3, #208	; 0xd0
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	4903      	ldr	r1, [pc, #12]	; (8002a5c <_ZN3Cpl4Text8FString_pLEl+0x24>)
 8002a50:	4798      	blx	r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	080097f8 	.word	0x080097f8

08002a60 <_ZN3Cpl4Text8FString_pLEx>:
Cpl::Text::String& FString_::operator +=( long long num ) { formatAppend( "%lld", num ); return *this; }
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	e9c7 2300 	strd	r2, r3, [r7]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	33d0      	adds	r3, #208	; 0xd0
 8002a74:	681c      	ldr	r4, [r3, #0]
 8002a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a7a:	4903      	ldr	r1, [pc, #12]	; (8002a88 <_ZN3Cpl4Text8FString_pLEx+0x28>)
 8002a7c:	47a0      	blx	r4
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd90      	pop	{r4, r7, pc}
 8002a88:	080097fc 	.word	0x080097fc

08002a8c <_ZN3Cpl4Text8FString_pLEm>:
Cpl::Text::String& FString_::operator +=( unsigned long num ) { formatAppend( "%lu", num ); return *this; }
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	33d0      	adds	r3, #208	; 0xd0
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <_ZN3Cpl4Text8FString_pLEm+0x24>)
 8002aa4:	4798      	blx	r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	08009804 	.word	0x08009804

08002ab4 <_ZN3Cpl4Text8FString_pLEy>:
Cpl::Text::String& FString_::operator +=( unsigned long long num ) { formatAppend( "%llu", num ); return *this; }
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	e9c7 2300 	strd	r2, r3, [r7]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	33d0      	adds	r3, #208	; 0xd0
 8002ac8:	681c      	ldr	r4, [r3, #0]
 8002aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ace:	4903      	ldr	r1, [pc, #12]	; (8002adc <_ZN3Cpl4Text8FString_pLEy+0x28>)
 8002ad0:	47a0      	blx	r4
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	08009808 	.word	0x08009808

08002ae0 <_Z41__static_initialization_and_destruction_0ii>:
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002afc:	f002 f95a 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d102      	bne.n	8002b16 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b12:	f002 f95a 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20002668 	.word	0x20002668

08002b24 <_GLOBAL__sub_I__ZN3Cpl4Text8FString_10m_noMemoryE>:
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff ffd7 	bl	8002ae0 <_Z41__static_initialization_and_destruction_0ii>
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_GLOBAL__sub_D__ZN3Cpl4Text8FString_10m_noMemoryE>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7ff ffcf 	bl	8002ae0 <_Z41__static_initialization_and_destruction_0ii>
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZNK3Cpl4Text6StringcvPKcEv>:

	/// Read-only Access to the "raw" string.
	virtual const char* getString() const = 0;

	/// Cast to read-only character string pointer.
	inline operator const char* ( ) const { return getString(); }
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	336c      	adds	r3, #108	; 0x6c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <_ZN3Cpl9Container3KeyC1Ev>:
class Key
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <_ZN3Cpl9Container3KeyC1Ev+0x1c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	08009e40 	.word	0x08009e40

08002b84 <_ZN3Cpl4Text6StringC1Ev>:
class String : public Cpl::Container::Key
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ffe8 	bl	8002b64 <_ZN3Cpl9Container3KeyC1Ev>
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <_ZN3Cpl4Text6StringC1Ev+0x20>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	08009d28 	.word	0x08009d28

08002ba8 <_ZN3Cpl4Text7String_C1EPc>:
//
using namespace Cpl::Text;


///////////////////////////////
String_::String_( char* internalString )
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
	:m_truncated( false ),
	m_strPtr( internalString )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ffe5 	bl	8002b84 <_ZN3Cpl4Text6StringC1Ev>
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <_ZN3Cpl4Text7String_C1EPc+0x30>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	711a      	strb	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	609a      	str	r2, [r3, #8]
{
}
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	0800a074 	.word	0x0800a074

08002bdc <_ZN3Cpl4Text7String_5clearEv>:

///////////////////////////////
void
String_::clear()
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	m_strPtr[0] = '\0';
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
	m_truncated = false;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	711a      	strb	r2, [r3, #4]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_ZNK3Cpl4Text7String_cvcEv>:

String_::operator char() const
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return m_strPtr[0];
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_ZNK3Cpl4Text7String_6lengthEv>:

int
String_::length() const
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	return strlen( m_strPtr );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fb05 	bl	8000234 <strlen>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZNK3Cpl4Text7String_7isEmptyEv>:

bool
String_::isEmpty() const
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	return *( m_strPtr ) == '\0';
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_ZNK3Cpl4Text7String_9truncatedEv>:

bool String_::truncated() const
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	return m_truncated;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	791b      	ldrb	r3, [r3, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZNK3Cpl4Text7String_eqEPKc>:

bool
String_::operator ==( const char* string ) const
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) == 0 : false;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd faca 	bl	8000220 <strcmp>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <_ZNK3Cpl4Text7String_eqEPKc+0x28>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <_ZNK3Cpl4Text7String_eqERKNS0_6StringE>:

bool
String_::operator ==( const String& string ) const
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) == 0;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689c      	ldr	r4, [r3, #8]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	336c      	adds	r3, #108	; 0x6c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7fd faae 	bl	8000220 <strcmp>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}

08002cd8 <_ZNK3Cpl4Text7String_neEPKc>:

bool
String_::operator !=( const char* string ) const
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) != 0 : true;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <_ZNK3Cpl4Text7String_neEPKc+0x22>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	6839      	ldr	r1, [r7, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fa96 	bl	8000220 <strcmp>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <_ZNK3Cpl4Text7String_neEPKc+0x26>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <_ZNK3Cpl4Text7String_neEPKc+0x28>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZNK3Cpl4Text7String_neERKNS0_6StringE>:

bool
String_::operator !=( const String& string ) const
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) != 0;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689c      	ldr	r4, [r3, #8]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	336c      	adds	r3, #108	; 0x6c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	4798      	blx	r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	4619      	mov	r1, r3
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7fd fa7a 	bl	8000220 <strcmp>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}

08002d40 <_ZNK3Cpl4Text7String_7compareEPKc>:

int String_::compare( const char* string ) const
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) : -1;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <_ZNK3Cpl4Text7String_7compareEPKc+0x20>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fa62 	bl	8000220 <strcmp>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	e001      	b.n	8002d64 <_ZNK3Cpl4Text7String_7compareEPKc+0x24>
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc>:

int String_::compareIgnoreCase( const char* string ) const
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) : -1;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x20>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fde8 	bl	8008958 <strcasecmp>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	e001      	b.n	8002d90 <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x24>
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc>:


bool
String_::isEqualIgnoreCase( const char* string ) const
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) == 0 : false;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	6839      	ldr	r1, [r7, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 fdd2 	bl	8008958 <strcasecmp>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x28>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc>:

bool
String_::isEqualSubstring( int startpos, int endpos, const char* string ) const
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
	if ( !string )
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x18>
	{
		return false;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e031      	b.n	8002e44 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fa25 	bl	8000234 <strlen>
 8002dea:	4603      	mov	r3, r0
 8002dec:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da01      	bge.n	8002df8 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x30>
	{
		startpos = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	db02      	blt.n	8002e06 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x3e>
	{
		startpos = len - 1;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	db02      	blt.n	8002e14 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x4c>
	{
		endpos   = len - 1;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	da01      	bge.n	8002e20 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x58>
	{
		endpos   = startpos;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	607b      	str	r3, [r7, #4]
	}
	return strncmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	18d0      	adds	r0, r2, r3
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	461a      	mov	r2, r3
 8002e32:	6839      	ldr	r1, [r7, #0]
 8002e34:	f005 fdff 	bl	8008a36 <strncmp>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc>:

bool
String_::isEqualSubstringIgnoreCase( int startpos, int endpos, const char* string ) const
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
	if ( !string )
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x18>
	{
		return false;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e031      	b.n	8002ec8 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd f9e3 	bl	8000234 <strlen>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da01      	bge.n	8002e7c <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x30>
	{
		startpos = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	db02      	blt.n	8002e8a <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x3e>
	{
		startpos = len - 1;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	db02      	blt.n	8002e98 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x4c>
	{
		endpos   = len - 1;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	da01      	bge.n	8002ea4 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x58>
	{
		endpos   = startpos;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	607b      	str	r3, [r7, #4]
	}

	return strncasecmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	18d0      	adds	r0, r2, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	f005 fd88 	bl	80089cc <strncasecmp>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZNK3Cpl4Text7String_eqEc>:

bool
String_::operator ==( const char c ) const
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
	return c == m_strPtr[0];
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_ZNK3Cpl4Text7String_10startsWithEPKc>:

bool
String_::startsWith( const char* string ) const
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
	return String_::startsWith( string, 0 );
 8002f04:	2200      	movs	r2, #0
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f805 	bl	8002f18 <_ZNK3Cpl4Text7String_10startsWithEPKci>
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZNK3Cpl4Text7String_10startsWithEPKci>:

bool
String_::startsWith( const char* string, int startOffset ) const
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
	if ( !string )
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x16>
	{
		return false;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e028      	b.n	8002f80 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	int len  = strlen( m_strPtr );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd f97e 	bl	8000234 <strlen>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	617b      	str	r3, [r7, #20]
	int len2 = strlen( string );
 8002f3c:	68b8      	ldr	r0, [r7, #8]
 8002f3e:	f7fd f979 	bl	8000234 <strlen>
 8002f42:	4603      	mov	r3, r0
 8002f44:	613b      	str	r3, [r7, #16]
	if ( startOffset < 0 || ( startOffset + len2 ) > len || len2 == 0 )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db08      	blt.n	8002f5e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	db02      	blt.n	8002f5e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x4a>
	{
		return false;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e00e      	b.n	8002f80 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	return strncmp( m_strPtr + startOffset, string, len2 ) == 0;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f005 fd61 	bl	8008a36 <strncmp>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZNK3Cpl4Text7String_8endsWithEPKc>:

bool
String_::endsWith( const char* string ) const
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	if ( !string )
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <_ZNK3Cpl4Text7String_8endsWithEPKc+0x14>
	{
		return false;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e025      	b.n	8002fe8 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	int len  = strlen( m_strPtr );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd f947 	bl	8000234 <strlen>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60fb      	str	r3, [r7, #12]
	int len2 = strlen( string );
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f7fd f942 	bl	8000234 <strlen>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60bb      	str	r3, [r7, #8]
	if ( len2 > len || len2 == 0 )
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dc02      	bgt.n	8002fc2 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3a>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3e>
	{
		return false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e010      	b.n	8002fe8 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	return strncmp( m_strPtr + len - len2, string, len2 ) == 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 fd2d 	bl	8008a36 <strncmp>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZN3Cpl4Text7String_6formatEPKcz>:


void
String_::format( const char* format, ... )
{
 8002ff0:	b40e      	push	{r1, r2, r3}
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	if ( !format )
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <_ZN3Cpl4Text7String_6formatEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8003000:	f107 0320 	add.w	r3, r7, #32
 8003004:	60fb      	str	r3, [r7, #12]
	vformat( format, ap );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	33d8      	adds	r3, #216	; 0xd8
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
 8003016:	e000      	b.n	800301a <_ZN3Cpl4Text7String_6formatEPKcz+0x2a>
		return;
 8003018:	bf00      	nop
	va_end( ap );
}
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003022:	b003      	add	sp, #12
 8003024:	4770      	bx	lr

08003026 <_ZN3Cpl4Text7String_12formatAppendEPKcz>:

void
String_::formatAppend( const char* format, ... )
{
 8003026:	b40e      	push	{r1, r2, r3}
 8003028:	b580      	push	{r7, lr}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	if ( !format )
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8003036:	f107 0320 	add.w	r3, r7, #32
 800303a:	60fb      	str	r3, [r7, #12]
	vformatAppend( format, ap );
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	33dc      	adds	r3, #220	; 0xdc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	69f9      	ldr	r1, [r7, #28]
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e000      	b.n	8003050 <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x2a>
		return;
 800304e:	bf00      	nop
	va_end( ap );
}
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003058:	b003      	add	sp, #12
 800305a:	4770      	bx	lr

0800305c <_ZN3Cpl4Text7String_9formatOptEbPKcz>:

void
String_::formatOpt( bool appendFlag, const char* format, ... )
{
 800305c:	b40c      	push	{r2, r3}
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
	if ( !format )
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x44>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8003070:	f107 031c 	add.w	r3, r7, #28
 8003074:	60fb      	str	r3, [r7, #12]
	if ( appendFlag )
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x32>
	{
		vformatAppend( format, ap );
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	33dc      	adds	r3, #220	; 0xdc
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e009      	b.n	80030a2 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
	}
	else
	{
		vformat( format, ap );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	33d8      	adds	r3, #216	; 0xd8
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	e000      	b.n	80030a2 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
		return;
 80030a0:	bf00      	nop
	}

	va_end( ap );
}
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030aa:	b002      	add	sp, #8
 80030ac:	4770      	bx	lr

080030ae <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list>:

void
String_::vformat( const char* format, va_list ap )
{
 80030ae:	b590      	push	{r4, r7, lr}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
	if ( !format )
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d027      	beq.n	8003110 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x62>
	{
		return;
	}

	int flen = vsnprintf( m_strPtr, maxLength() + 1, format, ap );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689c      	ldr	r4, [r3, #8]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3374      	adds	r3, #116	; 0x74
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4610      	mov	r0, r2
 80030d0:	4798      	blx	r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	3301      	adds	r3, #1
 80030d6:	4619      	mov	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4620      	mov	r0, r4
 80030de:	f005 fd39 	bl	8008b54 <vsniprintf>
 80030e2:	6178      	str	r0, [r7, #20]
	validateSizeAfterFormat( maxLength(), flen, maxLength() );
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3374      	adds	r3, #116	; 0x74
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4610      	mov	r0, r2
 80030f0:	4798      	blx	r3
 80030f2:	4604      	mov	r4, r0
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3374      	adds	r3, #116	; 0x74
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4610      	mov	r0, r2
 8003100:	4798      	blx	r3
 8003102:	4603      	mov	r3, r0
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4621      	mov	r1, r4
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 faef 	bl	80036ec <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 800310e:	e000      	b.n	8003112 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x64>
		return;
 8003110:	bf00      	nop
}
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>:

void
String_::vformatAppend( const char* format, va_list ap )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
	if ( !format )
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02d      	beq.n	8003186 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x6e>
	{
		return;
	}

	int   len   = strlen( m_strPtr );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f880 	bl	8000234 <strlen>
 8003134:	4603      	mov	r3, r0
 8003136:	61fb      	str	r3, [r7, #28]
	int   avail = maxLength() - len;
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3374      	adds	r3, #116	; 0x74
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4610      	mov	r0, r2
 8003144:	4798      	blx	r3
 8003146:	4602      	mov	r2, r0
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	61bb      	str	r3, [r7, #24]
	char* ptr   = m_strPtr + len;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
	int   flen  = vsnprintf( ptr, avail + 1, format, ap );
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	3301      	adds	r3, #1
 800315c:	4619      	mov	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f005 fcf6 	bl	8008b54 <vsniprintf>
 8003168:	6138      	str	r0, [r7, #16]
	validateSizeAfterFormat( avail, flen, maxLength() );
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3374      	adds	r3, #116	; 0x74
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
 8003178:	4603      	mov	r3, r0
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fab4 	bl	80036ec <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 8003184:	e000      	b.n	8003188 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x70>
		return;
 8003186:	bf00      	nop
}
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list>:

void
String_::vformatOpt( bool appendFlag, const char* format, va_list ap )
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	460b      	mov	r3, r1
 800319c:	72fb      	strb	r3, [r7, #11]
	if ( !format )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d014      	beq.n	80031ce <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x40>
	{
		return;
	}

	if ( appendFlag )
 80031a4:	7afb      	ldrb	r3, [r7, #11]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x2e>
	{
		vformatAppend( format, ap );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	33dc      	adds	r3, #220	; 0xdc
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	4798      	blx	r3
 80031ba:	e009      	b.n	80031d0 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
	}
	else
	{
		vformat( format, ap );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	33d8      	adds	r3, #216	; 0xd8
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	4798      	blx	r3
 80031cc:	e000      	b.n	80031d0 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
		return;
 80031ce:	bf00      	nop
	}
}
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZN3Cpl4Text7String_7toUpperEv>:


const char*
String_::toUpper()
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
	strupr( m_strPtr );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fc78 	bl	8008ad8 <strupr>
	return m_strPtr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_ZN3Cpl4Text7String_7toLowerEv>:

const char*
String_::toLower()
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	strlwr( m_strPtr );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4618      	mov	r0, r3
 8003202:	f005 fbd1 	bl	80089a8 <strlwr>
	return m_strPtr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv>:

void
String_::removeLeadingSpaces()
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	m_truncated   = false;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripSpace( m_strPtr );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fb70 	bl	800390a <_ZN3Cpl4Text10stripSpaceEPKc>
 800322a:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading spaces
	if ( p == m_strPtr )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d01c      	beq.n	8003270 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x5e>
	{
		return;
	}

	// else re-adjust the string to remove the spaces
	size_t i = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	f7fc fffa 	bl	8000234 <strlen>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4293      	cmp	r3, r2
 8003246:	d20c      	bcs.n	8003262 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x50>
	{
		m_strPtr[i] = p[i];
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	440b      	add	r3, r1
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e7eb      	b.n	800323a <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x28>
	}

	m_strPtr[i] = '\0';
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e000      	b.n	8003272 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x60>
		return;
 8003270:	bf00      	nop
}
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZN3Cpl4Text7String_20removeTrailingSpacesEv>:

void
String_::removeTrailingSpaces()
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	m_truncated = false;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingSpace( m_strPtr );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb87 	bl	800399e <_ZN3Cpl4Text19removeTrailingSpaceEPc>
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc>:

void
String_::removeLeadingChars( const char* charsSet )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	m_truncated   = false;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripChars( m_strPtr, charsSet );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fb95 	bl	80039de <_ZN3Cpl4Text10stripCharsEPKcS2_>
 80032b4:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading chars
	if ( p == m_strPtr )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d01c      	beq.n	80032fa <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x62>
	{
		return;
	}

	// else re-adjust the string to remove the chars
	size_t i = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f7fc ffb5 	bl	8000234 <strlen>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d20c      	bcs.n	80032ec <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x54>
	{
		m_strPtr[i] = p[i];
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	441a      	add	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	440b      	add	r3, r1
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e7eb      	b.n	80032c4 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x2c>
	}

	m_strPtr[i] = '\0';
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e000      	b.n	80032fc <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x64>
		return;
 80032fa:	bf00      	nop
}
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_ZN3Cpl4Text7String_19removeTrailingCharsEPKc>:

void
String_::removeTrailingChars( const char* charsSet )
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingChars( m_strPtr, charsSet );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fbc2 	bl	8003aa2 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <_ZNK3Cpl4Text7String_7indexOfEc>:

int
String_::indexOf( char c ) const
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	70fb      	strb	r3, [r7, #3]
	return String_::indexOf( c, 0 );
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	2200      	movs	r2, #0
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f805 	bl	8003348 <_ZNK3Cpl4Text7String_7indexOfEci>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_ZNK3Cpl4Text7String_7indexOfEci>:

int
String_::indexOf( char c, int startpos ) const
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	460b      	mov	r3, r1
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	72fb      	strb	r3, [r7, #11]
	int len = strlen( m_strPtr );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fc ff6a 	bl	8000234 <strlen>
 8003360:	4603      	mov	r3, r0
 8003362:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db03      	blt.n	8003372 <_ZNK3Cpl4Text7String_7indexOfEci+0x2a>
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	429a      	cmp	r2, r3
 8003370:	db02      	blt.n	8003378 <_ZNK3Cpl4Text7String_7indexOfEci+0x30>
	{
		return -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e013      	b.n	80033a0 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	char* ptr = strchr( m_strPtr + startpos, c );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	7afa      	ldrb	r2, [r7, #11]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f005 fb01 	bl	800898c <strchr>
 800338a:	6138      	str	r0, [r7, #16]
	if ( ptr )
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <_ZNK3Cpl4Text7String_7indexOfEci+0x54>
	{
		return ptr - m_strPtr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	e001      	b.n	80033a0 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	return -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZNK3Cpl4Text7String_7indexOfEPKc>:

int
String_::indexOf( const char* str ) const
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
	return String_::indexOf( str, 0 );
 80033b2:	2200      	movs	r2, #0
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f805 	bl	80033c6 <_ZNK3Cpl4Text7String_7indexOfEPKci>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <_ZNK3Cpl4Text7String_7indexOfEPKci>:

int
String_::indexOf( const char* str, int startpos ) const
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
	int len = strlen( m_strPtr );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fc ff2c 	bl	8000234 <strlen>
 80033dc:	4603      	mov	r3, r0
 80033de:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len || !str )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db06      	blt.n	80033f4 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	da02      	bge.n	80033f4 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <_ZNK3Cpl4Text7String_7indexOfEPKci+0x34>
	{
		return -1;
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	e012      	b.n	8003420 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	char* ptr = strstr( m_strPtr + startpos, str );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 fb51 	bl	8008aac <strstr>
 800340a:	6138      	str	r0, [r7, #16]
	if ( ptr )
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <_ZNK3Cpl4Text7String_7indexOfEPKci+0x56>
	{
		return ptr - m_strPtr;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	e001      	b.n	8003420 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	return -1;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_ZNK3Cpl4Text7String_11lastIndexOfEc>:
int
String_::lastIndexOf( char c ) const
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
	char* ptr = strrchr( m_strPtr, c );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f005 fb21 	bl	8008a84 <strrchr>
 8003442:	60f8      	str	r0, [r7, #12]
	if ( ptr )
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x2c>
	{
		return ptr - m_strPtr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	e001      	b.n	8003458 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x30>
	}

	return -1;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_ZNK3Cpl4Text7String_5countEc>:

int
String_::count( char c ) const
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
	int   count = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
	char* ptr   = m_strPtr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	4619      	mov	r1, r3
 800347a:	68b8      	ldr	r0, [r7, #8]
 800347c:	f005 fa86 	bl	800898c <strchr>
 8003480:	60b8      	str	r0, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <_ZNK3Cpl4Text7String_5countEc+0x40>
	{
		count++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
		ptr++;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 800349e:	e7ea      	b.n	8003476 <_ZNK3Cpl4Text7String_5countEc+0x16>
	}

	return count;
 80034a0:	68fb      	ldr	r3, [r7, #12]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <_ZN3Cpl4Text7String_3cutEii>:

void
String_::cut( int startpos, int endpos )
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
	m_truncated = false;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fc feb7 	bl	8000234 <strlen>
 80034c6:	4603      	mov	r3, r0
 80034c8:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos > endpos || startpos >= len || endpos >= len )
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db37      	blt.n	8003540 <_ZN3Cpl4Text7String_3cutEii+0x96>
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dc33      	bgt.n	8003540 <_ZN3Cpl4Text7String_3cutEii+0x96>
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	da2f      	bge.n	8003540 <_ZN3Cpl4Text7String_3cutEii+0x96>
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	da2b      	bge.n	8003540 <_ZN3Cpl4Text7String_3cutEii+0x96>
	{
		return;
	}

	if ( endpos + 1 >= len )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3301      	adds	r3, #1
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	dc0b      	bgt.n	800350a <_ZN3Cpl4Text7String_3cutEii+0x60>
	{
		trimRight( len - startpos );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	1a8a      	subs	r2, r1, r2
 8003502:	4611      	mov	r1, r2
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	4798      	blx	r3
		return;
 8003508:	e01b      	b.n	8003542 <_ZN3Cpl4Text7String_3cutEii+0x98>
	}
	int movelen = len - ( endpos + 1 );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3301      	adds	r3, #1
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	613b      	str	r3, [r7, #16]
	memmove( m_strPtr + startpos, m_strPtr + endpos + 1, movelen );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	18d0      	adds	r0, r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3301      	adds	r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4619      	mov	r1, r3
 800352a:	f005 f9f2 	bl	8008912 <memmove>
	m_strPtr[startpos + movelen] = '\0';
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	440a      	add	r2, r1
 8003538:	4413      	add	r3, r2
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	e000      	b.n	8003542 <_ZN3Cpl4Text7String_3cutEii+0x98>
		return;
 8003540:	bf00      	nop
}
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZN3Cpl4Text7String_9trimRightEi>:

void
String_::trimRight( int n )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc fe69 	bl	8000234 <strlen>
 8003562:	4603      	mov	r3, r0
 8003564:	60fb      	str	r3, [r7, #12]
	int index   = len - n;
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	60bb      	str	r3, [r7, #8]
	if ( index < 0 || n < 0 )
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db09      	blt.n	8003588 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db06      	blt.n	8003588 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
	{
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
	}
	else
	{
		m_strPtr[index] = '\0';
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4413      	add	r3, r2
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e000      	b.n	800358a <_ZN3Cpl4Text7String_9trimRightEi+0x42>
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
 8003588:	bf00      	nop
	}

}
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_ZN3Cpl4Text7String_7setCharEic>:

void String_::setChar( int atPosition, char newchar )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
	m_truncated = false;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc fe43 	bl	8000234 <strlen>
 80035ae:	4603      	mov	r3, r0
 80035b0:	617b      	str	r3, [r7, #20]
	if ( atPosition < 0 || atPosition >= len )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <_ZN3Cpl4Text7String_7setCharEic+0x3e>
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	da06      	bge.n	80035ce <_ZN3Cpl4Text7String_7setCharEic+0x3e>
	{
		return;
	}

	m_strPtr[atPosition] = newchar;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4413      	add	r3, r2
 80035c8:	79fa      	ldrb	r2, [r7, #7]
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e000      	b.n	80035d0 <_ZN3Cpl4Text7String_7setCharEic+0x40>
		return;
 80035ce:	bf00      	nop
}
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZN3Cpl4Text7String_7replaceEcc>:

int
String_::replace( char targetChar, char newChar )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
 80035e2:	4613      	mov	r3, r2
 80035e4:	70bb      	strb	r3, [r7, #2]
	int replaceCount = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
	if ( targetChar != newChar )
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	78bb      	ldrb	r3, [r7, #2]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d015      	beq.n	800361e <_ZN3Cpl4Text7String_7replaceEcc+0x48>
	{
		char* ptr 	     = m_strPtr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <_ZN3Cpl4Text7String_7replaceEcc+0x48>
		{
			if ( *ptr == targetChar )
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	429a      	cmp	r2, r3
 8003608:	d105      	bne.n	8003616 <_ZN3Cpl4Text7String_7replaceEcc+0x40>
			{
				*ptr = newChar;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	78ba      	ldrb	r2, [r7, #2]
 800360e:	701a      	strb	r2, [r3, #0]
				replaceCount++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
			}
			ptr++;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 800361c:	e7ec      	b.n	80035f8 <_ZN3Cpl4Text7String_7replaceEcc+0x22>
		}
	}

	m_truncated = false;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	711a      	strb	r2, [r3, #4]
	return replaceCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_ZNK3Cpl4Text7String_9getStringEv>:

const char*
String_::getString() const
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
	return m_strPtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_ZN3Cpl4Text7String_9getBufferERi>:

char *
String_::getBuffer( int& maxAllowedLength )
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	m_truncated      = false;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	711a      	strb	r2, [r3, #4]
	maxAllowedLength = maxLength();
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3374      	adds	r3, #116	; 0x74
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
 8003668:	4602      	mov	r2, r0
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
	return m_strPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_ZNK3Cpl4Text7String_10compareKeyERKNS_9Container3KeyE>:


////////////////////////////////////
int String_::compareKey( const Key& key ) const
{
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
	unsigned    otherLen = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
	const char* otherPtr = (const char*) key.getRawKey( &otherLen );
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f107 0208 	add.w	r2, r7, #8
 8003694:	4611      	mov	r1, r2
 8003696:	6838      	ldr	r0, [r7, #0]
 8003698:	4798      	blx	r3
 800369a:	60f8      	str	r0, [r7, #12]
	return Cpl::Container::KeyStringBuffer::compare( m_strPtr, strlen( m_strPtr ), otherPtr, otherLen );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689c      	ldr	r4, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc fdc5 	bl	8000234 <strlen>
 80036aa:	4601      	mov	r1, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4620      	mov	r0, r4
 80036b2:	f004 fc60 	bl	8007f76 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>
 80036b6:	4603      	mov	r3, r0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <_ZNK3Cpl4Text7String_9getRawKeyEPj>:

const void* String_::getRawKey( unsigned* returnRawKeyLenPtr ) const
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if ( returnRawKeyLenPtr )
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <_ZNK3Cpl4Text7String_9getRawKeyEPj+0x20>
	{
		*returnRawKeyLenPtr = strlen( m_strPtr );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc fdad 	bl	8000234 <strlen>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	601a      	str	r2, [r3, #0]
	}

	return m_strPtr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>:


////////////////////////////////////
void String_::validateSizeAfterFormat( int availableLen, int formattedLen, int maxlen )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
	if ( formattedLen <= availableLen && formattedLen >= 0 )
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	dc06      	bgt.n	8003710 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db03      	blt.n	8003710 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
	{
		m_truncated = false;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	711a      	strb	r2, [r3, #4]
 800370e:	e009      	b.n	8003724 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x38>
	}
	else
	{
		m_truncated      = true;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	711a      	strb	r2, [r3, #4]
		m_strPtr[maxlen] = '\0';    // ENSURE the string is terminated
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4413      	add	r3, r2
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
	}
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN3Cpl4Text7String_aSERKNS0_6StringE>:

////////////////////////////////////
Cpl::Text::String& String_::operator=( const String& string ) { copyIn( string, string.length() ); return *this; }
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	687d      	ldr	r5, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3334      	adds	r3, #52	; 0x34
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	6838      	ldr	r0, [r7, #0]
 8003746:	f7ff f9fd 	bl	8002b44 <_ZNK3Cpl4Text6StringcvPKcEv>
 800374a:	4606      	mov	r6, r0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3370      	adds	r3, #112	; 0x70
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6838      	ldr	r0, [r7, #0]
 8003756:	4798      	blx	r3
 8003758:	4603      	mov	r3, r0
 800375a:	461a      	mov	r2, r3
 800375c:	4631      	mov	r1, r6
 800375e:	4628      	mov	r0, r5
 8003760:	47a0      	blx	r4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800376c <_ZN3Cpl4Text7String_aSEPKc>:
Cpl::Text::String& String_::operator=( const char* string ) { copyIn( string, string ? strlen( string ) : 0 ); return *this; }
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	687d      	ldr	r5, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3334      	adds	r3, #52	; 0x34
 800377e:	681c      	ldr	r4, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <_ZN3Cpl4Text7String_aSEPKc+0x24>
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	f7fc fd54 	bl	8000234 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	e000      	b.n	8003792 <_ZN3Cpl4Text7String_aSEPKc+0x26>
 8003790:	2300      	movs	r3, #0
 8003792:	461a      	mov	r2, r3
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	4628      	mov	r0, r5
 8003798:	47a0      	blx	r4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}

080037a4 <_ZN3Cpl4Text7String_aSEc>:
Cpl::Text::String& String_::operator=( char c ) { copyIn( &c, 1 ); return *this; }
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3334      	adds	r3, #52	; 0x34
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1cf9      	adds	r1, r7, #3
 80037bc:	2201      	movs	r2, #1
 80037be:	4798      	blx	r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_ZN3Cpl4Text7String_pLERKNS0_6StringE>:
Cpl::Text::String& String_::operator +=( const String& string ) { appendTo( string, string.length() ); return *this; }
 80037ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
 80037d4:	687d      	ldr	r5, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3364      	adds	r3, #100	; 0x64
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	6838      	ldr	r0, [r7, #0]
 80037e0:	f7ff f9b0 	bl	8002b44 <_ZNK3Cpl4Text6StringcvPKcEv>
 80037e4:	4606      	mov	r6, r0
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3370      	adds	r3, #112	; 0x70
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	4798      	blx	r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4631      	mov	r1, r6
 80037f8:	4628      	mov	r0, r5
 80037fa:	47a0      	blx	r4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003806 <_ZN3Cpl4Text7String_pLEPKc>:
Cpl::Text::String& String_::operator +=( const char* string ) { appendTo( string, string ? strlen( string ) : 0 ); return *this; }
 8003806:	b5b0      	push	{r4, r5, r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
 8003810:	687d      	ldr	r5, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3364      	adds	r3, #100	; 0x64
 8003818:	681c      	ldr	r4, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <_ZN3Cpl4Text7String_pLEPKc+0x24>
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	f7fc fd07 	bl	8000234 <strlen>
 8003826:	4603      	mov	r3, r0
 8003828:	e000      	b.n	800382c <_ZN3Cpl4Text7String_pLEPKc+0x26>
 800382a:	2300      	movs	r3, #0
 800382c:	461a      	mov	r2, r3
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	4628      	mov	r0, r5
 8003832:	47a0      	blx	r4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bdb0      	pop	{r4, r5, r7, pc}

0800383e <_ZN3Cpl4Text7String_pLEc>:
Cpl::Text::String& String_::operator +=( char c ) { appendTo( &c, 1 ); return *this; }
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3364      	adds	r3, #100	; 0x64
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1cf9      	adds	r1, r7, #3
 8003856:	2201      	movs	r2, #1
 8003858:	4798      	blx	r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_Z41__static_initialization_and_destruction_0ii>:
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800387a:	4293      	cmp	r3, r2
 800387c:	d102      	bne.n	8003884 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800387e:	4809      	ldr	r0, [pc, #36]	; (80038a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003880:	f001 fa98 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003894:	4803      	ldr	r0, [pc, #12]	; (80038a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003896:	f001 fa98 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20002670 	.word	0x20002670

080038a8 <_GLOBAL__sub_I__ZN3Cpl4Text7String_C2EPc>:
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038b0:	2001      	movs	r0, #1
 80038b2:	f7ff ffd7 	bl	8003864 <_Z41__static_initialization_and_destruction_0ii>
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_GLOBAL__sub_D__ZN3Cpl4Text7String_C2EPc>:
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7ff ffcf 	bl	8003864 <_Z41__static_initialization_and_destruction_0ii>
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZN3Cpl4Text14isCharInStringEPKcc>:
#include <ctype.h>


////////////////
bool Cpl::Text::isCharInString( const char* charsSet, const char c )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fc fcab 	bl	8000234 <strlen>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d20c      	bcs.n	8003900 <_ZN3Cpl4Text14isCharInStringEPKcc+0x38>
	{
		if ( c == charsSet[i] )
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d101      	bne.n	80038f8 <_ZN3Cpl4Text14isCharInStringEPKcc+0x30>
		{
			return true;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e004      	b.n	8003902 <_ZN3Cpl4Text14isCharInStringEPKcc+0x3a>
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e7eb      	b.n	80038d8 <_ZN3Cpl4Text14isCharInStringEPKcc+0x10>
		}
	}
	return false;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZN3Cpl4Text10stripSpaceEPKc>:


////////////////
const char* Cpl::Text::stripSpace( const char *s )
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	if ( !s )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	{
		return 0;
 8003918:	2300      	movs	r3, #0
 800391a:	e010      	b.n	800393e <_ZN3Cpl4Text10stripSpaceEPKc+0x34>
	}

	while ( *s && isspace( (int) *s ) )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 ffbb 	bl	80088a4 <isspace>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
	{
		s++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3301      	adds	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
	while ( *s && isspace( (int) *s ) )
 800393a:	e7ef      	b.n	800391c <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	}
	return s;
 800393c:	687b      	ldr	r3, [r7, #4]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>:
	return s;
}


const char* Cpl::Text::stripTrailingSpace( const char *s )
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	if ( !s )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x12>
	{
		return 0;
 8003954:	2300      	movs	r3, #0
 8003956:	e01e      	b.n	8003996 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fc fc6b 	bl	8000234 <strlen>
 800395e:	60b8      	str	r0, [r7, #8]
	if ( !len )
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x24>
	{
		return s;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	e015      	b.n	8003996 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3b01      	subs	r3, #1
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d00b      	beq.n	8003994 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 ff8f 	bl	80088a4 <isspace>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
	{
		p--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 8003992:	e7ef      	b.n	8003974 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x2e>
	}
	return p;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZN3Cpl4Text19removeTrailingSpaceEPc>:


void Cpl::Text::removeTrailingSpace( char* s )
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
	if ( !s )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d014      	beq.n	80039d6 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x38>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingSpace( s );
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ffca 	bl	8003946 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>
 80039b2:	60f8      	str	r0, [r7, #12]
	if ( isspace( (int) *ptr ) )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 ff73 	bl	80088a4 <isspace>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x2e>
	{
		*ptr = '\0';
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e005      	b.n	80039d8 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e000      	b.n	80039d8 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
		return;
 80039d6:	bf00      	nop
	}
}
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZN3Cpl4Text10stripCharsEPKcS2_>:


//////////////////////	
const char* Cpl::Text::stripChars( const char *s, const char* charsSet )
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	if ( !s )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x14>
	{
		return 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e01b      	b.n	8003a2a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	if ( !charsSet )
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	{
		return s;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	e016      	b.n	8003a2a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	while ( *s && isCharInString( charsSet, *s ) )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	f7ff ff5c 	bl	80038c8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3e>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4a>
	{
		s++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3301      	adds	r3, #1
 8003a24:	607b      	str	r3, [r7, #4]
	while ( *s && isCharInString( charsSet, *s ) )
 8003a26:	e7e9      	b.n	80039fc <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	}
	return s;
 8003a28:	687b      	ldr	r3, [r7, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>:
	return s;
}


const char* Cpl::Text::stripTrailingChars( const char *s, const char* charsSet )
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
	if ( !s )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x14>
	{
		return 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e029      	b.n	8003a9a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	if ( !charsSet )
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x1e>
	{
		return s;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	e024      	b.n	8003a9a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fc fbef 	bl	8000234 <strlen>
 8003a56:	60b8      	str	r0, [r7, #8]
	if ( !len )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x30>
	{
		return s;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	e01b      	b.n	8003a9a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d00a      	beq.n	8003a8a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f7ff ff24 	bl	80038c8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x5a>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x66>
	{
		p--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 8003a96:	e7e9      	b.n	8003a6c <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x3a>
	}
	return p;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>:


void Cpl::Text::removeTrailingChars( char* s, const char* charsSet )
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	if ( !s || !charsSet )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d016      	beq.n	8003ae6 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingChars( (const char*) s, charsSet );
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ffb9 	bl	8003a32 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>
 8003ac0:	60f8      	str	r0, [r7, #12]
	if ( isCharInString( charsSet, *ptr ) )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7ff fefd 	bl	80038c8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x3a>
	{
		*ptr = '\0';        // trap the case of string is ALL spaces
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e005      	b.n	8003ae8 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e000      	b.n	8003ae8 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
		return;
 8003ae6:	bf00      	nop
	}
}
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZNK3Cpl4Text6StringclEv>:

	/// Returns a Read-only pointer to the "raw" (short-hand for getString())
	inline const char* operator()() const { return getString(); }
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	336c      	adds	r3, #108	; 0x6c
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_ZN3Cpl2Io6Output5writeEc>:
using namespace Cpl::Io;


//////////////////////
bool Output::write( char c )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
    return write( (const void*) &c, sizeof( c ) );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3320      	adds	r3, #32
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1cf9      	adds	r1, r7, #3
 8003b22:	2201      	movs	r2, #1
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_ZN3Cpl2Io6Output5writeEPKc>:


bool Output::write( const char* string )
{
 8003b32:	b590      	push	{r4, r7, lr}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
    return write( string, strlen( string ) );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3320      	adds	r3, #32
 8003b42:	681c      	ldr	r4, [r3, #0]
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7fc fb75 	bl	8000234 <strlen>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6839      	ldr	r1, [r7, #0]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	47a0      	blx	r4
 8003b54:	4603      	mov	r3, r0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <_ZN3Cpl2Io6Output5writeERKNS_4Text6StringE>:


bool Output::write( const Cpl::Text::String& string )
{
 8003b5e:	b5b0      	push	{r4, r5, r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
    return write( string(), string.length() );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	681c      	ldr	r4, [r3, #0]
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f7ff ffbc 	bl	8003aee <_ZNK3Cpl4Text6StringclEv>
 8003b76:	4605      	mov	r5, r0
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3370      	adds	r3, #112	; 0x70
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	4798      	blx	r3
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4629      	mov	r1, r5
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	47a0      	blx	r4
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bdb0      	pop	{r4, r5, r7, pc}

08003b98 <_ZN3Cpl2Io6Output5writeERNS_4Text6StringEPKcz>:


bool Output::write( Cpl::Text::String& formatBuffer, const char* format, ... )
{
 8003b98:	b40c      	push	{r2, r3}
 8003b9a:	b590      	push	{r4, r7, lr}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start( ap, format );
 8003ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba8:	60bb      	str	r3, [r7, #8]
    bool result = vwrite( formatBuffer, format, ap );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	331c      	adds	r3, #28
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	47a0      	blx	r4
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]
    va_end( ap );
    return result;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003bcc:	b002      	add	sp, #8
 8003bce:	4770      	bx	lr

08003bd0 <_ZN3Cpl2Io6Output6vwriteERNS_4Text6StringEPKcSt9__va_list>:


bool Output::vwrite( Cpl::Text::String& formatBuffer, const char* format, va_list ap )
{
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
    formatBuffer.vformat( format, ap );
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	33d8      	adds	r3, #216	; 0xd8
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68b8      	ldr	r0, [r7, #8]
 8003bec:	4798      	blx	r3
    return write( formatBuffer(), formatBuffer.length() );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	68b8      	ldr	r0, [r7, #8]
 8003bf8:	f7ff ff79 	bl	8003aee <_ZNK3Cpl4Text6StringclEv>
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3370      	adds	r3, #112	; 0x70
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b8      	ldr	r0, [r7, #8]
 8003c08:	4798      	blx	r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4629      	mov	r1, r5
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	47a0      	blx	r4
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bdb0      	pop	{r4, r5, r7, pc}

08003c1e <_ZN3Cpl2Io6Output5writeEPKvi>:


bool Output::write( const void* buffer, int numBytes )
{
 8003c1e:	b590      	push	{r4, r7, lr}
 8003c20:	b087      	sub	sp, #28
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
    int  written       = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
    const uint8_t* ptr = (const uint8_t*) buffer;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	617b      	str	r3, [r7, #20]

    // Loop until all data is written
    while ( numBytes )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01b      	beq.n	8003c70 <_ZN3Cpl2Io6Output5writeEPKvi+0x52>
    {
        if ( !write( ptr, numBytes, written ) )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	f107 0310 	add.w	r3, r7, #16
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	47a0      	blx	r4
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <_ZN3Cpl2Io6Output5writeEPKvi+0x3e>
        {
            return false;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e00a      	b.n	8003c72 <_ZN3Cpl2Io6Output5writeEPKvi+0x54>
        }
        numBytes -= written;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	607b      	str	r3, [r7, #4]
        ptr      += written;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	461a      	mov	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    while ( numBytes )
 8003c6e:	e7e0      	b.n	8003c32 <_ZN3Cpl2Io6Output5writeEPKvi+0x14>
    }

    // If I get here, all data has been written
    return true;
 8003c70:	2301      	movs	r3, #1
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
	...

08003c7c <_Z41__static_initialization_and_destruction_0ii>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d102      	bne.n	8003c9c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003c96:	4809      	ldr	r0, [pc, #36]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c98:	f001 f88c 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d102      	bne.n	8003cb2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003cac:	4803      	ldr	r0, [pc, #12]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003cae:	f001 f88c 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20002674 	.word	0x20002674

08003cc0 <_GLOBAL__sub_I__ZN3Cpl2Io6Output5writeEc>:
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7ff ffd7 	bl	8003c7c <_Z41__static_initialization_and_destruction_0ii>
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_GLOBAL__sub_D__ZN3Cpl2Io6Output5writeEc>:
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7ff ffcf 	bl	8003c7c <_Z41__static_initialization_and_destruction_0ii>
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_>:
    return false;
}

///////////////////////////////////////////////////////
ElapsedTime::Precision_T ElapsedTime::deltaPrecision( Precision_T startTime, Precision_T endTime ) noexcept
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
    Precision_T delta;
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7fd fc1b 	bl	8001528 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>

    // Calc delta seconds
    delta.m_seconds = endTime.m_seconds - startTime.m_seconds;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

    // Calc delta milliseconds (trap case of 'borrow')
    delta.m_thousandths = endTime.m_thousandths - startTime.m_thousandths;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	889a      	ldrh	r2, [r3, #4]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	809a      	strh	r2, [r3, #4]
    if ( delta.m_thousandths > MAX_POSITVE_MSEC_ )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	889b      	ldrh	r3, [r3, #4]
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da0b      	bge.n	8003d32 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_+0x52>
    {
        delta.m_seconds--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	1e5a      	subs	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]
        delta.m_thousandths += 1000;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	889b      	ldrh	r3, [r3, #4]
 8003d28:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	809a      	strh	r2, [r3, #4]
    }

    return delta;
 8003d32:	bf00      	nop
}
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZN3Cpl6System8RunnableC1Ev>:
///
using namespace Cpl::System;


/////////////////////////////////////////////////////////////
Runnable::Runnable( void )
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    :m_running( false )
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <_ZN3Cpl6System8RunnableC1Ev+0x24>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	711a      	strb	r2, [r3, #4]
{
}
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	0800a18c 	.word	0x0800a18c

08003d64 <_ZN3Cpl6System8Runnable3runEv>:

void Runnable::run( void )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    // Set my running state
    Locks_::system().lock();
 8003d6c:	f000 fb3a 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fbea 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    m_running = true;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8003d7e:	f000 fb31 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fbf5 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>

    // Run my application code
    appRun();
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3

    // Clear my running state
    Locks_::system().lock();
 8003d96:	f000 fb25 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fbd5 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    m_running = false;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8003da8:	f000 fb1c 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fbe0 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZN3Cpl6System8Runnable9isRunningEv>:

bool Runnable::isRunning( void ) noexcept
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
    bool result = false;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

    Locks_::system().lock();
 8003dc8:	f000 fb0c 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fbbc 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    result = m_running;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	791b      	ldrb	r3, [r3, #4]
 8003dd8:	73fb      	strb	r3, [r7, #15]
    Locks_::system().unlock();
 8003dda:	f000 fb03 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fbc7 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>

    return result;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_Z41__static_initialization_and_destruction_0ii>:
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d102      	bne.n	8003e10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e0a:	4809      	ldr	r0, [pc, #36]	; (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003e0c:	f000 ffd2 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d107      	bne.n	8003e26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d102      	bne.n	8003e26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003e22:	f000 ffd2 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20002678 	.word	0x20002678

08003e34 <_GLOBAL__sub_I__ZN3Cpl6System8RunnableC2Ev>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7ff ffd7 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_GLOBAL__sub_D__ZN3Cpl6System8RunnableC2Ev>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7ff ffcf 	bl	8003df0 <_Z41__static_initialization_and_destruction_0ii>
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZNK3Cpl4Text6StringixEi>:

	/// Returns the specified character. If n is out-bounds, then '\0' is returned
	inline char operator[] ( int i ) const { return i<0 || i>length() ? '\0' : getString()[i]; }
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db14      	blt.n	8003e8e <_ZNK3Cpl4Text6StringixEi+0x3a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3370      	adds	r3, #112	; 0x70
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	4602      	mov	r2, r0
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	dc0a      	bgt.n	8003e8e <_ZNK3Cpl4Text6StringixEi+0x3a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	336c      	adds	r3, #108	; 0x6c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	4602      	mov	r2, r0
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	e000      	b.n	8003e90 <_ZNK3Cpl4Text6StringixEi+0x3c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_>:
////////////////////////////////////////////////////////////////////////
// NOTE The following two methods MUST be called in order AND always
//      as pair!
//
void Trace::traceLocation_( const char* section, const char* filename, int linenum, const char* funcname )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
    // Get the current tracing level parameter
    Locks_::tracing().lock();
 8003ea6:	f000 faa7 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fb4d 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    Trace::InfoLevel_T infoLevel = infoLevel_;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_+0x5c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	75fb      	strb	r3, [r7, #23]
    Locks_::tracing().unlock();
 8003eb8:	f000 fa9e 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fb58 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>

    // Serialize the output
    Locks_::tracingOutput().lock();
 8003ec4:	f000 faac 	bl	8004420 <_ZN3Cpl6System6Locks_13tracingOutputEv>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb3e 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    buffer_ = OPTION_CPL_SYSTEM_TRACE_PREFIX_STRING;
 8003ed0:	4909      	ldr	r1, [pc, #36]	; (8003ef8 <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_+0x60>)
 8003ed2:	480a      	ldr	r0, [pc, #40]	; (8003efc <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_+0x64>)
 8003ed4:	f7ff fc4a 	bl	800376c <_ZN3Cpl4Text7String_aSEPKc>
    TracePlatform_::appendInfo( buffer_, infoLevel, section, filename, linenum, funcname );
 8003ed8:	7df9      	ldrb	r1, [r7, #23]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4805      	ldr	r0, [pc, #20]	; (8003efc <_ZN3Cpl6System5Trace14traceLocation_EPKcS3_iS3_+0x64>)
 8003ee8:	f003 ff04 	bl	8007cf4 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_>
}
 8003eec:	bf00      	nop
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000005 	.word	0x20000005
 8003ef8:	08009828 	.word	0x08009828
 8003efc:	20002910 	.word	0x20002910

08003f00 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz>:


void Trace::traceUserMsg_( const char* format, ... )
{
 8003f00:	b40f      	push	{r0, r1, r2, r3}
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
    va_list ap;
    va_start( ap, format );
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	607b      	str	r3, [r7, #4]
    buffer_.vformatAppend( format, ap );
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	4812      	ldr	r0, [pc, #72]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f14:	f7ff f900 	bl	8003118 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>
    va_end( ap );

    buffer_ += OPTION_CPL_SYSTEM_TRACE_SUFFIX_STRING;
 8003f18:	4911      	ldr	r1, [pc, #68]	; (8003f60 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x60>)
 8003f1a:	4810      	ldr	r0, [pc, #64]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f1c:	f7ff fc73 	bl	8003806 <_ZN3Cpl4Text7String_pLEPKc>

    // Ensure that the suffix is ALWAYS valid when appended (at the expense of truncating the user msg)
    if ( buffer_.truncated() )
 8003f20:	480e      	ldr	r0, [pc, #56]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f22:	f7fe fe99 	bl	8002c58 <_ZNK3Cpl4Text7String_9truncatedEv>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x3c>
    {
        buffer_.trimRight( strlen( OPTION_CPL_SYSTEM_TRACE_SUFFIX_STRING ) );
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	480b      	ldr	r0, [pc, #44]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f30:	f7ff fb0a 	bl	8003548 <_ZN3Cpl4Text7String_9trimRightEi>
        buffer_ += OPTION_CPL_SYSTEM_TRACE_SUFFIX_STRING;
 8003f34:	490a      	ldr	r1, [pc, #40]	; (8003f60 <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x60>)
 8003f36:	4809      	ldr	r0, [pc, #36]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f38:	f7ff fc65 	bl	8003806 <_ZN3Cpl4Text7String_pLEPKc>
    }

    TracePlatform_::output( buffer_ );
 8003f3c:	4807      	ldr	r0, [pc, #28]	; (8003f5c <_ZN3Cpl6System5Trace13traceUserMsg_EPKcz+0x5c>)
 8003f3e:	f003 febd 	bl	8007cbc <_ZN3Cpl6System14TracePlatform_6outputERNS_4Text6StringE>
    Locks_::tracingOutput().unlock();
 8003f42:	f000 fa6d 	bl	8004420 <_ZN3Cpl6System6Locks_13tracingOutputEv>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fb13 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f58:	b004      	add	sp, #16
 8003f5a:	4770      	bx	lr
 8003f5c:	20002910 	.word	0x20002910
 8003f60:	0800982c 	.word	0x0800982c

08003f64 <_ZN3Cpl6System5Trace7enable_Ev>:



////////////////////////////////////////////////////////////////////////
void Trace::enable_( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
    Locks_::tracing().lock();
 8003f68:	f000 fa46 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 faec 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    enabled_ = true;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <_ZN3Cpl6System5Trace7enable_Ev+0x28>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
    Locks_::tracing().unlock();
 8003f7a:	f000 fa3d 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 faf7 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000004 	.word	0x20000004

08003f90 <_ZN3Cpl6System5Trace13setInfoLevel_ENS1_11InfoLevel_TE>:
    return result;
}


Trace::InfoLevel_T Trace::setInfoLevel_( Trace::InfoLevel_T newLevel )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
    Locks_::tracing().lock();
 8003f9a:	f000 fa2d 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 fad3 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    InfoLevel_T previous = infoLevel_;
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <_ZN3Cpl6System5Trace13setInfoLevel_ENS1_11InfoLevel_TE+0x38>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	73fb      	strb	r3, [r7, #15]
    infoLevel_           = newLevel;
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <_ZN3Cpl6System5Trace13setInfoLevel_ENS1_11InfoLevel_TE+0x38>)
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	7013      	strb	r3, [r2, #0]
    Locks_::tracing().unlock();
 8003fb2:	f000 fa21 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fadb 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
    return previous;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000005 	.word	0x20000005

08003fcc <_ZN3Cpl6System5Trace14enableSection_EPKc>:
    return current;
}


bool Trace::enableSection_( const char* sectionToEnable )
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    bool result = false;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
    if ( sectionToEnable )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d041      	beq.n	8004062 <_ZN3Cpl6System5Trace14enableSection_EPKc+0x96>
    {
        Locks_::tracing().lock();
 8003fde:	f000 fa0b 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fab1 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>

        int  i;
        for ( i=0; i < OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS; i++ )
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b07      	cmp	r3, #7
 8003ff2:	dc30      	bgt.n	8004056 <_ZN3Cpl6System5Trace14enableSection_EPKc+0x8a>
        {
            if ( activeSections_[i].isEmpty() )
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	; (800406c <_ZN3Cpl6System5Trace14enableSection_EPKc+0xa0>)
 8004000:	1899      	adds	r1, r3, r2
 8004002:	481a      	ldr	r0, [pc, #104]	; (800406c <_ZN3Cpl6System5Trace14enableSection_EPKc+0xa0>)
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4403      	add	r3, r0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3378      	adds	r3, #120	; 0x78
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4608      	mov	r0, r1
 8004018:	4798      	blx	r3
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d016      	beq.n	800404e <_ZN3Cpl6System5Trace14enableSection_EPKc+0x82>
            {
                activeSections_[i] = sectionToEnable;
 8004020:	4912      	ldr	r1, [pc, #72]	; (800406c <_ZN3Cpl6System5Trace14enableSection_EPKc+0xa0>)
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	440b      	add	r3, r1
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	681c      	ldr	r4, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	4a0b      	ldr	r2, [pc, #44]	; (800406c <_ZN3Cpl6System5Trace14enableSection_EPKc+0xa0>)
 8004040:	4413      	add	r3, r2
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	47a0      	blx	r4
                result            = true;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
                break;
 800404c:	e003      	b.n	8004056 <_ZN3Cpl6System5Trace14enableSection_EPKc+0x8a>
        for ( i=0; i < OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS; i++ )
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3301      	adds	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	e7cb      	b.n	8003fee <_ZN3Cpl6System5Trace14enableSection_EPKc+0x22>
            }
        }

        Locks_::tracing().unlock();
 8004056:	f000 f9cf 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 800405a:	4603      	mov	r3, r0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fa89 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
    }

    return result;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}
 800406c:	20002680 	.word	0x20002680

08004070 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc>:
    Locks_::tracing().unlock();
}


bool Trace::isSectionEnabled_( const char* section )
{
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    bool result   = false;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
    Locks_::tracing().lock();
 800407c:	f000 f9bc 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8004080:	4603      	mov	r3, r0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fa62 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    if ( enabled_ )
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x104>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d065      	beq.n	800415c <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xec>
    {
        int i;
        for ( i=0; i < OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS; i++ )
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b07      	cmp	r3, #7
 8004098:	dc60      	bgt.n	800415c <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xec>
        {
            if ( activeSections_[i][0] != '*' )
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	4a34      	ldr	r2, [pc, #208]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 80040a6:	4413      	add	r3, r2
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fed2 	bl	8003e54 <_ZNK3Cpl4Text6StringixEi>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b2a      	cmp	r3, #42	; 0x2a
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d019      	beq.n	80040f4 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x84>
            {
                if ( activeSections_[i] == section )
 80040c0:	492d      	ldr	r1, [pc, #180]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3380      	adds	r3, #128	; 0x80
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 80040e0:	4413      	add	r3, r2
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	47a0      	blx	r4
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d032      	beq.n	8004154 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xe4>
                {
                    result = true;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
                    break;
 80040f2:	e033      	b.n	800415c <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xec>
                }
            }
            else
            {
                if ( activeSections_[i].isEqualSubstring( 1, activeSections_[i].length() - 1, section ) )
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 8004100:	189d      	adds	r5, r3, r2
 8004102:	491d      	ldr	r1, [pc, #116]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	440b      	add	r3, r1
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	33a0      	adds	r3, #160	; 0xa0
 8004114:	681c      	ldr	r4, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 8004122:	1899      	adds	r1, r3, r2
 8004124:	4814      	ldr	r0, [pc, #80]	; (8004178 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x108>)
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	4403      	add	r3, r0
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3370      	adds	r3, #112	; 0x70
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4608      	mov	r0, r1
 800413a:	4798      	blx	r3
 800413c:	4603      	mov	r3, r0
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2101      	movs	r1, #1
 8004144:	4628      	mov	r0, r5
 8004146:	47a0      	blx	r4
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xe4>
                {
                    result = true;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
                    break;
 8004152:	e003      	b.n	800415c <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0xec>
        for ( i=0; i < OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS; i++ )
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	3301      	adds	r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	e79b      	b.n	8004094 <_ZN3Cpl6System5Trace17isSectionEnabled_EPKc+0x24>
                }
            }
        }
    }

    Locks_::tracing().unlock();
 800415c:	f000 f94c 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 8004160:	4603      	mov	r3, r0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fa06 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
    return result;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bdb0      	pop	{r4, r5, r7, pc}
 8004172:	bf00      	nop
 8004174:	20000004 	.word	0x20000004
 8004178:	20002680 	.word	0x20002680

0800417c <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc>:
    Locks_::tracing().unlock();
}


bool Trace::passedThreadFilter_( const char* threadNameToTest )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    bool result = true;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
    Locks_::tracing().lock();
 8004188:	f000 f936 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 800418c:	4603      	mov	r3, r0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f9dc 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>

    if ( threadFilterEnabled_ )
 8004194:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x74>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01e      	beq.n	80041da <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x5e>
    {
        int i;
        for ( i=0, result=false; i < NUM_THREAD_FILTERS_; i++ )
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	dc17      	bgt.n	80041da <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x5e>
        {
            if ( threadFilters_[i] && strcmp( threadNameToTest, threadFilters_[i] ) == 0 )
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x78>)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x56>
 80041b6:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x78>)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc f82d 	bl	8000220 <strcmp>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x56>
            {
                result = true;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
                break;
 80041d0:	e003      	b.n	80041da <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x5e>
        for ( i=0, result=false; i < NUM_THREAD_FILTERS_; i++ )
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	e7e4      	b.n	80041a4 <_ZN3Cpl6System5Trace19passedThreadFilter_EPKc+0x28>
            }
        }
    }

    Locks_::tracing().unlock();
 80041da:	f000 f90d 	bl	80043f8 <_ZN3Cpl6System6Locks_7tracingEv>
 80041de:	4603      	mov	r3, r0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f9c7 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
    return result;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2000267d 	.word	0x2000267d
 80041f4:	20002900 	.word	0x20002900

080041f8 <_ZN3Cpl4Text7FStringILi63EEC1EPKc>:
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 0210 	add.w	r2, r3, #16
 800420a:	233f      	movs	r3, #63	; 0x3f
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	f7fe fa3b 	bl	8002688 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <_ZN3Cpl4Text7FStringILi63EEC1EPKc+0x2c>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	0800a2c8 	.word	0x0800a2c8

08004228 <_ZN3Cpl4Text7FStringILi511EEC1EPKc>:
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 0210 	add.w	r2, r3, #16
 800423a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	f7fe fa22 	bl	8002688 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8004244:	4a03      	ldr	r2, [pc, #12]	; (8004254 <_ZN3Cpl4Text7FStringILi511EEC1EPKc+0x2c>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0800a1b0 	.word	0x0800a1b0

08004258 <_ZN3Cpl4Text7FStringILi511EED1Ev>:
class FString : public FString_
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <_ZN3Cpl4Text7FStringILi511EED1Ev+0x20>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fee5 	bl	8002038 <_ZN3Cpl4Text8FString_D1Ev>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	0800a1b0 	.word	0x0800a1b0

0800427c <_ZN3Cpl4Text7FStringILi511EED0Ev>:
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ffe7 	bl	8004258 <_ZN3Cpl4Text7FStringILi511EED1Ev>
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f005 f896 	bl	80093bc <_ZdlPv>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <_ZN3Cpl4Text7FStringILi63EED1Ev>:
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	4a05      	ldr	r2, [pc, #20]	; (80042bc <_ZN3Cpl4Text7FStringILi63EED1Ev+0x20>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd fec3 	bl	8002038 <_ZN3Cpl4Text8FString_D1Ev>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	0800a2c8 	.word	0x0800a2c8

080042c0 <_ZN3Cpl4Text7FStringILi63EED0Ev>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ffe7 	bl	800429c <_ZN3Cpl4Text7FStringILi63EED1Ev>
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f005 f874 	bl	80093bc <_ZdlPv>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <_Z41__static_initialization_and_destruction_0ii>:
        }
    }

    Locks_::tracing().unlock();
    return count;
}
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d117      	bne.n	8004320 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d112      	bne.n	8004320 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80042fa:	4817      	ldr	r0, [pc, #92]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80042fc:	f000 fd5a 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Section_T          activeSections_[OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS];
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004302:	2407      	movs	r4, #7
 8004304:	461d      	mov	r5, r3
 8004306:	2c00      	cmp	r4, #0
 8004308:	db06      	blt.n	8004318 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800430a:	4915      	ldr	r1, [pc, #84]	; (8004360 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800430c:	4628      	mov	r0, r5
 800430e:	f7ff ff73 	bl	80041f8 <_ZN3Cpl4Text7FStringILi63EEC1EPKc>
 8004312:	3550      	adds	r5, #80	; 0x50
 8004314:	3c01      	subs	r4, #1
 8004316:	e7f6      	b.n	8004306 <_Z41__static_initialization_and_destruction_0ii+0x26>
static Cpl::Text::FString<OPTION_CPL_SYSTEM_TRACE_MAX_BUFFER> buffer_;
 8004318:	4911      	ldr	r1, [pc, #68]	; (8004360 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800431a:	4812      	ldr	r0, [pc, #72]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800431c:	f7ff ff84 	bl	8004228 <_ZN3Cpl4Text7FStringILi511EEC1EPKc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d114      	bne.n	8004350 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432c:	4293      	cmp	r3, r2
 800432e:	d10f      	bne.n	8004350 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8004330:	480c      	ldr	r0, [pc, #48]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004332:	f7ff ff91 	bl	8004258 <_ZN3Cpl4Text7FStringILi511EED1Ev>
static Section_T          activeSections_[OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS];
 8004336:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800433a:	429c      	cmp	r4, r3
 800433c:	d005      	beq.n	800434a <_Z41__static_initialization_and_destruction_0ii+0x6a>
 800433e:	3c50      	subs	r4, #80	; 0x50
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4620      	mov	r0, r4
 8004346:	4798      	blx	r3
 8004348:	e7f6      	b.n	8004338 <_Z41__static_initialization_and_destruction_0ii+0x58>
 800434a:	4803      	ldr	r0, [pc, #12]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800434c:	f000 fd3d 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bdb0      	pop	{r4, r5, r7, pc}
 8004358:	2000267c 	.word	0x2000267c
 800435c:	20002680 	.word	0x20002680
 8004360:	08009830 	.word	0x08009830
 8004364:	20002910 	.word	0x20002910
 8004368:	20002900 	.word	0x20002900

0800436c <_GLOBAL__sub_I__ZN3Cpl6System5TraceC2EPKciS3_S3_S3_>:
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
 8004370:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004374:	2001      	movs	r0, #1
 8004376:	f7ff ffb3 	bl	80042e0 <_Z41__static_initialization_and_destruction_0ii>
 800437a:	bd80      	pop	{r7, pc}

0800437c <_GLOBAL__sub_D__ZN3Cpl6System5TraceC2EPKciS3_S3_S3_>:
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
 8004380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004384:	2000      	movs	r0, #0
 8004386:	f7ff ffab 	bl	80042e0 <_Z41__static_initialization_and_destruction_0ii>
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN3Cpl6System3Api10initializeEv>:

bool cpl_system_thread_freertos_schedulerStarted_ = false;

////////////////////////////////////////////////////////////////////////////////
void Api::initialize( void )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
    // Init the Colony.Core sub-systems
    StartupHook_::notifyStartupClients();
 8004390:	f004 f8ac 	bl	80084ec <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>
}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}

08004398 <_ZN3Cpl6System3Api16enableSchedulingEv>:


void Api::enableScheduling( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
    // This method should never return
    cpl_system_thread_freertos_schedulerStarted_ = true;            // Manually track the scheduler state since xTaskGetSchedulerState() is return 'taskSCHEDULER_RUNNING' BEFORE I have started the scheduler!!!!
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <_ZN3Cpl6System3Api16enableSchedulingEv+0x18>)
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
    vTaskStartScheduler();
 80043a2:	f002 fb61 	bl	8006a68 <vTaskStartScheduler>

    // If I get here something is wrong!!
    Bsp_Api_disableIrqs();
 80043a6:	f003 fb2f 	bl	8007a08 <vPortEnterCritical>
    for ( ;;)
    {
        Bsp_Api_nop();
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <_ZN3Cpl6System3Api16enableSchedulingEv+0x12>
 80043ae:	bf00      	nop
 80043b0:	20002b34 	.word	0x20002b34

080043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>:
    }
}

bool Api::isSchedulingEnabled( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
    return cpl_system_thread_freertos_schedulerStarted_;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <_ZN3Cpl6System3Api19isSchedulingEnabledEv+0x14>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20002b34 	.word	0x20002b34

080043cc <_ZN3Cpl6System3Api5sleepEm>:

void Api::sleep( unsigned long milliseconds ) noexcept
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    vTaskDelay( milliseconds * portTICK_PERIOD_MS );
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f002 fcbb 	bl	8006d50 <vTaskDelay>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <_ZN3Cpl6System6Locks_6systemEv>:
    xTaskResumeAll();
}

////////////////////////////////////////////////////////////////////////////////
Mutex& Locks_::system( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
    return systemMutex_;
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <_ZN3Cpl6System6Locks_6systemEv+0x10>)
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	20002b24 	.word	0x20002b24

080043f8 <_ZN3Cpl6System6Locks_7tracingEv>:


Mutex& Locks_::tracing( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
    return tracingMutex_;
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <_ZN3Cpl6System6Locks_7tracingEv+0x10>)
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	20002b28 	.word	0x20002b28

0800440c <_ZN3Cpl6System6Locks_8sysListsEv>:

Mutex& Locks_::sysLists( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
    return sysList_;
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <_ZN3Cpl6System6Locks_8sysListsEv+0x10>)
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	20002b30 	.word	0x20002b30

08004420 <_ZN3Cpl6System6Locks_13tracingOutputEv>:

Mutex& Locks_::tracingOutput( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
    return tracingOutputMutex_;
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <_ZN3Cpl6System6Locks_13tracingOutputEv+0x10>)
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20002b2c 	.word	0x20002b2c

08004434 <_Z41__static_initialization_and_destruction_0ii>:
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d113      	bne.n	800446c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800444a:	4293      	cmp	r3, r2
 800444c:	d10e      	bne.n	800446c <_Z41__static_initialization_and_destruction_0ii+0x38>
 800444e:	4815      	ldr	r0, [pc, #84]	; (80044a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004450:	f000 fcb0 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Mutex systemMutex_;
 8004454:	4814      	ldr	r0, [pc, #80]	; (80044a8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004456:	f000 f853 	bl	8004500 <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingMutex_;
 800445a:	4814      	ldr	r0, [pc, #80]	; (80044ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800445c:	f000 f850 	bl	8004500 <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingOutputMutex_;
 8004460:	4813      	ldr	r0, [pc, #76]	; (80044b0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004462:	f000 f84d 	bl	8004500 <_ZN3Cpl6System5MutexC1Ev>
static Mutex sysList_;
 8004466:	4813      	ldr	r0, [pc, #76]	; (80044b4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004468:	f000 f84a 	bl	8004500 <_ZN3Cpl6System5MutexC1Ev>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d113      	bne.n	800449a <_Z41__static_initialization_and_destruction_0ii+0x66>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004478:	4293      	cmp	r3, r2
 800447a:	d10e      	bne.n	800449a <_Z41__static_initialization_and_destruction_0ii+0x66>
 800447c:	480d      	ldr	r0, [pc, #52]	; (80044b4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800447e:	f000 f857 	bl	8004530 <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingOutputMutex_;
 8004482:	480b      	ldr	r0, [pc, #44]	; (80044b0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004484:	f000 f854 	bl	8004530 <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingMutex_;
 8004488:	4808      	ldr	r0, [pc, #32]	; (80044ac <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800448a:	f000 f851 	bl	8004530 <_ZN3Cpl6System5MutexD1Ev>
static Mutex systemMutex_;
 800448e:	4806      	ldr	r0, [pc, #24]	; (80044a8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004490:	f000 f84e 	bl	8004530 <_ZN3Cpl6System5MutexD1Ev>
 8004494:	4803      	ldr	r0, [pc, #12]	; (80044a4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004496:	f000 fc98 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20002b20 	.word	0x20002b20
 80044a8:	20002b24 	.word	0x20002b24
 80044ac:	20002b28 	.word	0x20002b28
 80044b0:	20002b2c 	.word	0x20002b2c
 80044b4:	20002b30 	.word	0x20002b30

080044b8 <_GLOBAL__sub_I_cpl_system_thread_freertos_schedulerStarted_>:
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7ff ffb7 	bl	8004434 <_Z41__static_initialization_and_destruction_0ii>
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_GLOBAL__sub_D_cpl_system_thread_freertos_schedulerStarted_>:
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7ff ffaf 	bl	8004434 <_Z41__static_initialization_and_destruction_0ii>
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>:
using namespace Cpl::System;

///////////////////////////////////////////////////////////////
// Simulated time NOT supported
unsigned long ElapsedTime::milliseconds( void ) noexcept
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
    return millisecondsInRealTime();
 80044dc:	f003 fee6 	bl	80082ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_ZN3Cpl6System11ElapsedTime9precisionEv>:
{
    return secondsInRealTime();
}

ElapsedTime::Precision_T ElapsedTime::precision( void ) noexcept
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
    return precisionInRealTime();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f003 ff21 	bl	8008338 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv>
}
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <_ZN3Cpl6System5MutexC1Ev>:
#include "Cpl/System/FatalError.h"



//////////////////////////////////////////////////////////////////////////////
Cpl::System::Mutex::Mutex()
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
{
    m_mutex = xSemaphoreCreateRecursiveMutex();
 8004508:	2004      	movs	r0, #4
 800450a:	f001 fe0d 	bl	8006128 <xQueueCreateMutex>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
    if ( m_mutex == NULL )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <_ZN3Cpl6System5MutexC1Ev+0x22>
    {
        Cpl::System::FatalError::logf( "Cpl:System::Mutex::Mutex().  Failed to create mutex" );
 800451c:	4803      	ldr	r0, [pc, #12]	; (800452c <_ZN3Cpl6System5MutexC1Ev+0x2c>)
 800451e:	f7fd fd29 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	08009834 	.word	0x08009834

08004530 <_ZN3Cpl6System5MutexD1Ev>:

Cpl::System::Mutex::~Mutex()
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete( m_mutex );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f002 f819 	bl	8006574 <vQueueDelete>
}
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_ZN3Cpl6System5Mutex4lockEv>:


void Cpl::System::Mutex::lock( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    // Do nothing if the scheduler has not yet been started, i.e, if there is only 
    // one thread running -->then by definition I have mutual exclusion. It also allows
    // an application to lock a mutex BEFORE the scheduler has been started (i am looking
    // at you Cpl::System::Trace engine).
    if ( Cpl::System::Api::isSchedulingEnabled() )
 8004554:	f7ff ff2e 	bl	80043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <_ZN3Cpl6System5Mutex4lockEv+0x20>
    {
        xSemaphoreTakeRecursive( m_mutex, portMAX_DELAY );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f04f 31ff 	mov.w	r1, #4294967295
 8004566:	4618      	mov	r0, r3
 8004568:	f001 ffbf 	bl	80064ea <xQueueTakeMutexRecursive>
    }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZN3Cpl6System5Mutex6unlockEv>:


void Cpl::System::Mutex::unlock( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    if ( Cpl::System::Api::isSchedulingEnabled() )
 800457c:	f7ff ff1a 	bl	80043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <_ZN3Cpl6System5Mutex6unlockEv+0x1c>
    {
        xSemaphoreGiveRecursive( m_mutex );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fdae 	bl	80060ec <xQueueGiveMutexRecursive>
    }
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <_ZL21shutdown_application_i>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
static int shutdown_application_( int exit_code )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
    // Check if the scheduler has even started (or is still running)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045a0:	f002 fd30 	bl	8007004 <xTaskGetSchedulerState>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <_ZL21shutdown_application_i+0x22>
    {
        vTaskEndScheduler(); // Note: This only works a very few platforms (at this time only x86 Real Mode PC)!
 80045b4:	f002 fa9e 	bl	8006af4 <vTaskEndScheduler>
 80045b8:	e002      	b.n	80045c0 <_ZL21shutdown_application_i+0x28>
    }

    // If the scheduler is not running (typical case is it hasn't been started) -->then lock up in forever loop
    else
    {
        Bsp_Api_disableIrqs();
 80045ba:	f003 fa25 	bl	8007a08 <vPortEnterCritical>
        for ( ;;);
 80045be:	e7fe      	b.n	80045be <_ZL21shutdown_application_i+0x26>
    }

    return exit_code;
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZN3Cpl6System8Shutdown7failureEi>:
{
    return shutdown_application_( notifyShutdownHandlers_( OPTION_CPL_SYSTEM_SHUTDOWN_SUCCESS_ERROR_CODE ) );
}

int Shutdown::failure( int exit_code )
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
    return shutdown_application_( notifyShutdownHandlers_( exit_code ) );
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f004 f88c 	bl	80086f0 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>
 80045d8:	4603      	mov	r3, r0
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ffdc 	bl	8004598 <_ZL21shutdown_application_i>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <_ZN3Cpl6System8SignableD1Ev>:
 */
class Signable : public Cpl::Container::Item
{
public:
    /// Virtual destructor
    virtual ~Signable() {};
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <_ZN3Cpl6System8SignableD1Ev+0x1c>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	0800a550 	.word	0x0800a550

0800460c <_ZN3Cpl6System8SignableD0Ev>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ffe9 	bl	80045ec <_ZN3Cpl6System8SignableD1Ev>
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f004 fece 	bl	80093bc <_ZdlPv>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <_ZN3Cpl6System6ThreadD1Ev>:
 */
class Thread : public Signable
{
public:
    /// Virtual destructor.
    virtual ~Thread() {};
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	4a05      	ldr	r2, [pc, #20]	; (800464c <_ZN3Cpl6System6ThreadD1Ev+0x20>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ffd5 	bl	80045ec <_ZN3Cpl6System8SignableD1Ev>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	0800a524 	.word	0x0800a524

08004650 <_ZN3Cpl6System6ThreadD0Ev>:
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ffe7 	bl	800462c <_ZN3Cpl6System6ThreadD1Ev>
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f004 feac 	bl	80093bc <_ZdlPv>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <_ZN3Cpl6System8SignableC1Ev>:
class Signable : public Cpl::Container::Item
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fd73 	bl	8002168 <_ZN3Cpl9Container4ItemC1Ev>
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <_ZN3Cpl6System8SignableC1Ev+0x24>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	0800a550 	.word	0x0800a550

08004698 <_ZN3Cpl6System6ThreadC1Ev>:
class Thread : public Signable
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ffe4 	bl	8004670 <_ZN3Cpl6System8SignableC1Ev>
 80046a8:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <_ZN3Cpl6System6ThreadC1Ev+0x20>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	0800a524 	.word	0x0800a524

080046bc <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>:
    // Add the native thread to the list of active threads
    addThreadToActiveList_( *this );
}


Thread::Thread( Cpl::System::Runnable&   runnable,
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
                int                      priority,
                unsigned                 stackSize
)
    :m_runnable( runnable ),
    m_name( name ),
    m_threadHandle( NULL )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ffe3 	bl	8004698 <_ZN3Cpl6System6ThreadC1Ev>
 80046d2:	4a21      	ldr	r2, [pc, #132]	; (8004758 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x9c>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3310      	adds	r3, #16
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f9cb 	bl	8004a80 <_ZN3Cpl4Text7FStringILi16EEC1EPKc>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	635a      	str	r2, [r3, #52]	; 0x34
{
    // Initialize by TLS storage for this thread
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b07      	cmp	r3, #7
 80046f8:	d809      	bhi.n	800470e <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x52>
    {
        m_tlsArray[i]   = 0;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	320e      	adds	r2, #14
 8004700:	2100      	movs	r1, #0
 8004702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3301      	adds	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e7f2      	b.n	80046f4 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x38>
    }

    // Calculate stack size in terms of 'depth' (not bytes)
    if ( stackSize == 0 )
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d103      	bne.n	800471c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x60>
    {
        stackSize = OPTION_CPL_SYSTEM_FREERTOS_DEFAULT_STACK_SIZE >> ( sizeof( StackType_t ) / 2 );
 8004714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e002      	b.n	8004722 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x66>
    }
    else
    {
        stackSize = stackSize >> ( sizeof( StackType_t ) / 2 );
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	623b      	str	r3, [r7, #32]
    }


    // Create the thread
    xTaskCreate( &entryPoint, name, stackSize, this, priority, &m_threadHandle );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	b299      	uxth	r1, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	3234      	adds	r2, #52	; 0x34
 800472c:	9201      	str	r2, [sp, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	460a      	mov	r2, r1
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4809      	ldr	r0, [pc, #36]	; (800475c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa0>)
 8004738:	f002 f8ff 	bl	800693a <xTaskCreate>
    if ( m_threadHandle == NULL )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x90>
    {
        Cpl::System::FatalError::logf( "FreeRTOS::Thread::Thread().  Failed to create thread %s.", name );
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4806      	ldr	r0, [pc, #24]	; (8004760 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa4>)
 8004748:	f7fd fc14 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	0800a3e0 	.word	0x0800a3e0
 800475c:	080048d1 	.word	0x080048d1
 8004760:	08009978 	.word	0x08009978

08004764 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>:

Thread::~Thread()
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x7c>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
    //       let the thread "run-to-completion", i.e. have the run() method
    //       of the associated Runnable object complete.  If you do
    //       need to kill a thread - be dang sure that it is state such
    //       that it is ok to die - i.e. it has released all of its acquired
    //       resources: mutexes, semaphores, file handles, etc.
    if ( m_runnable.isRunning() )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3310      	adds	r3, #16
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01c      	beq.n	80047c4 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
    {
        // Ask the runnable object nicely to stop 
        m_runnable.pleaseStop();
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4610      	mov	r0, r2
 800479a:	4798      	blx	r3
        Cpl::System::Api::sleep( 100 );     // Yield execution and allow time for the thread to actually exit.
 800479c:	2064      	movs	r0, #100	; 0x64
 800479e:	f7ff fe15 	bl	80043cc <_ZN3Cpl6System3Api5sleepEm>

        // Just to make sure: Brute the force the thread to end - IF it is still running
        // NOTE: This will NOT free any resources associated with the thread including the stack!
        if ( m_runnable.isRunning() )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3310      	adds	r3, #16
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
        {
            vTaskDelete( m_threadHandle );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 f8e8 	bl	8006994 <vTaskDelete>
Thread::~Thread()
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3310      	adds	r3, #16
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fa01 	bl	8004bd0 <_ZN3Cpl4Text7FStringILi16EED1Ev>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff2b 	bl	800462c <_ZN3Cpl6System6ThreadD1Ev>
        }
    }
}
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	0800a3e0 	.word	0x0800a3e0

080047e4 <_ZN3Cpl6System8FreeRTOS6ThreadD0Ev>:
Thread::~Thread()
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
}
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffb9 	bl	8004764 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f004 fde2 	bl	80093bc <_ZdlPv>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_ZN3Cpl6System8FreeRTOS6Thread6signalEv>:


//////////////////////////////
int Thread::signal() noexcept
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
    xTaskNotifyGive( m_threadHandle );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800480e:	2300      	movs	r3, #0
 8004810:	2202      	movs	r2, #2
 8004812:	2100      	movs	r1, #0
 8004814:	f002 fd3a 	bl	800728c <xTaskGenericNotify>
    return 0; // Always return success
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <_ZN3Cpl6System8FreeRTOS6Thread9su_signalEv>:
/** NOTE: This method returns the 'higherPriorityTaskWoken' instead of the
          defined 'return zero on success' semantics.  This is to overcome
          the oddities of FreeRTOS.
 */
int Thread::su_signal() noexcept
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR( m_threadHandle, &higherPriorityTaskWoken );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	f107 020c 	add.w	r2, r7, #12
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f002 fd9d 	bl	8007378 <vTaskNotifyGiveFromISR>
    return higherPriorityTaskWoken;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <_ZN3Cpl6System8FreeRTOS6Thread7getNameEv>:



const char* Thread::getName() noexcept
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
    return m_name;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3310      	adds	r3, #16
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f975 	bl	8002b44 <_ZNK3Cpl4Text6StringcvPKcEv>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <_ZN3Cpl6System8FreeRTOS6Thread5getIdEv>:

size_t Thread::getId() noexcept
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    return (size_t) m_threadHandle;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_ZN3Cpl6System8FreeRTOS6Thread9isRunningEv>:

bool Thread::isRunning() noexcept
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    return m_runnable.isRunning();
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3310      	adds	r3, #16
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4610      	mov	r0, r2
 8004894:	4798      	blx	r3
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <_ZN3Cpl6System8FreeRTOS6Thread15getNativeHandleEv>:

Cpl_System_Thread_NativeHdl_T Thread::getNativeHandle( void ) noexcept
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    return m_threadHandle;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_ZN3Cpl6System8FreeRTOS6Thread11getRunnableEv>:

Cpl::System::Runnable& Thread::getRunnable( void ) noexcept
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    return m_runnable;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv>:

//////////////////////////////
void Thread::entryPoint( void* data )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    // Convert data arg to a pointer to a Thread Object
    Thread* myThreadPtr = (Thread*) data;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60fb      	str	r3, [r7, #12]

    // Plant the address of my TLS array into FreeRTOS's TCB
    vTaskSetApplicationTaskTag( myThreadPtr->m_threadHandle, (TaskHookFunction_t) myThreadPtr );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f002 fa57 	bl	8006d98 <vTaskSetApplicationTaskTag>


    // Go Execute the "Runnable" object
    addThreadToActiveList_( *myThreadPtr );
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f86a 	bl	80049c4 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>
    myThreadPtr->m_runnable.setThreadOfExecution_( myThreadPtr );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3318      	adds	r3, #24
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
    myThreadPtr->m_runnable.run();
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4610      	mov	r0, r2
 8004914:	4798      	blx	r3

    // Remove the thread from the list of active threads
    removeThreadFromActiveList_( *myThreadPtr );
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f870 	bl	80049fc <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>

    // Terminate myself
    vTaskDelete( NULL );
 800491c:	2000      	movs	r0, #0
 800491e:	f002 f839 	bl	8006994 <vTaskDelete>

    // Per the FreeRTOS API -->this function can NEVER return
    for ( ;;);
 8004922:	e7fe      	b.n	8004922 <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv+0x52>

08004924 <_ZN3Cpl6System6Thread10getCurrentEv>:
}


//////////////////////////////
Cpl::System::Thread& Cpl::System::Thread::getCurrent() noexcept
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
    return *( (Thread*) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) );
 8004928:	f002 fb66 	bl	8006ff8 <xTaskGetCurrentTaskHandle>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	f002 fa42 	bl	8006db8 <xTaskGetApplicationTaskTag>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	bd80      	pop	{r7, pc}

0800493a <_ZN3Cpl6System6Thread4waitEv>:


void Cpl::System::Thread::wait() noexcept
{
 800493a:	b580      	push	{r7, lr}
 800493c:	af00      	add	r7, sp, #0
    ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800493e:	f04f 31ff 	mov.w	r1, #4294967295
 8004942:	2000      	movs	r0, #0
 8004944:	f002 fc70 	bl	8007228 <ulTaskNotifyTake>
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}

0800494c <_ZN3Cpl6System6Thread6myNameEv>:
{
    return ulTaskNotifyTake( pdFALSE, msecs * portTICK_PERIOD_MS ) > 0;
}

const char* Cpl::System::Thread::myName() noexcept
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
    // Provide some protection in case this method is called before the scheduler is running (e.g. called by the trace engine)
    if ( !Cpl::System::Api::isSchedulingEnabled() )
 8004950:	f7ff fd30 	bl	80043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004954:	4603      	mov	r3, r0
 8004956:	f083 0301 	eor.w	r3, r3, #1
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <_ZN3Cpl6System6Thread6myNameEv+0x1a>
    {
        return emptyString_;
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <_ZN3Cpl6System6Thread6myNameEv+0x38>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	e00b      	b.n	800497e <_ZN3Cpl6System6Thread6myNameEv+0x32>
    }

    return ( ( Cpl::System::FreeRTOS::Thread* ) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) )->m_name;
 8004966:	f002 fb47 	bl	8006ff8 <xTaskGetCurrentTaskHandle>
 800496a:	4603      	mov	r3, r0
 800496c:	4618      	mov	r0, r3
 800496e:	f002 fa23 	bl	8006db8 <xTaskGetApplicationTaskTag>
 8004972:	4603      	mov	r3, r0
 8004974:	3310      	adds	r3, #16
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe f8e4 	bl	8002b44 <_ZNK3Cpl4Text6StringcvPKcEv>
 800497c:	4603      	mov	r3, r0
}
 800497e:	4618      	mov	r0, r3
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000008 	.word	0x20000008

08004988 <_ZN3Cpl6System6Thread4myIdEv>:


size_t Cpl::System::Thread::myId() noexcept
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
    // Provide some protection in case this method is called before the scheduler is running (e.g. called by the trace engine)
    if ( !Cpl::System::Api::isSchedulingEnabled() )
 800498c:	f7ff fd12 	bl	80043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004990:	4603      	mov	r3, r0
 8004992:	f083 0301 	eor.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <_ZN3Cpl6System6Thread4myIdEv+0x18>
    {
        return 0;
 800499c:	2300      	movs	r3, #0
 800499e:	e003      	b.n	80049a8 <_ZN3Cpl6System6Thread4myIdEv+0x20>
    }

    return (size_t) ( ( ( Cpl::System::FreeRTOS::Thread* )( &getCurrent() ) )->m_threadHandle );
 80049a0:	f7ff ffc0 	bl	8004924 <_ZN3Cpl6System6Thread10getCurrentEv>
 80049a4:	4603      	mov	r3, r0
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>:


void** Thread::getTlsArray() noexcept
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
    return ( ( Cpl::System::FreeRTOS::Thread* ) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) )->m_tlsArray;
 80049b0:	f002 fb22 	bl	8006ff8 <xTaskGetCurrentTaskHandle>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f002 f9fe 	bl	8006db8 <xTaskGetApplicationTaskTag>
 80049bc:	4603      	mov	r3, r0
 80049be:	3338      	adds	r3, #56	; 0x38
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:
    }
}


void addThreadToActiveList_( Thread& thread )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 80049cc:	f7ff fd1e 	bl	800440c <_ZN3Cpl6System6Locks_8sysListsEv>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f107 030c 	add.w	r3, r7, #12
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fc fd85 	bl	80014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.put( thread );
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 80049e2:	f000 f87e 	bl	8004ae2 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 80049e6:	f107 030c 	add.w	r3, r7, #12
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fd8e 	bl	800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20002b3c 	.word	0x20002b3c

080049fc <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:

void removeThreadFromActiveList_( Thread& thread )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 8004a04:	f7ff fd02 	bl	800440c <_ZN3Cpl6System6Locks_8sysListsEv>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fc fd69 	bl	80014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.remove( thread );
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4805      	ldr	r0, [pc, #20]	; (8004a30 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 8004a1a:	f000 f886 	bl	8004b2a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fc fd72 	bl	800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20002b3c 	.word	0x20002b3c

08004a34 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>:
                                                  int         priority,
                                                  int         stackSize,
                                                  void*       stackPtr,
                                                  bool        allowSimTicks
)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
    return new Cpl::System::FreeRTOS::Thread( runnable, name, priority, stackSize );
 8004a42:	2058      	movs	r0, #88	; 0x58
 8004a44:	f004 fcc4 	bl	80093d0 <_Znwj>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	68f9      	ldr	r1, [r7, #12]
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff fe30 	bl	80046bc <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>
 8004a5c:	4623      	mov	r3, r4
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}

08004a66 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>:
    :m_headPtr( 0 ), m_tailPtr( 0 )
{
}

template <class ITEM>
SList<ITEM>::SList( const char* notUsed ) noexcept
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
{
}
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <_ZN3Cpl4Text7FStringILi16EEC1EPKc>:
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f103 0210 	add.w	r2, r3, #16
 8004a92:	2310      	movs	r3, #16
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	f7fd fdf7 	bl	8002688 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <_ZN3Cpl4Text7FStringILi16EEC1EPKc+0x2c>)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	0800a40c 	.word	0x0800a40c

08004ab0 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>:
{
    return  item.isInContainer_( this );
}

template <class ITEM>
inline ITEM* SList<ITEM>::first( void ) const noexcept
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
{
    return m_headPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>:
{
    return m_tailPtr;
}

template <class ITEM>
inline ITEM* SList<ITEM>::next( const ITEM& item ) const  noexcept
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
{
    return (ITEM*) (item.m_nextPtr_);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	3304      	adds	r3, #4
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 fa00 	bl	8007ef8 <_ZN3Cpl9Container4Item7insert_EPv>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d011      	beq.n	8004b22 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x40>
        if ( m_headPtr )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	e002      	b.n	8004b16 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x34>
            m_headPtr = &item;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	605a      	str	r2, [r3, #4]
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>:
inline bool SList<ITEM>::remove( ITEM& item ) noexcept
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
    if ( item.isInContainer_( this ) )
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	3304      	adds	r3, #4
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 f9f8 	bl	8007f30 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03f      	beq.n	8004bc6 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ffb2 	bl	8004ab0 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d036      	beq.n	8004bc6 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
            if ( nxtPtr == &item )
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d12a      	bne.n	8004bb6 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x8c>
                if ( prvPtr )
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x5e>
                    if ( !(prvPtr->m_nextPtr_=nxtPtr->m_nextPtr_) )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = prvPtr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e00f      	b.n	8004ba8 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                    if ( !(m_headPtr=(ITEM*) nxtPtr->m_nextPtr_) )
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = 0;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]
                Item::remove_( &item );
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f003 f9d2 	bl	8007f56 <_ZN3Cpl9Container4Item7remove_EPS1_>
                return true;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e008      	b.n	8004bc8 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9e>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff83 	bl	8004ac8 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	e7c5      	b.n	8004b52 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x28>
    return false;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZN3Cpl4Text7FStringILi16EED1Ev>:
class FString : public FString_
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <_ZN3Cpl4Text7FStringILi16EED1Ev+0x20>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fa29 	bl	8002038 <_ZN3Cpl4Text8FString_D1Ev>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	0800a40c 	.word	0x0800a40c

08004bf4 <_ZN3Cpl4Text7FStringILi16EED0Ev>:
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ffe7 	bl	8004bd0 <_ZN3Cpl4Text7FStringILi16EED1Ev>
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f004 fbda 	bl	80093bc <_ZdlPv>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <_Z41__static_initialization_and_destruction_0ii>:


void Cpl::System::Thread::destroy( Thread& threadToDestroy )
{
    delete &threadToDestroy;
}
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10b      	bne.n	8004c3c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d106      	bne.n	8004c3c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8004c2e:	480b      	ldr	r0, [pc, #44]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004c30:	f000 f8c0 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Thread>  	threadList_( "StaticConstructor" );
 8004c34:	490a      	ldr	r1, [pc, #40]	; (8004c60 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004c36:	480b      	ldr	r0, [pc, #44]	; (8004c64 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004c38:	f7ff ff15 	bl	8004a66 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d102      	bne.n	8004c52 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004c4c:	4803      	ldr	r0, [pc, #12]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004c4e:	f000 f8bc 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20002b38 	.word	0x20002b38
 8004c60:	080099b4 	.word	0x080099b4
 8004c64:	20002b3c 	.word	0x20002b3c

08004c68 <_GLOBAL__sub_I__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c70:	2001      	movs	r0, #1
 8004c72:	f7ff ffcf 	bl	8004c14 <_Z41__static_initialization_and_destruction_0ii>
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <_GLOBAL__sub_D__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7ff ffc7 	bl	8004c14 <_Z41__static_initialization_and_destruction_0ii>
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZN3Cpl6System3TlsC1Ev>:

static uint16_t nextTlsIndex_;  // This guarantied to be initialized to zero (per the C++ standard) because it is in the BSS segment 


/////////////////////////////////////////////////////////
Tls::Tls( void )
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    :m_key( (Cpl_System_TlsKey_T) -1 )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	701a      	strb	r2, [r3, #0]
{
    // Check if there are any TLS indexes/variables left
    Cpl::System::Locks_::system().lock();
 8004c96:	f7ff fba5 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fc55 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    if ( nextTlsIndex_ < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES )
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	2b07      	cmp	r3, #7
 8004ca8:	d808      	bhi.n	8004cbc <_ZN3Cpl6System3TlsC1Ev+0x34>
    {
        m_key = nextTlsIndex_++;
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	b291      	uxth	r1, r2
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 8004cb4:	8011      	strh	r1, [r2, #0]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	701a      	strb	r2, [r3, #0]
    }
    Cpl::System::Locks_::system().unlock();
 8004cbc:	f7ff fb92 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fc56 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>


    // Generate a fatal error if I am out of TLS indexes/variables
    if ( m_key == (Cpl_System_TlsKey_T) -1 )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2bff      	cmp	r3, #255	; 0xff
 8004cce:	d105      	bne.n	8004cdc <_ZN3Cpl6System3TlsC1Ev+0x54>
    {
        Cpl::System::FatalError::logRaw( "FreeRTOS::Tls::Tls().  Exceeded TLS indexes.", nextTlsIndex_ );
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <_ZN3Cpl6System3TlsC1Ev+0x64>)
 8004cd8:	f7fd f97e 	bl	8001fd8 <_ZN3Cpl6System10FatalError6logRawEPKcj>
    }
}
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20002b46 	.word	0x20002b46
 8004cec:	080099c8 	.word	0x080099c8

08004cf0 <_ZN3Cpl6System3Tls3getEv>:
}


/////////////////////////////////////////////////////////
void* Tls::get( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
    // Get access to my FreeRTOS thread object.
    void** myArray = Cpl::System::FreeRTOS::Thread::getTlsArray();
 8004cf8:	f7ff fe58 	bl	80049ac <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>
 8004cfc:	60f8      	str	r0, [r7, #12]
    return myArray[m_key];
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	681b      	ldr	r3, [r3, #0]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_ZN3Cpl6System3Tls3setEPv>:

void Tls::set( void* newValue )
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
    // Get access to my FreeRTOS thread object.
    void** myArray = Cpl::System::FreeRTOS::Thread::getTlsArray();
 8004d1c:	f7ff fe46 	bl	80049ac <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>
 8004d20:	60f8      	str	r0, [r7, #12]
    myArray[m_key] = newValue;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_Z41__static_initialization_and_destruction_0ii>:
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d102      	bne.n	8004d58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004d52:	4809      	ldr	r0, [pc, #36]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004d54:	f000 f82e 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d102      	bne.n	8004d6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004d68:	4803      	ldr	r0, [pc, #12]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004d6a:	f000 f82e 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20002b44 	.word	0x20002b44

08004d7c <_GLOBAL__sub_I__ZN3Cpl6System3TlsC2Ev>:
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d84:	2001      	movs	r0, #1
 8004d86:	f7ff ffd7 	bl	8004d38 <_Z41__static_initialization_and_destruction_0ii>
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_GLOBAL__sub_D__ZN3Cpl6System3TlsC2Ev>:
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7ff ffcf 	bl	8004d38 <_Z41__static_initialization_and_destruction_0ii>
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <Bsp_Api_initialize>:



///////////////////////////////////////////
void Bsp_Api_initialize( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004da0:	f000 f86c 	bl	8004e7c <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 8004da4:	f7fc fa26 	bl	80011f4 <SystemClock_Config>


    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004da8:	f7fc f934 	bl	8001014 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8004dac:	f7fc fab8 	bl	8001320 <MX_USART3_UART_Init>
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZNSt8ios_base4InitC1Ev>:
//extern "C" void __cxa_pure_virtual() { while (1); }

/*
** Method stubs to satisfy the linker -->NOTE: C++ Streams are NOT supported by this BSP
*/
std::ios_base::Init::Init()
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
{
}
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZNSt8ios_base4InitD1Ev>:

std::ios_base::Init::~Init()
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
{
}
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <Reset_Handler>:
 8004de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e18 <LoopFillZerobss+0x12>
 8004de4:	480d      	ldr	r0, [pc, #52]	; (8004e1c <LoopFillZerobss+0x16>)
 8004de6:	490e      	ldr	r1, [pc, #56]	; (8004e20 <LoopFillZerobss+0x1a>)
 8004de8:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <LoopFillZerobss+0x1e>)
 8004dea:	2300      	movs	r3, #0
 8004dec:	e002      	b.n	8004df4 <LoopCopyDataInit>

08004dee <CopyDataInit>:
 8004dee:	58d4      	ldr	r4, [r2, r3]
 8004df0:	50c4      	str	r4, [r0, r3]
 8004df2:	3304      	adds	r3, #4

08004df4 <LoopCopyDataInit>:
 8004df4:	18c4      	adds	r4, r0, r3
 8004df6:	428c      	cmp	r4, r1
 8004df8:	d3f9      	bcc.n	8004dee <CopyDataInit>
 8004dfa:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <LoopFillZerobss+0x22>)
 8004dfc:	4c0b      	ldr	r4, [pc, #44]	; (8004e2c <LoopFillZerobss+0x26>)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e001      	b.n	8004e06 <LoopFillZerobss>

08004e02 <FillZerobss>:
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	3204      	adds	r2, #4

08004e06 <LoopFillZerobss>:
 8004e06:	42a2      	cmp	r2, r4
 8004e08:	d3fb      	bcc.n	8004e02 <FillZerobss>
 8004e0a:	f7fc fa7f 	bl	800130c <SystemInit>
 8004e0e:	f003 fd25 	bl	800885c <__libc_init_array>
 8004e12:	f7fc faef 	bl	80013f4 <main>
 8004e16:	4770      	bx	lr
 8004e18:	20050000 	.word	0x20050000
 8004e1c:	20000000 	.word	0x20000000
 8004e20:	20000080 	.word	0x20000080
 8004e24:	0800a774 	.word	0x0800a774
 8004e28:	20000080 	.word	0x20000080
 8004e2c:	20012f94 	.word	0x20012f94

08004e30 <ADC_IRQHandler>:
 8004e30:	e7fe      	b.n	8004e30 <ADC_IRQHandler>
	...

08004e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e34:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_InitTick+0x3c>)
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_InitTick+0x40>)
{
 8004e3a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e3c:	7818      	ldrb	r0, [r3, #0]
 8004e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e42:	fbb3 f3f0 	udiv	r3, r3, r0
 8004e46:	6810      	ldr	r0, [r2, #0]
 8004e48:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e4c:	f000 f894 	bl	8004f78 <HAL_SYSTICK_Config>
 8004e50:	4604      	mov	r4, r0
 8004e52:	b958      	cbnz	r0, 8004e6c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e54:	2d0f      	cmp	r5, #15
 8004e56:	d809      	bhi.n	8004e6c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	f000 f84a 	bl	8004ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_InitTick+0x44>)
 8004e66:	4620      	mov	r0, r4
 8004e68:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	e7fc      	b.n	8004e6a <HAL_InitTick+0x36>
 8004e70:	20000000 	.word	0x20000000
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	20000010 	.word	0x20000010

08004e7c <HAL_Init>:
{
 8004e7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_Init+0x30>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e98:	2003      	movs	r0, #3
 8004e9a:	f000 f81b 	bl	8004ed4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e9e:	200f      	movs	r0, #15
 8004ea0:	f7ff ffc8 	bl	8004e34 <HAL_InitTick>
  HAL_MspInit();
 8004ea4:	f7fc f9fa 	bl	800129c <HAL_MspInit>
}
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	bd08      	pop	{r3, pc}
 8004eac:	40023c00 	.word	0x40023c00

08004eb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004eb0:	4a03      	ldr	r2, [pc, #12]	; (8004ec0 <HAL_IncTick+0x10>)
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <HAL_IncTick+0x14>)
 8004eb4:	6811      	ldr	r1, [r2, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	440b      	add	r3, r1
 8004eba:	6013      	str	r3, [r2, #0]
}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20002b48 	.word	0x20002b48
 8004ec4:	2000000c 	.word	0x2000000c

08004ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ec8:	4b01      	ldr	r3, [pc, #4]	; (8004ed0 <HAL_GetTick+0x8>)
 8004eca:	6818      	ldr	r0, [r3, #0]
}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20002b48 	.word	0x20002b48

08004ed4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004ed6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004edc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004ef0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ef2:	4770      	bx	lr
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ef8:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004efa:	b530      	push	{r4, r5, lr}
 8004efc:	68dc      	ldr	r4, [r3, #12]
 8004efe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f02:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f06:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f08:	2d04      	cmp	r5, #4
 8004f0a:	bf28      	it	cs
 8004f0c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f14:	bf8c      	ite	hi
 8004f16:	3c03      	subhi	r4, #3
 8004f18:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f1a:	fa03 f505 	lsl.w	r5, r3, r5
 8004f1e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f22:	40a3      	lsls	r3, r4
 8004f24:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f28:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8004f2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f2c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f30:	bfac      	ite	ge
 8004f32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	4a08      	ldrlt	r2, [pc, #32]	; (8004f58 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f38:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3c:	bfb8      	it	lt
 8004f3e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	bfaa      	itet	ge
 8004f46:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004f50:	bd30      	pop	{r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	e000ed00 	.word	0xe000ed00
 8004f58:	e000ed14 	.word	0xe000ed14

08004f5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	db08      	blt.n	8004f72 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f60:	0942      	lsrs	r2, r0, #5
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 001f 	and.w	r0, r0, #31
 8004f68:	fa03 f000 	lsl.w	r0, r3, r0
 8004f6c:	4b01      	ldr	r3, [pc, #4]	; (8004f74 <HAL_NVIC_EnableIRQ+0x18>)
 8004f6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004f72:	4770      	bx	lr
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f78:	3801      	subs	r0, #1
 8004f7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f7e:	d20b      	bcs.n	8004f98 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f84:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f86:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f88:	21f0      	movs	r1, #240	; 0xf0
 8004f8a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f8e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f90:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f92:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f94:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f96:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004f98:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004f9a:	4770      	bx	lr
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa4:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8005144 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa8:	4a64      	ldr	r2, [pc, #400]	; (800513c <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004faa:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fac:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004fae:	2401      	movs	r4, #1
 8004fb0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004fb6:	43ac      	bics	r4, r5
 8004fb8:	f040 80ad 	bne.w	8005116 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fbc:	684d      	ldr	r5, [r1, #4]
 8004fbe:	f005 0403 	and.w	r4, r5, #3
 8004fc2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fc6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fca:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fce:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fd0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd4:	d834      	bhi.n	8005040 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004fd6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fd8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fdc:	68cf      	ldr	r7, [r1, #12]
 8004fde:	fa07 f708 	lsl.w	r7, r7, r8
 8004fe2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004fe6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004fe8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fea:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fee:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004ff2:	409f      	lsls	r7, r3
 8004ff4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004ff8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004ffa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ffc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005000:	688f      	ldr	r7, [r1, #8]
 8005002:	fa07 f708 	lsl.w	r7, r7, r8
 8005006:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800500c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500e:	d119      	bne.n	8005044 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8005010:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8005014:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005018:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800501c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005020:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005024:	f04f 0e0f 	mov.w	lr, #15
 8005028:	fa0e fe0b 	lsl.w	lr, lr, fp
 800502c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005030:	690f      	ldr	r7, [r1, #16]
 8005032:	fa07 f70b 	lsl.w	r7, r7, fp
 8005036:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800503a:	f8ca 7020 	str.w	r7, [sl, #32]
 800503e:	e001      	b.n	8005044 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005040:	2c03      	cmp	r4, #3
 8005042:	d1da      	bne.n	8004ffa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8005044:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005046:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800504a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800504c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800504e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005052:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005054:	d05f      	beq.n	8005116 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	f04f 0a00 	mov.w	sl, #0
 800505a:	f8cd a004 	str.w	sl, [sp, #4]
 800505e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005062:	4c37      	ldr	r4, [pc, #220]	; (8005140 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005064:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8005068:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800506c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8005070:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8005074:	9601      	str	r6, [sp, #4]
 8005076:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005078:	f023 0603 	bic.w	r6, r3, #3
 800507c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005080:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005084:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005088:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800508c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005090:	270f      	movs	r7, #15
 8005092:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005096:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005098:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509c:	d042      	beq.n	8005124 <HAL_GPIO_Init+0x184>
 800509e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050a2:	42a0      	cmp	r0, r4
 80050a4:	d040      	beq.n	8005128 <HAL_GPIO_Init+0x188>
 80050a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050aa:	42a0      	cmp	r0, r4
 80050ac:	d03e      	beq.n	800512c <HAL_GPIO_Init+0x18c>
 80050ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050b2:	42a0      	cmp	r0, r4
 80050b4:	d03c      	beq.n	8005130 <HAL_GPIO_Init+0x190>
 80050b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050ba:	42a0      	cmp	r0, r4
 80050bc:	d03a      	beq.n	8005134 <HAL_GPIO_Init+0x194>
 80050be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050c2:	42a0      	cmp	r0, r4
 80050c4:	d038      	beq.n	8005138 <HAL_GPIO_Init+0x198>
 80050c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050ca:	42a0      	cmp	r0, r4
 80050cc:	bf0c      	ite	eq
 80050ce:	2406      	moveq	r4, #6
 80050d0:	2407      	movne	r4, #7
 80050d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80050d6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80050da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80050dc:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050e0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80050e2:	bf54      	ite	pl
 80050e4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050e6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80050ea:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80050ec:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050ee:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80050f0:	bf54      	ite	pl
 80050f2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050f4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80050f8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80050fa:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050fc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80050fe:	bf54      	ite	pl
 8005100:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005102:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8005106:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005108:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800510a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800510c:	bf54      	ite	pl
 800510e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005110:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8005114:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	3301      	adds	r3, #1
 8005118:	2b10      	cmp	r3, #16
 800511a:	f47f af47 	bne.w	8004fac <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005124:	4654      	mov	r4, sl
 8005126:	e7d4      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 8005128:	2401      	movs	r4, #1
 800512a:	e7d2      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 800512c:	2402      	movs	r4, #2
 800512e:	e7d0      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 8005130:	2403      	movs	r4, #3
 8005132:	e7ce      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 8005134:	2404      	movs	r4, #4
 8005136:	e7cc      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 8005138:	2405      	movs	r4, #5
 800513a:	e7ca      	b.n	80050d2 <HAL_GPIO_Init+0x132>
 800513c:	40013c00 	.word	0x40013c00
 8005140:	40020000 	.word	0x40020000
 8005144:	40023800 	.word	0x40023800

08005148 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005148:	b10a      	cbz	r2, 800514e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800514a:	6181      	str	r1, [r0, #24]
  }
}
 800514c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800514e:	0409      	lsls	r1, r1, #16
 8005150:	e7fb      	b.n	800514a <HAL_GPIO_WritePin+0x2>

08005152 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005152:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005154:	ea01 0203 	and.w	r2, r1, r3
 8005158:	ea21 0103 	bic.w	r1, r1, r3
 800515c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005160:	6181      	str	r1, [r0, #24]
}
 8005162:	4770      	bx	lr

08005164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005168:	4604      	mov	r4, r0
 800516a:	b340      	cbz	r0, 80051be <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516c:	6803      	ldr	r3, [r0, #0]
 800516e:	07dd      	lsls	r5, r3, #31
 8005170:	d410      	bmi.n	8005194 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0798      	lsls	r0, r3, #30
 8005176:	d45e      	bmi.n	8005236 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	071a      	lsls	r2, r3, #28
 800517c:	f100 80a0 	bmi.w	80052c0 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	075b      	lsls	r3, r3, #29
 8005184:	f100 80c0 	bmi.w	8005308 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005188:	69a0      	ldr	r0, [r4, #24]
 800518a:	2800      	cmp	r0, #0
 800518c:	f040 8128 	bne.w	80053e0 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005190:	2000      	movs	r0, #0
 8005192:	e02b      	b.n	80051ec <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005194:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	f002 020c 	and.w	r2, r2, #12
 800519c:	2a04      	cmp	r2, #4
 800519e:	d007      	beq.n	80051b0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051a6:	2a08      	cmp	r2, #8
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	0251      	lsls	r1, r2, #9
 80051ae:	d508      	bpl.n	80051c2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	4b88      	ldr	r3, [pc, #544]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	039a      	lsls	r2, r3, #14
 80051b6:	d5dc      	bpl.n	8005172 <HAL_RCC_OscConfig+0xe>
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1d9      	bne.n	8005172 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80051be:	2001      	movs	r0, #1
 80051c0:	e014      	b.n	80051ec <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c2:	6862      	ldr	r2, [r4, #4]
 80051c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80051c8:	d113      	bne.n	80051f2 <HAL_RCC_OscConfig+0x8e>
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051d2:	f7ff fe79 	bl	8004ec8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4e7f      	ldr	r6, [pc, #508]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80051d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	6833      	ldr	r3, [r6, #0]
 80051dc:	039b      	lsls	r3, r3, #14
 80051de:	d4c8      	bmi.n	8005172 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e0:	f7ff fe72 	bl	8004ec8 <HAL_GetTick>
 80051e4:	1b40      	subs	r0, r0, r5
 80051e6:	2864      	cmp	r0, #100	; 0x64
 80051e8:	d9f7      	bls.n	80051da <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80051ea:	2003      	movs	r0, #3
}
 80051ec:	b002      	add	sp, #8
 80051ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f2:	4d78      	ldr	r5, [pc, #480]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 80051f4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0xa8>
 80051fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800520a:	e7e2      	b.n	80051d2 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005218:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800521a:	2a00      	cmp	r2, #0
 800521c:	d1d9      	bne.n	80051d2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800521e:	f7ff fe53 	bl	8004ec8 <HAL_GetTick>
 8005222:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	039f      	lsls	r7, r3, #14
 8005228:	d5a3      	bpl.n	8005172 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800522a:	f7ff fe4d 	bl	8004ec8 <HAL_GetTick>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	2864      	cmp	r0, #100	; 0x64
 8005232:	d9f7      	bls.n	8005224 <HAL_RCC_OscConfig+0xc0>
 8005234:	e7d9      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005236:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	f012 0f0c 	tst.w	r2, #12
 800523e:	d007      	beq.n	8005250 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005246:	2a08      	cmp	r2, #8
 8005248:	d111      	bne.n	800526e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	025e      	lsls	r6, r3, #9
 800524e:	d40e      	bmi.n	800526e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005250:	4a60      	ldr	r2, [pc, #384]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	079d      	lsls	r5, r3, #30
 8005256:	d502      	bpl.n	800525e <HAL_RCC_OscConfig+0xfa>
 8005258:	68e3      	ldr	r3, [r4, #12]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d1af      	bne.n	80051be <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	6921      	ldr	r1, [r4, #16]
 8005262:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005266:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800526a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526c:	e784      	b.n	8005178 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800526e:	68e2      	ldr	r2, [r4, #12]
 8005270:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <HAL_RCC_OscConfig+0x274>)
 8005272:	b1b2      	cbz	r2, 80052a2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005278:	f7ff fe26 	bl	8004ec8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527c:	4d55      	ldr	r5, [pc, #340]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800527e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	0798      	lsls	r0, r3, #30
 8005284:	d507      	bpl.n	8005296 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	6922      	ldr	r2, [r4, #16]
 800528a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800528e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	e770      	b.n	8005178 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005296:	f7ff fe17 	bl	8004ec8 <HAL_GetTick>
 800529a:	1b80      	subs	r0, r0, r6
 800529c:	2802      	cmp	r0, #2
 800529e:	d9ef      	bls.n	8005280 <HAL_RCC_OscConfig+0x11c>
 80052a0:	e7a3      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80052a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80052a4:	f7ff fe10 	bl	8004ec8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052a8:	4e4a      	ldr	r6, [pc, #296]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80052aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	0799      	lsls	r1, r3, #30
 80052b0:	f57f af62 	bpl.w	8005178 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b4:	f7ff fe08 	bl	8004ec8 <HAL_GetTick>
 80052b8:	1b40      	subs	r0, r0, r5
 80052ba:	2802      	cmp	r0, #2
 80052bc:	d9f6      	bls.n	80052ac <HAL_RCC_OscConfig+0x148>
 80052be:	e794      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052c0:	6962      	ldr	r2, [r4, #20]
 80052c2:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <HAL_RCC_OscConfig+0x274>)
 80052c4:	b182      	cbz	r2, 80052e8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80052cc:	f7ff fdfc 	bl	8004ec8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d0:	4e40      	ldr	r6, [pc, #256]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80052d2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80052d6:	079f      	lsls	r7, r3, #30
 80052d8:	f53f af52 	bmi.w	8005180 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052dc:	f7ff fdf4 	bl	8004ec8 <HAL_GetTick>
 80052e0:	1b40      	subs	r0, r0, r5
 80052e2:	2802      	cmp	r0, #2
 80052e4:	d9f6      	bls.n	80052d4 <HAL_RCC_OscConfig+0x170>
 80052e6:	e780      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80052e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80052ec:	f7ff fdec 	bl	8004ec8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	4e38      	ldr	r6, [pc, #224]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80052f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80052f6:	0798      	lsls	r0, r3, #30
 80052f8:	f57f af42 	bpl.w	8005180 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052fc:	f7ff fde4 	bl	8004ec8 <HAL_GetTick>
 8005300:	1b40      	subs	r0, r0, r5
 8005302:	2802      	cmp	r0, #2
 8005304:	d9f6      	bls.n	80052f4 <HAL_RCC_OscConfig+0x190>
 8005306:	e770      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 800530a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800530c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8005310:	d128      	bne.n	8005364 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	9201      	str	r2, [sp, #4]
 8005314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005326:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4d2c      	ldr	r5, [pc, #176]	; (80053dc <HAL_RCC_OscConfig+0x278>)
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	05d9      	lsls	r1, r3, #23
 800532e:	d51b      	bpl.n	8005368 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005330:	68a3      	ldr	r3, [r4, #8]
 8005332:	4d28      	ldr	r5, [pc, #160]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 8005334:	2b01      	cmp	r3, #1
 8005336:	d127      	bne.n	8005388 <HAL_RCC_OscConfig+0x224>
 8005338:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005340:	f7ff fdc2 	bl	8004ec8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005344:	4e23      	ldr	r6, [pc, #140]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8005346:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d539      	bpl.n	80053c6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8005352:	2f00      	cmp	r7, #0
 8005354:	f43f af18 	beq.w	8005188 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 800535a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800535c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	e711      	b.n	8005188 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005364:	2700      	movs	r7, #0
 8005366:	e7df      	b.n	8005328 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005370:	f7ff fdaa 	bl	8004ec8 <HAL_GetTick>
 8005374:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	05da      	lsls	r2, r3, #23
 800537a:	d4d9      	bmi.n	8005330 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537c:	f7ff fda4 	bl	8004ec8 <HAL_GetTick>
 8005380:	1b80      	subs	r0, r0, r6
 8005382:	2802      	cmp	r0, #2
 8005384:	d9f7      	bls.n	8005376 <HAL_RCC_OscConfig+0x212>
 8005386:	e730      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	2b05      	cmp	r3, #5
 800538a:	d104      	bne.n	8005396 <HAL_RCC_OscConfig+0x232>
 800538c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800538e:	f043 0304 	orr.w	r3, r3, #4
 8005392:	672b      	str	r3, [r5, #112]	; 0x70
 8005394:	e7d0      	b.n	8005338 <HAL_RCC_OscConfig+0x1d4>
 8005396:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	672a      	str	r2, [r5, #112]	; 0x70
 800539e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80053a0:	f022 0204 	bic.w	r2, r2, #4
 80053a4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ca      	bne.n	8005340 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80053aa:	f7ff fd8d 	bl	8004ec8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80053b6:	0798      	lsls	r0, r3, #30
 80053b8:	d5cb      	bpl.n	8005352 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ba:	f7ff fd85 	bl	8004ec8 <HAL_GetTick>
 80053be:	1b80      	subs	r0, r0, r6
 80053c0:	4540      	cmp	r0, r8
 80053c2:	d9f7      	bls.n	80053b4 <HAL_RCC_OscConfig+0x250>
 80053c4:	e711      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7ff fd7f 	bl	8004ec8 <HAL_GetTick>
 80053ca:	1b40      	subs	r0, r0, r5
 80053cc:	4540      	cmp	r0, r8
 80053ce:	d9bd      	bls.n	800534c <HAL_RCC_OscConfig+0x1e8>
 80053d0:	e70b      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	42470000 	.word	0x42470000
 80053dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053e0:	4d39      	ldr	r5, [pc, #228]	; (80054c8 <HAL_RCC_OscConfig+0x364>)
 80053e2:	68ab      	ldr	r3, [r5, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d03d      	beq.n	8005468 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ec:	4b37      	ldr	r3, [pc, #220]	; (80054cc <HAL_RCC_OscConfig+0x368>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053f4:	d12b      	bne.n	800544e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80053f6:	f7ff fd67 	bl	8004ec8 <HAL_GetTick>
 80053fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	0199      	lsls	r1, r3, #6
 8005400:	d41f      	bmi.n	8005442 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005402:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005406:	4313      	orrs	r3, r2
 8005408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800540a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800540e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005410:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005414:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005416:	0852      	lsrs	r2, r2, #1
 8005418:	3a01      	subs	r2, #1
 800541a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800541e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x368>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	4d29      	ldr	r5, [pc, #164]	; (80054c8 <HAL_RCC_OscConfig+0x364>)
        __HAL_RCC_PLL_ENABLE();
 8005424:	2201      	movs	r2, #1
 8005426:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8005428:	f7ff fd4e 	bl	8004ec8 <HAL_GetTick>
 800542c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	019a      	lsls	r2, r3, #6
 8005432:	f53f aead 	bmi.w	8005190 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005436:	f7ff fd47 	bl	8004ec8 <HAL_GetTick>
 800543a:	1b00      	subs	r0, r0, r4
 800543c:	2802      	cmp	r0, #2
 800543e:	d9f6      	bls.n	800542e <HAL_RCC_OscConfig+0x2ca>
 8005440:	e6d3      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005442:	f7ff fd41 	bl	8004ec8 <HAL_GetTick>
 8005446:	1b80      	subs	r0, r0, r6
 8005448:	2802      	cmp	r0, #2
 800544a:	d9d7      	bls.n	80053fc <HAL_RCC_OscConfig+0x298>
 800544c:	e6cd      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800544e:	f7ff fd3b 	bl	8004ec8 <HAL_GetTick>
 8005452:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	f57f ae9a 	bpl.w	8005190 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545c:	f7ff fd34 	bl	8004ec8 <HAL_GetTick>
 8005460:	1b00      	subs	r0, r0, r4
 8005462:	2802      	cmp	r0, #2
 8005464:	d9f6      	bls.n	8005454 <HAL_RCC_OscConfig+0x2f0>
 8005466:	e6c0      	b.n	80051ea <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005468:	2801      	cmp	r0, #1
 800546a:	f43f aebf 	beq.w	80051ec <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800546e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005470:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005476:	4291      	cmp	r1, r2
 8005478:	f47f aea1 	bne.w	80051be <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800547e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	428a      	cmp	r2, r1
 8005484:	f47f ae9b 	bne.w	80051be <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005488:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800548a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800548e:	401a      	ands	r2, r3
 8005490:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005494:	f47f ae93 	bne.w	80051be <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005498:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80054a0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80054a6:	f47f ae8a 	bne.w	80051be <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80054ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b0:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80054b4:	f47f ae83 	bne.w	80051be <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054be:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80054c2:	f43f ae65 	beq.w	8005190 <HAL_RCC_OscConfig+0x2c>
 80054c6:	e67a      	b.n	80051be <HAL_RCC_OscConfig+0x5a>
 80054c8:	40023800 	.word	0x40023800
 80054cc:	42470000 	.word	0x42470000

080054d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d0:	4913      	ldr	r1, [pc, #76]	; (8005520 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80054d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d4:	688b      	ldr	r3, [r1, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d01c      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x48>
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d11c      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ec:	bf14      	ite	ne
 80054ee:	480d      	ldrne	r0, [pc, #52]	; (8005524 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f0:	480d      	ldreq	r0, [pc, #52]	; (8005528 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80054f6:	bf18      	it	ne
 80054f8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fe:	fba1 0100 	umull	r0, r1, r1, r0
 8005502:	f7fb fbeb 	bl	8000cdc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCC_GetSysClockFreq+0x50>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800550e:	3301      	adds	r3, #1
 8005510:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005512:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005516:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005518:	4802      	ldr	r0, [pc, #8]	; (8005524 <HAL_RCC_GetSysClockFreq+0x54>)
 800551a:	e7fc      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800551c:	4802      	ldr	r0, [pc, #8]	; (8005528 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800551e:	e7fa      	b.n	8005516 <HAL_RCC_GetSysClockFreq+0x46>
 8005520:	40023800 	.word	0x40023800
 8005524:	007a1200 	.word	0x007a1200
 8005528:	00f42400 	.word	0x00f42400

0800552c <HAL_RCC_ClockConfig>:
{
 800552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005530:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005532:	4604      	mov	r4, r0
 8005534:	b910      	cbnz	r0, 800553c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005536:	2001      	movs	r0, #1
}
 8005538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b44      	ldr	r3, [pc, #272]	; (8005650 <HAL_RCC_ClockConfig+0x124>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	f002 0207 	and.w	r2, r2, #7
 8005544:	428a      	cmp	r2, r1
 8005546:	d328      	bcc.n	800559a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	0797      	lsls	r7, r2, #30
 800554c:	d42d      	bmi.n	80055aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554e:	07d0      	lsls	r0, r2, #31
 8005550:	d441      	bmi.n	80055d6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_ClockConfig+0x124>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	f002 0207 	and.w	r2, r2, #7
 800555a:	42aa      	cmp	r2, r5
 800555c:	d866      	bhi.n	800562c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	0751      	lsls	r1, r2, #29
 8005562:	d46c      	bmi.n	800563e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	0713      	lsls	r3, r2, #28
 8005566:	d507      	bpl.n	8005578 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005568:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 800556a:	6921      	ldr	r1, [r4, #16]
 800556c:	6893      	ldr	r3, [r2, #8]
 800556e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005572:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005576:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005578:	f7ff ffaa 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 800557c:	4b35      	ldr	r3, [pc, #212]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 800557e:	4a36      	ldr	r2, [pc, #216]	; (8005658 <HAL_RCC_ClockConfig+0x12c>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005586:	5cd3      	ldrb	r3, [r2, r3]
 8005588:	40d8      	lsrs	r0, r3
 800558a:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_ClockConfig+0x130>)
 800558c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <HAL_RCC_ClockConfig+0x134>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f7ff fc4f 	bl	8004e34 <HAL_InitTick>
  return HAL_OK;
 8005596:	2000      	movs	r0, #0
 8005598:	e7ce      	b.n	8005538 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	b2ca      	uxtb	r2, r1
 800559c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	428b      	cmp	r3, r1
 80055a6:	d1c6      	bne.n	8005536 <HAL_RCC_ClockConfig+0xa>
 80055a8:	e7ce      	b.n	8005548 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055aa:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 80055ac:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b0:	bf1e      	ittt	ne
 80055b2:	6899      	ldrne	r1, [r3, #8]
 80055b4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80055b8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055bc:	bf42      	ittt	mi
 80055be:	6899      	ldrmi	r1, [r3, #8]
 80055c0:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80055c4:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c6:	4923      	ldr	r1, [pc, #140]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 80055c8:	68a0      	ldr	r0, [r4, #8]
 80055ca:	688b      	ldr	r3, [r1, #8]
 80055cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d0:	4303      	orrs	r3, r0
 80055d2:	608b      	str	r3, [r1, #8]
 80055d4:	e7bb      	b.n	800554e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 80055da:	2a01      	cmp	r2, #1
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e4:	d0a7      	beq.n	8005536 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4e1b      	ldr	r6, [pc, #108]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 80055e8:	68b3      	ldr	r3, [r6, #8]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80055f2:	f7ff fc69 	bl	8004ec8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80055fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fc:	68b3      	ldr	r3, [r6, #8]
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005608:	d0a3      	beq.n	8005552 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560a:	f7ff fc5d 	bl	8004ec8 <HAL_GetTick>
 800560e:	1bc0      	subs	r0, r0, r7
 8005610:	4540      	cmp	r0, r8
 8005612:	d9f3      	bls.n	80055fc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8005614:	2003      	movs	r0, #3
 8005616:	e78f      	b.n	8005538 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005618:	1e91      	subs	r1, r2, #2
 800561a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561e:	d802      	bhi.n	8005626 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005620:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005624:	e7de      	b.n	80055e4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	f013 0f02 	tst.w	r3, #2
 800562a:	e7db      	b.n	80055e4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562c:	b2ea      	uxtb	r2, r5
 800562e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	42ab      	cmp	r3, r5
 8005638:	f47f af7d 	bne.w	8005536 <HAL_RCC_ClockConfig+0xa>
 800563c:	e78f      	b.n	800555e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800563e:	4905      	ldr	r1, [pc, #20]	; (8005654 <HAL_RCC_ClockConfig+0x128>)
 8005640:	68e0      	ldr	r0, [r4, #12]
 8005642:	688b      	ldr	r3, [r1, #8]
 8005644:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005648:	4303      	orrs	r3, r0
 800564a:	608b      	str	r3, [r1, #8]
 800564c:	e78a      	b.n	8005564 <HAL_RCC_ClockConfig+0x38>
 800564e:	bf00      	nop
 8005650:	40023c00 	.word	0x40023c00
 8005654:	40023800 	.word	0x40023800
 8005658:	08009b82 	.word	0x08009b82
 800565c:	20000000 	.word	0x20000000
 8005660:	20000010 	.word	0x20000010

08005664 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005666:	4a05      	ldr	r2, [pc, #20]	; (800567c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	4a03      	ldr	r2, [pc, #12]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005672:	6810      	ldr	r0, [r2, #0]
}
 8005674:	40d8      	lsrs	r0, r3
 8005676:	4770      	bx	lr
 8005678:	40023800 	.word	0x40023800
 800567c:	08009b92 	.word	0x08009b92
 8005680:	20000000 	.word	0x20000000

08005684 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005686:	4a05      	ldr	r2, [pc, #20]	; (800569c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005692:	6810      	ldr	r0, [r2, #0]
}
 8005694:	40d8      	lsrs	r0, r3
 8005696:	4770      	bx	lr
 8005698:	40023800 	.word	0x40023800
 800569c:	08009b92 	.word	0x08009b92
 80056a0:	20000000 	.word	0x20000000

080056a4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	f102 030c 	add.w	r3, r2, #12
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	320c      	adds	r2, #12
 80056b4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80056b8:	6802      	ldr	r2, [r0, #0]
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d1f2      	bne.n	80056a4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	f102 0314 	add.w	r3, r2, #20
 80056c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f102 0c14 	add.w	ip, r2, #20
 80056ce:	e84c 3100 	strex	r1, r3, [ip]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1f3      	bne.n	80056be <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10b      	bne.n	80056f4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	f102 030c 	add.w	r3, r2, #12
 80056e0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	f102 0c0c 	add.w	ip, r2, #12
 80056ec:	e84c 3100 	strex	r1, r3, [ip]
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d1f3      	bne.n	80056dc <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	2320      	movs	r3, #32
 80056f6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fa:	2300      	movs	r3, #0
 80056fc:	6303      	str	r3, [r0, #48]	; 0x30
}
 80056fe:	4770      	bx	lr

08005700 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005700:	6803      	ldr	r3, [r0, #0]
 8005702:	68c1      	ldr	r1, [r0, #12]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800570a:	430a      	orrs	r2, r1
{
 800570c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570e:	611a      	str	r2, [r3, #16]
{
 8005710:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005712:	6882      	ldr	r2, [r0, #8]
 8005714:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005716:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005718:	4302      	orrs	r2, r0
 800571a:	6968      	ldr	r0, [r5, #20]
 800571c:	4302      	orrs	r2, r0
 800571e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005720:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005724:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005728:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800572a:	430a      	orrs	r2, r1
 800572c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	69a9      	ldr	r1, [r5, #24]
 8005732:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005736:	430a      	orrs	r2, r1
 8005738:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800573a:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <UART_SetConfig+0xc8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <UART_SetConfig+0x58>
 8005740:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <UART_SetConfig+0x58>
 8005748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <UART_SetConfig+0x58>
 8005750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005754:	4293      	cmp	r3, r2
 8005756:	d123      	bne.n	80057a0 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7ff ff94 	bl	8005684 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800575e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005764:	e9d5 4600 	ldrd	r4, r6, [r5]
 8005768:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576c:	d11b      	bne.n	80057a6 <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800576e:	19b2      	adds	r2, r6, r6
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	415b      	adcs	r3, r3
 8005776:	f7fb fab1 	bl	8000cdc <__aeabi_uldivmod>
 800577a:	2164      	movs	r1, #100	; 0x64
 800577c:	fbb0 f5f1 	udiv	r5, r0, r1
 8005780:	fb01 0315 	mls	r3, r1, r5, r0
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	3332      	adds	r3, #50	; 0x32
 8005788:	fbb3 f3f1 	udiv	r3, r3, r1
 800578c:	f003 0207 	and.w	r2, r3, #7
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8005796:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800579a:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579c:	60a3      	str	r3, [r4, #8]
  }
}
 800579e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7ff ff60 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 80057a4:	e7da      	b.n	800575c <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a6:	00b2      	lsls	r2, r6, #2
 80057a8:	0fb3      	lsrs	r3, r6, #30
 80057aa:	f7fb fa97 	bl	8000cdc <__aeabi_uldivmod>
 80057ae:	2264      	movs	r2, #100	; 0x64
 80057b0:	fbb0 f1f2 	udiv	r1, r0, r2
 80057b4:	fb02 0311 	mls	r3, r2, r1, r0
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	3332      	adds	r3, #50	; 0x32
 80057bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80057c4:	e7ea      	b.n	800579c <UART_SetConfig+0x9c>
 80057c6:	bf00      	nop
 80057c8:	40011000 	.word	0x40011000

080057cc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	4604      	mov	r4, r0
 80057d0:	460e      	mov	r6, r1
 80057d2:	4617      	mov	r7, r2
 80057d4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	ea36 0303 	bics.w	r3, r6, r3
 80057de:	d101      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80057e0:	2000      	movs	r0, #0
 80057e2:	e028      	b.n	8005836 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	1c6b      	adds	r3, r5, #1
 80057e6:	d0f7      	beq.n	80057d8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057e8:	b125      	cbz	r5, 80057f4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80057ea:	f7ff fb6d 	bl	8004ec8 <HAL_GetTick>
 80057ee:	1bc0      	subs	r0, r0, r7
 80057f0:	4285      	cmp	r5, r0
 80057f2:	d2f0      	bcs.n	80057d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	f102 030c 	add.w	r3, r2, #12
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	320c      	adds	r2, #12
 8005804:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8005808:	6821      	ldr	r1, [r4, #0]
 800580a:	2800      	cmp	r0, #0
 800580c:	d1f2      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	f101 0314 	add.w	r3, r1, #20
 8005812:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	f101 0014 	add.w	r0, r1, #20
 800581e:	e840 3200 	strex	r2, r3, [r0]
 8005822:	2a00      	cmp	r2, #0
 8005824:	d1f3      	bne.n	800580e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8005826:	2320      	movs	r3, #32
 8005828:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800582c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8005830:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005834:	2003      	movs	r0, #3
}
 8005836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005838 <HAL_UART_Init>:
{
 8005838:	b510      	push	{r4, lr}
  if (huart == NULL)
 800583a:	4604      	mov	r4, r0
 800583c:	b340      	cbz	r0, 8005890 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800583e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005842:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005846:	b91b      	cbnz	r3, 8005850 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005848:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800584c:	f7fb fd84 	bl	8001358 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005850:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005852:	2324      	movs	r3, #36	; 0x24
 8005854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005858:	68d3      	ldr	r3, [r2, #12]
 800585a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff ff4d 	bl	8005700 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005876:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800587e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005882:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005886:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800588a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800588e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005890:	2001      	movs	r0, #1
 8005892:	e7fc      	b.n	800588e <HAL_UART_Init+0x56>

08005894 <HAL_UART_Transmit>:
{
 8005894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005896:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005898:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 800589c:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800589e:	2a20      	cmp	r2, #32
{
 80058a0:	4604      	mov	r4, r0
 80058a2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80058a4:	d149      	bne.n	800593a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d045      	beq.n	8005936 <HAL_UART_Transmit+0xa2>
 80058aa:	2f00      	cmp	r7, #0
 80058ac:	d043      	beq.n	8005936 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80058ae:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80058b2:	2a01      	cmp	r2, #1
 80058b4:	d041      	beq.n	800593a <HAL_UART_Transmit+0xa6>
 80058b6:	2201      	movs	r2, #1
 80058b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058be:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80058c6:	f7ff faff 	bl	8004ec8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ca:	68a1      	ldr	r1, [r4, #8]
 80058cc:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80058ce:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80058d4:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80058d6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	d103      	bne.n	80058e2 <HAL_UART_Transmit+0x4e>
 80058da:	6921      	ldr	r1, [r4, #16]
 80058dc:	b909      	cbnz	r1, 80058e2 <HAL_UART_Transmit+0x4e>
 80058de:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80058e0:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 80058e2:	2100      	movs	r1, #0
 80058e4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80058e8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80058ea:	b289      	uxth	r1, r1
 80058ec:	b941      	cbnz	r1, 8005900 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff ff6b 	bl	80057cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 80058f6:	b960      	cbnz	r0, 8005912 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80058f8:	2320      	movs	r3, #32
 80058fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80058fe:	e009      	b.n	8005914 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005900:	2180      	movs	r1, #128	; 0x80
 8005902:	4620      	mov	r0, r4
 8005904:	e9cd 2300 	strd	r2, r3, [sp]
 8005908:	f7ff ff60 	bl	80057cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 800590c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005910:	b110      	cbz	r0, 8005918 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005912:	2003      	movs	r0, #3
}
 8005914:	b003      	add	sp, #12
 8005916:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005918:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800591a:	b94e      	cbnz	r6, 8005930 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800591c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8005920:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005924:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8005926:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005928:	3901      	subs	r1, #1
 800592a:	b289      	uxth	r1, r1
 800592c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800592e:	e7db      	b.n	80058e8 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005930:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005934:	e7f6      	b.n	8005924 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005936:	2001      	movs	r0, #1
 8005938:	e7ec      	b.n	8005914 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800593a:	2002      	movs	r0, #2
 800593c:	e7ea      	b.n	8005914 <HAL_UART_Transmit+0x80>

0800593e <HAL_UART_TxCpltCallback>:
 800593e:	4770      	bx	lr

08005940 <HAL_UART_RxCpltCallback>:
 8005940:	4770      	bx	lr

08005942 <HAL_UART_ErrorCallback>:
 8005942:	4770      	bx	lr

08005944 <UART_DMAAbortOnError>:
{
 8005944:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800594c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800594e:	f7ff fff8 	bl	8005942 <HAL_UART_ErrorCallback>
}
 8005952:	bd08      	pop	{r3, pc}

08005954 <HAL_UARTEx_RxEventCallback>:
}
 8005954:	4770      	bx	lr

08005956 <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005956:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005958:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800595a:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595c:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005962:	d13e      	bne.n	80059e2 <UART_Receive_IT.part.0.isra.0+0x8c>
 8005964:	6901      	ldr	r1, [r0, #16]
 8005966:	2900      	cmp	r1, #0
 8005968:	d13e      	bne.n	80059e8 <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800596a:	6852      	ldr	r2, [r2, #4]
 800596c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005970:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8005974:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005976:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005978:	3b01      	subs	r3, #1
 800597a:	b29b      	uxth	r3, r3
 800597c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800597e:	2b00      	cmp	r3, #0
 8005980:	d12c      	bne.n	80059dc <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005982:	6802      	ldr	r2, [r0, #0]
 8005984:	68d1      	ldr	r1, [r2, #12]
 8005986:	f021 0120 	bic.w	r1, r1, #32
 800598a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800598c:	68d1      	ldr	r1, [r2, #12]
 800598e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005992:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005994:	6951      	ldr	r1, [r2, #20]
 8005996:	f021 0101 	bic.w	r1, r1, #1
 800599a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800599c:	2220      	movs	r2, #32
 800599e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80059a4:	2a01      	cmp	r2, #1
 80059a6:	6802      	ldr	r2, [r0, #0]
 80059a8:	d128      	bne.n	80059fc <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	f102 030c 	add.w	r3, r2, #12
 80059b0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	f102 0c0c 	add.w	ip, r2, #12
 80059bc:	e84c 3100 	strex	r1, r3, [ip]
 80059c0:	2900      	cmp	r1, #0
 80059c2:	d1f3      	bne.n	80059ac <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	06db      	lsls	r3, r3, #27
 80059c8:	d505      	bpl.n	80059d6 <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ca:	9101      	str	r1, [sp, #4]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	6853      	ldr	r3, [r2, #4]
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80059d8:	f7ff ffbc 	bl	8005954 <HAL_UARTEx_RxEventCallback>
}
 80059dc:	b003      	add	sp, #12
 80059de:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059e2:	b939      	cbnz	r1, 80059f4 <UART_Receive_IT.part.0.isra.0+0x9e>
 80059e4:	6901      	ldr	r1, [r0, #16]
 80059e6:	b929      	cbnz	r1, 80059f4 <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059e8:	6852      	ldr	r2, [r2, #4]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80059ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059f0:	3301      	adds	r3, #1
 80059f2:	e7bf      	b.n	8005974 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059f4:	6852      	ldr	r2, [r2, #4]
 80059f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059fa:	e7f7      	b.n	80059ec <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 80059fc:	f7ff ffa0 	bl	8005940 <HAL_UART_RxCpltCallback>
 8005a00:	e7ec      	b.n	80059dc <UART_Receive_IT.part.0.isra.0+0x86>
	...

08005a04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a04:	6803      	ldr	r3, [r0, #0]
{
 8005a06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a08:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a0a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a0c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005a0e:	f012 0f0f 	tst.w	r2, #15
{
 8005a12:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005a14:	d10c      	bne.n	8005a30 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a16:	0695      	lsls	r5, r2, #26
 8005a18:	d570      	bpl.n	8005afc <HAL_UART_IRQHandler+0xf8>
 8005a1a:	068d      	lsls	r5, r1, #26
 8005a1c:	d56e      	bpl.n	8005afc <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a1e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005a22:	2b22      	cmp	r3, #34	; 0x22
 8005a24:	d164      	bne.n	8005af0 <HAL_UART_IRQHandler+0xec>
}
 8005a26:	b003      	add	sp, #12
 8005a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a2c:	f7ff bf93 	b.w	8005956 <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a30:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a34:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8005a38:	4305      	orrs	r5, r0
 8005a3a:	d05f      	beq.n	8005afc <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a3c:	07d5      	lsls	r5, r2, #31
 8005a3e:	d505      	bpl.n	8005a4c <HAL_UART_IRQHandler+0x48>
 8005a40:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a42:	bf42      	ittt	mi
 8005a44:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8005a46:	f043 0301 	orrmi.w	r3, r3, #1
 8005a4a:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4c:	0755      	lsls	r5, r2, #29
 8005a4e:	d504      	bpl.n	8005a5a <HAL_UART_IRQHandler+0x56>
 8005a50:	b118      	cbz	r0, 8005a5a <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5a:	0793      	lsls	r3, r2, #30
 8005a5c:	d504      	bpl.n	8005a68 <HAL_UART_IRQHandler+0x64>
 8005a5e:	b118      	cbz	r0, 8005a68 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a68:	0715      	lsls	r5, r2, #28
 8005a6a:	d507      	bpl.n	8005a7c <HAL_UART_IRQHandler+0x78>
 8005a6c:	f001 0320 	and.w	r3, r1, #32
 8005a70:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a72:	bf1e      	ittt	ne
 8005a74:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8005a76:	f043 0308 	orrne.w	r3, r3, #8
 8005a7a:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d036      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a82:	0690      	lsls	r0, r2, #26
 8005a84:	d508      	bpl.n	8005a98 <HAL_UART_IRQHandler+0x94>
 8005a86:	068a      	lsls	r2, r1, #26
 8005a88:	d506      	bpl.n	8005a98 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005a8e:	2b22      	cmp	r3, #34	; 0x22
 8005a90:	d102      	bne.n	8005a98 <HAL_UART_IRQHandler+0x94>
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7ff ff5f 	bl	8005956 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a9c:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aa2:	f005 0508 	and.w	r5, r5, #8
 8005aa6:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005aa8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aaa:	d023      	beq.n	8005af4 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8005aac:	f7ff fdfa 	bl	80056a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	6953      	ldr	r3, [r2, #20]
 8005ab4:	065b      	lsls	r3, r3, #25
 8005ab6:	d518      	bpl.n	8005aea <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	f102 0314 	add.w	r3, r2, #20
 8005abc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	f102 0014 	add.w	r0, r2, #20
 8005ac8:	e840 3100 	strex	r1, r3, [r0]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d1f3      	bne.n	8005ab8 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8005ad0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ad2:	b150      	cbz	r0, 8005aea <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad4:	4b72      	ldr	r3, [pc, #456]	; (8005ca0 <HAL_UART_IRQHandler+0x29c>)
 8005ad6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad8:	f000 f928 	bl	8005d2c <HAL_DMA_Abort_IT>
 8005adc:	b140      	cbz	r0, 8005af0 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ade:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ae0:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8005ae2:	b003      	add	sp, #12
 8005ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff ff29 	bl	8005942 <HAL_UART_ErrorCallback>
}
 8005af0:	b003      	add	sp, #12
 8005af2:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8005af4:	f7ff ff25 	bl	8005942 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	6425      	str	r5, [r4, #64]	; 0x40
 8005afa:	e7f9      	b.n	8005af0 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005afe:	2801      	cmp	r0, #1
 8005b00:	f040 8091 	bne.w	8005c26 <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b04:	06d5      	lsls	r5, r2, #27
 8005b06:	f140 808e 	bpl.w	8005c26 <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b0a:	06c8      	lsls	r0, r1, #27
 8005b0c:	f140 808b 	bpl.w	8005c26 <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b10:	2200      	movs	r2, #0
 8005b12:	9201      	str	r2, [sp, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	9201      	str	r2, [sp, #4]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	9201      	str	r2, [sp, #4]
 8005b1c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	0655      	lsls	r5, r2, #25
 8005b22:	d54c      	bpl.n	8005bbe <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b26:	680a      	ldr	r2, [r1, #0]
 8005b28:	6852      	ldr	r2, [r2, #4]
 8005b2a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	d0df      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b30:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8005b32:	4290      	cmp	r0, r2
 8005b34:	d9dc      	bls.n	8005af0 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b36:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b38:	69ca      	ldr	r2, [r1, #28]
 8005b3a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005b3e:	d036      	beq.n	8005bae <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	f103 020c 	add.w	r2, r3, #12
 8005b44:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	f103 000c 	add.w	r0, r3, #12
 8005b50:	e840 2100 	strex	r1, r2, [r0]
 8005b54:	2900      	cmp	r1, #0
 8005b56:	d1f3      	bne.n	8005b40 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	f103 0214 	add.w	r2, r3, #20
 8005b5c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	f103 0014 	add.w	r0, r3, #20
 8005b68:	e840 2100 	strex	r1, r2, [r0]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d1f3      	bne.n	8005b58 <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	f103 0214 	add.w	r2, r3, #20
 8005b74:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	f103 0014 	add.w	r0, r3, #20
 8005b80:	e840 2100 	strex	r1, r2, [r0]
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d1f3      	bne.n	8005b70 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f103 020c 	add.w	r2, r3, #12
 8005b94:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	f103 000c 	add.w	r0, r3, #12
 8005ba0:	e840 2100 	strex	r1, r2, [r0]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005baa:	f000 f87b 	bl	8005ca4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005bb0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005bb2:	1ac9      	subs	r1, r1, r3
 8005bb4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff fecc 	bl	8005954 <HAL_UARTEx_RxEventCallback>
 8005bbc:	e798      	b.n	8005af0 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bbe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005bc0:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8005bc2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005bc4:	b289      	uxth	r1, r1
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d092      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005bcc:	1a89      	subs	r1, r1, r2
 8005bce:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	d08d      	beq.n	8005af0 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	f103 020c 	add.w	r2, r3, #12
 8005bd8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	f103 050c 	add.w	r5, r3, #12
 8005be4:	e845 2000 	strex	r0, r2, [r5]
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1f3      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f103 0214 	add.w	r2, r3, #20
 8005bf0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	f103 0514 	add.w	r5, r3, #20
 8005bfc:	e845 2000 	strex	r0, r2, [r5]
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d1f3      	bne.n	8005bec <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 8005c04:	2220      	movs	r2, #32
 8005c06:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	f103 020c 	add.w	r2, r3, #12
 8005c10:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c14:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	f103 050c 	add.w	r5, r3, #12
 8005c1c:	e845 2000 	strex	r0, r2, [r5]
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d1f3      	bne.n	8005c0c <HAL_UART_IRQHandler+0x208>
 8005c24:	e7c7      	b.n	8005bb6 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c26:	0610      	lsls	r0, r2, #24
 8005c28:	d528      	bpl.n	8005c7c <HAL_UART_IRQHandler+0x278>
 8005c2a:	060d      	lsls	r5, r1, #24
 8005c2c:	d526      	bpl.n	8005c7c <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c2e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005c32:	2a21      	cmp	r2, #33	; 0x21
 8005c34:	f47f af5c 	bne.w	8005af0 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c3a:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005c40:	d117      	bne.n	8005c72 <HAL_UART_IRQHandler+0x26e>
 8005c42:	6921      	ldr	r1, [r4, #16]
 8005c44:	b9a9      	cbnz	r1, 8005c72 <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c46:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005c4a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005c4e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c50:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005c52:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005c54:	3a01      	subs	r2, #1
 8005c56:	b292      	uxth	r2, r2
 8005c58:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	f47f af48 	bne.w	8005af0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c66:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	e73e      	b.n	8005af0 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c72:	1c51      	adds	r1, r2, #1
 8005c74:	6221      	str	r1, [r4, #32]
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	e7ea      	b.n	8005c52 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c7c:	0650      	lsls	r0, r2, #25
 8005c7e:	f57f af37 	bpl.w	8005af0 <HAL_UART_IRQHandler+0xec>
 8005c82:	064a      	lsls	r2, r1, #25
 8005c84:	f57f af34 	bpl.w	8005af0 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	2320      	movs	r3, #32
 8005c92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff fe51 	bl	800593e <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005c9c:	e728      	b.n	8005af0 <HAL_UART_IRQHandler+0xec>
 8005c9e:	bf00      	nop
 8005ca0:	08005945 	.word	0x08005945

08005ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005caa:	f7ff f90d 	bl	8004ec8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cae:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005cb2:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8005cb4:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb6:	d006      	beq.n	8005cc6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8005cc2:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	f022 0216 	bic.w	r2, r2, #22
 8005cce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cd6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005cda:	b90a      	cbnz	r2, 8005ce0 <HAL_DMA_Abort+0x3c>
 8005cdc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005cde:	b11a      	cbz	r2, 8005ce8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	f022 0208 	bic.w	r2, r2, #8
 8005ce6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f013 0301 	ands.w	r3, r3, #1
 8005cf8:	d10a      	bne.n	8005d10 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cfa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005cfc:	223f      	movs	r2, #63	; 0x3f
 8005cfe:	408a      	lsls	r2, r1
 8005d00:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005d02:	2201      	movs	r2, #1
 8005d04:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005d08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	e7d9      	b.n	8005cc4 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d10:	f7ff f8da 	bl	8004ec8 <HAL_GetTick>
 8005d14:	1b40      	subs	r0, r0, r5
 8005d16:	2805      	cmp	r0, #5
 8005d18:	d9ea      	bls.n	8005cf0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d1e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8005d20:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d22:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005d26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8005d2a:	e7cb      	b.n	8005cc4 <HAL_DMA_Abort+0x20>

08005d2c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d2c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d003      	beq.n	8005d3c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
 8005d3a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d3c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d3e:	2305      	movs	r3, #5
 8005d40:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005d44:	6813      	ldr	r3, [r2, #0]
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d4c:	2000      	movs	r0, #0
}
 8005d4e:	4770      	bx	lr

08005d50 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d50:	b510      	push	{r4, lr}
 8005d52:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d54:	f001 fe58 	bl	8007a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005d5a:	f001 fe75 	bl	8007a48 <vPortExitCritical>

	return xReturn;
}
 8005d5e:	fab4 f084 	clz	r0, r4
 8005d62:	0940      	lsrs	r0, r0, #5
 8005d64:	bd10      	pop	{r4, pc}

08005d66 <prvCopyDataToQueue>:
{
 8005d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d68:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d6c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8005d6e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d70:	b952      	cbnz	r2, 8005d88 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d72:	6807      	ldr	r7, [r0, #0]
 8005d74:	bb47      	cbnz	r7, 8005dc8 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d76:	6880      	ldr	r0, [r0, #8]
 8005d78:	f001 f9a0 	bl	80070bc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d7c:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d7e:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d80:	3601      	adds	r6, #1
 8005d82:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005d84:	4628      	mov	r0, r5
 8005d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005d88:	b965      	cbnz	r5, 8005da4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d8a:	6840      	ldr	r0, [r0, #4]
 8005d8c:	f002 fdb3 	bl	80088f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d94:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d96:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d98:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d3f0      	bcc.n	8005d80 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	6063      	str	r3, [r4, #4]
 8005da2:	e7ed      	b.n	8005d80 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005da4:	68c0      	ldr	r0, [r0, #12]
 8005da6:	f002 fda6 	bl	80088f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005daa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dac:	68e3      	ldr	r3, [r4, #12]
 8005dae:	4251      	negs	r1, r2
 8005db0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005db2:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005db4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005db6:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005db8:	bf3e      	ittt	cc
 8005dba:	68a3      	ldrcc	r3, [r4, #8]
 8005dbc:	185b      	addcc	r3, r3, r1
 8005dbe:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005dc0:	2d02      	cmp	r5, #2
 8005dc2:	d101      	bne.n	8005dc8 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc4:	b116      	cbz	r6, 8005dcc <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8005dc6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005dc8:	2500      	movs	r5, #0
 8005dca:	e7d9      	b.n	8005d80 <prvCopyDataToQueue+0x1a>
 8005dcc:	4635      	mov	r5, r6
 8005dce:	e7d7      	b.n	8005d80 <prvCopyDataToQueue+0x1a>

08005dd0 <prvCopyDataFromQueue>:
{
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005dd6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dd8:	b16a      	cbz	r2, 8005df6 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dda:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ddc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dde:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005de0:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005de2:	bf28      	it	cs
 8005de4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005de6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005de8:	bf28      	it	cs
 8005dea:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dec:	68d9      	ldr	r1, [r3, #12]
}
 8005dee:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005df2:	f002 bd80 	b.w	80088f6 <memcpy>
}
 8005df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <prvUnlockQueue>:
{
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005e00:	f001 fe02 	bl	8007a08 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005e04:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e08:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005e0c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	dc14      	bgt.n	8005e3c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005e12:	23ff      	movs	r3, #255	; 0xff
 8005e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005e18:	f001 fe16 	bl	8007a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005e1c:	f001 fdf4 	bl	8007a08 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005e20:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e24:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005e28:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	dc12      	bgt.n	8005e54 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e2e:	23ff      	movs	r3, #255	; 0xff
 8005e30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8005e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005e38:	f001 be06 	b.w	8007a48 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0e7      	beq.n	8005e12 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e42:	4630      	mov	r0, r6
 8005e44:	f001 f846 	bl	8006ed4 <xTaskRemoveFromEventList>
 8005e48:	b108      	cbz	r0, 8005e4e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005e4a:	f001 f8cf 	bl	8006fec <vTaskMissedYield>
			--cTxLock;
 8005e4e:	3d01      	subs	r5, #1
 8005e50:	b26d      	sxtb	r5, r5
 8005e52:	e7dc      	b.n	8005e0e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0e9      	beq.n	8005e2e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f001 f83a 	bl	8006ed4 <xTaskRemoveFromEventList>
 8005e60:	b108      	cbz	r0, 8005e66 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005e62:	f001 f8c3 	bl	8006fec <vTaskMissedYield>
				--cRxLock;
 8005e66:	3d01      	subs	r5, #1
 8005e68:	b26d      	sxtb	r5, r5
 8005e6a:	e7de      	b.n	8005e2a <prvUnlockQueue+0x2e>

08005e6c <xQueueGenericReset>:
{
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005e70:	4604      	mov	r4, r0
 8005e72:	b940      	cbnz	r0, 8005e86 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	e7fe      	b.n	8005e84 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005e86:	f001 fdbf 	bl	8007a08 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e8a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8005e8e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e90:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e92:	434b      	muls	r3, r1
 8005e94:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9a:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9c:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e9e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005ea0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ea2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005ea4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005eac:	b9a5      	cbnz	r5, 8005ed8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b173      	cbz	r3, 8005ed0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb2:	f104 0010 	add.w	r0, r4, #16
 8005eb6:	f001 f80d 	bl	8006ed4 <xTaskRemoveFromEventList>
 8005eba:	b148      	cbz	r0, 8005ed0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8005ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005ed0:	f001 fdba 	bl	8007a48 <vPortExitCritical>
}
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ed8:	f104 0010 	add.w	r0, r4, #16
 8005edc:	f001 fc9c 	bl	8007818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ee0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ee4:	f001 fc98 	bl	8007818 <vListInitialise>
 8005ee8:	e7f2      	b.n	8005ed0 <xQueueGenericReset+0x64>

08005eea <xQueueGenericCreateStatic>:
	{
 8005eea:	b513      	push	{r0, r1, r4, lr}
 8005eec:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eee:	b940      	cbnz	r0, 8005f02 <xQueueGenericCreateStatic+0x18>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	e7fe      	b.n	8005f00 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8005f02:	b943      	cbnz	r3, 8005f16 <xQueueGenericCreateStatic+0x2c>
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	e7fe      	b.n	8005f14 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f16:	b14a      	cbz	r2, 8005f2c <xQueueGenericCreateStatic+0x42>
 8005f18:	b991      	cbnz	r1, 8005f40 <xQueueGenericCreateStatic+0x56>
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	e7fe      	b.n	8005f2a <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f2c:	b141      	cbz	r1, 8005f40 <xQueueGenericCreateStatic+0x56>
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	e7fe      	b.n	8005f3e <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f40:	2350      	movs	r3, #80	; 0x50
 8005f42:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	2b50      	cmp	r3, #80	; 0x50
 8005f48:	d008      	beq.n	8005f5c <xQueueGenericCreateStatic+0x72>
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	bf08      	it	eq
 8005f60:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f62:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8005f68:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f6c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f70:	4619      	mov	r1, r3
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff ff7a 	bl	8005e6c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005f78:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005f7c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005f80:	4620      	mov	r0, r4
 8005f82:	b002      	add	sp, #8
 8005f84:	bd10      	pop	{r4, pc}

08005f86 <xQueueGenericSend>:
{
 8005f86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	4688      	mov	r8, r1
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005f92:	4604      	mov	r4, r0
 8005f94:	b940      	cbnz	r0, 8005fa8 <xQueueGenericSend+0x22>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa8:	b951      	cbnz	r1, 8005fc0 <xQueueGenericSend+0x3a>
 8005faa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fac:	b143      	cbz	r3, 8005fc0 <xQueueGenericSend+0x3a>
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	e7fe      	b.n	8005fbe <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fc0:	2f02      	cmp	r7, #2
 8005fc2:	d10b      	bne.n	8005fdc <xQueueGenericSend+0x56>
 8005fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d008      	beq.n	8005fdc <xQueueGenericSend+0x56>
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	e7fe      	b.n	8005fda <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fdc:	f001 f812 	bl	8007004 <xTaskGetSchedulerState>
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	b950      	cbnz	r0, 8005ffa <xQueueGenericSend+0x74>
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	b14b      	cbz	r3, 8005ffc <xQueueGenericSend+0x76>
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericSend+0x72>
 8005ffa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005ffc:	f04f 0900 	mov.w	r9, #0
 8006000:	e037      	b.n	8006072 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006002:	9d01      	ldr	r5, [sp, #4]
 8006004:	b91d      	cbnz	r5, 800600e <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8006006:	f001 fd1f 	bl	8007a48 <vPortExitCritical>
			return errQUEUE_FULL;
 800600a:	2000      	movs	r0, #0
 800600c:	e052      	b.n	80060b4 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800600e:	b916      	cbnz	r6, 8006016 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006010:	a802      	add	r0, sp, #8
 8006012:	f000 ffa3 	bl	8006f5c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006016:	f001 fd17 	bl	8007a48 <vPortExitCritical>
		vTaskSuspendAll();
 800601a:	f000 fd7b 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800601e:	f001 fcf3 	bl	8007a08 <vPortEnterCritical>
 8006022:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006026:	2bff      	cmp	r3, #255	; 0xff
 8006028:	bf08      	it	eq
 800602a:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800602e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006032:	2bff      	cmp	r3, #255	; 0xff
 8006034:	bf08      	it	eq
 8006036:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800603a:	f001 fd05 	bl	8007a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800603e:	a901      	add	r1, sp, #4
 8006040:	a802      	add	r0, sp, #8
 8006042:	f000 ff97 	bl	8006f74 <xTaskCheckForTimeOut>
 8006046:	2800      	cmp	r0, #0
 8006048:	d14a      	bne.n	80060e0 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800604a:	f001 fcdd 	bl	8007a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800604e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006052:	429a      	cmp	r2, r3
 8006054:	d131      	bne.n	80060ba <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006056:	f001 fcf7 	bl	8007a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800605a:	9901      	ldr	r1, [sp, #4]
 800605c:	f104 0010 	add.w	r0, r4, #16
 8006060:	f000 ff00 	bl	8006e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff fec9 	bl	8005dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800606a:	f000 fdf9 	bl	8006c60 <xTaskResumeAll>
 800606e:	b360      	cbz	r0, 80060ca <xQueueGenericSend+0x144>
 8006070:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006072:	f001 fcc9 	bl	8007a08 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006076:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800607a:	429a      	cmp	r2, r3
 800607c:	d301      	bcc.n	8006082 <xQueueGenericSend+0xfc>
 800607e:	2f02      	cmp	r7, #2
 8006080:	d1bf      	bne.n	8006002 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006082:	463a      	mov	r2, r7
 8006084:	4641      	mov	r1, r8
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff fe6d 	bl	8005d66 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800608e:	b11b      	cbz	r3, 8006098 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006090:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006094:	f000 ff1e 	bl	8006ed4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006098:	b148      	cbz	r0, 80060ae <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800609a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800609e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80060ae:	f001 fccb 	bl	8007a48 <vPortExitCritical>
				return pdPASS;
 80060b2:	2001      	movs	r0, #1
}
 80060b4:	b005      	add	sp, #20
 80060b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80060ba:	f001 fcc5 	bl	8007a48 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff fe9c 	bl	8005dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060c4:	f000 fdcc 	bl	8006c60 <xTaskResumeAll>
 80060c8:	e7d2      	b.n	8006070 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80060ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	e7c7      	b.n	8006070 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80060e0:	4620      	mov	r0, r4
 80060e2:	f7ff fe8b 	bl	8005dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fdbb 	bl	8006c60 <xTaskResumeAll>
 80060ea:	e78e      	b.n	800600a <xQueueGenericSend+0x84>

080060ec <xQueueGiveMutexRecursive>:
	{
 80060ec:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80060ee:	4604      	mov	r4, r0
 80060f0:	b940      	cbnz	r0, 8006104 <xQueueGiveMutexRecursive+0x18>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	e7fe      	b.n	8006102 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006104:	6885      	ldr	r5, [r0, #8]
 8006106:	f000 ff77 	bl	8006ff8 <xTaskGetCurrentTaskHandle>
 800610a:	4285      	cmp	r5, r0
 800610c:	d10a      	bne.n	8006124 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	3b01      	subs	r3, #1
 8006112:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006114:	b923      	cbnz	r3, 8006120 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006116:	461a      	mov	r2, r3
 8006118:	4619      	mov	r1, r3
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff ff33 	bl	8005f86 <xQueueGenericSend>
			xReturn = pdPASS;
 8006120:	2001      	movs	r0, #1
		return xReturn;
 8006122:	e000      	b.n	8006126 <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 8006124:	2000      	movs	r0, #0
	}
 8006126:	bd38      	pop	{r3, r4, r5, pc}

08006128 <xQueueCreateMutex>:
	{
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800612c:	2050      	movs	r0, #80	; 0x50
 800612e:	f001 fbb5 	bl	800789c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006132:	4604      	mov	r4, r0
 8006134:	b198      	cbz	r0, 800615e <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006136:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8006138:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800613a:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800613e:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006142:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006144:	f7ff fe92 	bl	8005e6c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006148:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800614c:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800614e:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006150:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006152:	462b      	mov	r3, r5
 8006154:	462a      	mov	r2, r5
 8006156:	4629      	mov	r1, r5
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ff14 	bl	8005f86 <xQueueGenericSend>
	}
 800615e:	4620      	mov	r0, r4
 8006160:	bd70      	pop	{r4, r5, r6, pc}

08006162 <xQueueGenericSendFromISR>:
{
 8006162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006166:	4689      	mov	r9, r1
 8006168:	4690      	mov	r8, r2
 800616a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800616c:	4604      	mov	r4, r0
 800616e:	b940      	cbnz	r0, 8006182 <xQueueGenericSendFromISR+0x20>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006182:	b951      	cbnz	r1, 800619a <xQueueGenericSendFromISR+0x38>
 8006184:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006186:	b143      	cbz	r3, 800619a <xQueueGenericSendFromISR+0x38>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	e7fe      	b.n	8006198 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800619a:	2f02      	cmp	r7, #2
 800619c:	d10b      	bne.n	80061b6 <xQueueGenericSendFromISR+0x54>
 800619e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d008      	beq.n	80061b6 <xQueueGenericSendFromISR+0x54>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061b6:	f001 fd3b 	bl	8007c30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061ba:	f3ef 8611 	mrs	r6, BASEPRI
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d301      	bcc.n	80061da <xQueueGenericSendFromISR+0x78>
 80061d6:	2f02      	cmp	r7, #2
 80061d8:	d123      	bne.n	8006222 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 80061da:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80061e0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061e2:	463a      	mov	r2, r7
 80061e4:	4649      	mov	r1, r9
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff fdbd 	bl	8005d66 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80061ec:	1c6b      	adds	r3, r5, #1
 80061ee:	d113      	bne.n	8006218 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061f2:	b90b      	cbnz	r3, 80061f8 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 80061f4:	2001      	movs	r0, #1
 80061f6:	e00b      	b.n	8006210 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061fc:	f000 fe6a 	bl	8006ed4 <xTaskRemoveFromEventList>
 8006200:	2800      	cmp	r0, #0
 8006202:	d0f7      	beq.n	80061f4 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8006204:	f1b8 0f00 	cmp.w	r8, #0
 8006208:	d0f4      	beq.n	80061f4 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800620a:	2001      	movs	r0, #1
 800620c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006210:	f386 8811 	msr	BASEPRI, r6
}
 8006214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006218:	3501      	adds	r5, #1
 800621a:	b26d      	sxtb	r5, r5
 800621c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006220:	e7e8      	b.n	80061f4 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8006222:	2000      	movs	r0, #0
 8006224:	e7f4      	b.n	8006210 <xQueueGenericSendFromISR+0xae>

08006226 <xQueueReceive>:
{
 8006226:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800622a:	460f      	mov	r7, r1
 800622c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800622e:	4604      	mov	r4, r0
 8006230:	b940      	cbnz	r0, 8006244 <xQueueReceive+0x1e>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	e7fe      	b.n	8006242 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006244:	b951      	cbnz	r1, 800625c <xQueueReceive+0x36>
 8006246:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006248:	b143      	cbz	r3, 800625c <xQueueReceive+0x36>
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	e7fe      	b.n	800625a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625c:	f000 fed2 	bl	8007004 <xTaskGetSchedulerState>
 8006260:	4606      	mov	r6, r0
 8006262:	b950      	cbnz	r0, 800627a <xQueueReceive+0x54>
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	b14b      	cbz	r3, 800627c <xQueueReceive+0x56>
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	e7fe      	b.n	8006278 <xQueueReceive+0x52>
 800627a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800627c:	f04f 0800 	mov.w	r8, #0
 8006280:	e03d      	b.n	80062fe <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006282:	9d01      	ldr	r5, [sp, #4]
 8006284:	b91d      	cbnz	r5, 800628e <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8006286:	f001 fbdf 	bl	8007a48 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800628a:	2000      	movs	r0, #0
 800628c:	e056      	b.n	800633c <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800628e:	b916      	cbnz	r6, 8006296 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006290:	a802      	add	r0, sp, #8
 8006292:	f000 fe63 	bl	8006f5c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006296:	f001 fbd7 	bl	8007a48 <vPortExitCritical>
		vTaskSuspendAll();
 800629a:	f000 fc3b 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629e:	f001 fbb3 	bl	8007a08 <vPortEnterCritical>
 80062a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80062a6:	2bff      	cmp	r3, #255	; 0xff
 80062a8:	bf08      	it	eq
 80062aa:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80062ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80062b2:	2bff      	cmp	r3, #255	; 0xff
 80062b4:	bf08      	it	eq
 80062b6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80062ba:	f001 fbc5 	bl	8007a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062be:	a901      	add	r1, sp, #4
 80062c0:	a802      	add	r0, sp, #8
 80062c2:	f000 fe57 	bl	8006f74 <xTaskCheckForTimeOut>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d141      	bne.n	800634e <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff fd40 	bl	8005d50 <prvIsQueueEmpty>
 80062d0:	b3b8      	cbz	r0, 8006342 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062d2:	9901      	ldr	r1, [sp, #4]
 80062d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062d8:	f000 fdc4 	bl	8006e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff fd8d 	bl	8005dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062e2:	f000 fcbd 	bl	8006c60 <xTaskResumeAll>
 80062e6:	b948      	cbnz	r0, 80062fc <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80062e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80062fe:	f001 fb83 	bl	8007a08 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006302:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006304:	2d00      	cmp	r5, #0
 8006306:	d0bc      	beq.n	8006282 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006308:	4639      	mov	r1, r7
 800630a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800630c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800630e:	f7ff fd5f 	bl	8005dd0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006312:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	b173      	cbz	r3, 8006336 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006318:	f104 0010 	add.w	r0, r4, #16
 800631c:	f000 fdda 	bl	8006ed4 <xTaskRemoveFromEventList>
 8006320:	b148      	cbz	r0, 8006336 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8006322:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006336:	f001 fb87 	bl	8007a48 <vPortExitCritical>
				return pdPASS;
 800633a:	2001      	movs	r0, #1
}
 800633c:	b004      	add	sp, #16
 800633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8006342:	4620      	mov	r0, r4
 8006344:	f7ff fd5a 	bl	8005dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006348:	f000 fc8a 	bl	8006c60 <xTaskResumeAll>
 800634c:	e7d6      	b.n	80062fc <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff fd54 	bl	8005dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006354:	f000 fc84 	bl	8006c60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006358:	4620      	mov	r0, r4
 800635a:	f7ff fcf9 	bl	8005d50 <prvIsQueueEmpty>
 800635e:	2800      	cmp	r0, #0
 8006360:	d0cc      	beq.n	80062fc <xQueueReceive+0xd6>
 8006362:	e792      	b.n	800628a <xQueueReceive+0x64>

08006364 <xQueueSemaphoreTake>:
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8006368:	4604      	mov	r4, r0
{
 800636a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800636c:	b940      	cbnz	r0, 8006380 <xQueueSemaphoreTake+0x1c>
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	e7fe      	b.n	800637e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006380:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006382:	b145      	cbz	r5, 8006396 <xQueueSemaphoreTake+0x32>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	e7fe      	b.n	8006394 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006396:	f000 fe35 	bl	8007004 <xTaskGetSchedulerState>
 800639a:	4606      	mov	r6, r0
 800639c:	b950      	cbnz	r0, 80063b4 <xQueueSemaphoreTake+0x50>
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	b15b      	cbz	r3, 80063ba <xQueueSemaphoreTake+0x56>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	e7fe      	b.n	80063b2 <xQueueSemaphoreTake+0x4e>
 80063b4:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80063b6:	2700      	movs	r7, #0
 80063b8:	e053      	b.n	8006462 <xQueueSemaphoreTake+0xfe>
 80063ba:	4605      	mov	r5, r0
 80063bc:	e7fb      	b.n	80063b6 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	b963      	cbnz	r3, 80063dc <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063c2:	b145      	cbz	r5, 80063d6 <xQueueSemaphoreTake+0x72>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	e7fe      	b.n	80063d4 <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 80063d6:	f001 fb37 	bl	8007a48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80063da:	e062      	b.n	80064a2 <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80063dc:	b916      	cbnz	r6, 80063e4 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063de:	a802      	add	r0, sp, #8
 80063e0:	f000 fdbc 	bl	8006f5c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80063e4:	f001 fb30 	bl	8007a48 <vPortExitCritical>
		vTaskSuspendAll();
 80063e8:	f000 fb94 	bl	8006b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ec:	f001 fb0c 	bl	8007a08 <vPortEnterCritical>
 80063f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063f4:	2bff      	cmp	r3, #255	; 0xff
 80063f6:	bf08      	it	eq
 80063f8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80063fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006400:	2bff      	cmp	r3, #255	; 0xff
 8006402:	bf08      	it	eq
 8006404:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8006408:	f001 fb1e 	bl	8007a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800640c:	a901      	add	r1, sp, #4
 800640e:	a802      	add	r0, sp, #8
 8006410:	f000 fdb0 	bl	8006f74 <xTaskCheckForTimeOut>
 8006414:	2800      	cmp	r0, #0
 8006416:	d14d      	bne.n	80064b4 <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006418:	4620      	mov	r0, r4
 800641a:	f7ff fc99 	bl	8005d50 <prvIsQueueEmpty>
 800641e:	2800      	cmp	r0, #0
 8006420:	d042      	beq.n	80064a8 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	b93b      	cbnz	r3, 8006436 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8006426:	f001 faef 	bl	8007a08 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800642a:	68a0      	ldr	r0, [r4, #8]
 800642c:	f000 fdfa 	bl	8007024 <xTaskPriorityInherit>
 8006430:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006432:	f001 fb09 	bl	8007a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006436:	9901      	ldr	r1, [sp, #4]
 8006438:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800643c:	f000 fd12 	bl	8006e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff fcdb 	bl	8005dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006446:	f000 fc0b 	bl	8006c60 <xTaskResumeAll>
 800644a:	b948      	cbnz	r0, 8006460 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800644c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006462:	f001 fad1 	bl	8007a08 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0a8      	beq.n	80063be <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800646c:	3b01      	subs	r3, #1
 800646e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	b913      	cbnz	r3, 800647a <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006474:	f000 fecc 	bl	8007210 <pvTaskIncrementMutexHeldCount>
 8006478:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	b173      	cbz	r3, 800649c <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800647e:	f104 0010 	add.w	r0, r4, #16
 8006482:	f000 fd27 	bl	8006ed4 <xTaskRemoveFromEventList>
 8006486:	b148      	cbz	r0, 800649c <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8006488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800648c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006490:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800649c:	f001 fad4 	bl	8007a48 <vPortExitCritical>
				return pdPASS;
 80064a0:	2501      	movs	r5, #1
}
 80064a2:	4628      	mov	r0, r5
 80064a4:	b005      	add	sp, #20
 80064a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff fca7 	bl	8005dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ae:	f000 fbd7 	bl	8006c60 <xTaskResumeAll>
 80064b2:	e7d5      	b.n	8006460 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 80064b4:	4620      	mov	r0, r4
 80064b6:	f7ff fca1 	bl	8005dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064ba:	f000 fbd1 	bl	8006c60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064be:	4620      	mov	r0, r4
 80064c0:	f7ff fc46 	bl	8005d50 <prvIsQueueEmpty>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d0cb      	beq.n	8006460 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	d0ea      	beq.n	80064a2 <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 80064cc:	f001 fa9c 	bl	8007a08 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80064d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064d2:	b119      	cbz	r1, 80064dc <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80064d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064dc:	68a0      	ldr	r0, [r4, #8]
 80064de:	f000 fe3f 	bl	8007160 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80064e2:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80064e4:	f001 fab0 	bl	8007a48 <vPortExitCritical>
 80064e8:	e7db      	b.n	80064a2 <xQueueSemaphoreTake+0x13e>

080064ea <xQueueTakeMutexRecursive>:
	{
 80064ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 80064ec:	4604      	mov	r4, r0
 80064ee:	b940      	cbnz	r0, 8006502 <xQueueTakeMutexRecursive+0x18>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	e7fe      	b.n	8006500 <xQueueTakeMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006502:	6885      	ldr	r5, [r0, #8]
 8006504:	9101      	str	r1, [sp, #4]
 8006506:	f000 fd77 	bl	8006ff8 <xTaskGetCurrentTaskHandle>
 800650a:	4285      	cmp	r5, r0
 800650c:	9901      	ldr	r1, [sp, #4]
 800650e:	d105      	bne.n	800651c <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006510:	68e3      	ldr	r3, [r4, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8006516:	2001      	movs	r0, #1
	}
 8006518:	b003      	add	sp, #12
 800651a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff ff21 	bl	8006364 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006522:	2800      	cmp	r0, #0
 8006524:	d0f8      	beq.n	8006518 <xQueueTakeMutexRecursive+0x2e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006526:	68e3      	ldr	r3, [r4, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800652c:	e7f4      	b.n	8006518 <xQueueTakeMutexRecursive+0x2e>
	...

08006530 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <vQueueAddToRegistry+0x18>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	b112      	cbz	r2, 800653c <vQueueAddToRegistry+0xc>
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	b92a      	cbnz	r2, 8006546 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800653a:	2201      	movs	r2, #1
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800653c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006544:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006546:	4770      	bx	lr
 8006548:	20002b4c 	.word	0x20002b4c

0800654c <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800654c:	4b08      	ldr	r3, [pc, #32]	; (8006570 <vQueueUnregisterQueue+0x24>)
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4290      	cmp	r0, r2
 8006552:	d00a      	beq.n	800656a <vQueueUnregisterQueue+0x1e>
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	4290      	cmp	r0, r2
 8006558:	d106      	bne.n	8006568 <vQueueUnregisterQueue+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800655a:	2201      	movs	r2, #1
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800655c:	2100      	movs	r1, #0
 800655e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006566:	6059      	str	r1, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006568:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800656a:	2200      	movs	r2, #0
 800656c:	e7f6      	b.n	800655c <vQueueUnregisterQueue+0x10>
 800656e:	bf00      	nop
 8006570:	20002b4c 	.word	0x20002b4c

08006574 <vQueueDelete>:
{
 8006574:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8006576:	b940      	cbnz	r0, 800658a <vQueueDelete+0x16>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	e7fe      	b.n	8006588 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800658a:	f7ff ffdf 	bl	800654c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800658e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8006592:	b91b      	cbnz	r3, 800659c <vQueueDelete+0x28>
}
 8006594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8006598:	f001 b9ae 	b.w	80078f8 <vPortFree>
}
 800659c:	bd10      	pop	{r4, pc}

0800659e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065a6:	f001 fa2f 	bl	8007a08 <vPortEnterCritical>
 80065aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	bf04      	itt	eq
 80065b2:	2300      	moveq	r3, #0
 80065b4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80065b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80065bc:	2bff      	cmp	r3, #255	; 0xff
 80065be:	bf04      	itt	eq
 80065c0:	2300      	moveq	r3, #0
 80065c2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80065c6:	f001 fa3f 	bl	8007a48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065cc:	b92b      	cbnz	r3, 80065da <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065ce:	4632      	mov	r2, r6
 80065d0:	4629      	mov	r1, r5
 80065d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065d6:	f000 fc5f 	bl	8006e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065da:	4620      	mov	r0, r4
	}
 80065dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80065e0:	f7ff bc0c 	b.w	8005dfc <prvUnlockQueue>

080065e4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065ea:	f001 fa0d 	bl	8007a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065ee:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80065f0:	4e30      	ldr	r6, [pc, #192]	; (80066b4 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4f30      	ldr	r7, [pc, #192]	; (80066b8 <prvAddNewTaskToReadyList+0xd4>)
 80065f6:	3201      	adds	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80065fa:	6835      	ldr	r5, [r6, #0]
 80065fc:	2d00      	cmp	r5, #0
 80065fe:	d14b      	bne.n	8006698 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006600:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d11f      	bne.n	8006648 <prvAddNewTaskToReadyList+0x64>
 8006608:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800660a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800660c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800660e:	f001 f903 	bl	8007818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006612:	2d07      	cmp	r5, #7
 8006614:	f108 0814 	add.w	r8, r8, #20
 8006618:	d1f7      	bne.n	800660a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800661a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80066e0 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800661e:	4d27      	ldr	r5, [pc, #156]	; (80066bc <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8006620:	4640      	mov	r0, r8
 8006622:	f001 f8f9 	bl	8007818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006626:	4628      	mov	r0, r5
 8006628:	f001 f8f6 	bl	8007818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800662c:	4824      	ldr	r0, [pc, #144]	; (80066c0 <prvAddNewTaskToReadyList+0xdc>)
 800662e:	f001 f8f3 	bl	8007818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006632:	4824      	ldr	r0, [pc, #144]	; (80066c4 <prvAddNewTaskToReadyList+0xe0>)
 8006634:	f001 f8f0 	bl	8007818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006638:	4823      	ldr	r0, [pc, #140]	; (80066c8 <prvAddNewTaskToReadyList+0xe4>)
 800663a:	f001 f8ed 	bl	8007818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800663e:	4b23      	ldr	r3, [pc, #140]	; (80066cc <prvAddNewTaskToReadyList+0xe8>)
 8006640:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006644:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <prvAddNewTaskToReadyList+0xec>)
 8006646:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006648:	4a22      	ldr	r2, [pc, #136]	; (80066d4 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 800664a:	4923      	ldr	r1, [pc, #140]	; (80066d8 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 800664c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800664e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8006650:	3301      	adds	r3, #1
 8006652:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006654:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006656:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8006658:	2301      	movs	r3, #1
 800665a:	4093      	lsls	r3, r2
 800665c:	4303      	orrs	r3, r0
 800665e:	2014      	movs	r0, #20
 8006660:	600b      	str	r3, [r1, #0]
 8006662:	fb00 7002 	mla	r0, r0, r2, r7
 8006666:	1d21      	adds	r1, r4, #4
 8006668:	f001 f8e4 	bl	8007834 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800666c:	f001 f9ec 	bl	8007a48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <prvAddNewTaskToReadyList+0xf8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	b173      	cbz	r3, 8006694 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006676:	6833      	ldr	r3, [r6, #0]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d209      	bcs.n	8006694 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8006680:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006688:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	f3bf 8f6f 	isb	sy
}
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <prvAddNewTaskToReadyList+0xf8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1d3      	bne.n	8006648 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a0:	6833      	ldr	r3, [r6, #0]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066a6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80066a8:	bf98      	it	ls
 80066aa:	6034      	strls	r4, [r6, #0]
 80066ac:	e7cc      	b.n	8006648 <prvAddNewTaskToReadyList+0x64>
 80066ae:	bf00      	nop
 80066b0:	20002bf4 	.word	0x20002bf4
 80066b4:	20002b5c 	.word	0x20002b5c
 80066b8:	20002b68 	.word	0x20002b68
 80066bc:	20002c1c 	.word	0x20002c1c
 80066c0:	20002c3c 	.word	0x20002c3c
 80066c4:	20002c68 	.word	0x20002c68
 80066c8:	20002c54 	.word	0x20002c54
 80066cc:	20002b60 	.word	0x20002b60
 80066d0:	20002b64 	.word	0x20002b64
 80066d4:	20002c00 	.word	0x20002c00
 80066d8:	20002c04 	.word	0x20002c04
 80066dc:	20002c50 	.word	0x20002c50
 80066e0:	20002c08 	.word	0x20002c08

080066e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e8:	4e1a      	ldr	r6, [pc, #104]	; (8006754 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 80066ea:	681d      	ldr	r5, [r3, #0]
{
 80066ec:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ee:	6830      	ldr	r0, [r6, #0]
 80066f0:	3004      	adds	r0, #4
{
 80066f2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f4:	f001 f8c1 	bl	800787a <uxListRemove>
 80066f8:	b940      	cbnz	r0, 800670c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066fa:	6832      	ldr	r2, [r6, #0]
 80066fc:	4916      	ldr	r1, [pc, #88]	; (8006758 <prvAddCurrentTaskToDelayedList+0x74>)
 80066fe:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	4082      	lsls	r2, r0
 8006706:	ea23 0302 	bic.w	r3, r3, r2
 800670a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800670c:	1c63      	adds	r3, r4, #1
 800670e:	d107      	bne.n	8006720 <prvAddCurrentTaskToDelayedList+0x3c>
 8006710:	b137      	cbz	r7, 8006720 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006712:	6831      	ldr	r1, [r6, #0]
 8006714:	4811      	ldr	r0, [pc, #68]	; (800675c <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800671a:	3104      	adds	r1, #4
 800671c:	f001 b88a 	b.w	8007834 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	192c      	adds	r4, r5, r4
 8006724:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006726:	d307      	bcc.n	8006738 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <prvAddCurrentTaskToDelayedList+0x7c>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	6831      	ldr	r1, [r6, #0]
}
 800672e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006732:	3104      	adds	r1, #4
 8006734:	f001 b88a 	b.w	800784c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <prvAddCurrentTaskToDelayedList+0x80>)
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	6831      	ldr	r1, [r6, #0]
 800673e:	3104      	adds	r1, #4
 8006740:	f001 f884 	bl	800784c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <prvAddCurrentTaskToDelayedList+0x84>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800674a:	bf88      	it	hi
 800674c:	601c      	strhi	r4, [r3, #0]
}
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	20002c7c 	.word	0x20002c7c
 8006754:	20002b5c 	.word	0x20002b5c
 8006758:	20002c04 	.word	0x20002c04
 800675c:	20002c54 	.word	0x20002c54
 8006760:	20002b64 	.word	0x20002b64
 8006764:	20002b60 	.word	0x20002b60
 8006768:	20002c30 	.word	0x20002c30

0800676c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <prvResetNextTaskUnblockTime+0x1c>)
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <prvResetNextTaskUnblockTime+0x20>)
 8006774:	b919      	cbnz	r1, 800677e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006776:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800677a:	601a      	str	r2, [r3, #0]
}
 800677c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006782:	68d2      	ldr	r2, [r2, #12]
 8006784:	6852      	ldr	r2, [r2, #4]
 8006786:	e7f8      	b.n	800677a <prvResetNextTaskUnblockTime+0xe>
 8006788:	20002b60 	.word	0x20002b60
 800678c:	20002c30 	.word	0x20002c30

08006790 <prvDeleteTCB>:
	{
 8006790:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006792:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 8006796:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006798:	b93b      	cbnz	r3, 80067aa <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800679a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800679c:	f001 f8ac 	bl	80078f8 <vPortFree>
				vPortFree( pxTCB );
 80067a0:	4620      	mov	r0, r4
	}
 80067a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80067a6:	f001 b8a7 	b.w	80078f8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d0f9      	beq.n	80067a2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d008      	beq.n	80067c4 <prvDeleteTCB+0x34>
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	e7fe      	b.n	80067c2 <prvDeleteTCB+0x32>
	}
 80067c4:	bd10      	pop	{r4, pc}
	...

080067c8 <prvIdleTask>:
{
 80067c8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ca:	4c13      	ldr	r4, [pc, #76]	; (8006818 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067cc:	4f13      	ldr	r7, [pc, #76]	; (800681c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80067ce:	4d14      	ldr	r5, [pc, #80]	; (8006820 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	b973      	cbnz	r3, 80067f2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <prvIdleTask+0x5c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d9f8      	bls.n	80067ce <prvIdleTask+0x6>
				taskYIELD();
 80067dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	e7ed      	b.n	80067ce <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80067f2:	f001 f909 	bl	8007a08 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067fa:	1d30      	adds	r0, r6, #4
 80067fc:	f001 f83d 	bl	800787a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	3b01      	subs	r3, #1
 800680a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800680c:	f001 f91c 	bl	8007a48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006810:	4630      	mov	r0, r6
 8006812:	f7ff ffbd 	bl	8006790 <prvDeleteTCB>
 8006816:	e7db      	b.n	80067d0 <prvIdleTask+0x8>
 8006818:	20002bf8 	.word	0x20002bf8
 800681c:	20002c68 	.word	0x20002c68
 8006820:	20002bf4 	.word	0x20002bf4
 8006824:	20002b68 	.word	0x20002b68

08006828 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006830:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006834:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006836:	4606      	mov	r6, r0
 8006838:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800683a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800683c:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800683e:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006840:	f002 f881 	bl	8008946 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006844:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006846:	f1a9 0904 	sub.w	r9, r9, #4
 800684a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800684c:	f029 0907 	bic.w	r9, r9, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006850:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	if( pcName != NULL )
 8006854:	b3b5      	cbz	r5, 80068c4 <prvInitialiseNewTask.constprop.0+0x9c>
 8006856:	1e6b      	subs	r3, r5, #1
 8006858:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800685c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006862:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8006866:	b108      	cbz	r0, 800686c <prvInitialiseNewTask.constprop.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006868:	42ab      	cmp	r3, r5
 800686a:	d1f8      	bne.n	800685e <prvInitialiseNewTask.constprop.0+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800686c:	2300      	movs	r3, #0
 800686e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006872:	9d08      	ldr	r5, [sp, #32]
 8006874:	2d06      	cmp	r5, #6
 8006876:	bf28      	it	cs
 8006878:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800687a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800687e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006880:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006882:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006884:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006888:	f000 ffd1 	bl	800782e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006890:	f104 0018 	add.w	r0, r4, #24
 8006894:	f000 ffcb 	bl	800782e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006898:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800689c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068a0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80068a2:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068a6:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068aa:	463a      	mov	r2, r7
 80068ac:	4631      	mov	r1, r6
 80068ae:	4648      	mov	r0, r9
 80068b0:	f001 f86c 	bl	800798c <pxPortInitialiseStack>
 80068b4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80068b6:	f1b8 0f00 	cmp.w	r8, #0
 80068ba:	d001      	beq.n	80068c0 <prvInitialiseNewTask.constprop.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068bc:	f8c8 4000 	str.w	r4, [r8]
}
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80068c8:	e7d3      	b.n	8006872 <prvInitialiseNewTask.constprop.0+0x4a>

080068ca <xTaskCreateStatic>:
	{
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80068d2:	b945      	cbnz	r5, 80068e6 <xTaskCreateStatic+0x1c>
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	e7fe      	b.n	80068e4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80068e6:	b944      	cbnz	r4, 80068fa <xTaskCreateStatic+0x30>
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	e7fe      	b.n	80068f8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80068fa:	2664      	movs	r6, #100	; 0x64
 80068fc:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068fe:	9e05      	ldr	r6, [sp, #20]
 8006900:	2e64      	cmp	r6, #100	; 0x64
 8006902:	d008      	beq.n	8006916 <xTaskCreateStatic+0x4c>
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	e7fe      	b.n	8006914 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006916:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006918:	2502      	movs	r5, #2
 800691a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800691e:	ad04      	add	r5, sp, #16
 8006920:	9501      	str	r5, [sp, #4]
 8006922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006924:	9402      	str	r4, [sp, #8]
 8006926:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006928:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800692a:	f7ff ff7d 	bl	8006828 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800692e:	4620      	mov	r0, r4
 8006930:	f7ff fe58 	bl	80065e4 <prvAddNewTaskToReadyList>
	}
 8006934:	9804      	ldr	r0, [sp, #16]
 8006936:	b006      	add	sp, #24
 8006938:	bd70      	pop	{r4, r5, r6, pc}

0800693a <xTaskCreate>:
	{
 800693a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800693e:	4607      	mov	r7, r0
 8006940:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006942:	0090      	lsls	r0, r2, #2
	{
 8006944:	4688      	mov	r8, r1
 8006946:	4616      	mov	r6, r2
 8006948:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800694a:	f000 ffa7 	bl	800789c <pvPortMalloc>
			if( pxStack != NULL )
 800694e:	4605      	mov	r5, r0
 8006950:	b1e8      	cbz	r0, 800698e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006952:	2064      	movs	r0, #100	; 0x64
 8006954:	f000 ffa2 	bl	800789c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006958:	4604      	mov	r4, r0
 800695a:	b1a8      	cbz	r0, 8006988 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800695c:	2300      	movs	r3, #0
 800695e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8006964:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696a:	9002      	str	r0, [sp, #8]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4632      	mov	r2, r6
 8006970:	464b      	mov	r3, r9
 8006972:	4641      	mov	r1, r8
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff57 	bl	8006828 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff fe32 	bl	80065e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006980:	2001      	movs	r0, #1
	}
 8006982:	b005      	add	sp, #20
 8006984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006988:	4628      	mov	r0, r5
 800698a:	f000 ffb5 	bl	80078f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006992:	e7f6      	b.n	8006982 <xTaskCreate+0x48>

08006994 <vTaskDelete>:
	{
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	4604      	mov	r4, r0
 8006998:	4d2a      	ldr	r5, [pc, #168]	; (8006a44 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 800699a:	f001 f835 	bl	8007a08 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800699e:	b904      	cbnz	r4, 80069a2 <vTaskDelete+0xe>
 80069a0:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a2:	1d26      	adds	r6, r4, #4
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 ff68 	bl	800787a <uxListRemove>
 80069aa:	b960      	cbnz	r0, 80069c6 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80069ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80069ae:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <vTaskDelete+0xb4>)
 80069b0:	2014      	movs	r0, #20
 80069b2:	4378      	muls	r0, r7
 80069b4:	581b      	ldr	r3, [r3, r0]
 80069b6:	b933      	cbnz	r3, 80069c6 <vTaskDelete+0x32>
 80069b8:	4924      	ldr	r1, [pc, #144]	; (8006a4c <vTaskDelete+0xb8>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	680b      	ldr	r3, [r1, #0]
 80069be:	40ba      	lsls	r2, r7
 80069c0:	ea23 0302 	bic.w	r3, r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069c8:	b11b      	cbz	r3, 80069d2 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ca:	f104 0018 	add.w	r0, r4, #24
 80069ce:	f000 ff54 	bl	800787a <uxListRemove>
			uxTaskNumber++;
 80069d2:	4a1f      	ldr	r2, [pc, #124]	; (8006a50 <vTaskDelete+0xbc>)
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80069da:	682b      	ldr	r3, [r5, #0]
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d11b      	bne.n	8006a18 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80069e0:	481c      	ldr	r0, [pc, #112]	; (8006a54 <vTaskDelete+0xc0>)
 80069e2:	4631      	mov	r1, r6
 80069e4:	f000 ff26 	bl	8007834 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80069e8:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <vTaskDelete+0xc4>)
 80069ea:	6813      	ldr	r3, [r2, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 80069f0:	f001 f82a 	bl	8007a48 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80069f4:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <vTaskDelete+0xc8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	b313      	cbz	r3, 8006a40 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d11f      	bne.n	8006a40 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8006a00:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <vTaskDelete+0xcc>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b193      	cbz	r3, 8006a2c <vTaskDelete+0x98>
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	e7fe      	b.n	8006a16 <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 8006a18:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <vTaskDelete+0xd0>)
 8006a1a:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006a1c:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006a22:	f7ff feb5 	bl	8006790 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8006a26:	f7ff fea1 	bl	800676c <prvResetNextTaskUnblockTime>
 8006a2a:	e7e1      	b.n	80069f0 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8006a2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
	}
 8006a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20002b5c 	.word	0x20002b5c
 8006a48:	20002b68 	.word	0x20002b68
 8006a4c:	20002c04 	.word	0x20002c04
 8006a50:	20002c00 	.word	0x20002c00
 8006a54:	20002c68 	.word	0x20002c68
 8006a58:	20002bf8 	.word	0x20002bf8
 8006a5c:	20002c50 	.word	0x20002c50
 8006a60:	20002bfc 	.word	0x20002bfc
 8006a64:	20002bf4 	.word	0x20002bf4

08006a68 <vTaskStartScheduler>:
{
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a6c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a6e:	aa07      	add	r2, sp, #28
 8006a70:	a906      	add	r1, sp, #24
 8006a72:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a74:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a78:	f7fa fab4 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	9b06      	ldr	r3, [sp, #24]
 8006a82:	9a07      	ldr	r2, [sp, #28]
 8006a84:	4916      	ldr	r1, [pc, #88]	; (8006ae0 <vTaskStartScheduler+0x78>)
 8006a86:	4817      	ldr	r0, [pc, #92]	; (8006ae4 <vTaskStartScheduler+0x7c>)
 8006a88:	e9cd 4300 	strd	r4, r3, [sp]
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	f7ff ff1c 	bl	80068ca <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006a92:	b318      	cbz	r0, 8006adc <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8006a94:	f000 fd26 	bl	80074e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006a98:	2801      	cmp	r0, #1
 8006a9a:	d114      	bne.n	8006ac6 <vTaskStartScheduler+0x5e>
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <vTaskStartScheduler+0x80>)
 8006aae:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <vTaskStartScheduler+0x84>)
 8006ab6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ab8:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <vTaskStartScheduler+0x88>)
 8006aba:	601c      	str	r4, [r3, #0]
}
 8006abc:	b008      	add	sp, #32
 8006abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006ac2:	f001 b82f 	b.w	8007b24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d108      	bne.n	8006adc <vTaskStartScheduler+0x74>
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	e7fe      	b.n	8006ada <vTaskStartScheduler+0x72>
}
 8006adc:	b008      	add	sp, #32
 8006ade:	bd10      	pop	{r4, pc}
 8006ae0:	0800a560 	.word	0x0800a560
 8006ae4:	080067c9 	.word	0x080067c9
 8006ae8:	20002c30 	.word	0x20002c30
 8006aec:	20002c50 	.word	0x20002c50
 8006af0:	20002c7c 	.word	0x20002c7c

08006af4 <vTaskEndScheduler>:
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <vTaskEndScheduler+0x1c>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8006b0a:	f000 bf6b 	b.w	80079e4 <vPortEndScheduler>
 8006b0e:	bf00      	nop
 8006b10:	20002c50 	.word	0x20002c50

08006b14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006b14:	4a02      	ldr	r2, [pc, #8]	; (8006b20 <vTaskSuspendAll+0xc>)
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	6013      	str	r3, [r2, #0]
}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20002bfc 	.word	0x20002bfc

08006b24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006b24:	4b01      	ldr	r3, [pc, #4]	; (8006b2c <xTaskGetTickCount+0x8>)
 8006b26:	6818      	ldr	r0, [r3, #0]
}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20002c7c 	.word	0x20002c7c

08006b30 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b30:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <xTaskIncrementTick+0x104>)
 8006b32:	681b      	ldr	r3, [r3, #0]
{
 8006b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d174      	bne.n	8006c26 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b3c:	4b3e      	ldr	r3, [pc, #248]	; (8006c38 <xTaskIncrementTick+0x108>)
 8006b3e:	681d      	ldr	r5, [r3, #0]
 8006b40:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006b42:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b44:	b9bd      	cbnz	r5, 8006b76 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006b46:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <xTaskIncrementTick+0x10c>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	b142      	cbz	r2, 8006b60 <xTaskIncrementTick+0x30>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	e7fe      	b.n	8006b5e <xTaskIncrementTick+0x2e>
 8006b60:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <xTaskIncrementTick+0x110>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6810      	ldr	r0, [r2, #0]
 8006b66:	6018      	str	r0, [r3, #0]
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	4a36      	ldr	r2, [pc, #216]	; (8006c44 <xTaskIncrementTick+0x114>)
 8006b6c:	6813      	ldr	r3, [r2, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	f7ff fdfb 	bl	800676c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b76:	4e34      	ldr	r6, [pc, #208]	; (8006c48 <xTaskIncrementTick+0x118>)
 8006b78:	4f34      	ldr	r7, [pc, #208]	; (8006c4c <xTaskIncrementTick+0x11c>)
 8006b7a:	6833      	ldr	r3, [r6, #0]
 8006b7c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006c58 <xTaskIncrementTick+0x128>
 8006b80:	429d      	cmp	r5, r3
BaseType_t xSwitchRequired = pdFALSE;
 8006b82:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b86:	d211      	bcs.n	8006bac <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b88:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	2214      	movs	r2, #20
 8006b90:	4353      	muls	r3, r2
 8006b92:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8006b94:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <xTaskIncrementTick+0x120>)
 8006b98:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8006b9a:	bf28      	it	cs
 8006b9c:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bf18      	it	ne
 8006ba2:	2401      	movne	r4, #1
}
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	b003      	add	sp, #12
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bac:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8006c3c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006bb0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8006c5c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb4:	f8da 3000 	ldr.w	r3, [sl]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	b91b      	cbnz	r3, 8006bc4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc0:	6033      	str	r3, [r6, #0]
					break;
 8006bc2:	e7e1      	b.n	8006b88 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc4:	f8da 3000 	ldr.w	r3, [sl]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bce:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8006bd2:	4295      	cmp	r5, r2
 8006bd4:	d201      	bcs.n	8006bda <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8006bd6:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bd8:	e7d6      	b.n	8006b88 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bda:	f10b 0104 	add.w	r1, fp, #4
 8006bde:	4608      	mov	r0, r1
 8006be0:	9101      	str	r1, [sp, #4]
 8006be2:	f000 fe4a 	bl	800787a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006be6:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006bea:	9901      	ldr	r1, [sp, #4]
 8006bec:	b122      	cbz	r2, 8006bf8 <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bee:	f10b 0018 	add.w	r0, fp, #24
 8006bf2:	f000 fe42 	bl	800787a <uxListRemove>
 8006bf6:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8006bf8:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006bfc:	f8d9 3000 	ldr.w	r3, [r9]
 8006c00:	2201      	movs	r2, #1
 8006c02:	4082      	lsls	r2, r0
 8006c04:	431a      	orrs	r2, r3
 8006c06:	f8c9 2000 	str.w	r2, [r9]
 8006c0a:	2214      	movs	r2, #20
 8006c0c:	fb02 7000 	mla	r0, r2, r0, r7
 8006c10:	f000 fe10 	bl	8007834 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c14:	f8d8 1000 	ldr.w	r1, [r8]
 8006c18:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8006c1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	bf28      	it	cs
 8006c22:	2401      	movcs	r4, #1
 8006c24:	e7c6      	b.n	8006bb4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8006c26:	4a0b      	ldr	r2, [pc, #44]	; (8006c54 <xTaskIncrementTick+0x124>)
 8006c28:	6813      	ldr	r3, [r2, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006c2e:	2400      	movs	r4, #0
	return xSwitchRequired;
 8006c30:	e7b8      	b.n	8006ba4 <xTaskIncrementTick+0x74>
 8006c32:	bf00      	nop
 8006c34:	20002bfc 	.word	0x20002bfc
 8006c38:	20002c7c 	.word	0x20002c7c
 8006c3c:	20002b60 	.word	0x20002b60
 8006c40:	20002b64 	.word	0x20002b64
 8006c44:	20002c34 	.word	0x20002c34
 8006c48:	20002c30 	.word	0x20002c30
 8006c4c:	20002b68 	.word	0x20002b68
 8006c50:	20002c80 	.word	0x20002c80
 8006c54:	20002c38 	.word	0x20002c38
 8006c58:	20002b5c 	.word	0x20002b5c
 8006c5c:	20002c04 	.word	0x20002c04

08006c60 <xTaskResumeAll>:
{
 8006c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006c64:	4c32      	ldr	r4, [pc, #200]	; (8006d30 <xTaskResumeAll+0xd0>)
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	b943      	cbnz	r3, 8006c7c <xTaskResumeAll+0x1c>
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	e7fe      	b.n	8006c7a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006c7c:	f000 fec4 	bl	8007a08 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c86:	6824      	ldr	r4, [r4, #0]
 8006c88:	b134      	cbz	r4, 8006c98 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8006c8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006c8c:	f000 fedc 	bl	8007a48 <vPortExitCritical>
}
 8006c90:	4620      	mov	r0, r4
 8006c92:	b002      	add	sp, #8
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c98:	4b26      	ldr	r3, [pc, #152]	; (8006d34 <xTaskResumeAll+0xd4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f4      	beq.n	8006c8a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca0:	4d25      	ldr	r5, [pc, #148]	; (8006d38 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 8006ca2:	4e26      	ldr	r6, [pc, #152]	; (8006d3c <xTaskResumeAll+0xdc>)
 8006ca4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006d4c <xTaskResumeAll+0xec>
 8006ca8:	e01f      	b.n	8006cea <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006caa:	68eb      	ldr	r3, [r5, #12]
 8006cac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cae:	f104 0018 	add.w	r0, r4, #24
 8006cb2:	f000 fde2 	bl	800787a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb6:	1d21      	adds	r1, r4, #4
 8006cb8:	4608      	mov	r0, r1
 8006cba:	9101      	str	r1, [sp, #4]
 8006cbc:	f000 fddd 	bl	800787a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006cc2:	6830      	ldr	r0, [r6, #0]
 8006cc4:	9901      	ldr	r1, [sp, #4]
 8006cc6:	2701      	movs	r7, #1
 8006cc8:	fa07 f302 	lsl.w	r3, r7, r2
 8006ccc:	4303      	orrs	r3, r0
 8006cce:	2014      	movs	r0, #20
 8006cd0:	fb00 8002 	mla	r0, r0, r2, r8
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	f000 fdad 	bl	8007834 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cda:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <xTaskResumeAll+0xe0>)
 8006cdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d301      	bcc.n	8006cea <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 8006ce6:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <xTaskResumeAll+0xe4>)
 8006ce8:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1dc      	bne.n	8006caa <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 8006cf0:	b10c      	cbz	r4, 8006cf6 <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8006cf2:	f7ff fd3b 	bl	800676c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cf6:	4d14      	ldr	r5, [pc, #80]	; (8006d48 <xTaskResumeAll+0xe8>)
 8006cf8:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006cfa:	b144      	cbz	r4, 8006d0e <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 8006cfc:	4e11      	ldr	r6, [pc, #68]	; (8006d44 <xTaskResumeAll+0xe4>)
 8006cfe:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006d00:	f7ff ff16 	bl	8006b30 <xTaskIncrementTick>
 8006d04:	b100      	cbz	r0, 8006d08 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8006d06:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d08:	3c01      	subs	r4, #1
 8006d0a:	d1f9      	bne.n	8006d00 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 8006d0c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <xTaskResumeAll+0xe4>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0b9      	beq.n	8006c8a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006d16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006d2a:	2401      	movs	r4, #1
 8006d2c:	e7ae      	b.n	8006c8c <xTaskResumeAll+0x2c>
 8006d2e:	bf00      	nop
 8006d30:	20002bfc 	.word	0x20002bfc
 8006d34:	20002bf4 	.word	0x20002bf4
 8006d38:	20002c3c 	.word	0x20002c3c
 8006d3c:	20002c04 	.word	0x20002c04
 8006d40:	20002b5c 	.word	0x20002b5c
 8006d44:	20002c80 	.word	0x20002c80
 8006d48:	20002c38 	.word	0x20002c38
 8006d4c:	20002b68 	.word	0x20002b68

08006d50 <vTaskDelay>:
	{
 8006d50:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d52:	b950      	cbnz	r0, 8006d6a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006d54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
	}
 8006d68:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <vTaskDelay+0x44>)
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	b141      	cbz	r1, 8006d82 <vTaskDelay+0x32>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	e7fe      	b.n	8006d80 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006d82:	f7ff fec7 	bl	8006b14 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d86:	f7ff fcad 	bl	80066e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006d8a:	f7ff ff69 	bl	8006c60 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0e0      	beq.n	8006d54 <vTaskDelay+0x4>
 8006d92:	e7e9      	b.n	8006d68 <vTaskDelay+0x18>
 8006d94:	20002bfc 	.word	0x20002bfc

08006d98 <vTaskSetApplicationTaskTag>:
	{
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	b908      	cbnz	r0, 8006da4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <vTaskSetApplicationTaskTag+0x1c>)
 8006da2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8006da4:	f000 fe30 	bl	8007a08 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8006da8:	65a5      	str	r5, [r4, #88]	; 0x58
	}
 8006daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8006dae:	f000 be4b 	b.w	8007a48 <vPortExitCritical>
 8006db2:	bf00      	nop
 8006db4:	20002b5c 	.word	0x20002b5c

08006db8 <xTaskGetApplicationTaskTag>:
	{
 8006db8:	b513      	push	{r0, r1, r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 8006dba:	4604      	mov	r4, r0
 8006dbc:	b908      	cbnz	r0, 8006dc2 <xTaskGetApplicationTaskTag+0xa>
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <xTaskGetApplicationTaskTag+0x1c>)
 8006dc0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8006dc2:	f000 fe21 	bl	8007a08 <vPortEnterCritical>
			xReturn = pxTCB->pxTaskTag;
 8006dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc8:	9001      	str	r0, [sp, #4]
		taskEXIT_CRITICAL();
 8006dca:	f000 fe3d 	bl	8007a48 <vPortExitCritical>
	}
 8006dce:	9801      	ldr	r0, [sp, #4]
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd10      	pop	{r4, pc}
 8006dd4:	20002b5c 	.word	0x20002b5c

08006dd8 <vTaskSwitchContext>:
{
 8006dd8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <vTaskSwitchContext+0x78>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <vTaskSwitchContext+0x7c>)
 8006de0:	b112      	cbz	r2, 8006de8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
}
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8006de8:	4c1b      	ldr	r4, [pc, #108]	; (8006e58 <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 8006dea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d804      	bhi.n	8006e02 <vTaskSwitchContext+0x2a>
 8006df8:	6820      	ldr	r0, [r4, #0]
 8006dfa:	6821      	ldr	r1, [r4, #0]
 8006dfc:	3134      	adds	r1, #52	; 0x34
 8006dfe:	f7fa f8ef 	bl	8000fe0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e02:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <vTaskSwitchContext+0x84>)
 8006e04:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e06:	fab2 f282 	clz	r2, r2
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	f1c2 021f 	rsb	r2, r2, #31
 8006e10:	2314      	movs	r3, #20
 8006e12:	4913      	ldr	r1, [pc, #76]	; (8006e60 <vTaskSwitchContext+0x88>)
 8006e14:	4353      	muls	r3, r2
 8006e16:	18c8      	adds	r0, r1, r3
 8006e18:	58cd      	ldr	r5, [r1, r3]
 8006e1a:	b945      	cbnz	r5, 8006e2e <vTaskSwitchContext+0x56>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	e7fe      	b.n	8006e2c <vTaskSwitchContext+0x54>
 8006e2e:	6845      	ldr	r5, [r0, #4]
 8006e30:	3308      	adds	r3, #8
 8006e32:	686d      	ldr	r5, [r5, #4]
 8006e34:	6045      	str	r5, [r0, #4]
 8006e36:	440b      	add	r3, r1
 8006e38:	429d      	cmp	r5, r3
 8006e3a:	bf04      	itt	eq
 8006e3c:	686b      	ldreq	r3, [r5, #4]
 8006e3e:	6043      	streq	r3, [r0, #4]
 8006e40:	2314      	movs	r3, #20
 8006e42:	fb03 1202 	mla	r2, r3, r2, r1
 8006e46:	6853      	ldr	r3, [r2, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	6023      	str	r3, [r4, #0]
}
 8006e4c:	e7cb      	b.n	8006de6 <vTaskSwitchContext+0xe>
 8006e4e:	bf00      	nop
 8006e50:	20002bfc 	.word	0x20002bfc
 8006e54:	20002c80 	.word	0x20002c80
 8006e58:	20002b5c 	.word	0x20002b5c
 8006e5c:	20002c04 	.word	0x20002c04
 8006e60:	20002b68 	.word	0x20002b68

08006e64 <vTaskPlaceOnEventList>:
{
 8006e64:	b510      	push	{r4, lr}
 8006e66:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006e68:	b940      	cbnz	r0, 8006e7c <vTaskPlaceOnEventList+0x18>
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	e7fe      	b.n	8006e7a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <vTaskPlaceOnEventList+0x30>)
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	3118      	adds	r1, #24
 8006e82:	f000 fce3 	bl	800784c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e86:	4620      	mov	r0, r4
 8006e88:	2101      	movs	r1, #1
}
 8006e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e8e:	f7ff bc29 	b.w	80066e4 <prvAddCurrentTaskToDelayedList>
 8006e92:	bf00      	nop
 8006e94:	20002b5c 	.word	0x20002b5c

08006e98 <vTaskPlaceOnEventListRestricted>:
	{
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006e9e:	b940      	cbnz	r0, 8006eb2 <vTaskPlaceOnEventListRestricted+0x1a>
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	e7fe      	b.n	8006eb0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eb2:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <vTaskPlaceOnEventListRestricted+0x38>)
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	3118      	adds	r1, #24
 8006eb8:	f000 fcbc 	bl	8007834 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006ebc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	bf0c      	ite	eq
 8006ec2:	4628      	moveq	r0, r5
 8006ec4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8006ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ecc:	f7ff bc0a 	b.w	80066e4 <prvAddCurrentTaskToDelayedList>
 8006ed0:	20002b5c 	.word	0x20002b5c

08006ed4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	68c3      	ldr	r3, [r0, #12]
{
 8006ed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006eda:	b944      	cbnz	r4, 8006eee <xTaskRemoveFromEventList+0x1a>
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	e7fe      	b.n	8006eec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eee:	f104 0118 	add.w	r1, r4, #24
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	9101      	str	r1, [sp, #4]
 8006ef6:	f000 fcc0 	bl	800787a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <xTaskRemoveFromEventList+0x70>)
 8006efc:	9901      	ldr	r1, [sp, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	b9f3      	cbnz	r3, 8006f40 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f02:	1d21      	adds	r1, r4, #4
 8006f04:	4608      	mov	r0, r1
 8006f06:	9101      	str	r1, [sp, #4]
 8006f08:	f000 fcb7 	bl	800787a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f0c:	480e      	ldr	r0, [pc, #56]	; (8006f48 <xTaskRemoveFromEventList+0x74>)
 8006f0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f10:	6805      	ldr	r5, [r0, #0]
 8006f12:	9901      	ldr	r1, [sp, #4]
 8006f14:	2301      	movs	r3, #1
 8006f16:	4093      	lsls	r3, r2
 8006f18:	432b      	orrs	r3, r5
 8006f1a:	6003      	str	r3, [r0, #0]
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <xTaskRemoveFromEventList+0x78>)
 8006f1e:	2014      	movs	r0, #20
 8006f20:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f24:	f000 fc86 	bl	8007834 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <xTaskRemoveFromEventList+0x7c>)
 8006f2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006f32:	bf85      	ittet	hi
 8006f34:	4b07      	ldrhi	r3, [pc, #28]	; (8006f54 <xTaskRemoveFromEventList+0x80>)
 8006f36:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8006f38:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8006f3a:	6018      	strhi	r0, [r3, #0]
}
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f40:	4805      	ldr	r0, [pc, #20]	; (8006f58 <xTaskRemoveFromEventList+0x84>)
 8006f42:	e7ef      	b.n	8006f24 <xTaskRemoveFromEventList+0x50>
 8006f44:	20002bfc 	.word	0x20002bfc
 8006f48:	20002c04 	.word	0x20002c04
 8006f4c:	20002b68 	.word	0x20002b68
 8006f50:	20002b5c 	.word	0x20002b5c
 8006f54:	20002c80 	.word	0x20002c80
 8006f58:	20002c3c 	.word	0x20002c3c

08006f5c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <vTaskInternalSetTimeOutState+0x10>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f62:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <vTaskInternalSetTimeOutState+0x14>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6043      	str	r3, [r0, #4]
}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20002c34 	.word	0x20002c34
 8006f70:	20002c7c 	.word	0x20002c7c

08006f74 <xTaskCheckForTimeOut>:
{
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006f78:	4605      	mov	r5, r0
 8006f7a:	b940      	cbnz	r0, 8006f8e <xTaskCheckForTimeOut+0x1a>
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	e7fe      	b.n	8006f8c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006f8e:	b941      	cbnz	r1, 8006fa2 <xTaskCheckForTimeOut+0x2e>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	e7fe      	b.n	8006fa0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006fa2:	f000 fd31 	bl	8007a08 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <xTaskCheckForTimeOut+0x70>)
 8006fa8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	d010      	beq.n	8006fd2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fb0:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <xTaskCheckForTimeOut+0x74>)
 8006fb2:	682e      	ldr	r6, [r5, #0]
 8006fb4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fb6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fb8:	4286      	cmp	r6, r0
 8006fba:	d001      	beq.n	8006fc0 <xTaskCheckForTimeOut+0x4c>
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	d90f      	bls.n	8006fe0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fc0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fc2:	4283      	cmp	r3, r0
 8006fc4:	d90a      	bls.n	8006fdc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	4413      	add	r3, r2
 8006fca:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f7ff ffc5 	bl	8006f5c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006fd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006fd4:	f000 fd38 	bl	8007a48 <vPortExitCritical>
}
 8006fd8:	4620      	mov	r0, r4
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006fe0:	2401      	movs	r4, #1
 8006fe2:	e7f7      	b.n	8006fd4 <xTaskCheckForTimeOut+0x60>
 8006fe4:	20002c7c 	.word	0x20002c7c
 8006fe8:	20002c34 	.word	0x20002c34

08006fec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <vTaskMissedYield+0x8>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
}
 8006ff2:	4770      	bx	lr
 8006ff4:	20002c80 	.word	0x20002c80

08006ff8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006ff8:	4b01      	ldr	r3, [pc, #4]	; (8007000 <xTaskGetCurrentTaskHandle+0x8>)
 8006ffa:	6818      	ldr	r0, [r3, #0]
	}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20002b5c 	.word	0x20002b5c

08007004 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <xTaskGetSchedulerState+0x18>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	b133      	cbz	r3, 8007018 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <xTaskGetSchedulerState+0x1c>)
 800700c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf0c      	ite	eq
 8007012:	2002      	moveq	r0, #2
 8007014:	2000      	movne	r0, #0
 8007016:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007018:	2001      	movs	r0, #1
	}
 800701a:	4770      	bx	lr
 800701c:	20002c50 	.word	0x20002c50
 8007020:	20002bfc 	.word	0x20002bfc

08007024 <xTaskPriorityInherit>:
	{
 8007024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007026:	4604      	mov	r4, r0
 8007028:	2800      	cmp	r0, #0
 800702a:	d031      	beq.n	8007090 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800702c:	4d20      	ldr	r5, [pc, #128]	; (80070b0 <xTaskPriorityInherit+0x8c>)
 800702e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007030:	682a      	ldr	r2, [r5, #0]
 8007032:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007034:	4293      	cmp	r3, r2
 8007036:	d233      	bcs.n	80070a0 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007038:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800703a:	4e1e      	ldr	r6, [pc, #120]	; (80070b4 <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800703c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	bfa1      	itttt	ge
 8007040:	682a      	ldrge	r2, [r5, #0]
 8007042:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8007044:	f1c2 0207 	rsbge	r2, r2, #7
 8007048:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800704a:	2214      	movs	r2, #20
 800704c:	fb02 6303 	mla	r3, r2, r3, r6
 8007050:	6942      	ldr	r2, [r0, #20]
 8007052:	429a      	cmp	r2, r3
 8007054:	d11e      	bne.n	8007094 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007056:	1d01      	adds	r1, r0, #4
 8007058:	4608      	mov	r0, r1
 800705a:	9101      	str	r1, [sp, #4]
 800705c:	f000 fc0d 	bl	800787a <uxListRemove>
 8007060:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <xTaskPriorityInherit+0x94>)
 8007062:	9901      	ldr	r1, [sp, #4]
 8007064:	b930      	cbnz	r0, 8007074 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007066:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	2001      	movs	r0, #1
 800706c:	40b8      	lsls	r0, r7
 800706e:	ea22 0200 	bic.w	r2, r2, r0
 8007072:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007074:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007076:	681d      	ldr	r5, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800707a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800707c:	2401      	movs	r4, #1
 800707e:	fa04 f002 	lsl.w	r0, r4, r2
 8007082:	4328      	orrs	r0, r5
 8007084:	6018      	str	r0, [r3, #0]
 8007086:	2014      	movs	r0, #20
 8007088:	fb00 6002 	mla	r0, r0, r2, r6
 800708c:	f000 fbd2 	bl	8007834 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8007090:	4620      	mov	r0, r4
		return xReturn;
 8007092:	e003      	b.n	800709c <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800709a:	2001      	movs	r0, #1
	}
 800709c:	b003      	add	sp, #12
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80070a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80070a6:	42a0      	cmp	r0, r4
 80070a8:	bf2c      	ite	cs
 80070aa:	2000      	movcs	r0, #0
 80070ac:	2001      	movcc	r0, #1
 80070ae:	e7f5      	b.n	800709c <xTaskPriorityInherit+0x78>
 80070b0:	20002b5c 	.word	0x20002b5c
 80070b4:	20002b68 	.word	0x20002b68
 80070b8:	20002c04 	.word	0x20002c04

080070bc <xTaskPriorityDisinherit>:
	{
 80070bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80070be:	4604      	mov	r4, r0
 80070c0:	b910      	cbnz	r0, 80070c8 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 80070c2:	2000      	movs	r0, #0
	}
 80070c4:	b003      	add	sp, #12
 80070c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80070c8:	4b22      	ldr	r3, [pc, #136]	; (8007154 <xTaskPriorityDisinherit+0x98>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4283      	cmp	r3, r0
 80070ce:	d008      	beq.n	80070e2 <xTaskPriorityDisinherit+0x26>
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	e7fe      	b.n	80070e0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80070e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e4:	b943      	cbnz	r3, 80070f8 <xTaskPriorityDisinherit+0x3c>
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	e7fe      	b.n	80070f6 <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80070fa:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 80070fc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070fe:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007100:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007102:	d0de      	beq.n	80070c2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1dc      	bne.n	80070c2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007108:	1d01      	adds	r1, r0, #4
 800710a:	4608      	mov	r0, r1
 800710c:	9101      	str	r1, [sp, #4]
 800710e:	f000 fbb4 	bl	800787a <uxListRemove>
 8007112:	4f11      	ldr	r7, [pc, #68]	; (8007158 <xTaskPriorityDisinherit+0x9c>)
 8007114:	4a11      	ldr	r2, [pc, #68]	; (800715c <xTaskPriorityDisinherit+0xa0>)
 8007116:	9901      	ldr	r1, [sp, #4]
 8007118:	b950      	cbnz	r0, 8007130 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800711a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800711c:	2614      	movs	r6, #20
 800711e:	4346      	muls	r6, r0
 8007120:	59bb      	ldr	r3, [r7, r6]
 8007122:	b92b      	cbnz	r3, 8007130 <xTaskPriorityDisinherit+0x74>
 8007124:	6813      	ldr	r3, [r2, #0]
 8007126:	2501      	movs	r5, #1
 8007128:	4085      	lsls	r5, r0
 800712a:	ea23 0305 	bic.w	r3, r3, r5
 800712e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007130:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007132:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007134:	f1c3 0007 	rsb	r0, r3, #7
 8007138:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800713a:	6810      	ldr	r0, [r2, #0]
 800713c:	2401      	movs	r4, #1
 800713e:	fa04 f503 	lsl.w	r5, r4, r3
 8007142:	4305      	orrs	r5, r0
 8007144:	2014      	movs	r0, #20
 8007146:	fb00 7003 	mla	r0, r0, r3, r7
 800714a:	6015      	str	r5, [r2, #0]
 800714c:	f000 fb72 	bl	8007834 <vListInsertEnd>
					xReturn = pdTRUE;
 8007150:	4620      	mov	r0, r4
		return xReturn;
 8007152:	e7b7      	b.n	80070c4 <xTaskPriorityDisinherit+0x8>
 8007154:	20002b5c 	.word	0x20002b5c
 8007158:	20002b68 	.word	0x20002b68
 800715c:	20002c04 	.word	0x20002c04

08007160 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007160:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007162:	4604      	mov	r4, r0
 8007164:	2800      	cmp	r0, #0
 8007166:	d04b      	beq.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 8007168:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800716a:	b942      	cbnz	r2, 800717e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	e7fe      	b.n	800717c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800717e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007180:	4299      	cmp	r1, r3
 8007182:	bf38      	it	cc
 8007184:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007186:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007188:	428b      	cmp	r3, r1
 800718a:	d039      	beq.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800718c:	2a01      	cmp	r2, #1
 800718e:	d137      	bne.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 8007190:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	4282      	cmp	r2, r0
 8007196:	d108      	bne.n	80071aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	e7fe      	b.n	80071a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071aa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071ac:	4d16      	ldr	r5, [pc, #88]	; (8007208 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 80071ae:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071b0:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071b2:	f04f 0214 	mov.w	r2, #20
 80071b6:	fb02 5303 	mla	r3, r2, r3, r5
 80071ba:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071bc:	bfa4      	itt	ge
 80071be:	f1c1 0107 	rsbge	r1, r1, #7
 80071c2:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d11b      	bne.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c8:	1d01      	adds	r1, r0, #4
 80071ca:	4608      	mov	r0, r1
 80071cc:	9101      	str	r1, [sp, #4]
 80071ce:	f000 fb54 	bl	800787a <uxListRemove>
 80071d2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80071d4:	4a0d      	ldr	r2, [pc, #52]	; (800720c <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80071d6:	9901      	ldr	r1, [sp, #4]
 80071d8:	b928      	cbnz	r0, 80071e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	2001      	movs	r0, #1
 80071de:	40a0      	lsls	r0, r4
 80071e0:	ea23 0300 	bic.w	r3, r3, r0
 80071e4:	6013      	str	r3, [r2, #0]
						prvAddTaskToReadyList( pxTCB );
 80071e6:	6810      	ldr	r0, [r2, #0]
 80071e8:	2301      	movs	r3, #1
 80071ea:	40a3      	lsls	r3, r4
 80071ec:	4303      	orrs	r3, r0
 80071ee:	2014      	movs	r0, #20
 80071f0:	fb00 5004 	mla	r0, r0, r4, r5
 80071f4:	6013      	str	r3, [r2, #0]
	}
 80071f6:	b003      	add	sp, #12
 80071f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80071fc:	f000 bb1a 	b.w	8007834 <vListInsertEnd>
	}
 8007200:	b003      	add	sp, #12
 8007202:	bd30      	pop	{r4, r5, pc}
 8007204:	20002b5c 	.word	0x20002b5c
 8007208:	20002b68 	.word	0x20002b68
 800720c:	20002c04 	.word	0x20002c04

08007210 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <pvTaskIncrementMutexHeldCount+0x14>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	b11a      	cbz	r2, 800721e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007216:	6819      	ldr	r1, [r3, #0]
 8007218:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800721a:	3201      	adds	r2, #1
 800721c:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800721e:	6818      	ldr	r0, [r3, #0]
	}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20002b5c 	.word	0x20002b5c

08007228 <ulTaskNotifyTake>:
	{
 8007228:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800722a:	4c17      	ldr	r4, [pc, #92]	; (8007288 <ulTaskNotifyTake+0x60>)
	{
 800722c:	4606      	mov	r6, r0
 800722e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8007230:	f000 fbea 	bl	8007a08 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007238:	b98b      	cbnz	r3, 800725e <ulTaskNotifyTake+0x36>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	2101      	movs	r1, #1
 800723e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8007242:	b165      	cbz	r5, 800725e <ulTaskNotifyTake+0x36>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff fa4d 	bl	80066e4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800724a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800725e:	f000 fbf3 	bl	8007a48 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007262:	f000 fbd1 	bl	8007a08 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 800726a:	b11d      	cbz	r5, 8007274 <ulTaskNotifyTake+0x4c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800726c:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800726e:	b14e      	cbz	r6, 8007284 <ulTaskNotifyTake+0x5c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007270:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007272:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 800727c:	f000 fbe4 	bl	8007a48 <vPortExitCritical>
	}
 8007280:	4628      	mov	r0, r5
 8007282:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007284:	1e6a      	subs	r2, r5, #1
 8007286:	e7f4      	b.n	8007272 <ulTaskNotifyTake+0x4a>
 8007288:	20002b5c 	.word	0x20002b5c

0800728c <xTaskGenericNotify>:
	{
 800728c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800728e:	460e      	mov	r6, r1
 8007290:	4617      	mov	r7, r2
 8007292:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8007294:	4604      	mov	r4, r0
 8007296:	b940      	cbnz	r0, 80072aa <xTaskGenericNotify+0x1e>
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	e7fe      	b.n	80072a8 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 80072aa:	f000 fbad 	bl	8007a08 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80072ae:	b10d      	cbz	r5, 80072b4 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80072b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80072b2:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80072b4:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072b8:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80072ba:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			switch( eAction )
 80072c0:	2f04      	cmp	r7, #4
 80072c2:	d817      	bhi.n	80072f4 <xTaskGenericNotify+0x68>
 80072c4:	e8df f007 	tbb	[pc, r7]
 80072c8:	0507030a 	.word	0x0507030a
 80072cc:	12          	.byte	0x12
 80072cd:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 80072ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072d0:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 80072d2:	65e6      	str	r6, [r4, #92]	; 0x5c
 80072d4:	e002      	b.n	80072dc <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 80072d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80072d8:	3301      	adds	r3, #1
 80072da:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80072dc:	2d01      	cmp	r5, #1
 80072de:	d015      	beq.n	800730c <xTaskGenericNotify+0x80>
	{
 80072e0:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80072e2:	f000 fbb1 	bl	8007a48 <vPortExitCritical>
	}
 80072e6:	4628      	mov	r0, r5
 80072e8:	b003      	add	sp, #12
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072ec:	2d02      	cmp	r5, #2
 80072ee:	d1f0      	bne.n	80072d2 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 80072f0:	2500      	movs	r5, #0
 80072f2:	e7f6      	b.n	80072e2 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80072f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80072f6:	3301      	adds	r3, #1
 80072f8:	d0f0      	beq.n	80072dc <xTaskGenericNotify+0x50>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	e7fe      	b.n	800730a <xTaskGenericNotify+0x7e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800730c:	1d21      	adds	r1, r4, #4
 800730e:	4608      	mov	r0, r1
 8007310:	9101      	str	r1, [sp, #4]
 8007312:	f000 fab2 	bl	800787a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007316:	4815      	ldr	r0, [pc, #84]	; (800736c <xTaskGenericNotify+0xe0>)
 8007318:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800731a:	6806      	ldr	r6, [r0, #0]
 800731c:	9901      	ldr	r1, [sp, #4]
 800731e:	fa05 f302 	lsl.w	r3, r5, r2
 8007322:	4333      	orrs	r3, r6
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <xTaskGenericNotify+0xe4>)
 8007328:	2014      	movs	r0, #20
 800732a:	fb00 3002 	mla	r0, r0, r2, r3
 800732e:	f000 fa81 	bl	8007834 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007334:	b143      	cbz	r3, 8007348 <xTaskGenericNotify+0xbc>
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	e7fe      	b.n	8007346 <xTaskGenericNotify+0xba>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <xTaskGenericNotify+0xe8>)
 800734a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	429a      	cmp	r2, r3
 8007352:	d9c5      	bls.n	80072e0 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8007354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	e7bb      	b.n	80072e2 <xTaskGenericNotify+0x56>
 800736a:	bf00      	nop
 800736c:	20002c04 	.word	0x20002c04
 8007370:	20002b68 	.word	0x20002b68
 8007374:	20002b5c 	.word	0x20002b5c

08007378 <vTaskNotifyGiveFromISR>:
	{
 8007378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737a:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 800737c:	4604      	mov	r4, r0
 800737e:	b940      	cbnz	r0, 8007392 <vTaskNotifyGiveFromISR+0x1a>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	e7fe      	b.n	8007390 <vTaskNotifyGiveFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007392:	f000 fc4d 	bl	8007c30 <vPortValidateInterruptPriority>
	__asm volatile
 8007396:	f3ef 8711 	mrs	r7, BASEPRI
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073aa:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073ac:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80073b0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 80073b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073b6:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 80073b8:	f103 0301 	add.w	r3, r3, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80073bc:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 80073be:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073c0:	d12a      	bne.n	8007418 <vTaskNotifyGiveFromISR+0xa0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073c4:	b143      	cbz	r3, 80073d8 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	e7fe      	b.n	80073d6 <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b13      	ldr	r3, [pc, #76]	; (8007428 <vTaskNotifyGiveFromISR+0xb0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	bb03      	cbnz	r3, 8007420 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073de:	1d21      	adds	r1, r4, #4
 80073e0:	4608      	mov	r0, r1
 80073e2:	9101      	str	r1, [sp, #4]
 80073e4:	f000 fa49 	bl	800787a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073e8:	4a10      	ldr	r2, [pc, #64]	; (800742c <vTaskNotifyGiveFromISR+0xb4>)
 80073ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80073ec:	6810      	ldr	r0, [r2, #0]
 80073ee:	9901      	ldr	r1, [sp, #4]
 80073f0:	409d      	lsls	r5, r3
 80073f2:	4305      	orrs	r5, r0
 80073f4:	6015      	str	r5, [r2, #0]
 80073f6:	4a0e      	ldr	r2, [pc, #56]	; (8007430 <vTaskNotifyGiveFromISR+0xb8>)
 80073f8:	2014      	movs	r0, #20
 80073fa:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80073fe:	f000 fa19 	bl	8007834 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <vTaskNotifyGiveFromISR+0xbc>)
 8007404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	429a      	cmp	r2, r3
 800740c:	d904      	bls.n	8007418 <vTaskNotifyGiveFromISR+0xa0>
					if( pxHigherPriorityTaskWoken != NULL )
 800740e:	2301      	movs	r3, #1
 8007410:	b106      	cbz	r6, 8007414 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007412:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <vTaskNotifyGiveFromISR+0xc0>)
 8007416:	6013      	str	r3, [r2, #0]
	__asm volatile
 8007418:	f387 8811 	msr	BASEPRI, r7
	}
 800741c:	b003      	add	sp, #12
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <vTaskNotifyGiveFromISR+0xc4>)
 8007422:	f104 0118 	add.w	r1, r4, #24
 8007426:	e7ea      	b.n	80073fe <vTaskNotifyGiveFromISR+0x86>
 8007428:	20002bfc 	.word	0x20002bfc
 800742c:	20002c04 	.word	0x20002c04
 8007430:	20002b68 	.word	0x20002b68
 8007434:	20002b5c 	.word	0x20002b5c
 8007438:	20002c80 	.word	0x20002c80
 800743c:	20002c3c 	.word	0x20002c3c

08007440 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007442:	4c11      	ldr	r4, [pc, #68]	; (8007488 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007444:	f000 fae0 	bl	8007a08 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007448:	6825      	ldr	r5, [r4, #0]
 800744a:	b9bd      	cbnz	r5, 800747c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800744c:	4f0f      	ldr	r7, [pc, #60]	; (800748c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800744e:	4e10      	ldr	r6, [pc, #64]	; (8007490 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007450:	4638      	mov	r0, r7
 8007452:	f000 f9e1 	bl	8007818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007456:	4630      	mov	r0, r6
 8007458:	f000 f9de 	bl	8007818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800745e:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007460:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007464:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8007466:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007468:	2020      	movs	r0, #32
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <prvCheckForValidListAndQueue+0x60>)
 800746c:	9500      	str	r5, [sp, #0]
 800746e:	f7fe fd3c 	bl	8005eea <xQueueGenericCreateStatic>
 8007472:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007474:	b110      	cbz	r0, 800747c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007476:	490b      	ldr	r1, [pc, #44]	; (80074a4 <prvCheckForValidListAndQueue+0x64>)
 8007478:	f7ff f85a 	bl	8006530 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800747c:	b003      	add	sp, #12
 800747e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007482:	f000 bae1 	b.w	8007a48 <vPortExitCritical>
 8007486:	bf00      	nop
 8007488:	20002f08 	.word	0x20002f08
 800748c:	20002e8c 	.word	0x20002e8c
 8007490:	20002ea0 	.word	0x20002ea0
 8007494:	20002c84 	.word	0x20002c84
 8007498:	20002c8c 	.word	0x20002c8c
 800749c:	20002c88 	.word	0x20002c88
 80074a0:	20002eb8 	.word	0x20002eb8
 80074a4:	0800a565 	.word	0x0800a565

080074a8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80074a8:	4291      	cmp	r1, r2
{
 80074aa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074ac:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ae:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80074b0:	d80a      	bhi.n	80074c8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	6983      	ldr	r3, [r0, #24]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20d      	bcs.n	80074d6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074ba:	4b08      	ldr	r3, [pc, #32]	; (80074dc <prvInsertTimerInActiveList+0x34>)
 80074bc:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	f000 f9c4 	bl	800784c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80074c4:	2000      	movs	r0, #0
}
 80074c6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d201      	bcs.n	80074d0 <prvInsertTimerInActiveList+0x28>
 80074cc:	4299      	cmp	r1, r3
 80074ce:	d202      	bcs.n	80074d6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074d0:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <prvInsertTimerInActiveList+0x38>)
 80074d2:	1d01      	adds	r1, r0, #4
 80074d4:	e7f3      	b.n	80074be <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80074d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80074d8:	e7f5      	b.n	80074c6 <prvInsertTimerInActiveList+0x1e>
 80074da:	bf00      	nop
 80074dc:	20002c88 	.word	0x20002c88
 80074e0:	20002c84 	.word	0x20002c84

080074e4 <xTimerCreateTimerTask>:
{
 80074e4:	b510      	push	{r4, lr}
 80074e6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80074e8:	f7ff ffaa 	bl	8007440 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80074ec:	4b12      	ldr	r3, [pc, #72]	; (8007538 <xTimerCreateTimerTask+0x54>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	b1b3      	cbz	r3, 8007520 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074f2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074f4:	aa07      	add	r2, sp, #28
 80074f6:	a906      	add	r1, sp, #24
 80074f8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074fa:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074fe:	f7f9 fd7d 	bl	8000ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	9302      	str	r3, [sp, #8]
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	2302      	movs	r3, #2
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	9a07      	ldr	r2, [sp, #28]
 8007510:	490a      	ldr	r1, [pc, #40]	; (800753c <xTimerCreateTimerTask+0x58>)
 8007512:	480b      	ldr	r0, [pc, #44]	; (8007540 <xTimerCreateTimerTask+0x5c>)
 8007514:	4623      	mov	r3, r4
 8007516:	f7ff f9d8 	bl	80068ca <xTaskCreateStatic>
 800751a:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <xTimerCreateTimerTask+0x60>)
 800751c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800751e:	b940      	cbnz	r0, 8007532 <xTimerCreateTimerTask+0x4e>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007530:	e7fe      	b.n	8007530 <xTimerCreateTimerTask+0x4c>
}
 8007532:	2001      	movs	r0, #1
 8007534:	b008      	add	sp, #32
 8007536:	bd10      	pop	{r4, pc}
 8007538:	20002f08 	.word	0x20002f08
 800753c:	0800a56a 	.word	0x0800a56a
 8007540:	0800764d 	.word	0x0800764d
 8007544:	20002f0c 	.word	0x20002f0c

08007548 <xTimerGenericCommand>:
{
 8007548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800754a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800754c:	4604      	mov	r4, r0
{
 800754e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007550:	b940      	cbnz	r0, 8007564 <xTimerGenericCommand+0x1c>
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	e7fe      	b.n	8007562 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8007564:	4d0d      	ldr	r5, [pc, #52]	; (800759c <xTimerGenericCommand+0x54>)
 8007566:	6828      	ldr	r0, [r5, #0]
 8007568:	b180      	cbz	r0, 800758c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800756a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800756c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007570:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007572:	dc0d      	bgt.n	8007590 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007574:	f7ff fd46 	bl	8007004 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007578:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800757a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800757c:	bf08      	it	eq
 800757e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007580:	6828      	ldr	r0, [r5, #0]
 8007582:	bf18      	it	ne
 8007584:	461a      	movne	r2, r3
 8007586:	4669      	mov	r1, sp
 8007588:	f7fe fcfd 	bl	8005f86 <xQueueGenericSend>
}
 800758c:	b004      	add	sp, #16
 800758e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007590:	2300      	movs	r3, #0
 8007592:	4669      	mov	r1, sp
 8007594:	f7fe fde5 	bl	8006162 <xQueueGenericSendFromISR>
 8007598:	e7f8      	b.n	800758c <xTimerGenericCommand+0x44>
 800759a:	bf00      	nop
 800759c:	20002f08 	.word	0x20002f08

080075a0 <prvSampleTimeNow>:
{
 80075a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 80075a4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007648 <prvSampleTimeNow+0xa8>
{
 80075a8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80075aa:	f7ff fabb 	bl	8006b24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80075ae:	f8d8 3000 	ldr.w	r3, [r8]
 80075b2:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80075b4:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80075b6:	d940      	bls.n	800763a <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075b8:	4f21      	ldr	r7, [pc, #132]	; (8007640 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ba:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	b95a      	cbnz	r2, 80075dc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80075c4:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <prvSampleTimeNow+0xa4>)
 80075c6:	6811      	ldr	r1, [r2, #0]
 80075c8:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 80075ca:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80075cc:	2301      	movs	r3, #1
}
 80075ce:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 80075d0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80075d2:	f8c8 5000 	str.w	r5, [r8]
}
 80075d6:	b004      	add	sp, #16
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075dc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075de:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075e0:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e4:	1d21      	adds	r1, r4, #4
 80075e6:	4608      	mov	r0, r1
 80075e8:	9103      	str	r1, [sp, #12]
 80075ea:	f000 f946 	bl	800787a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ee:	6a23      	ldr	r3, [r4, #32]
 80075f0:	4620      	mov	r0, r4
 80075f2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80075f8:	9903      	ldr	r1, [sp, #12]
 80075fa:	f013 0f04 	tst.w	r3, #4
 80075fe:	d0de      	beq.n	80075be <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007600:	69a3      	ldr	r3, [r4, #24]
 8007602:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8007604:	459a      	cmp	sl, r3
 8007606:	d205      	bcs.n	8007614 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007608:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800760a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800760c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800760e:	f000 f91d 	bl	800784c <vListInsert>
 8007612:	e7d4      	b.n	80075be <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007614:	2300      	movs	r3, #0
 8007616:	f8cd 9000 	str.w	r9, [sp]
 800761a:	4652      	mov	r2, sl
 800761c:	4619      	mov	r1, r3
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff ff92 	bl	8007548 <xTimerGenericCommand>
				configASSERT( xResult );
 8007624:	2800      	cmp	r0, #0
 8007626:	d1ca      	bne.n	80075be <prvSampleTimeNow+0x1e>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	e7fe      	b.n	8007638 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	e7c7      	b.n	80075ce <prvSampleTimeNow+0x2e>
 800763e:	bf00      	nop
 8007640:	20002c84 	.word	0x20002c84
 8007644:	20002c88 	.word	0x20002c88
 8007648:	20002eb4 	.word	0x20002eb4

0800764c <prvTimerTask>:
{
 800764c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007650:	4d6e      	ldr	r5, [pc, #440]	; (800780c <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007652:	4e6f      	ldr	r6, [pc, #444]	; (8007810 <prvTimerTask+0x1c4>)
{
 8007654:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007656:	682b      	ldr	r3, [r5, #0]
 8007658:	f8d3 8000 	ldr.w	r8, [r3]
 800765c:	f1b8 0f00 	cmp.w	r8, #0
 8007660:	d035      	beq.n	80076ce <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007668:	2400      	movs	r4, #0
	vTaskSuspendAll();
 800766a:	f7ff fa53 	bl	8006b14 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800766e:	a804      	add	r0, sp, #16
 8007670:	f7ff ff96 	bl	80075a0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007674:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007676:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007678:	2b00      	cmp	r3, #0
 800767a:	d169      	bne.n	8007750 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800767c:	2c00      	cmp	r4, #0
 800767e:	d14c      	bne.n	800771a <prvTimerTask+0xce>
 8007680:	4540      	cmp	r0, r8
 8007682:	d350      	bcc.n	8007726 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8007684:	f7ff faec 	bl	8006c60 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800768e:	1d38      	adds	r0, r7, #4
 8007690:	f000 f8f3 	bl	800787a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007698:	0758      	lsls	r0, r3, #29
 800769a:	d51a      	bpl.n	80076d2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800769c:	69b9      	ldr	r1, [r7, #24]
 800769e:	4643      	mov	r3, r8
 80076a0:	464a      	mov	r2, r9
 80076a2:	4441      	add	r1, r8
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff feff 	bl	80074a8 <prvInsertTimerInActiveList>
 80076aa:	b1b0      	cbz	r0, 80076da <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076ac:	9400      	str	r4, [sp, #0]
 80076ae:	4623      	mov	r3, r4
 80076b0:	4642      	mov	r2, r8
 80076b2:	4621      	mov	r1, r4
 80076b4:	4638      	mov	r0, r7
 80076b6:	f7ff ff47 	bl	8007548 <xTimerGenericCommand>
			configASSERT( xResult );
 80076ba:	b970      	cbnz	r0, 80076da <prvTimerTask+0x8e>
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	e7fe      	b.n	80076cc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076ce:	2401      	movs	r4, #1
 80076d0:	e7cb      	b.n	800766a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	4638      	mov	r0, r7
 80076de:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076e0:	6830      	ldr	r0, [r6, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	f7fe fd9e 	bl	8006226 <xQueueReceive>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d0b3      	beq.n	8007656 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076ee:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076f0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db2f      	blt.n	8007756 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076f6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076f8:	6963      	ldr	r3, [r4, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d132      	bne.n	8007764 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076fe:	a803      	add	r0, sp, #12
 8007700:	f7ff ff4e 	bl	80075a0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007704:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007706:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007708:	2b09      	cmp	r3, #9
 800770a:	d8e9      	bhi.n	80076e0 <prvTimerTask+0x94>
 800770c:	e8df f003 	tbb	[pc, r3]
 8007710:	572e2e2e 	.word	0x572e2e2e
 8007714:	2e2e765e 	.word	0x2e2e765e
 8007718:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800771a:	4b3e      	ldr	r3, [pc, #248]	; (8007814 <prvTimerTask+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681c      	ldr	r4, [r3, #0]
 8007720:	fab4 f484 	clz	r4, r4
 8007724:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007726:	6830      	ldr	r0, [r6, #0]
 8007728:	4622      	mov	r2, r4
 800772a:	eba8 0109 	sub.w	r1, r8, r9
 800772e:	f7fe ff36 	bl	800659e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007732:	f7ff fa95 	bl	8006c60 <xTaskResumeAll>
 8007736:	2800      	cmp	r0, #0
 8007738:	d1d2      	bne.n	80076e0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800773a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800773e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007742:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	e7c7      	b.n	80076e0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8007750:	f7ff fa86 	bl	8006c60 <xTaskResumeAll>
}
 8007754:	e7c4      	b.n	80076e0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	9907      	ldr	r1, [sp, #28]
 800775a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dbbe      	blt.n	80076e0 <prvTimerTask+0x94>
 8007762:	e7c8      	b.n	80076f6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007764:	1d20      	adds	r0, r4, #4
 8007766:	f000 f888 	bl	800787a <uxListRemove>
 800776a:	e7c8      	b.n	80076fe <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800776c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007770:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	4620      	mov	r0, r4
 800777e:	4419      	add	r1, r3
 8007780:	f7ff fe92 	bl	80074a8 <prvInsertTimerInActiveList>
 8007784:	2800      	cmp	r0, #0
 8007786:	d0ab      	beq.n	80076e0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007788:	6a23      	ldr	r3, [r4, #32]
 800778a:	4620      	mov	r0, r4
 800778c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800778e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007792:	0759      	lsls	r1, r3, #29
 8007794:	d5a4      	bpl.n	80076e0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007796:	69a2      	ldr	r2, [r4, #24]
 8007798:	9905      	ldr	r1, [sp, #20]
 800779a:	2300      	movs	r3, #0
 800779c:	440a      	add	r2, r1
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4619      	mov	r1, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff fed0 	bl	8007548 <xTimerGenericCommand>
							configASSERT( xResult );
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d199      	bne.n	80076e0 <prvTimerTask+0x94>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	e7fe      	b.n	80077bc <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80077ca:	e789      	b.n	80076e0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077d8:	9905      	ldr	r1, [sp, #20]
 80077da:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077dc:	b941      	cbnz	r1, 80077f0 <prvTimerTask+0x1a4>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	e7fe      	b.n	80077ee <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077f0:	4603      	mov	r3, r0
 80077f2:	4401      	add	r1, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7ff fe57 	bl	80074a8 <prvInsertTimerInActiveList>
					break;
 80077fa:	e771      	b.n	80076e0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007800:	079a      	lsls	r2, r3, #30
 8007802:	d4de      	bmi.n	80077c2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8007804:	4620      	mov	r0, r4
 8007806:	f000 f877 	bl	80078f8 <vPortFree>
 800780a:	e769      	b.n	80076e0 <prvTimerTask+0x94>
 800780c:	20002c84 	.word	0x20002c84
 8007810:	20002f08 	.word	0x20002f08
 8007814:	20002c88 	.word	0x20002c88

08007818 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007818:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800781c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007820:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007824:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007826:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800782c:	4770      	bx	lr

0800782e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007832:	4770      	bx	lr

08007834 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007834:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007836:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007840:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007842:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007844:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007846:	3301      	adds	r3, #1
 8007848:	6003      	str	r3, [r0, #0]
}
 800784a:	4770      	bx	lr

0800784c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800784c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800784e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007850:	1c63      	adds	r3, r4, #1
 8007852:	d10a      	bne.n	800786a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007854:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800785a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800785c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800785e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007860:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007862:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007864:	3301      	adds	r3, #1
 8007866:	6003      	str	r3, [r0, #0]
}
 8007868:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800786a:	f100 0208 	add.w	r2, r0, #8
 800786e:	4613      	mov	r3, r2
 8007870:	6852      	ldr	r2, [r2, #4]
 8007872:	6815      	ldr	r5, [r2, #0]
 8007874:	42a5      	cmp	r5, r4
 8007876:	d9fa      	bls.n	800786e <vListInsert+0x22>
 8007878:	e7ed      	b.n	8007856 <vListInsert+0xa>

0800787a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800787a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800787e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007880:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007882:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007884:	6859      	ldr	r1, [r3, #4]
 8007886:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007888:	bf08      	it	eq
 800788a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800788c:	2200      	movs	r2, #0
 800788e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	3a01      	subs	r2, #1
 8007894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007896:	6818      	ldr	r0, [r3, #0]
}
 8007898:	4770      	bx	lr
	...

0800789c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800789c:	b538      	push	{r3, r4, r5, lr}
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800789e:	0743      	lsls	r3, r0, #29
{
 80078a0:	4604      	mov	r4, r0
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078a2:	bf1c      	itt	ne
 80078a4:	f020 0407 	bicne.w	r4, r0, #7
 80078a8:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 80078aa:	f7ff f933 	bl	8006b14 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80078ae:	4a0f      	ldr	r2, [pc, #60]	; (80078ec <pvPortMalloc+0x50>)
 80078b0:	6813      	ldr	r3, [r2, #0]
 80078b2:	b91b      	cbnz	r3, 80078bc <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80078b4:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <pvPortMalloc+0x54>)
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80078bc:	490d      	ldr	r1, [pc, #52]	; (80078f4 <pvPortMalloc+0x58>)
 80078be:	680b      	ldr	r3, [r1, #0]
 80078c0:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 80078c4:	441c      	add	r4, r3
 80078c6:	4284      	cmp	r4, r0
 80078c8:	d905      	bls.n	80078d6 <pvPortMalloc+0x3a>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078ca:	f7ff f9c9 	bl	8006c60 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80078ce:	f7f9 fb88 	bl	8000fe2 <vApplicationMallocFailedHook>
 80078d2:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
 80078d4:	e008      	b.n	80078e8 <pvPortMalloc+0x4c>
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	d2f7      	bcs.n	80078ca <pvPortMalloc+0x2e>
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80078da:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
 80078dc:	600c      	str	r4, [r1, #0]
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80078de:	441d      	add	r5, r3
	( void ) xTaskResumeAll();
 80078e0:	f7ff f9be 	bl	8006c60 <xTaskResumeAll>
		if( pvReturn == NULL )
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d0f2      	beq.n	80078ce <pvPortMalloc+0x32>
}
 80078e8:	4628      	mov	r0, r5
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20002f10 	.word	0x20002f10
 80078f0:	20002f1c 	.word	0x20002f1c
 80078f4:	20012f14 	.word	0x20012f14

080078f8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80078f8:	b140      	cbz	r0, 800790c <vPortFree+0x14>
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	e7fe      	b.n	800790a <vPortFree+0x12>
}
 800790c:	4770      	bx	lr
	...

08007910 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007910:	4808      	ldr	r0, [pc, #32]	; (8007934 <prvPortStartFirstTask+0x24>)
 8007912:	6800      	ldr	r0, [r0, #0]
 8007914:	6800      	ldr	r0, [r0, #0]
 8007916:	f380 8808 	msr	MSP, r0
 800791a:	f04f 0000 	mov.w	r0, #0
 800791e:	f380 8814 	msr	CONTROL, r0
 8007922:	b662      	cpsie	i
 8007924:	b661      	cpsie	f
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	df00      	svc	0
 8007930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007932:	0000      	.short	0x0000
 8007934:	e000ed08 	.word	0xe000ed08

08007938 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007938:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007948 <vPortEnableVFP+0x10>
 800793c:	6801      	ldr	r1, [r0, #0]
 800793e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007942:	6001      	str	r1, [r0, #0]
 8007944:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007946:	0000      	.short	0x0000
 8007948:	e000ed88 	.word	0xe000ed88

0800794c <prvTaskExitError>:
{
 800794c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <prvTaskExitError+0x3c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	d008      	beq.n	800796c <prvTaskExitError+0x20>
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	e7fe      	b.n	800796a <prvTaskExitError+0x1e>
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0fc      	beq.n	800797c <prvTaskExitError+0x30>
}
 8007982:	b002      	add	sp, #8
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000014 	.word	0x20000014

0800798c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800798c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007990:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007994:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <pxPortInitialiseStack+0x28>)
 8007996:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800799a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800799e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079a2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079aa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80079ae:	3844      	subs	r0, #68	; 0x44
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	0800794d 	.word	0x0800794d
	...

080079c0 <SVC_Handler>:
	__asm volatile (
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <pxCurrentTCBConst2>)
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	6808      	ldr	r0, [r1, #0]
 80079c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f380 8809 	msr	PSP, r0
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8811 	msr	BASEPRI, r0
 80079da:	4770      	bx	lr
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst2>:
 80079e0:	20002b5c 	.word	0x20002b5c

080079e4 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
 80079e4:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <vPortEndScheduler+0x20>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079ec:	d008      	beq.n	8007a00 <vPortEndScheduler+0x1c>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	e7fe      	b.n	80079fe <vPortEndScheduler+0x1a>
}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000014 	.word	0x20000014

08007a08 <vPortEnterCritical>:
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007a18:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <vPortEnterCritical+0x3c>)
 8007a1a:	6813      	ldr	r3, [r2, #0]
 8007a1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007a1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007a22:	d10e      	bne.n	8007a42 <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a28:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	b143      	cbz	r3, 8007a42 <vPortEnterCritical+0x3a>
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	e7fe      	b.n	8007a40 <vPortEnterCritical+0x38>
}
 8007a42:	4770      	bx	lr
 8007a44:	20000014 	.word	0x20000014

08007a48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007a48:	4a08      	ldr	r2, [pc, #32]	; (8007a6c <vPortExitCritical+0x24>)
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	b943      	cbnz	r3, 8007a60 <vPortExitCritical+0x18>
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	e7fe      	b.n	8007a5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007a60:	3b01      	subs	r3, #1
 8007a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a64:	b90b      	cbnz	r3, 8007a6a <vPortExitCritical+0x22>
	__asm volatile
 8007a66:	f383 8811 	msr	BASEPRI, r3
}
 8007a6a:	4770      	bx	lr
 8007a6c:	20000014 	.word	0x20000014

08007a70 <PendSV_Handler>:
	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7ff f99a 	bl	8006dd8 <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	20002b5c 	.word	0x20002b5c

08007ad4 <xPortSysTickHandler>:
{
 8007ad4:	b508      	push	{r3, lr}
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007ae6:	f7ff f823 	bl	8006b30 <xTaskIncrementTick>
 8007aea:	b128      	cbz	r0, 8007af8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007af8:	2300      	movs	r3, #0
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bd08      	pop	{r3, pc}

08007b00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007b04:	2300      	movs	r3, #0
 8007b06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b08:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <vPortSetupTimerInterrupt+0x20>)
 8007b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b16:	3b01      	subs	r3, #1
 8007b18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b1a:	2307      	movs	r3, #7
 8007b1c:	6113      	str	r3, [r2, #16]
}
 8007b1e:	4770      	bx	lr
 8007b20:	20000000 	.word	0x20000000

08007b24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8007b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8007b2e:	4a3a      	ldr	r2, [pc, #232]	; (8007c18 <xPortStartScheduler+0xf4>)
 8007b30:	4291      	cmp	r1, r2
 8007b32:	d108      	bne.n	8007b46 <xPortStartScheduler+0x22>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	e7fe      	b.n	8007b44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007b4a:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <xPortStartScheduler+0xf8>)
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d108      	bne.n	8007b62 <xPortStartScheduler+0x3e>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	e7fe      	b.n	8007b60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b62:	4b2f      	ldr	r3, [pc, #188]	; (8007c20 <xPortStartScheduler+0xfc>)
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b6e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b70:	4a2c      	ldr	r2, [pc, #176]	; (8007c24 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007b7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b80:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b82:	4a29      	ldr	r2, [pc, #164]	; (8007c28 <xPortStartScheduler+0x104>)
 8007b84:	2307      	movs	r3, #7
 8007b86:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007b8e:	0600      	lsls	r0, r0, #24
 8007b90:	f103 34ff 	add.w	r4, r3, #4294967295
 8007b94:	d40c      	bmi.n	8007bb0 <xPortStartScheduler+0x8c>
 8007b96:	b111      	cbz	r1, 8007b9e <xPortStartScheduler+0x7a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	d011      	beq.n	8007bc2 <xPortStartScheduler+0x9e>
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	e7fe      	b.n	8007bae <xPortStartScheduler+0x8a>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	f88d 3003 	strb.w	r3, [sp, #3]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	e7e3      	b.n	8007b8a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007bc6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bc8:	9b01      	ldr	r3, [sp, #4]
 8007bca:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bcc:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bdc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007be0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007be4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007be8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007bec:	f7ff ff88 	bl	8007b00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <xPortStartScheduler+0x108>)
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007bf6:	f7ff fe9f 	bl	8007938 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bfa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007bfe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c02:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007c06:	f7ff fe83 	bl	8007910 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007c0a:	f7ff f8e5 	bl	8006dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8007c0e:	f7ff fe9d 	bl	800794c <prvTaskExitError>
}
 8007c12:	4628      	mov	r0, r5
 8007c14:	b003      	add	sp, #12
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	410fc271 	.word	0x410fc271
 8007c1c:	410fc270 	.word	0x410fc270
 8007c20:	e000e400 	.word	0xe000e400
 8007c24:	20012f18 	.word	0x20012f18
 8007c28:	20012f1c 	.word	0x20012f1c
 8007c2c:	20000014 	.word	0x20000014

08007c30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c34:	2b0f      	cmp	r3, #15
 8007c36:	d90e      	bls.n	8007c56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c38:	4a11      	ldr	r2, [pc, #68]	; (8007c80 <vPortValidateInterruptPriority+0x50>)
 8007c3a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c3c:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <vPortValidateInterruptPriority+0x54>)
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d908      	bls.n	8007c56 <vPortValidateInterruptPriority+0x26>
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	e7fe      	b.n	8007c54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c5a:	4a0b      	ldr	r2, [pc, #44]	; (8007c88 <vPortValidateInterruptPriority+0x58>)
 8007c5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d908      	bls.n	8007c7c <vPortValidateInterruptPriority+0x4c>
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	e7fe      	b.n	8007c7a <vPortValidateInterruptPriority+0x4a>
	}
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	e000e3f0 	.word	0xe000e3f0
 8007c84:	20012f18 	.word	0x20012f18
 8007c88:	20012f1c 	.word	0x20012f1c

08007c8c <_ZN3Cpl6System11ElapsedTime11Precision_TC1Emt>:
        Precision_T( unsigned long  seconds, uint16_t thousandths )
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80fb      	strh	r3, [r7, #6]
            memset( (void*) this, 0, sizeof( Precision_T ) );
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fe51 	bl	8008946 <memset>
            m_seconds     = seconds;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	601a      	str	r2, [r3, #0]
            m_thousandths = thousandths;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	809a      	strh	r2, [r3, #4]
        }
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <_ZN3Cpl6System14TracePlatform_6outputERNS_4Text6StringE>:



////////////////////////////////////////////////////////////////////////////////
void TracePlatform_::output( Cpl::Text::String& src )
{
 8007cbc:	b5b0      	push	{r4, r5, r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
    activePtr_->write( src.getString() );
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <_ZN3Cpl6System14TracePlatform_6outputERNS_4Text6StringE+0x34>)
 8007cc6:	681d      	ldr	r5, [r3, #0]
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <_ZN3Cpl6System14TracePlatform_6outputERNS_4Text6StringE+0x34>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3310      	adds	r3, #16
 8007cd0:	681c      	ldr	r4, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	336c      	adds	r3, #108	; 0x6c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47a0      	blx	r4
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bdb0      	pop	{r4, r5, r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20012f24 	.word	0x20012f24

08007cf4 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_>:
    eVERBOSE  -->  ">> DD HH:MM:SS.MMM (<section name>) [<thread name>, <thread ID>] <user message>"
    eMAX      -->  ">> DD HH:MM:SS.MMM (<section name>) [<thread name>, <thread ID>] {<filename>,<line#>[,<funcname>]} <user message>"

*/
void TracePlatform_::appendInfo( Cpl::Text::String& dst, Trace::InfoLevel_T info, const char* section, const char* filename, int linenum, const char* funcname )
{
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b08b      	sub	sp, #44	; 0x2c
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	460b      	mov	r3, r1
 8007d02:	72fb      	strb	r3, [r7, #11]
    // Level: eBRIEF 
    if ( info > Trace::eNONE )
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80af 	beq.w	8007e6a <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x176>
            dst += "  ";
        }

        // Add time stamp (Note: Elapsed time may not be valid/working when
        // the scheduler has not been started - so use 'zero' instead)
        ElapsedTime::Precision_T now = { 0, 0 };
 8007d0c:	f107 0310 	add.w	r3, r7, #16
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff ffb9 	bl	8007c8c <_ZN3Cpl6System11ElapsedTime11Precision_TC1Emt>
        if ( Api::isSchedulingEnabled() )
 8007d1a:	f7fc fb4b 	bl	80043b4 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00c      	beq.n	8007d3e <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x4a>
        {
            now =  ElapsedTime::precision();
 8007d24:	f107 0318 	add.w	r3, r7, #24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fc fbdc 	bl	80044e6 <_ZN3Cpl6System11ElapsedTime9precisionEv>
 8007d2e:	f107 0218 	add.w	r2, r7, #24
 8007d32:	f107 0310 	add.w	r3, r7, #16
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f9 fc12 	bl	8001562 <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>
        }
        formatPrecisionTimeStamp( dst, now, true, true );
 8007d3e:	f107 0210 	add.w	r2, r7, #16
 8007d42:	f107 0320 	add.w	r3, r7, #32
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7f9 fbfb 	bl	8001544 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>
 8007d4e:	f107 0120 	add.w	r1, r7, #32
 8007d52:	2301      	movs	r3, #1
 8007d54:	2201      	movs	r2, #1
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f9f8 	bl	800814c <_ZN3Cpl4Text24formatPrecisionTimeStampERNS0_6StringENS_6System11ElapsedTime11Precision_TEbb>

        // Add section name         
        dst += " (";
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3344      	adds	r3, #68	; 0x44
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4943      	ldr	r1, [pc, #268]	; (8007e74 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x180>)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	4798      	blx	r3
        dst += section;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3344      	adds	r3, #68	; 0x44
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	4798      	blx	r3
        dst += ") ";
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3344      	adds	r3, #68	; 0x44
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	493d      	ldr	r1, [pc, #244]	; (8007e78 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x184>)
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	4798      	blx	r3


        // LEVEL: eINFO
        if ( info > Trace::eBRIEF )
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d96e      	bls.n	8007e6a <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x176>
        {
            // Add Thread name
            dst += '[';
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3348      	adds	r3, #72	; 0x48
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	215b      	movs	r1, #91	; 0x5b
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	4798      	blx	r3
            dst += Thread::myName();
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3344      	adds	r3, #68	; 0x44
 8007da0:	681c      	ldr	r4, [r3, #0]
 8007da2:	f7fc fdd3 	bl	800494c <_ZN3Cpl6System6Thread6myNameEv>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4619      	mov	r1, r3
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	47a0      	blx	r4

            // Add closing bracket when NO higher info level
            if ( info == Trace::eINFO )
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d107      	bne.n	8007dc4 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0xd0>
            {
                dst += "] ";
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3344      	adds	r3, #68	; 0x44
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	492f      	ldr	r1, [pc, #188]	; (8007e7c <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x188>)
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	4798      	blx	r3
                    dst += "} ";
                }
            }
        }
    }
}
 8007dc2:	e052      	b.n	8007e6a <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x176>
                dst += ", ";
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3344      	adds	r3, #68	; 0x44
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	492c      	ldr	r1, [pc, #176]	; (8007e80 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x18c>)
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	4798      	blx	r3
                dst += Thread::myId();
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3350      	adds	r3, #80	; 0x50
 8007dd8:	681c      	ldr	r4, [r3, #0]
 8007dda:	f7fc fdd5 	bl	8004988 <_ZN3Cpl6System6Thread4myIdEv>
 8007dde:	4603      	mov	r3, r0
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	47a0      	blx	r4
                dst += "] ";
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3344      	adds	r3, #68	; 0x44
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4923      	ldr	r1, [pc, #140]	; (8007e7c <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x188>)
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	4798      	blx	r3
                if ( info > Trace::eVERBOSE )
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d937      	bls.n	8007e6a <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x176>
                    dst += '{';
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3348      	adds	r3, #72	; 0x48
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	217b      	movs	r1, #123	; 0x7b
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	4798      	blx	r3
                    dst += filename;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3344      	adds	r3, #68	; 0x44
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	4798      	blx	r3
                    dst += ',';
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3348      	adds	r3, #72	; 0x48
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	212c      	movs	r1, #44	; 0x2c
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	4798      	blx	r3
                    dst += linenum;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	334c      	adds	r3, #76	; 0x4c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3
                    if ( funcname && *funcname != '\0' )
 8007e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d011      	beq.n	8007e5c <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x168>
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00d      	beq.n	8007e5c <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x168>
                        dst += ',';
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3348      	adds	r3, #72	; 0x48
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	212c      	movs	r1, #44	; 0x2c
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	4798      	blx	r3
                        dst += funcname;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3344      	adds	r3, #68	; 0x44
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	4798      	blx	r3
                    dst += "} ";
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3344      	adds	r3, #68	; 0x44
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4907      	ldr	r1, [pc, #28]	; (8007e84 <_ZN3Cpl6System14TracePlatform_10appendInfoERNS_4Text6StringENS0_5Trace11InfoLevel_TEPKcS8_iS8_+0x190>)
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	4798      	blx	r3
}
 8007e6a:	bf00      	nop
 8007e6c:	372c      	adds	r7, #44	; 0x2c
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}
 8007e72:	bf00      	nop
 8007e74:	080099f8 	.word	0x080099f8
 8007e78:	080099fc 	.word	0x080099fc
 8007e7c:	08009a00 	.word	0x08009a00
 8007e80:	08009a04 	.word	0x08009a04
 8007e84:	08009a08 	.word	0x08009a08

08007e88 <_Z41__static_initialization_and_destruction_0ii>:
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d10c      	bne.n	8007eb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d107      	bne.n	8007eb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8007ea2:	480b      	ldr	r0, [pc, #44]	; (8007ed0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007ea4:	f7fc ff86 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Cpl::Io::Output* activePtr_ = Trace::getDefaultOutputStream_();
 8007ea8:	f7fa fa90 	bl	80023cc <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8007eac:	4603      	mov	r3, r0
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d102      	bne.n	8007ec8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007ec2:	4803      	ldr	r0, [pc, #12]	; (8007ed0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007ec4:	f7fc ff81 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20012f20 	.word	0x20012f20
 8007ed4:	20012f24 	.word	0x20012f24

08007ed8 <_GLOBAL__sub_I__ZN3Cpl6System5Trace9redirect_ERNS_2Io6OutputE>:
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f7ff ffd1 	bl	8007e88 <_Z41__static_initialization_and_destruction_0ii>
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_GLOBAL__sub_D__ZN3Cpl6System5Trace9redirect_ERNS_2Io6OutputE>:
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	f7ff ffc9 	bl	8007e88 <_Z41__static_initialization_and_destruction_0ii>
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <_ZN3Cpl9Container4Item7insert_EPv>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
bool Item::insert_( void* newContainerPtr )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <_ZN3Cpl9Container4Item7insert_EPv+0x24>
    {
        FatalError::logf( "Container Error: Double Insert. item=%p, prev container=%p, new container=%p", this, m_inListPtr_, newContainerPtr );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4806      	ldr	r0, [pc, #24]	; (8007f2c <_ZN3Cpl9Container4Item7insert_EPv+0x34>)
 8007f14:	f7fa f82e 	bl	8001f74 <_ZN3Cpl6System10FatalError4logfEPKcz>
        return false;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e003      	b.n	8007f24 <_ZN3Cpl9Container4Item7insert_EPv+0x2c>
    }
    else
    {
        m_inListPtr_ = newContainerPtr;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	605a      	str	r2, [r3, #4]
        return true;
 8007f22:	2301      	movs	r3, #1
    }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08009a0c 	.word	0x08009a0c

08007f30 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>:

bool Item::isInContainer_( const void* containerPtr ) const noexcept
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ != containerPtr )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d001      	beq.n	8007f48 <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x18>
    {
        return false;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e000      	b.n	8007f4a <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x1a>
    }
    return true;
 8007f48:	2301      	movs	r3, #1
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <_ZN3Cpl9Container4Item7remove_EPS1_>:

void Item::remove_( Item* itemPtr ) noexcept
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
    if ( itemPtr )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <_ZN3Cpl9Container4Item7remove_EPS1_+0x14>
    {
        itemPtr->m_inListPtr_ = 0;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	605a      	str	r2, [r3, #4]
    }
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>:

    return m_stringKeyPtr;
}

int KeyStringBuffer::compare( const char* myString, unsigned myLen, const char* otherString, unsigned otherLen )
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
 8007f82:	603b      	str	r3, [r7, #0]
    if ( otherString )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01d      	beq.n	8007fc6 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
    {
        if ( myString )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01a      	beq.n	8007fc6 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
        {
            unsigned cmpLen      = myLen > otherLen ? otherLen : myLen;
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d901      	bls.n	8007f9c <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x26>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	e000      	b.n	8007f9e <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x28>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	617b      	str	r3, [r7, #20]
            int      comparision = strncmp( myString, otherString, cmpLen );
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fd46 	bl	8008a36 <strncmp>
 8007faa:	6138      	str	r0, [r7, #16]

            if ( comparision == 0 && myLen != otherLen )
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d107      	bne.n	8007fc2 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d003      	beq.n	8007fc2 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
            {
                return myLen - (int) otherLen;
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	e003      	b.n	8007fca <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
            }

            return comparision;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	e001      	b.n	8007fca <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
        }
    }

    return -1;
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <_ZL10formatMsecRN3Cpl4Text6StringEjybb>:

	return bufferToString( binaryData, len, destString, true );
}

static bool formatMsec( Cpl::Text::String& buffer, unsigned msec, unsigned long long elaspedSecs, bool encodeDay, bool appendToString )
{
 8007fd4:	b5b0      	push	{r4, r5, r7, lr}
 8007fd6:	b09a      	sub	sp, #104	; 0x68
 8007fd8:	af04      	add	r7, sp, #16
 8007fda:	61f8      	str	r0, [r7, #28]
 8007fdc:	61b9      	str	r1, [r7, #24]
 8007fde:	e9c7 2304 	strd	r2, r3, [r7, #16]
	unsigned long long t, dd, hh, mm, ss;
	lldiv_t            result;

	// Get hours
	result = lldiv( elaspedSecs, 60L * 60LL );
 8007fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fe6:	463c      	mov	r4, r7
 8007fe8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8007fec:	f04f 0100 	mov.w	r1, #0
 8007ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fc5d 	bl	80088b4 <lldiv>
 8007ffa:	f107 0420 	add.w	r4, r7, #32
 8007ffe:	463b      	mov	r3, r7
 8008000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hh     = result.quot;
 8008006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800800a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	t      = result.rem;
 800800e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008012:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	// Get Minutes & Seconds
	result = lldiv( t, 60L );
 8008016:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800801a:	463c      	mov	r4, r7
 800801c:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8008020:	f04f 0100 	mov.w	r1, #0
 8008024:	e9cd 0100 	strd	r0, r1, [sp]
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fc43 	bl	80088b4 <lldiv>
 800802e:	f107 0420 	add.w	r4, r7, #32
 8008032:	463b      	mov	r3, r7
 8008034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mm     = result.quot;
 800803a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800803e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	ss     = result.rem;
 8008042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008046:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Format string
	if ( encodeDay )
 800804a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800804e:	2b00      	cmp	r3, #0
 8008050:	d044      	beq.n	80080dc <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x108>
	{
		result = lldiv( hh, 24LL );
 8008052:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008056:	463c      	mov	r4, r7
 8008058:	f04f 0018 	mov.w	r0, #24
 800805c:	f04f 0100 	mov.w	r1, #0
 8008060:	e9cd 0100 	strd	r0, r1, [sp]
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fc25 	bl	80088b4 <lldiv>
 800806a:	f107 0420 	add.w	r4, r7, #32
 800806e:	463b      	mov	r3, r7
 8008070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		dd     = result.quot;
 8008076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800807a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		hh     = result.rem;
 800807e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008082:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		if ( !appendToString )
 8008086:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800808a:	f083 0301 	eor.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d011      	beq.n	80080b8 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0xe4>
		{
			buffer.format( "%02u %02u:%02u:%02u.%03u", (unsigned) dd, (unsigned) hh, (unsigned) mm, (unsigned) ss, msec );
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	33cc      	adds	r3, #204	; 0xcc
 800809a:	681c      	ldr	r4, [r3, #0]
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80080a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a4:	69b9      	ldr	r1, [r7, #24]
 80080a6:	9102      	str	r1, [sp, #8]
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	462b      	mov	r3, r5
 80080ae:	4602      	mov	r2, r0
 80080b0:	4924      	ldr	r1, [pc, #144]	; (8008144 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x170>)
 80080b2:	69f8      	ldr	r0, [r7, #28]
 80080b4:	47a0      	blx	r4
 80080b6:	e037      	b.n	8008128 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x154>
		}
		else
		{
			buffer.formatAppend( "%02u %02u:%02u:%02u.%03u", (unsigned) dd, (unsigned) hh, (unsigned) mm, (unsigned) ss, msec );
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	33d0      	adds	r3, #208	; 0xd0
 80080be:	681c      	ldr	r4, [r3, #0]
 80080c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c2:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c8:	69b9      	ldr	r1, [r7, #24]
 80080ca:	9102      	str	r1, [sp, #8]
 80080cc:	9201      	str	r2, [sp, #4]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	462b      	mov	r3, r5
 80080d2:	4602      	mov	r2, r0
 80080d4:	491b      	ldr	r1, [pc, #108]	; (8008144 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x170>)
 80080d6:	69f8      	ldr	r0, [r7, #28]
 80080d8:	47a0      	blx	r4
 80080da:	e025      	b.n	8008128 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x154>
		}
	}
	else
	{
		if ( !appendToString )
 80080dc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80080e0:	f083 0301 	eor.w	r3, r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00f      	beq.n	800810a <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x136>
		{
			buffer.format( "%02u:%02u:%02u.%03u", (unsigned) hh, (unsigned) mm, (unsigned) ss, (unsigned) msec );
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	33cc      	adds	r3, #204	; 0xcc
 80080f0:	681c      	ldr	r4, [r3, #0]
 80080f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	4603      	mov	r3, r0
 8008100:	460a      	mov	r2, r1
 8008102:	4911      	ldr	r1, [pc, #68]	; (8008148 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x174>)
 8008104:	69f8      	ldr	r0, [r7, #28]
 8008106:	47a0      	blx	r4
 8008108:	e00e      	b.n	8008128 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x154>
		}
		else
		{
			buffer.formatAppend( "%02u:%02u:%02u.%03u", (unsigned) hh, (unsigned) mm, (unsigned) ss, (unsigned) msec );
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	33d0      	adds	r3, #208	; 0xd0
 8008110:	681c      	ldr	r4, [r3, #0]
 8008112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008114:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	9201      	str	r2, [sp, #4]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4603      	mov	r3, r0
 8008120:	460a      	mov	r2, r1
 8008122:	4909      	ldr	r1, [pc, #36]	; (8008148 <_ZL10formatMsecRN3Cpl4Text6StringEjybb+0x174>)
 8008124:	69f8      	ldr	r0, [r7, #28]
 8008126:	47a0      	blx	r4
		}
	}

	return !buffer.truncated();
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	337c      	adds	r3, #124	; 0x7c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69f8      	ldr	r0, [r7, #28]
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	f083 0301 	eor.w	r3, r3, #1
 800813a:	b2db      	uxtb	r3, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	3758      	adds	r7, #88	; 0x58
 8008140:	46bd      	mov	sp, r7
 8008142:	bdb0      	pop	{r4, r5, r7, pc}
 8008144:	08009ae0 	.word	0x08009ae0
 8008148:	08009afc 	.word	0x08009afc

0800814c <_ZN3Cpl4Text24formatPrecisionTimeStampERNS0_6StringENS_6System11ElapsedTime11Precision_TEbb>:


bool Cpl::Text::formatPrecisionTimeStamp( Cpl::Text::String& buffer, Cpl::System::ElapsedTime::Precision_T timeStamp, bool encodeDay, bool appendToString )
{
 800814c:	b5b0      	push	{r4, r5, r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4611      	mov	r1, r2
 8008158:	461a      	mov	r2, r3
 800815a:	460b      	mov	r3, r1
 800815c:	71fb      	strb	r3, [r7, #7]
 800815e:	4613      	mov	r3, r2
 8008160:	71bb      	strb	r3, [r7, #6]
	return formatMsec( buffer, timeStamp.m_thousandths, timeStamp.m_seconds, encodeDay, appendToString );
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	889b      	ldrh	r3, [r3, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	461c      	mov	r4, r3
 8008170:	4615      	mov	r5, r2
 8008172:	79bb      	ldrb	r3, [r7, #6]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff ff28 	bl	8007fd4 <_ZL10formatMsecRN3Cpl4Text6StringEjybb>
 8008184:	4603      	mov	r3, r0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008190 <_Z41__static_initialization_and_destruction_0ii>:
			buffer.formatAppend( "%02llu:%02u:%02u", hh, (unsigned) mm, (unsigned) ss );
		}
	}

	return !buffer.truncated();
}
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d107      	bne.n	80081b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d102      	bne.n	80081b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80081aa:	4809      	ldr	r0, [pc, #36]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80081ac:	f7fc fe02 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d107      	bne.n	80081c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081bc:	4293      	cmp	r3, r2
 80081be:	d102      	bne.n	80081c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80081c2:	f7fc fe02 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20012f28 	.word	0x20012f28

080081d4 <_GLOBAL__sub_I__ZN3Cpl4Text14bufferToStringEPKviRNS0_6StringEb>:
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081dc:	2001      	movs	r0, #1
 80081de:	f7ff ffd7 	bl	8008190 <_Z41__static_initialization_and_destruction_0ii>
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <_GLOBAL__sub_D__ZN3Cpl4Text14bufferToStringEPKviRNS0_6StringEb>:
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081ec:	2000      	movs	r0, #0
 80081ee:	f7ff ffcf 	bl	8008190 <_Z41__static_initialization_and_destruction_0ii>
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>:
//#define CPL_IO_FILE_MAX_NAME_MAP                PATH_MAX


/// Mapping
inline unsigned long CplSystemElapsedTime_getTimeInMilliseconds_MAP()
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
    return xTaskGetTickCount() / portTICK_PERIOD_MS;
 80081f8:	f7fe fc94 	bl	8006b24 <xTaskGetTickCount>
 80081fc:	4603      	mov	r3, r0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <_ZN3Cpl6System12StartupHook_D1Ev>:
     */
    StartupHook_( InitLevel_T myInitLevel );

public:
    /// Ensure the destructor is virtual
    virtual ~StartupHook_() {}
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	4a04      	ldr	r2, [pc, #16]	; (8008220 <_ZN3Cpl6System12StartupHook_D1Ev+0x1c>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	0800a590 	.word	0x0800a590

08008224 <_ZN3Cpl6System12StartupHook_D0Ev>:
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ffe9 	bl	8008204 <_ZN3Cpl6System12StartupHook_D1Ev>
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f8c2 	bl	80093bc <_ZdlPv>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>:
/// This class is to 'zero' the elapsed to the start of the application
class RegisterInitHandler_ : public Cpl::System::StartupHook_
{
public:
    ///
    RegisterInitHandler_():StartupHook_( eSYSTEM ) {}
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f903 	bl	800845c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>
 8008256:	4a04      	ldr	r2, [pc, #16]	; (8008268 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev+0x24>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	0800a57c 	.word	0x0800a57c

0800826c <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE>:


protected:
    ///
    void notify( InitLevel_T init_level )
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
    {
        elapsedMsec_  = 0;
 8008278:	4b08      	ldr	r3, [pc, #32]	; (800829c <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x30>)
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
        elapsedSec_   = 0;
 800827e:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x34>)
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
        sumDeltaMs_   = 0;
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x38>)
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
        lastMsec_     = CplSystemElapsedTime_getTimeInMilliseconds();
 800828a:	f7ff ffb3 	bl	80081f4 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 800828e:	4603      	mov	r3, r0
 8008290:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x3c>)
 8008292:	6013      	str	r3, [r2, #0]
    }
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20012f30 	.word	0x20012f30
 80082a0:	20012f34 	.word	0x20012f34
 80082a4:	20012f3c 	.word	0x20012f3c
 80082a8:	20012f38 	.word	0x20012f38

080082ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
static RegisterInitHandler_ autoRegister_systemInit_hook_;


///////////////////////////////////////////////////////////////
unsigned long ElapsedTime::millisecondsInRealTime( void ) noexcept
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 80082b2:	f7fc f897 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 80082b6:	4602      	mov	r2, r0
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	4611      	mov	r1, r2
 80082bc:	4618      	mov	r0, r3
 80082be:	f7f9 f913 	bl	80014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    unsigned long newTime = CplSystemElapsedTime_getTimeInMilliseconds();
 80082c2:	f7ff ff97 	bl	80081f4 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 80082c6:	60f8      	str	r0, [r7, #12]
    unsigned long delta   = newTime - lastMsec_;
 80082c8:	4b17      	ldr	r3, [pc, #92]	; (8008328 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	60bb      	str	r3, [r7, #8]
    lastMsec_             = newTime;
 80082d2:	4a15      	ldr	r2, [pc, #84]	; (8008328 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6013      	str	r3, [r2, #0]
    elapsedMsec_         += delta;
 80082d8:	4b14      	ldr	r3, [pc, #80]	; (800832c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4413      	add	r3, r2
 80082e0:	4a12      	ldr	r2, [pc, #72]	; (800832c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 80082e2:	6013      	str	r3, [r2, #0]
    sumDeltaMs_          += delta;
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4413      	add	r3, r2
 80082ec:	4a10      	ldr	r2, [pc, #64]	; (8008330 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80082ee:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082f8:	d30b      	bcc.n	8008312 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x66>
    {
        elapsedSec_++;
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3301      	adds	r3, #1
 8008300:	4a0c      	ldr	r2, [pc, #48]	; (8008334 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 8008302:	6013      	str	r3, [r2, #0]
        sumDeltaMs_ -= 1000L;
 8008304:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800830c:	4a08      	ldr	r2, [pc, #32]	; (8008330 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 800830e:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 8008310:	e7ee      	b.n	80082f0 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x44>
    }
    

    return elapsedMsec_;
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 8008314:	681c      	ldr	r4, [r3, #0]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7f9 f8f7 	bl	800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return elapsedMsec_;
 800831e:	4623      	mov	r3, r4
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	bd90      	pop	{r4, r7, pc}
 8008328:	20012f38 	.word	0x20012f38
 800832c:	20012f30 	.word	0x20012f30
 8008330:	20012f3c 	.word	0x20012f3c
 8008334:	20012f34 	.word	0x20012f34

08008338 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv>:
    return (unsigned long) (elapsedMsec_ / 1000LL);
}


ElapsedTime::Precision_T ElapsedTime::precisionInRealTime( void ) noexcept
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8008340:	f7fc f850 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8008344:	4602      	mov	r2, r0
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7f9 f8cb 	bl	80014e8 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    // Update my internal time
    millisecondsInRealTime();
 8008352:	f7ff ffab 	bl	80082ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>

    // Convert to my Precision format
    Precision_T now;
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7f9 f8e6 	bl	8001528 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>
    now.m_seconds      = elapsedSec_;
 800835c:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x60>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
    now.m_thousandths  = elapsedMsec_ % 1000L;
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x64>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x68>)
 800836a:	fba3 1302 	umull	r1, r3, r3, r2
 800836e:	099b      	lsrs	r3, r3, #6
 8008370:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	809a      	strh	r2, [r3, #4]
    return now;
 8008380:	bf00      	nop
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8008382:	f107 030c 	add.w	r3, r7, #12
 8008386:	4618      	mov	r0, r3
 8008388:	f7f9 f8c0 	bl	800150c <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return now;
 800838c:	bf00      	nop
}
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20012f34 	.word	0x20012f34
 800839c:	20012f30 	.word	0x20012f30
 80083a0:	10624dd3 	.word	0x10624dd3

080083a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>:
class RegisterInitHandler_ : public Cpl::System::StartupHook_
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	4a05      	ldr	r2, [pc, #20]	; (80083c4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev+0x20>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff ff25 	bl	8008204 <_ZN3Cpl6System12StartupHook_D1Ev>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	0800a57c 	.word	0x0800a57c

080083c8 <_ZN12_GLOBAL__N_120RegisterInitHandler_D0Ev>:
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ffe7 	bl	80083a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fff0 	bl	80093bc <_ZdlPv>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d10a      	bne.n	800840e <_Z41__static_initialization_and_destruction_0ii+0x26>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fe:	4293      	cmp	r3, r2
 8008400:	d105      	bne.n	800840e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008402:	480c      	ldr	r0, [pc, #48]	; (8008434 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8008404:	f7fc fcd6 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static RegisterInitHandler_ autoRegister_systemInit_hook_;
 8008408:	480b      	ldr	r0, [pc, #44]	; (8008438 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800840a:	f7ff ff1b 	bl	8008244 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800841a:	4293      	cmp	r3, r2
 800841c:	d105      	bne.n	800842a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800841e:	4806      	ldr	r0, [pc, #24]	; (8008438 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8008420:	f7ff ffc0 	bl	80083a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 8008424:	4803      	ldr	r0, [pc, #12]	; (8008434 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8008426:	f7fc fcd0 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20012f2c 	.word	0x20012f2c
 8008438:	20012f40 	.word	0x20012f40

0800843c <_GLOBAL__sub_I__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
 8008440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008444:	2001      	movs	r0, #1
 8008446:	f7ff ffcf 	bl	80083e8 <_Z41__static_initialization_and_destruction_0ii>
 800844a:	bd80      	pop	{r7, pc}

0800844c <_GLOBAL__sub_D__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
 8008450:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008454:	2000      	movs	r0, #0
 8008456:	f7ff ffc7 	bl	80083e8 <_Z41__static_initialization_and_destruction_0ii>
 800845a:	bd80      	pop	{r7, pc}

0800845c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>:
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );



////////////////////////////////////////////////////////////////////////////////
StartupHook_::StartupHook_( InitLevel_T myInitLevel )
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7f9 fe7b 	bl	8002168 <_ZN3Cpl9Container4ItemC1Ev>
 8008472:	4a06      	ldr	r2, [pc, #24]	; (800848c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE+0x30>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	601a      	str	r2, [r3, #0]
{
    registerHook( *this, myInitLevel );
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f807 	bl	8008490 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>
}
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	0800a590 	.word	0x0800a590

08008490 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>:


void StartupHook_::registerHook( StartupHook_& callbackInstance, InitLevel_T initOrder )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
    // NOTE: The assumption is that sub-system register at the time of when
    //       constructor for static object execute - which is before main()
    //       is enter so there should be only one thread.
    if ( initOrder == StartupHook_::eTEST_INFRA )
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x1c>
    {
        levelTest_.put( callbackInstance );
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	480d      	ldr	r0, [pc, #52]	; (80084dc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x4c>)
 80084a6:	f000 f885 	bl	80085b4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
    }
    else
    {
        levelApplication_.put( callbackInstance );
    }
}
 80084aa:	e013      	b.n	80084d4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eSYSTEM )
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d104      	bne.n	80084bc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x2c>
        levelSystem_.put( callbackInstance );
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	480a      	ldr	r0, [pc, #40]	; (80084e0 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x50>)
 80084b6:	f000 f87d 	bl	80085b4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80084ba:	e00b      	b.n	80084d4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eMIDDLE_WARE )
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d104      	bne.n	80084cc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x3c>
        levelMiddleWare_.put( callbackInstance );
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	4807      	ldr	r0, [pc, #28]	; (80084e4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x54>)
 80084c6:	f000 f875 	bl	80085b4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80084ca:	e003      	b.n	80084d4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
        levelApplication_.put( callbackInstance );
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4806      	ldr	r0, [pc, #24]	; (80084e8 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x58>)
 80084d0:	f000 f870 	bl	80085b4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20012f50 	.word	0x20012f50
 80084e0:	20012f58 	.word	0x20012f58
 80084e4:	20012f60 	.word	0x20012f60
 80084e8:	20012f68 	.word	0x20012f68

080084ec <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>:

void StartupHook_::notifyStartupClients( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
    // NOTE: The assumption is that no thread protection is required since
    //       there should only be one caller to the initialize() method.

    // Do eTEST_INFRA level first
    StartupHook_* ptr = levelTest_.get();
 80084f2:	4826      	ldr	r0, [pc, #152]	; (800858c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 80084f4:	f000 f882 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 80084f8:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x2a>
    {
        ptr->notify( eTEST_INFRA );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2100      	movs	r1, #0
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
        ptr = levelTest_.get();
 800850c:	481f      	ldr	r0, [pc, #124]	; (800858c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 800850e:	f000 f875 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8008512:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8008514:	e7f1      	b.n	80084fa <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xe>
    }

    // Do eSYSTEM level next
    ptr = levelSystem_.get();
 8008516:	481e      	ldr	r0, [pc, #120]	; (8008590 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8008518:	f000 f870 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800851c:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x4e>
    {
        ptr->notify( eSYSTEM );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2101      	movs	r1, #1
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
        ptr = levelSystem_.get();
 8008530:	4817      	ldr	r0, [pc, #92]	; (8008590 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8008532:	f000 f863 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8008536:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8008538:	e7f1      	b.n	800851e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x32>
    }

    // Do eMIDDLE_WARE level next
    ptr = levelMiddleWare_.get();
 800853a:	4816      	ldr	r0, [pc, #88]	; (8008594 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 800853c:	f000 f85e 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8008540:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x72>
    {
        ptr->notify( eMIDDLE_WARE );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2102      	movs	r1, #2
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
        ptr = levelMiddleWare_.get();
 8008554:	480f      	ldr	r0, [pc, #60]	; (8008594 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 8008556:	f000 f851 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800855a:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 800855c:	e7f1      	b.n	8008542 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x56>
    }

    // Do eAPPLICATION level last
    ptr = levelApplication_.get();
 800855e:	480e      	ldr	r0, [pc, #56]	; (8008598 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 8008560:	f000 f84c 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8008564:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x96>
    {
        ptr->notify( eAPPLICATION );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2103      	movs	r1, #3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
        ptr = levelApplication_.get();
 8008578:	4807      	ldr	r0, [pc, #28]	; (8008598 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 800857a:	f000 f83f 	bl	80085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800857e:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8008580:	e7f1      	b.n	8008566 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x7a>
    }
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20012f50 	.word	0x20012f50
 8008590:	20012f58 	.word	0x20012f58
 8008594:	20012f60 	.word	0x20012f60
 8008598:	20012f68 	.word	0x20012f68

0800859c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
}
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	3304      	adds	r3, #4
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fc97 	bl	8007ef8 <_ZN3Cpl9Container4Item7insert_EPv>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d011      	beq.n	80085f4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x40>
        if ( m_headPtr )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	605a      	str	r2, [r3, #4]
 80085e0:	e002      	b.n	80085e8 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x34>
            m_headPtr = &item;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2200      	movs	r2, #0
 80085ec:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	605a      	str	r2, [r3, #4]
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	bf14      	ite	ne
 8008610:	2301      	movne	r3, #1
 8008612:	2300      	moveq	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00f      	beq.n	800863a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bf0c      	ite	eq
 800862a:	2301      	moveq	r3, #1
 800862c:	2300      	movne	r3, #0
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
            m_tailPtr = 0;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4a>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3304      	adds	r3, #4
 8008644:	e000      	b.n	8008648 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4c>
 8008646:	2300      	movs	r3, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fc84 	bl	8007f56 <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 800864e:	68fb      	ldr	r3, [r7, #12]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_Z41__static_initialization_and_destruction_0ii>:
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d117      	bne.n	8008698 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866e:	4293      	cmp	r3, r2
 8008670:	d112      	bne.n	8008698 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8008672:	4811      	ldr	r0, [pc, #68]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8008674:	f7fc fb9e 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<StartupHook_> levelTest_( "invoke_special_static_constructor" );
 8008678:	4910      	ldr	r1, [pc, #64]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800867a:	4811      	ldr	r0, [pc, #68]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800867c:	f7ff ff8e 	bl	800859c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelSystem_( "invoke_special_static_constructor" );
 8008680:	490e      	ldr	r1, [pc, #56]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8008682:	4810      	ldr	r0, [pc, #64]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8008684:	f7ff ff8a 	bl	800859c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelMiddleWare_( "invoke_special_static_constructor" );
 8008688:	490c      	ldr	r1, [pc, #48]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800868a:	480f      	ldr	r0, [pc, #60]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800868c:	f7ff ff86 	bl	800859c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );
 8008690:	490a      	ldr	r1, [pc, #40]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8008692:	480e      	ldr	r0, [pc, #56]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8008694:	f7ff ff82 	bl	800859c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d107      	bne.n	80086ae <_Z41__static_initialization_and_destruction_0ii+0x56>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d102      	bne.n	80086ae <_Z41__static_initialization_and_destruction_0ii+0x56>
 80086a8:	4803      	ldr	r0, [pc, #12]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80086aa:	f7fc fb8e 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20012f4c 	.word	0x20012f4c
 80086bc:	08009b3c 	.word	0x08009b3c
 80086c0:	20012f50 	.word	0x20012f50
 80086c4:	20012f58 	.word	0x20012f58
 80086c8:	20012f60 	.word	0x20012f60
 80086cc:	20012f68 	.word	0x20012f68

080086d0 <_GLOBAL__sub_I__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086d8:	2001      	movs	r0, #1
 80086da:	f7ff ffbd 	bl	8008658 <_Z41__static_initialization_and_destruction_0ii>
 80086de:	bd80      	pop	{r7, pc}

080086e0 <_GLOBAL__sub_D__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086e8:	2000      	movs	r0, #0
 80086ea:	f7ff ffb5 	bl	8008658 <_Z41__static_initialization_and_destruction_0ii>
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>:
}


////////////////////////////////////////////////////////////////////////////////
int Shutdown::notifyShutdownHandlers_( int exit_code )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
    Locks_::system().lock();
 80086f8:	f7fb fe74 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fb ff24 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
    Shutdown::Handler* ptr = callbacks_.get();
 8008704:	4814      	ldr	r0, [pc, #80]	; (8008758 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 8008706:	f000 f835 	bl	8008774 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 800870a:	60f8      	str	r0, [r7, #12]
    Locks_::system().unlock();
 800870c:	f7fb fe6a 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8008710:	4603      	mov	r3, r0
 8008712:	4618      	mov	r0, r3
 8008714:	f7fb ff2e 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>

    while ( ptr )
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d017      	beq.n	800874e <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x5e>
    {
        exit_code = ptr->notify( exit_code );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	4798      	blx	r3
 800872a:	6078      	str	r0, [r7, #4]

        Locks_::system().lock();
 800872c:	f7fb fe5a 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8008730:	4603      	mov	r3, r0
 8008732:	4618      	mov	r0, r3
 8008734:	f7fb ff0a 	bl	800454c <_ZN3Cpl6System5Mutex4lockEv>
        ptr = callbacks_.pop();
 8008738:	4807      	ldr	r0, [pc, #28]	; (8008758 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 800873a:	f000 f849 	bl	80087d0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>
 800873e:	60f8      	str	r0, [r7, #12]
        Locks_::system().unlock();
 8008740:	f7fb fe50 	bl	80043e4 <_ZN3Cpl6System6Locks_6systemEv>
 8008744:	4603      	mov	r3, r0
 8008746:	4618      	mov	r0, r3
 8008748:	f7fb ff14 	bl	8004574 <_ZN3Cpl6System5Mutex6unlockEv>
    while ( ptr )
 800874c:	e7e4      	b.n	8008718 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x28>
    }

    return exit_code;
 800874e:	687b      	ldr	r3, [r7, #4]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20012f74 	.word	0x20012f74

0800875c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
}
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf14      	ite	ne
 8008788:	2301      	movne	r3, #1
 800878a:	2300      	moveq	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00f      	beq.n	80087b2 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bf0c      	ite	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	2300      	movne	r3, #0
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
            m_tailPtr = 0;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4a>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3304      	adds	r3, #4
 80087bc:	e000      	b.n	80087c0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4c>
 80087be:	2300      	movs	r3, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fbc8 	bl	8007f56 <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 80087c6:	68fb      	ldr	r3, [r7, #12]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>:
{
    putFirst( item );
}

template <class ITEM>
inline ITEM* SList<ITEM>::pop( void ) noexcept
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
{
    return get();
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ffcb 	bl	8008774 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <_Z41__static_initialization_and_destruction_0ii>:
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d10b      	bne.n	8008810 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087fe:	4293      	cmp	r3, r2
 8008800:	d106      	bne.n	8008810 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8008802:	480b      	ldr	r0, [pc, #44]	; (8008830 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8008804:	f7fc fad6 	bl	8004db4 <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Shutdown::Handler> callbacks_( "invoke_special_static_constructor" );
 8008808:	490a      	ldr	r1, [pc, #40]	; (8008834 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800880a:	480b      	ldr	r0, [pc, #44]	; (8008838 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800880c:	f7ff ffa6 	bl	800875c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d107      	bne.n	8008826 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800881c:	4293      	cmp	r3, r2
 800881e:	d102      	bne.n	8008826 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8008820:	4803      	ldr	r0, [pc, #12]	; (8008830 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8008822:	f7fc fad2 	bl	8004dca <_ZNSt8ios_base4InitD1Ev>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20012f70 	.word	0x20012f70
 8008834:	08009b60 	.word	0x08009b60
 8008838:	20012f74 	.word	0x20012f74

0800883c <_GLOBAL__sub_I__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
 8008840:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008844:	2001      	movs	r0, #1
 8008846:	f7ff ffcf 	bl	80087e8 <_Z41__static_initialization_and_destruction_0ii>
 800884a:	bd80      	pop	{r7, pc}

0800884c <_GLOBAL__sub_D__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
 8008850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008854:	2000      	movs	r0, #0
 8008856:	f7ff ffc7 	bl	80087e8 <_Z41__static_initialization_and_destruction_0ii>
 800885a:	bd80      	pop	{r7, pc}

0800885c <__libc_init_array>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4d0d      	ldr	r5, [pc, #52]	; (8008894 <__libc_init_array+0x38>)
 8008860:	4c0d      	ldr	r4, [pc, #52]	; (8008898 <__libc_init_array+0x3c>)
 8008862:	1b64      	subs	r4, r4, r5
 8008864:	10a4      	asrs	r4, r4, #2
 8008866:	2600      	movs	r6, #0
 8008868:	42a6      	cmp	r6, r4
 800886a:	d109      	bne.n	8008880 <__libc_init_array+0x24>
 800886c:	4d0b      	ldr	r5, [pc, #44]	; (800889c <__libc_init_array+0x40>)
 800886e:	4c0c      	ldr	r4, [pc, #48]	; (80088a0 <__libc_init_array+0x44>)
 8008870:	f000 fe60 	bl	8009534 <_init>
 8008874:	1b64      	subs	r4, r4, r5
 8008876:	10a4      	asrs	r4, r4, #2
 8008878:	2600      	movs	r6, #0
 800887a:	42a6      	cmp	r6, r4
 800887c:	d105      	bne.n	800888a <__libc_init_array+0x2e>
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	f855 3b04 	ldr.w	r3, [r5], #4
 8008884:	4798      	blx	r3
 8008886:	3601      	adds	r6, #1
 8008888:	e7ee      	b.n	8008868 <__libc_init_array+0xc>
 800888a:	f855 3b04 	ldr.w	r3, [r5], #4
 800888e:	4798      	blx	r3
 8008890:	3601      	adds	r6, #1
 8008892:	e7f2      	b.n	800887a <__libc_init_array+0x1e>
 8008894:	0800a6dc 	.word	0x0800a6dc
 8008898:	0800a6dc 	.word	0x0800a6dc
 800889c:	0800a6dc 	.word	0x0800a6dc
 80088a0:	0800a728 	.word	0x0800a728

080088a4 <isspace>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <isspace+0xc>)
 80088a6:	4418      	add	r0, r3
 80088a8:	7840      	ldrb	r0, [r0, #1]
 80088aa:	f000 0008 	and.w	r0, r0, #8
 80088ae:	4770      	bx	lr
 80088b0:	0800a59c 	.word	0x0800a59c

080088b4 <lldiv>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80088bc:	4698      	mov	r8, r3
 80088be:	4605      	mov	r5, r0
 80088c0:	463b      	mov	r3, r7
 80088c2:	4610      	mov	r0, r2
 80088c4:	4641      	mov	r1, r8
 80088c6:	4632      	mov	r2, r6
 80088c8:	f7f8 f9b8 	bl	8000c3c <__aeabi_ldivmod>
 80088cc:	f1b8 0f00 	cmp.w	r8, #0
 80088d0:	4604      	mov	r4, r0
 80088d2:	468c      	mov	ip, r1
 80088d4:	4618      	mov	r0, r3
 80088d6:	db07      	blt.n	80088e8 <lldiv+0x34>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da05      	bge.n	80088e8 <lldiv+0x34>
 80088dc:	3401      	adds	r4, #1
 80088de:	f141 0c00 	adc.w	ip, r1, #0
 80088e2:	1b92      	subs	r2, r2, r6
 80088e4:	eb63 0007 	sbc.w	r0, r3, r7
 80088e8:	e9c5 2002 	strd	r2, r0, [r5, #8]
 80088ec:	e9c5 4c00 	strd	r4, ip, [r5]
 80088f0:	4628      	mov	r0, r5
 80088f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088f6 <memcpy>:
 80088f6:	440a      	add	r2, r1
 80088f8:	4291      	cmp	r1, r2
 80088fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80088fe:	d100      	bne.n	8008902 <memcpy+0xc>
 8008900:	4770      	bx	lr
 8008902:	b510      	push	{r4, lr}
 8008904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890c:	4291      	cmp	r1, r2
 800890e:	d1f9      	bne.n	8008904 <memcpy+0xe>
 8008910:	bd10      	pop	{r4, pc}

08008912 <memmove>:
 8008912:	4288      	cmp	r0, r1
 8008914:	b510      	push	{r4, lr}
 8008916:	eb01 0402 	add.w	r4, r1, r2
 800891a:	d902      	bls.n	8008922 <memmove+0x10>
 800891c:	4284      	cmp	r4, r0
 800891e:	4623      	mov	r3, r4
 8008920:	d807      	bhi.n	8008932 <memmove+0x20>
 8008922:	1e43      	subs	r3, r0, #1
 8008924:	42a1      	cmp	r1, r4
 8008926:	d008      	beq.n	800893a <memmove+0x28>
 8008928:	f811 2b01 	ldrb.w	r2, [r1], #1
 800892c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008930:	e7f8      	b.n	8008924 <memmove+0x12>
 8008932:	4402      	add	r2, r0
 8008934:	4601      	mov	r1, r0
 8008936:	428a      	cmp	r2, r1
 8008938:	d100      	bne.n	800893c <memmove+0x2a>
 800893a:	bd10      	pop	{r4, pc}
 800893c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008940:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008944:	e7f7      	b.n	8008936 <memmove+0x24>

08008946 <memset>:
 8008946:	4402      	add	r2, r0
 8008948:	4603      	mov	r3, r0
 800894a:	4293      	cmp	r3, r2
 800894c:	d100      	bne.n	8008950 <memset+0xa>
 800894e:	4770      	bx	lr
 8008950:	f803 1b01 	strb.w	r1, [r3], #1
 8008954:	e7f9      	b.n	800894a <memset+0x4>
	...

08008958 <strcasecmp>:
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	4d0b      	ldr	r5, [pc, #44]	; (8008988 <strcasecmp+0x30>)
 800895c:	4604      	mov	r4, r0
 800895e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008962:	5d5a      	ldrb	r2, [r3, r5]
 8008964:	f002 0203 	and.w	r2, r2, #3
 8008968:	2a01      	cmp	r2, #1
 800896a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800896e:	5ca8      	ldrb	r0, [r5, r2]
 8008970:	f000 0003 	and.w	r0, r0, #3
 8008974:	bf08      	it	eq
 8008976:	3320      	addeq	r3, #32
 8008978:	2801      	cmp	r0, #1
 800897a:	bf08      	it	eq
 800897c:	3220      	addeq	r2, #32
 800897e:	1a98      	subs	r0, r3, r2
 8008980:	d101      	bne.n	8008986 <strcasecmp+0x2e>
 8008982:	2a00      	cmp	r2, #0
 8008984:	d1eb      	bne.n	800895e <strcasecmp+0x6>
 8008986:	bd30      	pop	{r4, r5, pc}
 8008988:	0800a59d 	.word	0x0800a59d

0800898c <strchr>:
 800898c:	b2c9      	uxtb	r1, r1
 800898e:	4603      	mov	r3, r0
 8008990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008994:	b11a      	cbz	r2, 800899e <strchr+0x12>
 8008996:	428a      	cmp	r2, r1
 8008998:	d1f9      	bne.n	800898e <strchr+0x2>
 800899a:	4618      	mov	r0, r3
 800899c:	4770      	bx	lr
 800899e:	2900      	cmp	r1, #0
 80089a0:	bf18      	it	ne
 80089a2:	2300      	movne	r3, #0
 80089a4:	e7f9      	b.n	800899a <strchr+0xe>
	...

080089a8 <strlwr>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	4c07      	ldr	r4, [pc, #28]	; (80089c8 <strlwr+0x20>)
 80089ac:	1e42      	subs	r2, r0, #1
 80089ae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80089b2:	b903      	cbnz	r3, 80089b6 <strlwr+0xe>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	5ce1      	ldrb	r1, [r4, r3]
 80089b8:	f001 0103 	and.w	r1, r1, #3
 80089bc:	2901      	cmp	r1, #1
 80089be:	bf08      	it	eq
 80089c0:	3320      	addeq	r3, #32
 80089c2:	7013      	strb	r3, [r2, #0]
 80089c4:	e7f3      	b.n	80089ae <strlwr+0x6>
 80089c6:	bf00      	nop
 80089c8:	0800a59d 	.word	0x0800a59d

080089cc <strncasecmp>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4e0f      	ldr	r6, [pc, #60]	; (8008a0c <strncasecmp+0x40>)
 80089d0:	4604      	mov	r4, r0
 80089d2:	440a      	add	r2, r1
 80089d4:	428a      	cmp	r2, r1
 80089d6:	d101      	bne.n	80089dc <strncasecmp+0x10>
 80089d8:	2000      	movs	r0, #0
 80089da:	e013      	b.n	8008a04 <strncasecmp+0x38>
 80089dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089e0:	5d98      	ldrb	r0, [r3, r6]
 80089e2:	f000 0003 	and.w	r0, r0, #3
 80089e6:	2801      	cmp	r0, #1
 80089e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80089ec:	5c35      	ldrb	r5, [r6, r0]
 80089ee:	f005 0503 	and.w	r5, r5, #3
 80089f2:	bf08      	it	eq
 80089f4:	3320      	addeq	r3, #32
 80089f6:	2d01      	cmp	r5, #1
 80089f8:	bf08      	it	eq
 80089fa:	3020      	addeq	r0, #32
 80089fc:	1a1b      	subs	r3, r3, r0
 80089fe:	d102      	bne.n	8008a06 <strncasecmp+0x3a>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d1e7      	bne.n	80089d4 <strncasecmp+0x8>
 8008a04:	bd70      	pop	{r4, r5, r6, pc}
 8008a06:	4618      	mov	r0, r3
 8008a08:	e7fc      	b.n	8008a04 <strncasecmp+0x38>
 8008a0a:	bf00      	nop
 8008a0c:	0800a59d 	.word	0x0800a59d

08008a10 <strncat>:
 8008a10:	b530      	push	{r4, r5, lr}
 8008a12:	4604      	mov	r4, r0
 8008a14:	7825      	ldrb	r5, [r4, #0]
 8008a16:	4623      	mov	r3, r4
 8008a18:	3401      	adds	r4, #1
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	d1fa      	bne.n	8008a14 <strncat+0x4>
 8008a1e:	3a01      	subs	r2, #1
 8008a20:	d304      	bcc.n	8008a2c <strncat+0x1c>
 8008a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a26:	f803 4b01 	strb.w	r4, [r3], #1
 8008a2a:	b904      	cbnz	r4, 8008a2e <strncat+0x1e>
 8008a2c:	bd30      	pop	{r4, r5, pc}
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	d1f5      	bne.n	8008a1e <strncat+0xe>
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e7f3      	b.n	8008a1e <strncat+0xe>

08008a36 <strncmp>:
 8008a36:	b510      	push	{r4, lr}
 8008a38:	b17a      	cbz	r2, 8008a5a <strncmp+0x24>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	3901      	subs	r1, #1
 8008a3e:	1884      	adds	r4, r0, r2
 8008a40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a48:	4290      	cmp	r0, r2
 8008a4a:	d101      	bne.n	8008a50 <strncmp+0x1a>
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d101      	bne.n	8008a54 <strncmp+0x1e>
 8008a50:	1a80      	subs	r0, r0, r2
 8008a52:	bd10      	pop	{r4, pc}
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d1f3      	bne.n	8008a40 <strncmp+0xa>
 8008a58:	e7fa      	b.n	8008a50 <strncmp+0x1a>
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	e7f9      	b.n	8008a52 <strncmp+0x1c>

08008a5e <strncpy>:
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	3901      	subs	r1, #1
 8008a62:	4603      	mov	r3, r0
 8008a64:	b132      	cbz	r2, 8008a74 <strncpy+0x16>
 8008a66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a6a:	f803 4b01 	strb.w	r4, [r3], #1
 8008a6e:	3a01      	subs	r2, #1
 8008a70:	2c00      	cmp	r4, #0
 8008a72:	d1f7      	bne.n	8008a64 <strncpy+0x6>
 8008a74:	441a      	add	r2, r3
 8008a76:	2100      	movs	r1, #0
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d100      	bne.n	8008a7e <strncpy+0x20>
 8008a7c:	bd10      	pop	{r4, pc}
 8008a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a82:	e7f9      	b.n	8008a78 <strncpy+0x1a>

08008a84 <strrchr>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4603      	mov	r3, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	b969      	cbnz	r1, 8008aa8 <strrchr+0x24>
 8008a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a90:	f7ff bf7c 	b.w	800898c <strchr>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	4605      	mov	r5, r0
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff ff76 	bl	800898c <strchr>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1f7      	bne.n	8008a94 <strrchr+0x10>
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	e7f5      	b.n	8008a98 <strrchr+0x14>

08008aac <strstr>:
 8008aac:	780a      	ldrb	r2, [r1, #0]
 8008aae:	b570      	push	{r4, r5, r6, lr}
 8008ab0:	b96a      	cbnz	r2, 8008ace <strstr+0x22>
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d109      	bne.n	8008acc <strstr+0x20>
 8008ab8:	460c      	mov	r4, r1
 8008aba:	4605      	mov	r5, r0
 8008abc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f6      	beq.n	8008ab2 <strstr+0x6>
 8008ac4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008ac8:	429e      	cmp	r6, r3
 8008aca:	d0f7      	beq.n	8008abc <strstr+0x10>
 8008acc:	3001      	adds	r0, #1
 8008ace:	7803      	ldrb	r3, [r0, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1ef      	bne.n	8008ab4 <strstr+0x8>
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	e7ec      	b.n	8008ab2 <strstr+0x6>

08008ad8 <strupr>:
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	4c07      	ldr	r4, [pc, #28]	; (8008af8 <strupr+0x20>)
 8008adc:	1e42      	subs	r2, r0, #1
 8008ade:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008ae2:	b903      	cbnz	r3, 8008ae6 <strupr+0xe>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	5ce1      	ldrb	r1, [r4, r3]
 8008ae8:	f001 0103 	and.w	r1, r1, #3
 8008aec:	2902      	cmp	r1, #2
 8008aee:	bf08      	it	eq
 8008af0:	3b20      	subeq	r3, #32
 8008af2:	7013      	strb	r3, [r2, #0]
 8008af4:	e7f3      	b.n	8008ade <strupr+0x6>
 8008af6:	bf00      	nop
 8008af8:	0800a59d 	.word	0x0800a59d

08008afc <_vsniprintf_r>:
 8008afc:	b530      	push	{r4, r5, lr}
 8008afe:	4614      	mov	r4, r2
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	b09b      	sub	sp, #108	; 0x6c
 8008b04:	4605      	mov	r5, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	da05      	bge.n	8008b16 <_vsniprintf_r+0x1a>
 8008b0a:	238b      	movs	r3, #139	; 0x8b
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	b01b      	add	sp, #108	; 0x6c
 8008b14:	bd30      	pop	{r4, r5, pc}
 8008b16:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b1e:	bf14      	ite	ne
 8008b20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b24:	4623      	moveq	r3, r4
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b2e:	9100      	str	r1, [sp, #0]
 8008b30:	9104      	str	r1, [sp, #16]
 8008b32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b36:	4669      	mov	r1, sp
 8008b38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b3a:	f000 f875 	bl	8008c28 <_svfiprintf_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	bfbc      	itt	lt
 8008b42:	238b      	movlt	r3, #139	; 0x8b
 8008b44:	602b      	strlt	r3, [r5, #0]
 8008b46:	2c00      	cmp	r4, #0
 8008b48:	d0e3      	beq.n	8008b12 <_vsniprintf_r+0x16>
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
 8008b50:	e7df      	b.n	8008b12 <_vsniprintf_r+0x16>
	...

08008b54 <vsniprintf>:
 8008b54:	b507      	push	{r0, r1, r2, lr}
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	4803      	ldr	r0, [pc, #12]	; (8008b6c <vsniprintf+0x18>)
 8008b60:	6800      	ldr	r0, [r0, #0]
 8008b62:	f7ff ffcb 	bl	8008afc <_vsniprintf_r>
 8008b66:	b003      	add	sp, #12
 8008b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b6c:	20000018 	.word	0x20000018

08008b70 <__ssputs_r>:
 8008b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	688e      	ldr	r6, [r1, #8]
 8008b76:	429e      	cmp	r6, r3
 8008b78:	4682      	mov	sl, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4690      	mov	r8, r2
 8008b7e:	461f      	mov	r7, r3
 8008b80:	d838      	bhi.n	8008bf4 <__ssputs_r+0x84>
 8008b82:	898a      	ldrh	r2, [r1, #12]
 8008b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b88:	d032      	beq.n	8008bf0 <__ssputs_r+0x80>
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	6909      	ldr	r1, [r1, #16]
 8008b8e:	eba5 0901 	sub.w	r9, r5, r1
 8008b92:	6965      	ldr	r5, [r4, #20]
 8008b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	444b      	add	r3, r9
 8008ba0:	106d      	asrs	r5, r5, #1
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	bf38      	it	cc
 8008ba6:	461d      	movcc	r5, r3
 8008ba8:	0553      	lsls	r3, r2, #21
 8008baa:	d531      	bpl.n	8008c10 <__ssputs_r+0xa0>
 8008bac:	4629      	mov	r1, r5
 8008bae:	f000 fb3b 	bl	8009228 <_malloc_r>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	b950      	cbnz	r0, 8008bcc <__ssputs_r+0x5c>
 8008bb6:	230c      	movs	r3, #12
 8008bb8:	f8ca 3000 	str.w	r3, [sl]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bcc:	6921      	ldr	r1, [r4, #16]
 8008bce:	464a      	mov	r2, r9
 8008bd0:	f7ff fe91 	bl	80088f6 <memcpy>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	6126      	str	r6, [r4, #16]
 8008be2:	6165      	str	r5, [r4, #20]
 8008be4:	444e      	add	r6, r9
 8008be6:	eba5 0509 	sub.w	r5, r5, r9
 8008bea:	6026      	str	r6, [r4, #0]
 8008bec:	60a5      	str	r5, [r4, #8]
 8008bee:	463e      	mov	r6, r7
 8008bf0:	42be      	cmp	r6, r7
 8008bf2:	d900      	bls.n	8008bf6 <__ssputs_r+0x86>
 8008bf4:	463e      	mov	r6, r7
 8008bf6:	6820      	ldr	r0, [r4, #0]
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	f7ff fe89 	bl	8008912 <memmove>
 8008c00:	68a3      	ldr	r3, [r4, #8]
 8008c02:	1b9b      	subs	r3, r3, r6
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	4433      	add	r3, r6
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	e7db      	b.n	8008bc8 <__ssputs_r+0x58>
 8008c10:	462a      	mov	r2, r5
 8008c12:	f000 fb7d 	bl	8009310 <_realloc_r>
 8008c16:	4606      	mov	r6, r0
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1e1      	bne.n	8008be0 <__ssputs_r+0x70>
 8008c1c:	6921      	ldr	r1, [r4, #16]
 8008c1e:	4650      	mov	r0, sl
 8008c20:	f000 fa96 	bl	8009150 <_free_r>
 8008c24:	e7c7      	b.n	8008bb6 <__ssputs_r+0x46>
	...

08008c28 <_svfiprintf_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	898b      	ldrh	r3, [r1, #12]
 8008c30:	061b      	lsls	r3, r3, #24
 8008c32:	b09d      	sub	sp, #116	; 0x74
 8008c34:	4607      	mov	r7, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	d50e      	bpl.n	8008c5a <_svfiprintf_r+0x32>
 8008c3c:	690b      	ldr	r3, [r1, #16]
 8008c3e:	b963      	cbnz	r3, 8008c5a <_svfiprintf_r+0x32>
 8008c40:	2140      	movs	r1, #64	; 0x40
 8008c42:	f000 faf1 	bl	8009228 <_malloc_r>
 8008c46:	6028      	str	r0, [r5, #0]
 8008c48:	6128      	str	r0, [r5, #16]
 8008c4a:	b920      	cbnz	r0, 8008c56 <_svfiprintf_r+0x2e>
 8008c4c:	230c      	movs	r3, #12
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e0d1      	b.n	8008dfa <_svfiprintf_r+0x1d2>
 8008c56:	2340      	movs	r3, #64	; 0x40
 8008c58:	616b      	str	r3, [r5, #20]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5e:	2320      	movs	r3, #32
 8008c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c68:	2330      	movs	r3, #48	; 0x30
 8008c6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e14 <_svfiprintf_r+0x1ec>
 8008c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c72:	f04f 0901 	mov.w	r9, #1
 8008c76:	4623      	mov	r3, r4
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c7e:	b10a      	cbz	r2, 8008c84 <_svfiprintf_r+0x5c>
 8008c80:	2a25      	cmp	r2, #37	; 0x25
 8008c82:	d1f9      	bne.n	8008c78 <_svfiprintf_r+0x50>
 8008c84:	ebba 0b04 	subs.w	fp, sl, r4
 8008c88:	d00b      	beq.n	8008ca2 <_svfiprintf_r+0x7a>
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ff6d 	bl	8008b70 <__ssputs_r>
 8008c96:	3001      	adds	r0, #1
 8008c98:	f000 80aa 	beq.w	8008df0 <_svfiprintf_r+0x1c8>
 8008c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c9e:	445a      	add	r2, fp
 8008ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80a2 	beq.w	8008df0 <_svfiprintf_r+0x1c8>
 8008cac:	2300      	movs	r3, #0
 8008cae:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb6:	f10a 0a01 	add.w	sl, sl, #1
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	9307      	str	r3, [sp, #28]
 8008cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cc4:	4654      	mov	r4, sl
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ccc:	4851      	ldr	r0, [pc, #324]	; (8008e14 <_svfiprintf_r+0x1ec>)
 8008cce:	f7f7 fabf 	bl	8000250 <memchr>
 8008cd2:	9a04      	ldr	r2, [sp, #16]
 8008cd4:	b9d8      	cbnz	r0, 8008d0e <_svfiprintf_r+0xe6>
 8008cd6:	06d0      	lsls	r0, r2, #27
 8008cd8:	bf44      	itt	mi
 8008cda:	2320      	movmi	r3, #32
 8008cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce0:	0711      	lsls	r1, r2, #28
 8008ce2:	bf44      	itt	mi
 8008ce4:	232b      	movmi	r3, #43	; 0x2b
 8008ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cea:	f89a 3000 	ldrb.w	r3, [sl]
 8008cee:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf0:	d015      	beq.n	8008d1e <_svfiprintf_r+0xf6>
 8008cf2:	9a07      	ldr	r2, [sp, #28]
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f04f 0c0a 	mov.w	ip, #10
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d02:	3b30      	subs	r3, #48	; 0x30
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	d94e      	bls.n	8008da6 <_svfiprintf_r+0x17e>
 8008d08:	b1b0      	cbz	r0, 8008d38 <_svfiprintf_r+0x110>
 8008d0a:	9207      	str	r2, [sp, #28]
 8008d0c:	e014      	b.n	8008d38 <_svfiprintf_r+0x110>
 8008d0e:	eba0 0308 	sub.w	r3, r0, r8
 8008d12:	fa09 f303 	lsl.w	r3, r9, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	46a2      	mov	sl, r4
 8008d1c:	e7d2      	b.n	8008cc4 <_svfiprintf_r+0x9c>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	1d19      	adds	r1, r3, #4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	9103      	str	r1, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bfbb      	ittet	lt
 8008d2a:	425b      	neglt	r3, r3
 8008d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d30:	9307      	strge	r3, [sp, #28]
 8008d32:	9307      	strlt	r3, [sp, #28]
 8008d34:	bfb8      	it	lt
 8008d36:	9204      	strlt	r2, [sp, #16]
 8008d38:	7823      	ldrb	r3, [r4, #0]
 8008d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d3c:	d10c      	bne.n	8008d58 <_svfiprintf_r+0x130>
 8008d3e:	7863      	ldrb	r3, [r4, #1]
 8008d40:	2b2a      	cmp	r3, #42	; 0x2a
 8008d42:	d135      	bne.n	8008db0 <_svfiprintf_r+0x188>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	1d1a      	adds	r2, r3, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	9203      	str	r2, [sp, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb8      	it	lt
 8008d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d54:	3402      	adds	r4, #2
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e24 <_svfiprintf_r+0x1fc>
 8008d5c:	7821      	ldrb	r1, [r4, #0]
 8008d5e:	2203      	movs	r2, #3
 8008d60:	4650      	mov	r0, sl
 8008d62:	f7f7 fa75 	bl	8000250 <memchr>
 8008d66:	b140      	cbz	r0, 8008d7a <_svfiprintf_r+0x152>
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	eba0 000a 	sub.w	r0, r0, sl
 8008d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	4303      	orrs	r3, r0
 8008d76:	3401      	adds	r4, #1
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7e:	4826      	ldr	r0, [pc, #152]	; (8008e18 <_svfiprintf_r+0x1f0>)
 8008d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d84:	2206      	movs	r2, #6
 8008d86:	f7f7 fa63 	bl	8000250 <memchr>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d038      	beq.n	8008e00 <_svfiprintf_r+0x1d8>
 8008d8e:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <_svfiprintf_r+0x1f4>)
 8008d90:	bb1b      	cbnz	r3, 8008dda <_svfiprintf_r+0x1b2>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	3307      	adds	r3, #7
 8008d96:	f023 0307 	bic.w	r3, r3, #7
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	4433      	add	r3, r6
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	e767      	b.n	8008c76 <_svfiprintf_r+0x4e>
 8008da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008daa:	460c      	mov	r4, r1
 8008dac:	2001      	movs	r0, #1
 8008dae:	e7a5      	b.n	8008cfc <_svfiprintf_r+0xd4>
 8008db0:	2300      	movs	r3, #0
 8008db2:	3401      	adds	r4, #1
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	4619      	mov	r1, r3
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc2:	3a30      	subs	r2, #48	; 0x30
 8008dc4:	2a09      	cmp	r2, #9
 8008dc6:	d903      	bls.n	8008dd0 <_svfiprintf_r+0x1a8>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0c5      	beq.n	8008d58 <_svfiprintf_r+0x130>
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	e7c3      	b.n	8008d58 <_svfiprintf_r+0x130>
 8008dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7f0      	b.n	8008dbc <_svfiprintf_r+0x194>
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <_svfiprintf_r+0x1f8>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	4638      	mov	r0, r7
 8008de6:	f3af 8000 	nop.w
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	4606      	mov	r6, r0
 8008dee:	d1d6      	bne.n	8008d9e <_svfiprintf_r+0x176>
 8008df0:	89ab      	ldrh	r3, [r5, #12]
 8008df2:	065b      	lsls	r3, r3, #25
 8008df4:	f53f af2c 	bmi.w	8008c50 <_svfiprintf_r+0x28>
 8008df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dfa:	b01d      	add	sp, #116	; 0x74
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	462a      	mov	r2, r5
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <_svfiprintf_r+0x1f8>)
 8008e08:	a904      	add	r1, sp, #16
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	f000 f87a 	bl	8008f04 <_printf_i>
 8008e10:	e7eb      	b.n	8008dea <_svfiprintf_r+0x1c2>
 8008e12:	bf00      	nop
 8008e14:	0800a69d 	.word	0x0800a69d
 8008e18:	0800a6a7 	.word	0x0800a6a7
 8008e1c:	00000000 	.word	0x00000000
 8008e20:	08008b71 	.word	0x08008b71
 8008e24:	0800a6a3 	.word	0x0800a6a3

08008e28 <_printf_common>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	4699      	mov	r9, r3
 8008e30:	688a      	ldr	r2, [r1, #8]
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e44:	4607      	mov	r7, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	b10a      	cbz	r2, 8008e4e <_printf_common+0x26>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	0699      	lsls	r1, r3, #26
 8008e52:	bf42      	ittt	mi
 8008e54:	6833      	ldrmi	r3, [r6, #0]
 8008e56:	3302      	addmi	r3, #2
 8008e58:	6033      	strmi	r3, [r6, #0]
 8008e5a:	6825      	ldr	r5, [r4, #0]
 8008e5c:	f015 0506 	ands.w	r5, r5, #6
 8008e60:	d106      	bne.n	8008e70 <_printf_common+0x48>
 8008e62:	f104 0a19 	add.w	sl, r4, #25
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	6832      	ldr	r2, [r6, #0]
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dc26      	bgt.n	8008ebe <_printf_common+0x96>
 8008e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e74:	1e13      	subs	r3, r2, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	bf18      	it	ne
 8008e7a:	2301      	movne	r3, #1
 8008e7c:	0692      	lsls	r2, r2, #26
 8008e7e:	d42b      	bmi.n	8008ed8 <_printf_common+0xb0>
 8008e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e84:	4649      	mov	r1, r9
 8008e86:	4638      	mov	r0, r7
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d01e      	beq.n	8008ecc <_printf_common+0xa4>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	68e5      	ldr	r5, [r4, #12]
 8008e92:	6832      	ldr	r2, [r6, #0]
 8008e94:	f003 0306 	and.w	r3, r3, #6
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	bf08      	it	eq
 8008e9c:	1aad      	subeq	r5, r5, r2
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	6922      	ldr	r2, [r4, #16]
 8008ea2:	bf0c      	ite	eq
 8008ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea8:	2500      	movne	r5, #0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	bfc4      	itt	gt
 8008eae:	1a9b      	subgt	r3, r3, r2
 8008eb0:	18ed      	addgt	r5, r5, r3
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	341a      	adds	r4, #26
 8008eb6:	42b5      	cmp	r5, r6
 8008eb8:	d11a      	bne.n	8008ef0 <_printf_common+0xc8>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e008      	b.n	8008ed0 <_printf_common+0xa8>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4652      	mov	r2, sl
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	47c0      	blx	r8
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d103      	bne.n	8008ed4 <_printf_common+0xac>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	e7c6      	b.n	8008e66 <_printf_common+0x3e>
 8008ed8:	18e1      	adds	r1, r4, r3
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	2030      	movs	r0, #48	; 0x30
 8008ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ee2:	4422      	add	r2, r4
 8008ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eec:	3302      	adds	r3, #2
 8008eee:	e7c7      	b.n	8008e80 <_printf_common+0x58>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d0e6      	beq.n	8008ecc <_printf_common+0xa4>
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7d9      	b.n	8008eb6 <_printf_common+0x8e>
	...

08008f04 <_printf_i>:
 8008f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	7e0f      	ldrb	r7, [r1, #24]
 8008f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f0c:	2f78      	cmp	r7, #120	; 0x78
 8008f0e:	4691      	mov	r9, r2
 8008f10:	4680      	mov	r8, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	469a      	mov	sl, r3
 8008f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f1a:	d807      	bhi.n	8008f2c <_printf_i+0x28>
 8008f1c:	2f62      	cmp	r7, #98	; 0x62
 8008f1e:	d80a      	bhi.n	8008f36 <_printf_i+0x32>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f000 80d8 	beq.w	80090d6 <_printf_i+0x1d2>
 8008f26:	2f58      	cmp	r7, #88	; 0x58
 8008f28:	f000 80a3 	beq.w	8009072 <_printf_i+0x16e>
 8008f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f34:	e03a      	b.n	8008fac <_printf_i+0xa8>
 8008f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f3a:	2b15      	cmp	r3, #21
 8008f3c:	d8f6      	bhi.n	8008f2c <_printf_i+0x28>
 8008f3e:	a101      	add	r1, pc, #4	; (adr r1, 8008f44 <_printf_i+0x40>)
 8008f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f44:	08008f9d 	.word	0x08008f9d
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008f2d 	.word	0x08008f2d
 8008f50:	08008f2d 	.word	0x08008f2d
 8008f54:	08008f2d 	.word	0x08008f2d
 8008f58:	08008f2d 	.word	0x08008f2d
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008f2d 	.word	0x08008f2d
 8008f64:	08008f2d 	.word	0x08008f2d
 8008f68:	08008f2d 	.word	0x08008f2d
 8008f6c:	08008f2d 	.word	0x08008f2d
 8008f70:	080090bd 	.word	0x080090bd
 8008f74:	08008fe1 	.word	0x08008fe1
 8008f78:	0800909f 	.word	0x0800909f
 8008f7c:	08008f2d 	.word	0x08008f2d
 8008f80:	08008f2d 	.word	0x08008f2d
 8008f84:	080090df 	.word	0x080090df
 8008f88:	08008f2d 	.word	0x08008f2d
 8008f8c:	08008fe1 	.word	0x08008fe1
 8008f90:	08008f2d 	.word	0x08008f2d
 8008f94:	08008f2d 	.word	0x08008f2d
 8008f98:	080090a7 	.word	0x080090a7
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	1d1a      	adds	r2, r3, #4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	602a      	str	r2, [r5, #0]
 8008fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0a3      	b.n	80090f8 <_printf_i+0x1f4>
 8008fb0:	6820      	ldr	r0, [r4, #0]
 8008fb2:	6829      	ldr	r1, [r5, #0]
 8008fb4:	0606      	lsls	r6, r0, #24
 8008fb6:	f101 0304 	add.w	r3, r1, #4
 8008fba:	d50a      	bpl.n	8008fd2 <_printf_i+0xce>
 8008fbc:	680e      	ldr	r6, [r1, #0]
 8008fbe:	602b      	str	r3, [r5, #0]
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	da03      	bge.n	8008fcc <_printf_i+0xc8>
 8008fc4:	232d      	movs	r3, #45	; 0x2d
 8008fc6:	4276      	negs	r6, r6
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	485e      	ldr	r0, [pc, #376]	; (8009148 <_printf_i+0x244>)
 8008fce:	230a      	movs	r3, #10
 8008fd0:	e019      	b.n	8009006 <_printf_i+0x102>
 8008fd2:	680e      	ldr	r6, [r1, #0]
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fda:	bf18      	it	ne
 8008fdc:	b236      	sxthne	r6, r6
 8008fde:	e7ef      	b.n	8008fc0 <_printf_i+0xbc>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	6820      	ldr	r0, [r4, #0]
 8008fe4:	1d19      	adds	r1, r3, #4
 8008fe6:	6029      	str	r1, [r5, #0]
 8008fe8:	0601      	lsls	r1, r0, #24
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0xec>
 8008fec:	681e      	ldr	r6, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0xf2>
 8008ff0:	0646      	lsls	r6, r0, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0xe8>
 8008ff4:	881e      	ldrh	r6, [r3, #0]
 8008ff6:	4854      	ldr	r0, [pc, #336]	; (8009148 <_printf_i+0x244>)
 8008ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2308      	moveq	r3, #8
 8008ffe:	230a      	movne	r3, #10
 8009000:	2100      	movs	r1, #0
 8009002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009006:	6865      	ldr	r5, [r4, #4]
 8009008:	60a5      	str	r5, [r4, #8]
 800900a:	2d00      	cmp	r5, #0
 800900c:	bfa2      	ittt	ge
 800900e:	6821      	ldrge	r1, [r4, #0]
 8009010:	f021 0104 	bicge.w	r1, r1, #4
 8009014:	6021      	strge	r1, [r4, #0]
 8009016:	b90e      	cbnz	r6, 800901c <_printf_i+0x118>
 8009018:	2d00      	cmp	r5, #0
 800901a:	d04d      	beq.n	80090b8 <_printf_i+0x1b4>
 800901c:	4615      	mov	r5, r2
 800901e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009022:	fb03 6711 	mls	r7, r3, r1, r6
 8009026:	5dc7      	ldrb	r7, [r0, r7]
 8009028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800902c:	4637      	mov	r7, r6
 800902e:	42bb      	cmp	r3, r7
 8009030:	460e      	mov	r6, r1
 8009032:	d9f4      	bls.n	800901e <_printf_i+0x11a>
 8009034:	2b08      	cmp	r3, #8
 8009036:	d10b      	bne.n	8009050 <_printf_i+0x14c>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	07de      	lsls	r6, r3, #31
 800903c:	d508      	bpl.n	8009050 <_printf_i+0x14c>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	4299      	cmp	r1, r3
 8009044:	bfde      	ittt	le
 8009046:	2330      	movle	r3, #48	; 0x30
 8009048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800904c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009050:	1b52      	subs	r2, r2, r5
 8009052:	6122      	str	r2, [r4, #16]
 8009054:	f8cd a000 	str.w	sl, [sp]
 8009058:	464b      	mov	r3, r9
 800905a:	aa03      	add	r2, sp, #12
 800905c:	4621      	mov	r1, r4
 800905e:	4640      	mov	r0, r8
 8009060:	f7ff fee2 	bl	8008e28 <_printf_common>
 8009064:	3001      	adds	r0, #1
 8009066:	d14c      	bne.n	8009102 <_printf_i+0x1fe>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	b004      	add	sp, #16
 800906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009072:	4835      	ldr	r0, [pc, #212]	; (8009148 <_printf_i+0x244>)
 8009074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009078:	6829      	ldr	r1, [r5, #0]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009080:	6029      	str	r1, [r5, #0]
 8009082:	061d      	lsls	r5, r3, #24
 8009084:	d514      	bpl.n	80090b0 <_printf_i+0x1ac>
 8009086:	07df      	lsls	r7, r3, #31
 8009088:	bf44      	itt	mi
 800908a:	f043 0320 	orrmi.w	r3, r3, #32
 800908e:	6023      	strmi	r3, [r4, #0]
 8009090:	b91e      	cbnz	r6, 800909a <_printf_i+0x196>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	f023 0320 	bic.w	r3, r3, #32
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	2310      	movs	r3, #16
 800909c:	e7b0      	b.n	8009000 <_printf_i+0xfc>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f043 0320 	orr.w	r3, r3, #32
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	2378      	movs	r3, #120	; 0x78
 80090a8:	4828      	ldr	r0, [pc, #160]	; (800914c <_printf_i+0x248>)
 80090aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ae:	e7e3      	b.n	8009078 <_printf_i+0x174>
 80090b0:	0659      	lsls	r1, r3, #25
 80090b2:	bf48      	it	mi
 80090b4:	b2b6      	uxthmi	r6, r6
 80090b6:	e7e6      	b.n	8009086 <_printf_i+0x182>
 80090b8:	4615      	mov	r5, r2
 80090ba:	e7bb      	b.n	8009034 <_printf_i+0x130>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	6826      	ldr	r6, [r4, #0]
 80090c0:	6961      	ldr	r1, [r4, #20]
 80090c2:	1d18      	adds	r0, r3, #4
 80090c4:	6028      	str	r0, [r5, #0]
 80090c6:	0635      	lsls	r5, r6, #24
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	d501      	bpl.n	80090d0 <_printf_i+0x1cc>
 80090cc:	6019      	str	r1, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <_printf_i+0x1d2>
 80090d0:	0670      	lsls	r0, r6, #25
 80090d2:	d5fb      	bpl.n	80090cc <_printf_i+0x1c8>
 80090d4:	8019      	strh	r1, [r3, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	6123      	str	r3, [r4, #16]
 80090da:	4615      	mov	r5, r2
 80090dc:	e7ba      	b.n	8009054 <_printf_i+0x150>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	1d1a      	adds	r2, r3, #4
 80090e2:	602a      	str	r2, [r5, #0]
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	6862      	ldr	r2, [r4, #4]
 80090e8:	2100      	movs	r1, #0
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7f7 f8b0 	bl	8000250 <memchr>
 80090f0:	b108      	cbz	r0, 80090f6 <_printf_i+0x1f2>
 80090f2:	1b40      	subs	r0, r0, r5
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	2300      	movs	r3, #0
 80090fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009100:	e7a8      	b.n	8009054 <_printf_i+0x150>
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	462a      	mov	r2, r5
 8009106:	4649      	mov	r1, r9
 8009108:	4640      	mov	r0, r8
 800910a:	47d0      	blx	sl
 800910c:	3001      	adds	r0, #1
 800910e:	d0ab      	beq.n	8009068 <_printf_i+0x164>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	079b      	lsls	r3, r3, #30
 8009114:	d413      	bmi.n	800913e <_printf_i+0x23a>
 8009116:	68e0      	ldr	r0, [r4, #12]
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	4298      	cmp	r0, r3
 800911c:	bfb8      	it	lt
 800911e:	4618      	movlt	r0, r3
 8009120:	e7a4      	b.n	800906c <_printf_i+0x168>
 8009122:	2301      	movs	r3, #1
 8009124:	4632      	mov	r2, r6
 8009126:	4649      	mov	r1, r9
 8009128:	4640      	mov	r0, r8
 800912a:	47d0      	blx	sl
 800912c:	3001      	adds	r0, #1
 800912e:	d09b      	beq.n	8009068 <_printf_i+0x164>
 8009130:	3501      	adds	r5, #1
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	9903      	ldr	r1, [sp, #12]
 8009136:	1a5b      	subs	r3, r3, r1
 8009138:	42ab      	cmp	r3, r5
 800913a:	dcf2      	bgt.n	8009122 <_printf_i+0x21e>
 800913c:	e7eb      	b.n	8009116 <_printf_i+0x212>
 800913e:	2500      	movs	r5, #0
 8009140:	f104 0619 	add.w	r6, r4, #25
 8009144:	e7f5      	b.n	8009132 <_printf_i+0x22e>
 8009146:	bf00      	nop
 8009148:	0800a6ae 	.word	0x0800a6ae
 800914c:	0800a6bf 	.word	0x0800a6bf

08009150 <_free_r>:
 8009150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009152:	2900      	cmp	r1, #0
 8009154:	d044      	beq.n	80091e0 <_free_r+0x90>
 8009156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915a:	9001      	str	r0, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f1a1 0404 	sub.w	r4, r1, #4
 8009162:	bfb8      	it	lt
 8009164:	18e4      	addlt	r4, r4, r3
 8009166:	f000 f913 	bl	8009390 <__malloc_lock>
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <_free_r+0x94>)
 800916c:	9801      	ldr	r0, [sp, #4]
 800916e:	6813      	ldr	r3, [r2, #0]
 8009170:	b933      	cbnz	r3, 8009180 <_free_r+0x30>
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	6014      	str	r4, [r2, #0]
 8009176:	b003      	add	sp, #12
 8009178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800917c:	f000 b90e 	b.w	800939c <__malloc_unlock>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d908      	bls.n	8009196 <_free_r+0x46>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	1961      	adds	r1, r4, r5
 8009188:	428b      	cmp	r3, r1
 800918a:	bf01      	itttt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	1949      	addeq	r1, r1, r5
 8009192:	6021      	streq	r1, [r4, #0]
 8009194:	e7ed      	b.n	8009172 <_free_r+0x22>
 8009196:	461a      	mov	r2, r3
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	b10b      	cbz	r3, 80091a0 <_free_r+0x50>
 800919c:	42a3      	cmp	r3, r4
 800919e:	d9fa      	bls.n	8009196 <_free_r+0x46>
 80091a0:	6811      	ldr	r1, [r2, #0]
 80091a2:	1855      	adds	r5, r2, r1
 80091a4:	42a5      	cmp	r5, r4
 80091a6:	d10b      	bne.n	80091c0 <_free_r+0x70>
 80091a8:	6824      	ldr	r4, [r4, #0]
 80091aa:	4421      	add	r1, r4
 80091ac:	1854      	adds	r4, r2, r1
 80091ae:	42a3      	cmp	r3, r4
 80091b0:	6011      	str	r1, [r2, #0]
 80091b2:	d1e0      	bne.n	8009176 <_free_r+0x26>
 80091b4:	681c      	ldr	r4, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	6053      	str	r3, [r2, #4]
 80091ba:	4421      	add	r1, r4
 80091bc:	6011      	str	r1, [r2, #0]
 80091be:	e7da      	b.n	8009176 <_free_r+0x26>
 80091c0:	d902      	bls.n	80091c8 <_free_r+0x78>
 80091c2:	230c      	movs	r3, #12
 80091c4:	6003      	str	r3, [r0, #0]
 80091c6:	e7d6      	b.n	8009176 <_free_r+0x26>
 80091c8:	6825      	ldr	r5, [r4, #0]
 80091ca:	1961      	adds	r1, r4, r5
 80091cc:	428b      	cmp	r3, r1
 80091ce:	bf04      	itt	eq
 80091d0:	6819      	ldreq	r1, [r3, #0]
 80091d2:	685b      	ldreq	r3, [r3, #4]
 80091d4:	6063      	str	r3, [r4, #4]
 80091d6:	bf04      	itt	eq
 80091d8:	1949      	addeq	r1, r1, r5
 80091da:	6021      	streq	r1, [r4, #0]
 80091dc:	6054      	str	r4, [r2, #4]
 80091de:	e7ca      	b.n	8009176 <_free_r+0x26>
 80091e0:	b003      	add	sp, #12
 80091e2:	bd30      	pop	{r4, r5, pc}
 80091e4:	20012f7c 	.word	0x20012f7c

080091e8 <sbrk_aligned>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	4e0e      	ldr	r6, [pc, #56]	; (8009224 <sbrk_aligned+0x3c>)
 80091ec:	460c      	mov	r4, r1
 80091ee:	6831      	ldr	r1, [r6, #0]
 80091f0:	4605      	mov	r5, r0
 80091f2:	b911      	cbnz	r1, 80091fa <sbrk_aligned+0x12>
 80091f4:	f000 f8bc 	bl	8009370 <_sbrk_r>
 80091f8:	6030      	str	r0, [r6, #0]
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 f8b7 	bl	8009370 <_sbrk_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	d00a      	beq.n	800921c <sbrk_aligned+0x34>
 8009206:	1cc4      	adds	r4, r0, #3
 8009208:	f024 0403 	bic.w	r4, r4, #3
 800920c:	42a0      	cmp	r0, r4
 800920e:	d007      	beq.n	8009220 <sbrk_aligned+0x38>
 8009210:	1a21      	subs	r1, r4, r0
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f8ac 	bl	8009370 <_sbrk_r>
 8009218:	3001      	adds	r0, #1
 800921a:	d101      	bne.n	8009220 <sbrk_aligned+0x38>
 800921c:	f04f 34ff 	mov.w	r4, #4294967295
 8009220:	4620      	mov	r0, r4
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	20012f80 	.word	0x20012f80

08009228 <_malloc_r>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4607      	mov	r7, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d905      	bls.n	8009250 <_malloc_r+0x28>
 8009244:	230c      	movs	r3, #12
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	2600      	movs	r6, #0
 800924a:	4630      	mov	r0, r6
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	4e2e      	ldr	r6, [pc, #184]	; (800930c <_malloc_r+0xe4>)
 8009252:	f000 f89d 	bl	8009390 <__malloc_lock>
 8009256:	6833      	ldr	r3, [r6, #0]
 8009258:	461c      	mov	r4, r3
 800925a:	bb34      	cbnz	r4, 80092aa <_malloc_r+0x82>
 800925c:	4629      	mov	r1, r5
 800925e:	4638      	mov	r0, r7
 8009260:	f7ff ffc2 	bl	80091e8 <sbrk_aligned>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	4604      	mov	r4, r0
 8009268:	d14d      	bne.n	8009306 <_malloc_r+0xde>
 800926a:	6834      	ldr	r4, [r6, #0]
 800926c:	4626      	mov	r6, r4
 800926e:	2e00      	cmp	r6, #0
 8009270:	d140      	bne.n	80092f4 <_malloc_r+0xcc>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	4631      	mov	r1, r6
 8009276:	4638      	mov	r0, r7
 8009278:	eb04 0803 	add.w	r8, r4, r3
 800927c:	f000 f878 	bl	8009370 <_sbrk_r>
 8009280:	4580      	cmp	r8, r0
 8009282:	d13a      	bne.n	80092fa <_malloc_r+0xd2>
 8009284:	6821      	ldr	r1, [r4, #0]
 8009286:	3503      	adds	r5, #3
 8009288:	1a6d      	subs	r5, r5, r1
 800928a:	f025 0503 	bic.w	r5, r5, #3
 800928e:	3508      	adds	r5, #8
 8009290:	2d0c      	cmp	r5, #12
 8009292:	bf38      	it	cc
 8009294:	250c      	movcc	r5, #12
 8009296:	4629      	mov	r1, r5
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ffa5 	bl	80091e8 <sbrk_aligned>
 800929e:	3001      	adds	r0, #1
 80092a0:	d02b      	beq.n	80092fa <_malloc_r+0xd2>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	442b      	add	r3, r5
 80092a6:	6023      	str	r3, [r4, #0]
 80092a8:	e00e      	b.n	80092c8 <_malloc_r+0xa0>
 80092aa:	6822      	ldr	r2, [r4, #0]
 80092ac:	1b52      	subs	r2, r2, r5
 80092ae:	d41e      	bmi.n	80092ee <_malloc_r+0xc6>
 80092b0:	2a0b      	cmp	r2, #11
 80092b2:	d916      	bls.n	80092e2 <_malloc_r+0xba>
 80092b4:	1961      	adds	r1, r4, r5
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	bf18      	it	ne
 80092bc:	6059      	strne	r1, [r3, #4]
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	bf08      	it	eq
 80092c2:	6031      	streq	r1, [r6, #0]
 80092c4:	5162      	str	r2, [r4, r5]
 80092c6:	604b      	str	r3, [r1, #4]
 80092c8:	4638      	mov	r0, r7
 80092ca:	f104 060b 	add.w	r6, r4, #11
 80092ce:	f000 f865 	bl	800939c <__malloc_unlock>
 80092d2:	f026 0607 	bic.w	r6, r6, #7
 80092d6:	1d23      	adds	r3, r4, #4
 80092d8:	1af2      	subs	r2, r6, r3
 80092da:	d0b6      	beq.n	800924a <_malloc_r+0x22>
 80092dc:	1b9b      	subs	r3, r3, r6
 80092de:	50a3      	str	r3, [r4, r2]
 80092e0:	e7b3      	b.n	800924a <_malloc_r+0x22>
 80092e2:	6862      	ldr	r2, [r4, #4]
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	bf0c      	ite	eq
 80092e8:	6032      	streq	r2, [r6, #0]
 80092ea:	605a      	strne	r2, [r3, #4]
 80092ec:	e7ec      	b.n	80092c8 <_malloc_r+0xa0>
 80092ee:	4623      	mov	r3, r4
 80092f0:	6864      	ldr	r4, [r4, #4]
 80092f2:	e7b2      	b.n	800925a <_malloc_r+0x32>
 80092f4:	4634      	mov	r4, r6
 80092f6:	6876      	ldr	r6, [r6, #4]
 80092f8:	e7b9      	b.n	800926e <_malloc_r+0x46>
 80092fa:	230c      	movs	r3, #12
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4638      	mov	r0, r7
 8009300:	f000 f84c 	bl	800939c <__malloc_unlock>
 8009304:	e7a1      	b.n	800924a <_malloc_r+0x22>
 8009306:	6025      	str	r5, [r4, #0]
 8009308:	e7de      	b.n	80092c8 <_malloc_r+0xa0>
 800930a:	bf00      	nop
 800930c:	20012f7c 	.word	0x20012f7c

08009310 <_realloc_r>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	4680      	mov	r8, r0
 8009316:	4614      	mov	r4, r2
 8009318:	460e      	mov	r6, r1
 800931a:	b921      	cbnz	r1, 8009326 <_realloc_r+0x16>
 800931c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009320:	4611      	mov	r1, r2
 8009322:	f7ff bf81 	b.w	8009228 <_malloc_r>
 8009326:	b92a      	cbnz	r2, 8009334 <_realloc_r+0x24>
 8009328:	f7ff ff12 	bl	8009150 <_free_r>
 800932c:	4625      	mov	r5, r4
 800932e:	4628      	mov	r0, r5
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	f000 f838 	bl	80093a8 <_malloc_usable_size_r>
 8009338:	4284      	cmp	r4, r0
 800933a:	4607      	mov	r7, r0
 800933c:	d802      	bhi.n	8009344 <_realloc_r+0x34>
 800933e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009342:	d812      	bhi.n	800936a <_realloc_r+0x5a>
 8009344:	4621      	mov	r1, r4
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff ff6e 	bl	8009228 <_malloc_r>
 800934c:	4605      	mov	r5, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	d0ed      	beq.n	800932e <_realloc_r+0x1e>
 8009352:	42bc      	cmp	r4, r7
 8009354:	4622      	mov	r2, r4
 8009356:	4631      	mov	r1, r6
 8009358:	bf28      	it	cs
 800935a:	463a      	movcs	r2, r7
 800935c:	f7ff facb 	bl	80088f6 <memcpy>
 8009360:	4631      	mov	r1, r6
 8009362:	4640      	mov	r0, r8
 8009364:	f7ff fef4 	bl	8009150 <_free_r>
 8009368:	e7e1      	b.n	800932e <_realloc_r+0x1e>
 800936a:	4635      	mov	r5, r6
 800936c:	e7df      	b.n	800932e <_realloc_r+0x1e>
	...

08009370 <_sbrk_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4d06      	ldr	r5, [pc, #24]	; (800938c <_sbrk_r+0x1c>)
 8009374:	2300      	movs	r3, #0
 8009376:	4604      	mov	r4, r0
 8009378:	4608      	mov	r0, r1
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	f000 f8ba 	bl	80094f4 <_sbrk>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_sbrk_r+0x1a>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_sbrk_r+0x1a>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	20012f84 	.word	0x20012f84

08009390 <__malloc_lock>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__malloc_lock+0x8>)
 8009392:	f000 b811 	b.w	80093b8 <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	20012f88 	.word	0x20012f88

0800939c <__malloc_unlock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_unlock+0x8>)
 800939e:	f000 b80c 	b.w	80093ba <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	20012f88 	.word	0x20012f88

080093a8 <_malloc_usable_size_r>:
 80093a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ac:	1f18      	subs	r0, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfbc      	itt	lt
 80093b2:	580b      	ldrlt	r3, [r1, r0]
 80093b4:	18c0      	addlt	r0, r0, r3
 80093b6:	4770      	bx	lr

080093b8 <__retarget_lock_acquire_recursive>:
 80093b8:	4770      	bx	lr

080093ba <__retarget_lock_release_recursive>:
 80093ba:	4770      	bx	lr

080093bc <_ZdlPv>:
 80093bc:	f000 b83e 	b.w	800943c <free>

080093c0 <_ZSt15get_new_handlerv>:
 80093c0:	4b02      	ldr	r3, [pc, #8]	; (80093cc <_ZSt15get_new_handlerv+0xc>)
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	f3bf 8f5b 	dmb	ish
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20012f8c 	.word	0x20012f8c

080093d0 <_Znwj>:
 80093d0:	2801      	cmp	r0, #1
 80093d2:	bf38      	it	cc
 80093d4:	2001      	movcc	r0, #1
 80093d6:	b510      	push	{r4, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f826 	bl	800942c <malloc>
 80093e0:	b930      	cbnz	r0, 80093f0 <_Znwj+0x20>
 80093e2:	f7ff ffed 	bl	80093c0 <_ZSt15get_new_handlerv>
 80093e6:	b908      	cbnz	r0, 80093ec <_Znwj+0x1c>
 80093e8:	f000 f819 	bl	800941e <abort>
 80093ec:	4780      	blx	r0
 80093ee:	e7f4      	b.n	80093da <_Znwj+0xa>
 80093f0:	bd10      	pop	{r4, pc}

080093f2 <_ZnwjRKSt9nothrow_t>:
 80093f2:	f7ff bfed 	b.w	80093d0 <_Znwj>

080093f6 <__cxa_pure_virtual>:
 80093f6:	b508      	push	{r3, lr}
 80093f8:	f000 f80c 	bl	8009414 <_ZSt9terminatev>

080093fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80093fc:	b508      	push	{r3, lr}
 80093fe:	4780      	blx	r0
 8009400:	f000 f80d 	bl	800941e <abort>

08009404 <_ZSt13get_terminatev>:
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <_ZSt13get_terminatev+0xc>)
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	f3bf 8f5b 	dmb	ish
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	2000007c 	.word	0x2000007c

08009414 <_ZSt9terminatev>:
 8009414:	b508      	push	{r3, lr}
 8009416:	f7ff fff5 	bl	8009404 <_ZSt13get_terminatev>
 800941a:	f7ff ffef 	bl	80093fc <_ZN10__cxxabiv111__terminateEPFvvE>

0800941e <abort>:
 800941e:	b508      	push	{r3, lr}
 8009420:	2006      	movs	r0, #6
 8009422:	f000 f83b 	bl	800949c <raise>
 8009426:	2001      	movs	r0, #1
 8009428:	f000 f85e 	bl	80094e8 <_exit>

0800942c <malloc>:
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <malloc+0xc>)
 800942e:	4601      	mov	r1, r0
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f7ff bef9 	b.w	8009228 <_malloc_r>
 8009436:	bf00      	nop
 8009438:	20000018 	.word	0x20000018

0800943c <free>:
 800943c:	4b02      	ldr	r3, [pc, #8]	; (8009448 <free+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff be85 	b.w	8009150 <_free_r>
 8009446:	bf00      	nop
 8009448:	20000018 	.word	0x20000018

0800944c <_raise_r>:
 800944c:	291f      	cmp	r1, #31
 800944e:	b538      	push	{r3, r4, r5, lr}
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	d904      	bls.n	8009460 <_raise_r+0x14>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009462:	b112      	cbz	r2, 800946a <_raise_r+0x1e>
 8009464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009468:	b94b      	cbnz	r3, 800947e <_raise_r+0x32>
 800946a:	4620      	mov	r0, r4
 800946c:	f000 f830 	bl	80094d0 <_getpid_r>
 8009470:	462a      	mov	r2, r5
 8009472:	4601      	mov	r1, r0
 8009474:	4620      	mov	r0, r4
 8009476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800947a:	f000 b817 	b.w	80094ac <_kill_r>
 800947e:	2b01      	cmp	r3, #1
 8009480:	d00a      	beq.n	8009498 <_raise_r+0x4c>
 8009482:	1c59      	adds	r1, r3, #1
 8009484:	d103      	bne.n	800948e <_raise_r+0x42>
 8009486:	2316      	movs	r3, #22
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	2001      	movs	r0, #1
 800948c:	e7e7      	b.n	800945e <_raise_r+0x12>
 800948e:	2400      	movs	r4, #0
 8009490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009494:	4628      	mov	r0, r5
 8009496:	4798      	blx	r3
 8009498:	2000      	movs	r0, #0
 800949a:	e7e0      	b.n	800945e <_raise_r+0x12>

0800949c <raise>:
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <raise+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f7ff bfd3 	b.w	800944c <_raise_r>
 80094a6:	bf00      	nop
 80094a8:	20000018 	.word	0x20000018

080094ac <_kill_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	; (80094cc <_kill_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f000 f80d 	bl	80094d8 <_kill>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_kill_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_kill_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	20012f84 	.word	0x20012f84

080094d0 <_getpid_r>:
 80094d0:	f000 b800 	b.w	80094d4 <_getpid>

080094d4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80094d4:	2001      	movs	r0, #1
 80094d6:	4770      	bx	lr

080094d8 <_kill>:

int _kill(int pid, int sig)
{
 80094d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80094da:	f000 f825 	bl	8009528 <__errno>
 80094de:	2316      	movs	r3, #22
 80094e0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295
 80094e6:	bd08      	pop	{r3, pc}

080094e8 <_exit>:

void _exit (int status)
{
 80094e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80094ea:	f000 f81d 	bl	8009528 <__errno>
 80094ee:	2316      	movs	r3, #22
 80094f0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80094f2:	e7fe      	b.n	80094f2 <_exit+0xa>

080094f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094f4:	4a0a      	ldr	r2, [pc, #40]	; (8009520 <_sbrk+0x2c>)
 80094f6:	6811      	ldr	r1, [r2, #0]
{
 80094f8:	b508      	push	{r3, lr}
 80094fa:	4603      	mov	r3, r0
	if (heap_end == 0)
 80094fc:	b909      	cbnz	r1, 8009502 <_sbrk+0xe>
		heap_end = &end;
 80094fe:	4909      	ldr	r1, [pc, #36]	; (8009524 <_sbrk+0x30>)
 8009500:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8009502:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8009504:	4669      	mov	r1, sp
 8009506:	4403      	add	r3, r0
 8009508:	428b      	cmp	r3, r1
 800950a:	d906      	bls.n	800951a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800950c:	f000 f80c 	bl	8009528 <__errno>
 8009510:	230c      	movs	r3, #12
 8009512:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8009518:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800951a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800951c:	e7fc      	b.n	8009518 <_sbrk+0x24>
 800951e:	bf00      	nop
 8009520:	20012f90 	.word	0x20012f90
 8009524:	20012f98 	.word	0x20012f98

08009528 <__errno>:
 8009528:	4b01      	ldr	r3, [pc, #4]	; (8009530 <__errno+0x8>)
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	20000018 	.word	0x20000018

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
