
cplsystem-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000048  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000048  0800a24c  0800a24c  0001a24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  0800a294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012a74  2000007c  0800a310  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00008c00  20012af0  0800a310  00022af0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000592df  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000d28a  00000000  00000000  0007938b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000b6d7  00000000  00000000  00086615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b58  00000000  00000000  00091cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001f28  00000000  00000000  00093844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032d04  00000000  00000000  0009576c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000325e3  00000000  00000000  000c8470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dd653  00000000  00000000  000faa53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001d80a6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006d14  00000000  00000000  001d80f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009540 	.word	0x08009540

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08009540 	.word	0x08009540

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b974 	b.w	8000f3c <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	9d08      	ldr	r5, [sp, #32]
 8000c72:	4604      	mov	r4, r0
 8000c74:	468e      	mov	lr, r1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14d      	bne.n	8000d16 <__udivmoddi4+0xaa>
 8000c7a:	428a      	cmp	r2, r1
 8000c7c:	4694      	mov	ip, r2
 8000c7e:	d969      	bls.n	8000d54 <__udivmoddi4+0xe8>
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	b152      	cbz	r2, 8000c9c <__udivmoddi4+0x30>
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	f1c2 0120 	rsb	r1, r2, #32
 8000c8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c96:	ea41 0e03 	orr.w	lr, r1, r3
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	0c21      	lsrs	r1, r4, #16
 8000ca2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca6:	fa1f f78c 	uxth.w	r7, ip
 8000caa:	fb08 e316 	mls	r3, r8, r6, lr
 8000cae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cb2:	fb06 f107 	mul.w	r1, r6, r7
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x64>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cc2:	f080 811f 	bcs.w	8000f04 <__udivmoddi4+0x298>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 811c 	bls.w	8000f04 <__udivmoddi4+0x298>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb00 f707 	mul.w	r7, r0, r7
 8000ce4:	42a7      	cmp	r7, r4
 8000ce6:	d90a      	bls.n	8000cfe <__udivmoddi4+0x92>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	f080 810a 	bcs.w	8000f08 <__udivmoddi4+0x29c>
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	f240 8107 	bls.w	8000f08 <__udivmoddi4+0x29c>
 8000cfa:	4464      	add	r4, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d02:	1be4      	subs	r4, r4, r7
 8000d04:	2600      	movs	r6, #0
 8000d06:	b11d      	cbz	r5, 8000d10 <__udivmoddi4+0xa4>
 8000d08:	40d4      	lsrs	r4, r2
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0xc2>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80ef 	beq.w	8000efe <__udivmoddi4+0x292>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x160>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xd4>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80f9 	bhi.w	8000f32 <__udivmoddi4+0x2c6>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0303 	sbc.w	r3, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	469e      	mov	lr, r3
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e0      	beq.n	8000d10 <__udivmoddi4+0xa4>
 8000d4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d52:	e7dd      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xec>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	f040 8092 	bne.w	8000e86 <__udivmoddi4+0x21a>
 8000d62:	eba1 010c 	sub.w	r1, r1, ip
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f fe8c 	uxth.w	lr, ip
 8000d6e:	2601      	movs	r6, #1
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d76:	fb07 1113 	mls	r1, r7, r3, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb0e f003 	mul.w	r0, lr, r3
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x12c>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x12a>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f200 80cb 	bhi.w	8000f2c <__udivmoddi4+0x2c0>
 8000d96:	4643      	mov	r3, r8
 8000d98:	1a09      	subs	r1, r1, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da0:	fb07 1110 	mls	r1, r7, r0, r1
 8000da4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x156>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x154>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f200 80bb 	bhi.w	8000f36 <__udivmoddi4+0x2ca>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	eba4 040e 	sub.w	r4, r4, lr
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	e79c      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000dcc:	f1c6 0720 	rsb	r7, r6, #32
 8000dd0:	40b3      	lsls	r3, r6
 8000dd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dda:	fa20 f407 	lsr.w	r4, r0, r7
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	431c      	orrs	r4, r3
 8000de4:	40f9      	lsrs	r1, r7
 8000de6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dea:	fa00 f306 	lsl.w	r3, r0, r6
 8000dee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000df2:	0c20      	lsrs	r0, r4, #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e00:	fb08 f00e 	mul.w	r0, r8, lr
 8000e04:	4288      	cmp	r0, r1
 8000e06:	fa02 f206 	lsl.w	r2, r2, r6
 8000e0a:	d90b      	bls.n	8000e24 <__udivmoddi4+0x1b8>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e14:	f080 8088 	bcs.w	8000f28 <__udivmoddi4+0x2bc>
 8000e18:	4288      	cmp	r0, r1
 8000e1a:	f240 8085 	bls.w	8000f28 <__udivmoddi4+0x2bc>
 8000e1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	458e      	cmp	lr, r1
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x1e2>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e44:	d26c      	bcs.n	8000f20 <__udivmoddi4+0x2b4>
 8000e46:	458e      	cmp	lr, r1
 8000e48:	d96a      	bls.n	8000f20 <__udivmoddi4+0x2b4>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4461      	add	r1, ip
 8000e4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e52:	fba0 9402 	umull	r9, r4, r0, r2
 8000e56:	eba1 010e 	sub.w	r1, r1, lr
 8000e5a:	42a1      	cmp	r1, r4
 8000e5c:	46c8      	mov	r8, r9
 8000e5e:	46a6      	mov	lr, r4
 8000e60:	d356      	bcc.n	8000f10 <__udivmoddi4+0x2a4>
 8000e62:	d053      	beq.n	8000f0c <__udivmoddi4+0x2a0>
 8000e64:	b15d      	cbz	r5, 8000e7e <__udivmoddi4+0x212>
 8000e66:	ebb3 0208 	subs.w	r2, r3, r8
 8000e6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e72:	fa22 f306 	lsr.w	r3, r2, r6
 8000e76:	40f1      	lsrs	r1, r6
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7e:	2600      	movs	r6, #0
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	f1c2 0320 	rsb	r3, r2, #32
 8000e8a:	40d8      	lsrs	r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	fa21 f303 	lsr.w	r3, r1, r3
 8000e94:	4091      	lsls	r1, r2
 8000e96:	4301      	orrs	r1, r0
 8000e98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea8:	0c0b      	lsrs	r3, r1, #16
 8000eaa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eae:	fb00 f60e 	mul.w	r6, r0, lr
 8000eb2:	429e      	cmp	r6, r3
 8000eb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x260>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec2:	d22f      	bcs.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d92d      	bls.n	8000f24 <__udivmoddi4+0x2b8>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	b289      	uxth	r1, r1
 8000ed0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000edc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x28a>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eec:	d216      	bcs.n	8000f1c <__udivmoddi4+0x2b0>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d914      	bls.n	8000f1c <__udivmoddi4+0x2b0>
 8000ef2:	3e02      	subs	r6, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000efc:	e738      	b.n	8000d70 <__udivmoddi4+0x104>
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e705      	b.n	8000d10 <__udivmoddi4+0xa4>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e3      	b.n	8000cd0 <__udivmoddi4+0x64>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6f8      	b.n	8000cfe <__udivmoddi4+0x92>
 8000f0c:	454b      	cmp	r3, r9
 8000f0e:	d2a9      	bcs.n	8000e64 <__udivmoddi4+0x1f8>
 8000f10:	ebb9 0802 	subs.w	r8, r9, r2
 8000f14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7a3      	b.n	8000e64 <__udivmoddi4+0x1f8>
 8000f1c:	4646      	mov	r6, r8
 8000f1e:	e7ea      	b.n	8000ef6 <__udivmoddi4+0x28a>
 8000f20:	4620      	mov	r0, r4
 8000f22:	e794      	b.n	8000e4e <__udivmoddi4+0x1e2>
 8000f24:	4640      	mov	r0, r8
 8000f26:	e7d1      	b.n	8000ecc <__udivmoddi4+0x260>
 8000f28:	46d0      	mov	r8, sl
 8000f2a:	e77b      	b.n	8000e24 <__udivmoddi4+0x1b8>
 8000f2c:	3b02      	subs	r3, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	e732      	b.n	8000d98 <__udivmoddi4+0x12c>
 8000f32:	4630      	mov	r0, r6
 8000f34:	e709      	b.n	8000d4a <__udivmoddi4+0xde>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	e742      	b.n	8000dc2 <__udivmoddi4+0x156>

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f40:	4770      	bx	lr

08000f42 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f42:	4770      	bx	lr

08000f44 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <vApplicationGetIdleTaskMemory+0x10>)
 8000f46:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <vApplicationGetIdleTaskMemory+0x14>)
 8000f4a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f50:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000f52:	4770      	bx	lr
 8000f54:	20000c98 	.word	0x20000c98
 8000f58:	20000098 	.word	0x20000098

08000f5c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <vApplicationGetTimerTaskMemory+0x10>)
 8000f5e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <vApplicationGetTimerTaskMemory+0x14>)
 8000f62:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f68:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000f6a:	4770      	bx	lr
 8000f6c:	200024fc 	.word	0x200024fc
 8000f70:	20000cfc 	.word	0x20000cfc

08000f74 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f78:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	a809      	add	r0, sp, #36	; 0x24
 8000f80:	f007 fae0 	bl	8008544 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f84:	2400      	movs	r4, #0
 8000f86:	4b6c      	ldr	r3, [pc, #432]	; (8001138 <MX_GPIO_Init+0x1c4>)
 8000f88:	9401      	str	r4, [sp, #4]
 8000f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f8c:	4f6b      	ldr	r7, [pc, #428]	; (800113c <MX_GPIO_Init+0x1c8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f8e:	4e6c      	ldr	r6, [pc, #432]	; (8001140 <MX_GPIO_Init+0x1cc>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001150 <MX_GPIO_Init+0x1dc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f94:	f042 0210 	orr.w	r2, r2, #16
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9c:	f002 0210 	and.w	r2, r2, #16
 8000fa0:	9201      	str	r2, [sp, #4]
 8000fa2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	9402      	str	r4, [sp, #8]
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa8:	f042 0204 	orr.w	r2, r2, #4
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
 8000fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb0:	f002 0204 	and.w	r2, r2, #4
 8000fb4:	9202      	str	r2, [sp, #8]
 8000fb6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb8:	9403      	str	r4, [sp, #12]
 8000fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbc:	f042 0220 	orr.w	r2, r2, #32
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc4:	f002 0220 	and.w	r2, r2, #32
 8000fc8:	9203      	str	r2, [sp, #12]
 8000fca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fcc:	9404      	str	r4, [sp, #16]
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fdc:	9204      	str	r2, [sp, #16]
 8000fde:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	9405      	str	r4, [sp, #20]
 8000fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fec:	f002 0201 	and.w	r2, r2, #1
 8000ff0:	9205      	str	r2, [sp, #20]
 8000ff2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	9406      	str	r4, [sp, #24]
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff8:	f042 0202 	orr.w	r2, r2, #2
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	f002 0202 	and.w	r2, r2, #2
 8001004:	9206      	str	r2, [sp, #24]
 8001006:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	9407      	str	r4, [sp, #28]
 800100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
 8001012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001014:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001018:	9207      	str	r2, [sp, #28]
 800101a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	9408      	str	r4, [sp, #32]
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f042 0208 	orr.w	r2, r2, #8
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800102e:	4622      	mov	r2, r4
 8001030:	4638      	mov	r0, r7
 8001032:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001038:	f003 fdd2 	bl	8004be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800103c:	4622      	mov	r2, r4
 800103e:	4630      	mov	r0, r6
 8001040:	2140      	movs	r1, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2503      	movs	r5, #3
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001044:	f003 fdcc 	bl	8004be0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	f64f 79ff 	movw	r9, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	a909      	add	r1, sp, #36	; 0x24
 800104e:	483d      	ldr	r0, [pc, #244]	; (8001144 <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001056:	f003 fcef 	bl	8004a38 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001062:	a909      	add	r1, sp, #36	; 0x24
 8001064:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001066:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800106c:	f003 fce4 	bl	8004a38 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001070:	a909      	add	r1, sp, #36	; 0x24
 8001072:	4835      	ldr	r0, [pc, #212]	; (8001148 <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107a:	f003 fcdd 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800107e:	f641 73ff 	movw	r3, #8191	; 0x1fff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	a909      	add	r1, sp, #36	; 0x24
 8001084:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f003 fcd2 	bl	8004a38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001094:	f248 03ff 	movw	r3, #33023	; 0x80ff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	a909      	add	r1, sp, #36	; 0x24
 800109a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f003 fcc7 	bl	8004a38 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	a909      	add	r1, sp, #36	; 0x24
 80010b0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f003 fcbd 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80010be:	f64b 7376 	movw	r3, #49014	; 0xbf76
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	a909      	add	r1, sp, #36	; 0x24
 80010c4:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f003 fcb4 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d4:	a909      	add	r1, sp, #36	; 0x24
 80010d6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d8:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f003 fcab 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80010e2:	f64f 43ff 	movw	r3, #64767	; 0xfcff
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	a909      	add	r1, sp, #36	; 0x24
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_GPIO_Init+0x1d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f003 fca2 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010f4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f6:	a909      	add	r1, sp, #36	; 0x24
 80010f8:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001102:	f003 fc99 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001108:	a909      	add	r1, sp, #36	; 0x24
 800110a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001112:	f003 fc91 	bl	8004a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800111a:	2302      	movs	r3, #2
 800111c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001122:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800112a:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f003 fc84 	bl	8004a38 <HAL_GPIO_Init>

}
 8001130:	b00f      	add	sp, #60	; 0x3c
 8001132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40020400 	.word	0x40020400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40020800 	.word	0x40020800

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001158:	2210      	movs	r2, #16
 800115a:	2100      	movs	r1, #0
 800115c:	a809      	add	r0, sp, #36	; 0x24
 800115e:	f007 f9f1 	bl	8008544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001162:	2214      	movs	r2, #20
 8001164:	2100      	movs	r1, #0
 8001166:	a802      	add	r0, sp, #8
 8001168:	f007 f9ec 	bl	8008544 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <SystemClock_Config+0x9c>)
 800116e:	2100      	movs	r1, #0
 8001170:	9100      	str	r1, [sp, #0]
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001174:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <SystemClock_Config+0xa0>)
 8001186:	9101      	str	r1, [sp, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001196:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001198:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800119c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011a0:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a4:	2402      	movs	r4, #2
 80011a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 384;
 80011aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 384;
 80011b2:	2308      	movs	r3, #8
 80011b4:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ba:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80011bc:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f003 fd1b 	bl	8004bfc <HAL_RCC_OscConfig>
 80011c6:	b108      	cbz	r0, 80011cc <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ca:	e7fe      	b.n	80011ca <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011dc:	2103      	movs	r1, #3
 80011de:	a802      	add	r0, sp, #8
 80011e0:	f003 fef0 	bl	8004fc4 <HAL_RCC_ClockConfig>
 80011e4:	b108      	cbz	r0, 80011ea <SystemClock_Config+0x96>
 80011e6:	b672      	cpsid	i
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <SystemClock_Config+0x94>
}
 80011ea:	b014      	add	sp, #80	; 0x50
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <Error_Handler>:
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <Error_Handler+0x2>

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_MspInit+0x3c>)
 8001200:	2200      	movs	r2, #0
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001206:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800120a:	6459      	str	r1, [r3, #68]	; 0x44
 800120c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800120e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800121a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800121e:	6419      	str	r1, [r3, #64]	; 0x40
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800122a:	210f      	movs	r1, #15
 800122c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001230:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001232:	f003 bbad 	b.w	8004990 <HAL_NVIC_SetPriority>
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler>

0800123e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler>

08001240 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler>

08001242 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler>

08001244 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler>

08001246 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124a:	f003 fb7d 	bl	8004948 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800124e:	f005 fc25 	bl	8006a9c <xTaskGetSchedulerState>
 8001252:	2801      	cmp	r0, #1
 8001254:	d003      	beq.n	800125e <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800125a:	f006 b983 	b.w	8007564 <xPortSysTickHandler>
}
 800125e:	bd08      	pop	{r3, pc}

08001260 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001260:	4801      	ldr	r0, [pc, #4]	; (8001268 <USART3_IRQHandler+0x8>)
 8001262:	f004 b91b 	b.w	800549c <HAL_UART_IRQHandler>
 8001266:	bf00      	nop
 8001268:	20002560 	.word	0x20002560

0800126c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <SystemInit+0x10>)
 800126e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001272:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001276:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <MX_USART3_UART_Init+0x34>)
{
 8001284:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 8001286:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800128a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001292:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129a:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800129e:	f004 f817 	bl	80052d0 <HAL_UART_Init>
 80012a2:	b118      	cbz	r0, 80012ac <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012a8:	f7ff bfa6 	b.w	80011f8 <Error_Handler>
}
 80012ac:	bd08      	pop	{r3, pc}
 80012ae:	bf00      	nop
 80012b0:	20002560 	.word	0x20002560
 80012b4:	40004800 	.word	0x40004800

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b510      	push	{r4, lr}
 80012ba:	4604      	mov	r4, r0
 80012bc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2214      	movs	r2, #20
 80012c0:	2100      	movs	r1, #0
 80012c2:	a803      	add	r0, sp, #12
 80012c4:	f007 f93e 	bl	8008544 <memset>
  if(uartHandle->Instance==USART3)
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x74>)
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d12b      	bne.n	8001328 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80012d4:	2400      	movs	r4, #0
 80012d6:	9401      	str	r4, [sp, #4]
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	4815      	ldr	r0, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80012dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
 80012e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	9402      	str	r4, [sp, #8]
 80012ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f0:	f042 0208 	orr.w	r2, r2, #8
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130a:	2103      	movs	r1, #3
 800130c:	2307      	movs	r3, #7
 800130e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	a903      	add	r1, sp, #12
 8001314:	f003 fb90 	bl	8004a38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001318:	2027      	movs	r0, #39	; 0x27
 800131a:	4622      	mov	r2, r4
 800131c:	2105      	movs	r1, #5
 800131e:	f003 fb37 	bl	8004990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001322:	2027      	movs	r0, #39	; 0x27
 8001324:	f003 fb66 	bl	80049f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001328:	b008      	add	sp, #32
 800132a:	bd10      	pop	{r4, pc}
 800132c:	40004800 	.word	0x40004800
 8001330:	40020c00 	.word	0x40020c00

08001334 <main>:

extern void runtests( void );


int main( void )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    // Initialize the board
    Bsp_Api_initialize();
 8001338:	f003 fa7c 	bl	8004834 <Bsp_Api_initialize>

    // Initialize CPL
    Cpl::System::Api::initialize();
 800133c:	f002 fda2 	bl	8003e84 <_ZN3Cpl6System3Api10initializeEv>
    CPL_SYSTEM_TRACE_ENABLE_SECTION( "_0test" );
    //    CPL_SYSTEM_TRACE_SET_INFO_LEVEL( Cpl::System::Trace::eBRIEF );
    CPL_SYSTEM_TRACE_SET_INFO_LEVEL( Cpl::System::Trace::eINFO );

    // Go run the test(s) (Note: This method should never return)
    runtests();
 8001340:	f000 fafa 	bl	8001938 <_Z8runtestsv>

    // I should never get here!
    for ( ;; );
 8001344:	e7fe      	b.n	8001344 <main+0x10>
	...

08001348 <_Z41__static_initialization_and_destruction_0ii>:
    return 0;
}
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135e:	4293      	cmp	r3, r2
 8001360:	d102      	bne.n	8001368 <_Z41__static_initialization_and_destruction_0ii+0x20>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001364:	f003 fa72 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d107      	bne.n	800137e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001374:	4293      	cmp	r3, r2
 8001376:	d102      	bne.n	800137e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800137a:	f003 fa72 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200025a4 	.word	0x200025a4

0800138c <_GLOBAL__sub_I_main>:
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
 8001390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff ffd7 	bl	8001348 <_Z41__static_initialization_and_destruction_0ii>
 800139a:	bd80      	pop	{r7, pc}

0800139c <_GLOBAL__sub_D_main>:
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
 80013a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ffcf 	bl	8001348 <_Z41__static_initialization_and_destruction_0ii>
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZN3Cpl6System8RunnableD1Ev>:
 */
class Runnable
{
public:
    /// Virtual destructor
    virtual ~Runnable() {};
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <_ZN3Cpl6System8RunnableD1Ev+0x1c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	08009e80 	.word	0x08009e80

080013cc <_ZN3Cpl6System8RunnableD0Ev>:
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ffe9 	bl	80013ac <_ZN3Cpl6System8RunnableD1Ev>
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f007 ffbb 	bl	8009356 <_ZdlPv>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN3Cpl6System8Runnable10pleaseStopEv>:
            2) This method is an attempted work-around for terminating
               threads by having the thread run itself to completion.
               Not all OSes support a polite way (i.e. reclaiming
               resource, memory, etc.) of killing threads.
     */
    virtual void pleaseStop() {}
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_ZN3Cpl6System8Runnable21setThreadOfExecution_EPNS0_6ThreadE>:
        to help terminate a thread when pleaseStop() is called. A default
        implementation is provided that does NOTHING.  It is up the concrete
        child class to decide how (if at all) to use this information.  The
        Cpl::System::Thread will call this method BEFORE the run() is called.
     */
    virtual void setThreadOfExecution_( Thread* myThreadPtr ) {}
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>:
        /// Reference to the mutex to be used for synchronization
        Mutex & m_mutex;

    public:
        /// Constructor.  This will block until the mutex lock is acquired.
        inline ScopeBlock( Mutex& mutex ) noexcept:m_mutex( mutex ) { m_mutex.lock(); }
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fdf7 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>:

        /// Destructor.  This method releases ownership of the mutex
        inline ~ScopeBlock() { m_mutex.unlock(); }
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 fdfd 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>:
            return m_seconds * 1000 + m_thousandths;
        }
         
    public:
        /// Constructor (to ensure any pad bytes get zero'd)
        Precision_T()
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
        {
            memset( (void*) this, 0, sizeof( Precision_T ) );   
 800145c:	2208      	movs	r2, #8
 800145e:	2100      	movs	r1, #0
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f007 f86f 	bl	8008544 <memset>
        }
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>:
            memset( (void*) this, 0, sizeof( Precision_T ) );
            setFlatTime( flatTimeInMs );
        }
        
        /// Copy Constructor (to ensure any pad bytes get zero'd)
        Precision_T( const Precision_T& other )
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
        {
            memcpy( (void*) this, (void*) &other, sizeof( Precision_T ) );
 800147a:	2208      	movs	r2, #8
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f007 f838 	bl	80084f4 <memcpy>
        }
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>:

        /// Copy operator
        Precision_T& operator =( const Precision_T& other )
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
        {
            memcpy( (void*) this, (void*) &other, sizeof( Precision_T ) );
 8001498:	2208      	movs	r2, #8
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f007 f829 	bl	80084f4 <memcpy>
            return *this;
 80014a2:	687b      	ldr	r3, [r7, #4]
        }
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZN3Cpl6System11ElapsedTime17deltaMillisecondsEmm>:
        specified 'startTime' and 'endTime'.  'endTime' is defaulted to
        NOW (i.e. a call to milliseconds(). The calculation properly
        handles the scenario of when the has been 'roll over' between the
        two times.
     */
    inline static unsigned long deltaMilliseconds( unsigned long startTime, unsigned long endTime = milliseconds() ) noexcept
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    {
        return endTime - startTime;
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1ad3      	subs	r3, r2, r3
    }
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_ZL13modifyGlobal_fff>:

Mutex myLock_;
float testGlobal_;

static bool modifyGlobal_( float op1, float op2, float expected )
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80014d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80014d6:	ed87 1a01 	vstr	s2, [r7, #4]
    Mutex::ScopeBlock guard( myLock_ );
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <_ZL13modifyGlobal_fff+0xf0>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff97 	bl	8001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    bool result = true;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    testGlobal_ = (op1 * 2.0) / (op2 + op1);
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff f864 	bl	80005b8 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	f7fe ff02 	bl	80002fc <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	461d      	mov	r5, r3
 8001500:	ed97 7a02 	vldr	s14, [r7, #8]
 8001504:	edd7 7a03 	vldr	s15, [r7, #12]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	ee17 0a90 	vmov	r0, s15
 8001510:	f7ff f852 	bl	80005b8 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7ff f9ce 	bl	80008bc <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb38 	bl	8000b9c <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <_ZL13modifyGlobal_fff+0xf4>)
 8001530:	6013      	str	r3, [r2, #0]
    if ( testGlobal_ < (expected - 0.0001) || testGlobal_ >( expected + 0.0001 ) )
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <_ZL13modifyGlobal_fff+0xf4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f83e 	bl	80005b8 <__aeabi_f2d>
 800153c:	4604      	mov	r4, r0
 800153e:	460d      	mov	r5, r1
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff f839 	bl	80005b8 <__aeabi_f2d>
 8001546:	a31a      	add	r3, pc, #104	; (adr r3, 80015b0 <_ZL13modifyGlobal_fff+0xe8>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fed4 	bl	80002f8 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7ff faf8 	bl	8000b4c <__aeabi_dcmplt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d117      	bne.n	8001592 <_ZL13modifyGlobal_fff+0xca>
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <_ZL13modifyGlobal_fff+0xf4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f826 	bl	80005b8 <__aeabi_f2d>
 800156c:	4604      	mov	r4, r0
 800156e:	460d      	mov	r5, r1
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff f821 	bl	80005b8 <__aeabi_f2d>
 8001576:	a30e      	add	r3, pc, #56	; (adr r3, 80015b0 <_ZL13modifyGlobal_fff+0xe8>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe febe 	bl	80002fc <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7ff fafe 	bl	8000b88 <__aeabi_dcmpgt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_ZL13modifyGlobal_fff+0xce>
        result = false;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]

    return result;
 8001596:	7dfc      	ldrb	r4, [r7, #23]
    Mutex::ScopeBlock guard( myLock_ );
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff4b 	bl	8001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return result;
 80015a2:	4623      	mov	r3, r4
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	eb1c432d 	.word	0xeb1c432d
 80015b4:	3f1a36e2 	.word	0x3f1a36e2
 80015b8:	200025ac 	.word	0x200025ac
 80015bc:	200025b0 	.word	0x200025b0

080015c0 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>:
    ///
    size_t      m_tlsCounter;

public:
    ///
    MyRunnable( Tls& tlsKey, uint8_t ledNum )
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	71fb      	strb	r3, [r7, #7]
        :m_ledNum( ledNum ),
        m_tlsKey( tlsKey ),
        m_tlsCounter( ledNum )
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fbcb 	bl	8003d6c <_ZN3Cpl6System8RunnableC1Ev>
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh+0x38>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	715a      	strb	r2, [r3, #5]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	79fa      	ldrb	r2, [r7, #7]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
    {
    }
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	08009870 	.word	0x08009870

080015fc <_ZN12_GLOBAL__N_110MyRunnable6appRunEv>:

public:
    ///
    void appRun()
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    {
        if ( m_tlsKey.get() != 0 )
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 f8bd 	bl	8004788 <_ZN3Cpl6System3Tls3getEv>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00d      	beq.n	800163a <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x3e>
        {
            FatalError::logf( "(%s) Bad initial TLS value (%p)", Thread::myName(), m_tlsKey.get() );
 800161e:	f002 fef3 	bl	8004408 <_ZN3Cpl6System6Thread6myNameEv>
 8001622:	4604      	mov	r4, r0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 f8ad 	bl	8004788 <_ZN3Cpl6System3Tls3getEv>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4621      	mov	r1, r4
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xac>)
 8001636:	f000 fb9b 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
        }

        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable::appRun()") );
            m_tlsKey.set( (void*) m_tlsCounter );
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f003 f8b0 	bl	80047aa <_ZN3Cpl6System3Tls3setEPv>
            toggleLED();
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f830 	bl	80016b0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>
            Thread::wait();
 8001650:	f002 fed0 	bl	80043f4 <_ZN3Cpl6System6Thread4waitEv>
            toggleLED();
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f82b 	bl	80016b0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>
            Thread::wait();
 800165a:	f002 fecb 	bl	80043f4 <_ZN3Cpl6System6Thread4waitEv>
            if ( m_tlsKey.get() != (void*) m_tlsCounter )
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 f890 	bl	8004788 <_ZN3Cpl6System3Tls3getEv>
 8001668:	4602      	mov	r2, r0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	429a      	cmp	r2, r3
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00e      	beq.n	800169a <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x9e>
            {
                FatalError::logf( "(%s) Bad TLS value (%p) - should be (%p)", Thread::myName(), m_tlsKey.get(), m_tlsCounter );
 800167c:	f002 fec4 	bl	8004408 <_ZN3Cpl6System6Thread6myNameEv>
 8001680:	4604      	mov	r4, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 f87e 	bl	8004788 <_ZN3Cpl6System3Tls3getEv>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4621      	mov	r1, r4
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0xb0>)
 8001696:	f000 fb6b 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }
            m_tlsCounter++;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	60da      	str	r2, [r3, #12]
            m_tlsKey.set( (void*) m_tlsCounter );
 80016a4:	e7c9      	b.n	800163a <_ZN12_GLOBAL__N_110MyRunnable6appRunEv+0x3e>
 80016a6:	bf00      	nop
 80016a8:	08009558 	.word	0x08009558
 80016ac:	08009578 	.word	0x08009578

080016b0 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv>:
        }
    }


    void toggleLED()
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    {
        if ( m_ledNum == 1 )
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	795b      	ldrb	r3, [r3, #5]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d104      	bne.n	80016ca <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x1a>
        {
            Bsp_Api_toggle_debug1();
 80016c0:	2101      	movs	r1, #1
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x2c>)
 80016c4:	f003 fa91 	bl	8004bea <HAL_GPIO_TogglePin>
        }
        else
        {
            Bsp_Api_toggle_debug2();
        }
    }
 80016c8:	e003      	b.n	80016d2 <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x22>
            Bsp_Api_toggle_debug2();
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <_ZN12_GLOBAL__N_110MyRunnable9toggleLEDEv+0x2c>)
 80016ce:	f003 fa8c 	bl	8004bea <HAL_GPIO_TogglePin>
    }
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020400 	.word	0x40020400

080016e0 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>:
    ElapsedTime::Precision_T    m_ptime;
    ///
    unsigned long               m_msec;

public:
    MyRunnable2( Thread& ledThread, uint16_t onTime_ms, uint16_t offTime_ms )
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	80fb      	strh	r3, [r7, #6]
 80016f2:	4613      	mov	r3, r2
 80016f4:	80bb      	strh	r3, [r7, #4]
        :m_ledThread( ledThread ),
        m_onTime_ms( onTime_ms ),
        m_offTime_ms( offTime_ms )
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fb37 	bl	8003d6c <_ZN3Cpl6System8RunnableC1Ev>
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt+0x4c>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	819a      	strh	r2, [r3, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	88ba      	ldrh	r2, [r7, #4]
 8001714:	81da      	strh	r2, [r3, #14]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3310      	adds	r3, #16
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe9a 	bl	8001454 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>
    {
    }
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800984c 	.word	0x0800984c

08001730 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv>:

public:
    void appRun()
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b091      	sub	sp, #68	; 0x44
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    {
        unsigned long sleepTime = m_onTime_ms + m_offTime_ms;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	899b      	ldrh	r3, [r3, #12]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	89db      	ldrh	r3, [r3, #14]
 8001742:	4413      	add	r3, r2
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
        m_ptime                 = ElapsedTime::precision();
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f103 0410 	add.w	r4, r3, #16
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fc30 	bl	8003fb6 <_ZN3Cpl6System11ElapsedTime9precisionEv>
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	4619      	mov	r1, r3
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fe96 	bl	800148e <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>
        m_msec                  = ElapsedTime::milliseconds();
 8001762:	f002 fc21 	bl	8003fa8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]

        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable2::appRun()") );

            Api::sleep( m_onTime_ms );
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	899b      	ldrh	r3, [r3, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fba7 	bl	8003ec4 <_ZN3Cpl6System3Api5sleepEm>
            m_ledThread.signal();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3308      	adds	r3, #8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4610      	mov	r0, r2
 8001788:	4798      	blx	r3
            Api::sleep( m_offTime_ms );
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	89db      	ldrh	r3, [r3, #14]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fb98 	bl	8003ec4 <_ZN3Cpl6System3Api5sleepEm>
            m_ledThread.signal();
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	461a      	mov	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3308      	adds	r3, #8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4610      	mov	r0, r2
 80017a6:	4798      	blx	r3


            ElapsedTime::Precision_T ptime     = ElapsedTime::precision();
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fc02 	bl	8003fb6 <_ZN3Cpl6System11ElapsedTime9precisionEv>
            unsigned long            msec      = ElapsedTime::milliseconds();
 80017b2:	f002 fbf9 	bl	8003fa8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 80017b6:	63b8      	str	r0, [r7, #56]	; 0x38
            unsigned long            deltaM    = ElapsedTime::deltaMilliseconds( m_msec, msec );
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe74 	bl	80014ac <_ZN3Cpl6System11ElapsedTime17deltaMillisecondsEmm>
 80017c4:	6378      	str	r0, [r7, #52]	; 0x34
            ElapsedTime::Precision_T deltaP    = ElapsedTime::deltaPrecision( m_ptime, ptime );
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f103 0210 	add.w	r2, r3, #16
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fe4c 	bl	8001470 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>
 80017d8:	f107 0210 	add.w	r2, r7, #16
 80017dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe44 	bl	8001470 <_ZN3Cpl6System11ElapsedTime11Precision_TC1ERKS2_>
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017f0:	f107 0120 	add.w	r1, r7, #32
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 fa8b 	bl	8003d10 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_>
            unsigned long            flatten   = deltaP.m_seconds * 1000 + deltaP.m_thousandths;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	89ba      	ldrh	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30

            if ( flatten < sleepTime )
 800180a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800180e:	429a      	cmp	r2, r3
 8001810:	d202      	bcs.n	8001818 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0xe8>
            {
                FatalError::logf( "Elapsed Precision_T delta is wrong" );
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x128>)
 8001814:	f000 faac 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            if ( deltaM < sleepTime )
 8001818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181c:	429a      	cmp	r2, r3
 800181e:	d202      	bcs.n	8001826 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0xf6>
            {
                FatalError::logf( "Elapsed msec delta is wrong" );
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x12c>)
 8001822:	f000 faa5 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            if ( flatten < deltaM - 1 || flatten > deltaM + 1 )
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	3b01      	subs	r3, #1
 800182a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800182c:	429a      	cmp	r2, r3
 800182e:	d304      	bcc.n	800183a <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x10a>
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	3301      	adds	r3, #1
 8001834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001836:	429a      	cmp	r2, r3
 8001838:	d902      	bls.n	8001840 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x110>
            {
                FatalError::logf( "Precision time is not insync with milliseconds time" );
 800183a:	4809      	ldr	r0, [pc, #36]	; (8001860 <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x130>)
 800183c:	f000 fa98 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            m_ptime = ptime;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3310      	adds	r3, #16
 8001844:	f107 0210 	add.w	r2, r7, #16
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fe1f 	bl	800148e <_ZN3Cpl6System11ElapsedTime11Precision_TaSERKS2_>
            m_msec  = msec;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001854:	619a      	str	r2, [r3, #24]
        }
 8001856:	e789      	b.n	800176c <_ZN12_GLOBAL__N_111MyRunnable26appRunEv+0x3c>
 8001858:	080095a4 	.word	0x080095a4
 800185c:	080095c8 	.word	0x080095c8
 8001860:	080095e4 	.word	0x080095e4

08001864 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>:
    ///
    float m_expected;

public:
    ///
    MyRunnable3( float op1, float op2 )
 8001864:	b5b0      	push	{r4, r5, r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001870:	edc7 0a01 	vstr	s1, [r7, #4]
        :m_op1( op1 ),
        m_op2( op2 ),
        m_expected( (op1 * 2.0) / (op2 + op1) )
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fa78 	bl	8003d6c <_ZN3Cpl6System8RunnableC1Ev>
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff+0x7c>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f7fe fe92 	bl	80005b8 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	f7fe fd30 	bl	80002fc <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f7fe fe80 	bl	80005b8 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fffc 	bl	80008bc <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f966 	bl	8000b9c <__aeabi_d2f>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	611a      	str	r2, [r3, #16]
    {
    }
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	08009828 	.word	0x08009828

080018e4 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv>:


public:
    ///
    void appRun()
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    {
        for ( ;;)
        {
            CPL_SYSTEM_TRACE_MSG( SECT_, ("Top of MyRunnable3::appRun()") );

            if ( modifyGlobal_( m_op1, m_op2, m_expected ) == false )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	edd3 6a04 	vldr	s13, [r3, #16]
 80018fe:	eeb0 1a66 	vmov.f32	s2, s13
 8001902:	eef0 0a47 	vmov.f32	s1, s14
 8001906:	eeb0 0a67 	vmov.f32	s0, s15
 800190a:	f7ff fddd 	bl	80014c8 <_ZL13modifyGlobal_fff>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x48>
            {
                FatalError::logf( "Mutex failed. Thread=%s", Thread::myName() );
 800191e:	f002 fd73 	bl	8004408 <_ZN3Cpl6System6Thread6myNameEv>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x50>)
 8001928:	f000 fa22 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
            }

            Api::sleep( 30 );
 800192c:	201e      	movs	r0, #30
 800192e:	f002 fac9 	bl	8003ec4 <_ZN3Cpl6System3Api5sleepEm>
            if ( modifyGlobal_( m_op1, m_op2, m_expected ) == false )
 8001932:	e7db      	b.n	80018ec <_ZN12_GLOBAL__N_111MyRunnable36appRunEv+0x8>
 8001934:	08009618 	.word	0x08009618

08001938 <_Z8runtestsv>:
// NOTE: I create the Runnable objects on the Heap - because depending on the
//       platform - FreeRTOS will corrupt the raw 'main stack' when it starts
//       the first thread.

void runtests( void )
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08d      	sub	sp, #52	; 0x34
 800193c:	af02      	add	r7, sp, #8
    // Create my TLS key (can't be done statically)
    Tls* keyPtr = new(std::nothrow) Tls();
 800193e:	4963      	ldr	r1, [pc, #396]	; (8001acc <_Z8runtestsv+0x194>)
 8001940:	2001      	movs	r0, #1
 8001942:	f007 fd24 	bl	800938e <_ZnwjRKSt9nothrow_t>
 8001946:	4603      	mov	r3, r0
 8001948:	461c      	mov	r4, r3
 800194a:	2c00      	cmp	r4, #0
 800194c:	d002      	beq.n	8001954 <_Z8runtestsv+0x1c>
 800194e:	4620      	mov	r0, r4
 8001950:	f002 fee6 	bl	8004720 <_ZN3Cpl6System3TlsC1Ev>
 8001954:	627c      	str	r4, [r7, #36]	; 0x24


    // Create some threads....
    MyRunnable*  appleLed     = new(std::nothrow) MyRunnable( *keyPtr, 1 );
 8001956:	495d      	ldr	r1, [pc, #372]	; (8001acc <_Z8runtestsv+0x194>)
 8001958:	2010      	movs	r0, #16
 800195a:	f007 fd18 	bl	800938e <_ZnwjRKSt9nothrow_t>
 800195e:	4603      	mov	r3, r0
 8001960:	461c      	mov	r4, r3
 8001962:	2c00      	cmp	r4, #0
 8001964:	d004      	beq.n	8001970 <_Z8runtestsv+0x38>
 8001966:	2201      	movs	r2, #1
 8001968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fe28 	bl	80015c0 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>
 8001970:	623c      	str	r4, [r7, #32]
    Thread*      appledLedPtr = Thread::create( *appleLed, "AppleLED" );
 8001972:	6a38      	ldr	r0, [r7, #32]
 8001974:	2301      	movs	r3, #1
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	2203      	movs	r2, #3
 8001980:	4953      	ldr	r1, [pc, #332]	; (8001ad0 <_Z8runtestsv+0x198>)
 8001982:	f002 fda3 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
 8001986:	61f8      	str	r0, [r7, #28]
    MyRunnable2* appleTimer   = new(std::nothrow) MyRunnable2( *appledLedPtr, 1000, 1000 );
 8001988:	4950      	ldr	r1, [pc, #320]	; (8001acc <_Z8runtestsv+0x194>)
 800198a:	201c      	movs	r0, #28
 800198c:	f007 fcff 	bl	800938e <_ZnwjRKSt9nothrow_t>
 8001990:	4603      	mov	r3, r0
 8001992:	461c      	mov	r4, r3
 8001994:	2c00      	cmp	r4, #0
 8001996:	d007      	beq.n	80019a8 <_Z8runtestsv+0x70>
 8001998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fe9c 	bl	80016e0 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>
 80019a8:	61bc      	str	r4, [r7, #24]
    Thread::create( *appleTimer, "AppleTimer" );
 80019aa:	69b8      	ldr	r0, [r7, #24]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2300      	movs	r3, #0
 80019b6:	2203      	movs	r2, #3
 80019b8:	4946      	ldr	r1, [pc, #280]	; (8001ad4 <_Z8runtestsv+0x19c>)
 80019ba:	f002 fd87 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    MyRunnable* orangeLed    = new(std::nothrow)MyRunnable( *keyPtr, 2 );
 80019be:	4943      	ldr	r1, [pc, #268]	; (8001acc <_Z8runtestsv+0x194>)
 80019c0:	2010      	movs	r0, #16
 80019c2:	f007 fce4 	bl	800938e <_ZnwjRKSt9nothrow_t>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461c      	mov	r4, r3
 80019ca:	2c00      	cmp	r4, #0
 80019cc:	d004      	beq.n	80019d8 <_Z8runtestsv+0xa0>
 80019ce:	2202      	movs	r2, #2
 80019d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fdf4 	bl	80015c0 <_ZN12_GLOBAL__N_110MyRunnableC1ERN3Cpl6System3TlsEh>
 80019d8:	617c      	str	r4, [r7, #20]
    Thread* orangeLedPtr     = Thread::create( *orangeLed, "OrangeLED" );
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	2301      	movs	r3, #1
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	2203      	movs	r2, #3
 80019e8:	493b      	ldr	r1, [pc, #236]	; (8001ad8 <_Z8runtestsv+0x1a0>)
 80019ea:	f002 fd6f 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
 80019ee:	6138      	str	r0, [r7, #16]
    MyRunnable2* orangeTimer = new(std::nothrow) MyRunnable2( *orangeLedPtr, 1500, 250 );
 80019f0:	4936      	ldr	r1, [pc, #216]	; (8001acc <_Z8runtestsv+0x194>)
 80019f2:	201c      	movs	r0, #28
 80019f4:	f007 fccb 	bl	800938e <_ZnwjRKSt9nothrow_t>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461c      	mov	r4, r3
 80019fc:	2c00      	cmp	r4, #0
 80019fe:	d006      	beq.n	8001a0e <_Z8runtestsv+0xd6>
 8001a00:	23fa      	movs	r3, #250	; 0xfa
 8001a02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fe69 	bl	80016e0 <_ZN12_GLOBAL__N_111MyRunnable2C1ERN3Cpl6System6ThreadEtt>
 8001a0e:	60fc      	str	r4, [r7, #12]
    Thread::create( *orangeTimer, "OrangeTimer" );
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	492f      	ldr	r1, [pc, #188]	; (8001adc <_Z8runtestsv+0x1a4>)
 8001a20:	f002 fd54 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    MyRunnable3* t1 = new(std::nothrow) MyRunnable3( 3.14159, 3 );
 8001a24:	4929      	ldr	r1, [pc, #164]	; (8001acc <_Z8runtestsv+0x194>)
 8001a26:	2014      	movs	r0, #20
 8001a28:	f007 fcb1 	bl	800938e <_ZnwjRKSt9nothrow_t>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461c      	mov	r4, r3
 8001a30:	2c00      	cmp	r4, #0
 8001a32:	d006      	beq.n	8001a42 <_Z8runtestsv+0x10a>
 8001a34:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a38:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001ae0 <_Z8runtestsv+0x1a8>
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ff11 	bl	8001864 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001a42:	60bc      	str	r4, [r7, #8]
    Thread::create( *t1, "T1" );
 8001a44:	68b8      	ldr	r0, [r7, #8]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2203      	movs	r2, #3
 8001a52:	4924      	ldr	r1, [pc, #144]	; (8001ae4 <_Z8runtestsv+0x1ac>)
 8001a54:	f002 fd3a 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
    MyRunnable3* t2 = new(std::nothrow) MyRunnable3( 2.71828, 7 );
 8001a58:	491c      	ldr	r1, [pc, #112]	; (8001acc <_Z8runtestsv+0x194>)
 8001a5a:	2014      	movs	r0, #20
 8001a5c:	f007 fc97 	bl	800938e <_ZnwjRKSt9nothrow_t>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	2c00      	cmp	r4, #0
 8001a66:	d006      	beq.n	8001a76 <_Z8runtestsv+0x13e>
 8001a68:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001a6c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001ae8 <_Z8runtestsv+0x1b0>
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fef7 	bl	8001864 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001a76:	607c      	str	r4, [r7, #4]
    Thread::create( *t2, "T2" );
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2203      	movs	r2, #3
 8001a86:	4919      	ldr	r1, [pc, #100]	; (8001aec <_Z8runtestsv+0x1b4>)
 8001a88:	f002 fd20 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
    MyRunnable3* t3 = new(std::nothrow) MyRunnable3( 64.0, 128.0 );
 8001a8c:	490f      	ldr	r1, [pc, #60]	; (8001acc <_Z8runtestsv+0x194>)
 8001a8e:	2014      	movs	r0, #20
 8001a90:	f007 fc7d 	bl	800938e <_ZnwjRKSt9nothrow_t>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461c      	mov	r4, r3
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d006      	beq.n	8001aaa <_Z8runtestsv+0x172>
 8001a9c:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001af0 <_Z8runtestsv+0x1b8>
 8001aa0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001af4 <_Z8runtestsv+0x1bc>
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fedd 	bl	8001864 <_ZN12_GLOBAL__N_111MyRunnable3C1Eff>
 8001aaa:	603c      	str	r4, [r7, #0]
    Thread::create( *t3, "T3" );
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2203      	movs	r2, #3
 8001aba:	490f      	ldr	r1, [pc, #60]	; (8001af8 <_Z8runtestsv+0x1c0>)
 8001abc:	f002 fd06 	bl	80044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>

    // Start the scheduler
    Api::enableScheduling();
 8001ac0:	f002 f9e6 	bl	8003e90 <_ZN3Cpl6System3Api16enableSchedulingEv>
}
 8001ac4:	bf00      	nop
 8001ac6:	372c      	adds	r7, #44	; 0x2c
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	0800a1f8 	.word	0x0800a1f8
 8001ad0:	08009630 	.word	0x08009630
 8001ad4:	0800963c 	.word	0x0800963c
 8001ad8:	08009648 	.word	0x08009648
 8001adc:	08009654 	.word	0x08009654
 8001ae0:	40490fd0 	.word	0x40490fd0
 8001ae4:	08009660 	.word	0x08009660
 8001ae8:	402df84d 	.word	0x402df84d
 8001aec:	08009664 	.word	0x08009664
 8001af0:	43000000 	.word	0x43000000
 8001af4:	42800000 	.word	0x42800000
 8001af8:	08009668 	.word	0x08009668

08001afc <_ZN12_GLOBAL__N_111MyRunnable3D1Ev>:
class MyRunnable3 : public Runnable
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <_ZN12_GLOBAL__N_111MyRunnable3D1Ev+0x20>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fc4d 	bl	80013ac <_ZN3Cpl6System8RunnableD1Ev>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	08009828 	.word	0x08009828

08001b20 <_ZN12_GLOBAL__N_111MyRunnable3D0Ev>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffe7 	bl	8001afc <_ZN12_GLOBAL__N_111MyRunnable3D1Ev>
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f007 fc11 	bl	8009356 <_ZdlPv>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev>:
class MyRunnable2 : public Runnable
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev+0x20>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fc2b 	bl	80013ac <_ZN3Cpl6System8RunnableD1Ev>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	0800984c 	.word	0x0800984c

08001b64 <_ZN12_GLOBAL__N_111MyRunnable2D0Ev>:
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffe7 	bl	8001b40 <_ZN12_GLOBAL__N_111MyRunnable2D1Ev>
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f007 fbef 	bl	8009356 <_ZdlPv>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <_ZN12_GLOBAL__N_110MyRunnableD1Ev>:
class MyRunnable : public Runnable
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_ZN12_GLOBAL__N_110MyRunnableD1Ev+0x20>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc09 	bl	80013ac <_ZN3Cpl6System8RunnableD1Ev>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08009870 	.word	0x08009870

08001ba8 <_ZN12_GLOBAL__N_110MyRunnableD0Ev>:
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_ZN12_GLOBAL__N_110MyRunnableD1Ev>
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f007 fbcd 	bl	8009356 <_ZdlPv>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d10a      	bne.n	8001bee <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d105      	bne.n	8001bee <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001be4:	f002 fe32 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
Mutex myLock_;
 8001be8:	480b      	ldr	r0, [pc, #44]	; (8001c18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001bea:	f002 f9f1 	bl	8003fd0 <_ZN3Cpl6System5MutexC1Ev>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d105      	bne.n	8001c0a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001c00:	f002 f9fe 	bl	8004000 <_ZN3Cpl6System5MutexD1Ev>
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001c06:	f002 fe2c 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200025a8 	.word	0x200025a8
 8001c18:	200025ac 	.word	0x200025ac

08001c1c <_GLOBAL__sub_I_myLock_>:
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff ffcf 	bl	8001bc8 <_Z41__static_initialization_and_destruction_0ii>
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_GLOBAL__sub_D_myLock_>:
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff ffc7 	bl	8001bc8 <_Z41__static_initialization_and_destruction_0ii>
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN3Cpl9Container3KeyD1Ev>:
 */
class Key
{
public:
    /// Ensure a Virtual destructor
    virtual ~Key() {}
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <_ZN3Cpl9Container3KeyD1Ev+0x1c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	08009ac4 	.word	0x08009ac4

08001c5c <_ZN3Cpl9Container3KeyD0Ev>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe9 	bl	8001c3c <_ZN3Cpl9Container3KeyD1Ev>
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f007 fb73 	bl	8009356 <_ZdlPv>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <_ZN3Cpl4Text6StringD1Ev>:

class String : public Cpl::Container::Key
{
public:
	/// Virtual destructor!
	virtual ~String() {}
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_ZN3Cpl4Text6StringD1Ev+0x20>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffd5 	bl	8001c3c <_ZN3Cpl9Container3KeyD1Ev>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	080099ac 	.word	0x080099ac

08001ca0 <_ZN3Cpl4Text6StringD0Ev>:
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_ZN3Cpl4Text6StringD1Ev>
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f007 fb51 	bl	8009356 <_ZdlPv>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <_ZN3Cpl6System10FatalError3logEPKcj>:

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
}

void FatalError::log( const char* message, size_t value )
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001cca:	f004 fee7 	bl	8006a9c <xTaskGetSchedulerState>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d039      	beq.n	8001d52 <_ZN3Cpl6System10FatalError3logEPKcj+0x92>
    {
        int              dummy = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
        Cpl::Io::Output* ptr   = Cpl::System::Trace::getDefaultOutputStream_();
 8001ce2:	f000 f97f 	bl	8001fe4 <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8001ce6:	60f8      	str	r0, [r7, #12]

        ptr->write( EXTRA_INFO );
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3310      	adds	r3, #16
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	491b      	ldr	r1, [pc, #108]	; (8001d60 <_ZN3Cpl6System10FatalError3logEPKcj+0xa0>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	4798      	blx	r3
        ptr->write( message );
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	4798      	blx	r3
        ptr->write( ". v:= " );
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3310      	adds	r3, #16
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4915      	ldr	r1, [pc, #84]	; (8001d64 <_ZN3Cpl6System10FatalError3logEPKcj+0xa4>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	4798      	blx	r3
        ptr->write( Cpl::Text::sizetToStr( value, buffer_.getBuffer( dummy ), SIZET_SIZE, 16 ) );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3310      	adds	r3, #16
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4811      	ldr	r0, [pc, #68]	; (8001d68 <_ZN3Cpl6System10FatalError3logEPKcj+0xa8>)
 8001d22:	f001 fcaa 	bl	800367a <_ZN3Cpl4Text7String_9getBufferERi>
 8001d26:	4601      	mov	r1, r0
 8001d28:	2320      	movs	r3, #32
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	220b      	movs	r2, #11
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f000 fc67 	bl	8002604 <_ZN3Cpl4Text10sizetToStrEjPcjjc>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	47a0      	blx	r4
        ptr->write( "\n" );
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3310      	adds	r3, #16
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4909      	ldr	r1, [pc, #36]	; (8001d6c <_ZN3Cpl6System10FatalError3logEPKcj+0xac>)
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	4798      	blx	r3

        // Allow time for the error message to be outputted
        Cpl::System::Api::sleep( 150 );
 8001d4c:	2096      	movs	r0, #150	; 0x96
 8001d4e:	f002 f8b9 	bl	8003ec4 <_ZN3Cpl6System3Api5sleepEm>
    }

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
 8001d52:	2002      	movs	r0, #2
 8001d54:	f002 f9a1 	bl	800409a <_ZN3Cpl6System8Shutdown7failureEi>
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	0800966c 	.word	0x0800966c
 8001d64:	08009684 	.word	0x08009684
 8001d68:	200025b8 	.word	0x200025b8
 8001d6c:	08009680 	.word	0x08009680

08001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>:


void FatalError::logf( const char* format, ... )
{
 8001d70:	b40f      	push	{r0, r1, r2, r3}
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
    va_list ap;
    va_start( ap, format );
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	607b      	str	r3, [r7, #4]

    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001d7e:	f004 fe8d 	bl	8006a9c <xTaskGetSchedulerState>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d011      	beq.n	8001db6 <_ZN3Cpl6System10FatalError4logfEPKcz+0x46>
    {
        buffer_ = EXTRA_INFO;
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <_ZN3Cpl6System10FatalError4logfEPKcz+0x5c>)
 8001d94:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001d96:	f001 fd01 	bl	800379c <_ZN3Cpl4Text7String_aSEPKc>
        buffer_.vformatAppend( format, ap );
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001da0:	f001 f9d2 	bl	8003148 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>
        Cpl::System::Trace::getDefaultOutputStream_()->write( buffer_ );
 8001da4:	f000 f91e 	bl	8001fe4 <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8001da8:	4603      	mov	r3, r0
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	3214      	adds	r2, #20
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	4790      	blx	r2
    }

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
 8001db6:	2002      	movs	r0, #2
 8001db8:	f002 f96f 	bl	800409a <_ZN3Cpl6System8Shutdown7failureEi>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dc6:	b004      	add	sp, #16
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	0800966c 	.word	0x0800966c
 8001dd0:	200025b8 	.word	0x200025b8

08001dd4 <_ZN3Cpl6System10FatalError6logRawEPKcj>:
{
    log( message );
}

void FatalError::logRaw( const char* message, size_t value )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    log( message, value );
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff6d 	bl	8001cc0 <_ZN3Cpl6System10FatalError3logEPKcj>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <_ZN3Cpl4Text7String_D1Ev>:

/** This partially concrete class implements the portions of the String Api
	that is independent of the internal storage mechanisms.
 */

class String_ : public String
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_ZN3Cpl4Text7String_D1Ev+0x20>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff3b 	bl	8001c7c <_ZN3Cpl4Text6StringD1Ev>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	08009d68 	.word	0x08009d68

08001e14 <_ZN3Cpl4Text7String_D0Ev>:
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe7 	bl	8001df0 <_ZN3Cpl4Text7String_D1Ev>
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f007 fa97 	bl	8009356 <_ZdlPv>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <_ZN3Cpl4Text8FString_D1Ev>:
		  storage limit is not exceeded and the string is always NULL
		  terminated.  The "incoming" data is silently truncated if the data
		  size exceeds the storage limit.
 */

class FString_ : public String_
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <_ZN3Cpl4Text8FString_D1Ev+0x20>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ffd3 	bl	8001df0 <_ZN3Cpl4Text7String_D1Ev>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08009c50 	.word	0x08009c50

08001e58 <_ZN3Cpl4Text8FString_D0Ev>:
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_ZN3Cpl4Text8FString_D1Ev>
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 fa75 	bl	8009356 <_ZdlPv>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN3Cpl4Text7FStringILi128EEC1EPKc>:

	/// Constructor
	FString( const Cpl::Text::String& string ) :FString_( string.getString(), m_strMem, S ) {}

	/// Constructor
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f103 0210 	add.w	r2, r3, #16
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	f000 fc13 	bl	80026b8 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <_ZN3Cpl4Text7FStringILi128EEC1EPKc+0x2c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	08009894 	.word	0x08009894

08001ea8 <_ZN3Cpl4Text7FStringILi128EED1Ev>:
class FString : public FString_
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_ZN3Cpl4Text7FStringILi128EED1Ev+0x20>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ffbb 	bl	8001e34 <_ZN3Cpl4Text8FString_D1Ev>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	08009894 	.word	0x08009894

08001ecc <_ZN3Cpl4Text7FStringILi128EED0Ev>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_ZN3Cpl4Text7FStringILi128EED1Ev>
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 fa3b 	bl	8009356 <_ZdlPv>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <_Z41__static_initialization_and_destruction_0ii>:
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10b      	bne.n	8001f14 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d106      	bne.n	8001f14 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f08:	f002 fca0 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Cpl::Text::FString<CPL_SYSTEM_FREERTOS_FATAL_ERROR_BUFSIZE> buffer_;
 8001f0c:	490b      	ldr	r1, [pc, #44]	; (8001f3c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f10:	f7ff ffb2 	bl	8001e78 <_ZN3Cpl4Text7FStringILi128EEC1EPKc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d105      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001f24:	4806      	ldr	r0, [pc, #24]	; (8001f40 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f26:	f7ff ffbf 	bl	8001ea8 <_ZN3Cpl4Text7FStringILi128EED1Ev>
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f2c:	f002 fc99 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200025b4 	.word	0x200025b4
 8001f3c:	0800968c 	.word	0x0800968c
 8001f40:	200025b8 	.word	0x200025b8

08001f44 <_GLOBAL__sub_I__ZN3Cpl6System10FatalError3logEPKc>:
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff ffcd 	bl	8001eec <_Z41__static_initialization_and_destruction_0ii>
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_GLOBAL__sub_D__ZN3Cpl6System10FatalError3logEPKc>:
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff ffc5 	bl	8001eec <_Z41__static_initialization_and_destruction_0ii>
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZN3Cpl2Io5CloseD1Ev>:
    virtual void close() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Close() {}
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <_ZN3Cpl2Io5CloseD1Ev+0x1c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	08009af0 	.word	0x08009af0

08001f84 <_ZN3Cpl2Io5CloseD0Ev>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffe9 	bl	8001f64 <_ZN3Cpl2Io5CloseD1Ev>
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f007 f9df 	bl	8009356 <_ZdlPv>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <_ZN3Cpl2Io5IsEosD1Ev>:
    virtual bool isEos() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~IsEos() {}
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <_ZN3Cpl2Io5IsEosD1Ev+0x1c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	08009adc 	.word	0x08009adc

08001fc4 <_ZN3Cpl2Io5IsEosD0Ev>:
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffe9 	bl	8001fa4 <_ZN3Cpl2Io5IsEosD1Ev>
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f007 f9bf 	bl	8009356 <_ZdlPv>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
static Cpl::Io::Stdio::StdOut fd_;


////////////////////////////////////////////////////////////////////////////////
Cpl::Io::Output* Trace::getDefaultOutputStream_( void ) noexcept
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
    return &fd_;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev+0x10>)
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20002650 	.word	0x20002650

08001ff8 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>:

    NOTE: Many instances of this class may be created - even
          though there is only ONE stdout.  This is OK because
          all instance reference the systems/platform 'stdout'
 */
class StdOut : public Output_
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x44>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	330c      	adds	r3, #12
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x48>)
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x44>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x4c>)
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f915 	bl	800224a <_ZN3Cpl2Io5Stdio7Output_D2Ev>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ffbe 	bl	8001fa4 <_ZN3Cpl2Io5IsEosD1Ev>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	330c      	adds	r3, #12
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff99 	bl	8001f64 <_ZN3Cpl2Io5CloseD1Ev>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08009b14 	.word	0x08009b14
 8002040:	08009b54 	.word	0x08009b54
 8002044:	08009b64 	.word	0x08009b64

08002048 <_ZTv0_n16_N3Cpl2Io5Stdio6StdOutD1Ev>:
 8002048:	f8d0 c000 	ldr.w	ip, [r0]
 800204c:	f1ac 0c10 	sub.w	ip, ip, #16
 8002050:	f8dc c000 	ldr.w	ip, [ip]
 8002054:	4460      	add	r0, ip
 8002056:	e7cf      	b.n	8001ff8 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>

08002058 <_Z41__static_initialization_and_destruction_0ii>:
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10a      	bne.n	800207e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	4293      	cmp	r3, r2
 8002070:	d105      	bne.n	800207e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002074:	f002 fbea 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Cpl::Io::Stdio::StdOut fd_;
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800207a:	f000 f9bd 	bl	80023f8 <_ZN3Cpl2Io5Stdio6StdOutC1Ev>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208a:	4293      	cmp	r3, r2
 800208c:	d105      	bne.n	800209a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002090:	f7ff ffb2 	bl	8001ff8 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002096:	f002 fbe4 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000264c 	.word	0x2000264c
 80020a8:	20002650 	.word	0x20002650

080020ac <_GLOBAL__sub_I__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff ffcf 	bl	8002058 <_Z41__static_initialization_and_destruction_0ii>
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_GLOBAL__sub_D__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
 80020c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ffc7 	bl	8002058 <_Z41__static_initialization_and_destruction_0ii>
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZN3Cpl9Container4ItemC1Ev>:
     */
    void*  m_inListPtr_;

protected:
    /// Constructor
    Item():m_nextPtr_( 0 ), m_inListPtr_( 0 ) {}
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_ZN3Cpl2Io6OutputD2Ev>:
    virtual void flush() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Output() {}
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3b14      	subs	r3, #20
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6852      	ldr	r2, [r2, #4]
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b18      	subs	r3, #24
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_ZN3Cpl2Io10DescriptorC1EPv>:
public:
    /// fd Constructor
    Descriptor( int fd ):m_fd( fd ) {}

    /// handle Constructor
    Descriptor( void* ptr ):m_handlePtr( ptr ) {}
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_ZN3Cpl2Io5CloseC1Ev>:
class Close : public Cpl::Container::Item
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffb3 	bl	80020cc <_ZN3Cpl9Container4ItemC1Ev>
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <_ZN3Cpl2Io5CloseC1Ev+0x24>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	08009af0 	.word	0x08009af0

0800217c <_ZN3Cpl2Io5IsEosC1Ev>:
class IsEos 
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <_ZN3Cpl2Io5IsEosC1Ev+0x1c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	08009adc 	.word	0x08009adc

0800219c <_ZN3Cpl2Io6OutputC2Ev>:
class Output : virtual public Close, virtual public IsEos
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3b14      	subs	r3, #20
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6852      	ldr	r2, [r2, #4]
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3b18      	subs	r3, #24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_ZN3Cpl2Io5Stdio7Output_C2EPv>:
    , m_outEos( false )
{
    Cpl::System::FatalError::logf( "Cpl:Io::Stdio::Output_().  Constructed with an 'int' instead of a 'FILE*'." );
}

Output_::Output_( void* handle )
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
    : m_outFd( handle )
    , m_outEos( false )
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3304      	adds	r3, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7ff ffcf 	bl	800219c <_ZN3Cpl2Io6OutputC2Ev>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3b14      	subs	r3, #20
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	6912      	ldr	r2, [r2, #16]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3b18      	subs	r3, #24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	6952      	ldr	r2, [r2, #20]
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3304      	adds	r3, #4
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff7e 	bl	8002136 <_ZN3Cpl2Io10DescriptorC1EPv>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	721a      	strb	r2, [r3, #8]
{
}
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_ZN3Cpl2Io5Stdio7Output_D2Ev>:
    : m_outFd( 0 )
    , m_outEos( false )
{
}

Output_::~Output_( void )
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3b14      	subs	r3, #20
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6912      	ldr	r2, [r2, #16]
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3b18      	subs	r3, #24
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6952      	ldr	r2, [r2, #20]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7ff ff2e 	bl	80020ee <_ZN3Cpl2Io6OutputD2Ev>
{
}
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi>:
}


//////////////////////
bool Output_::write( const void* buffer, int maxBytes, int& bytesWritten )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
    // Trap that the stream has been CLOSED!
    if ( !m_outFd.m_handlePtr )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x1a>
    {
        return false;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e030      	b.n	8002318 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x7c>
    }

    // Ignore write requests of ZERO bytes
    if ( maxBytes == 0 )
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x2a>
    {
        bytesWritten = 0;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
        return true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e028      	b.n	8002318 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x7c>
    }

    // perform the write
    bytesWritten = (int) fwrite( buffer, sizeof( char ), maxBytes, (FILE*) (m_outFd.m_handlePtr) );
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2101      	movs	r1, #1
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f006 f8d2 	bl	8008478 <fwrite>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	601a      	str	r2, [r3, #0]
	bool result  = true;
 80022dc:	2301      	movs	r3, #1
 80022de:	75fb      	strb	r3, [r7, #23]
	m_outEos     = false;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	721a      	strb	r2, [r3, #8]
	if ( bytesWritten <= 0 )
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dc0e      	bgt.n	800230c <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x70>
	{
		m_outEos = feof( (FILE*) ( m_outFd.m_handlePtr ) )? true: false;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fe60 	bl	8007fb8 <feof>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	721a      	strb	r2, [r3, #8]
		result   = false;
 8002308:	2300      	movs	r3, #0
 800230a:	75fb      	strb	r3, [r7, #23]
	}
	//printf( "eos=%d, ferr=%d, bytesRead=%d, result=%d\n", m_outEos, ferror( (FILE*) ( m_inFd.m_handlePtr ) ), bytesWritten, result );
	clearerr( (FILE*) ( m_outFd.m_handlePtr ) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f005 fda3 	bl	8007e5c <clearerr>
	return result;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN3Cpl2Io5Stdio7Output_5flushEv>:

void Output_::flush()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    // Ignore if the stream has been CLOSED!
    if ( m_outFd.m_handlePtr )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <_ZN3Cpl2Io5Stdio7Output_5flushEv+0x1a>
    {
        fflush( (FILE*) (m_outFd.m_handlePtr) );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4618      	mov	r0, r3
 8002336:	f005 ff37 	bl	80081a8 <fflush>
    }
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN3Cpl2Io5Stdio7Output_5isEosEv>:

bool Output_::isEos()
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	return m_outEos;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7a1b      	ldrb	r3, [r3, #8]
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_ZN3Cpl2Io5Stdio7Output_5closeEv>:

void Output_::close()
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
    if ( m_outFd.m_handlePtr )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <_ZN3Cpl2Io5Stdio7Output_5closeEv+0x20>
    {
        fclose( (FILE*) (m_outFd.m_handlePtr) );
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f005 fe1a 	bl	8007fa8 <fclose>
        m_outFd.m_handlePtr = 0;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
    }
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZTv0_n12_N3Cpl2Io5Stdio7Output_5closeEv>:

	/// See Cpl::Io::IsEos
	bool isEos();
	
	/// See Cpl::Io::Output
    void close();
 8002382:	f8d0 c000 	ldr.w	ip, [r0]
 8002386:	f1ac 0c0c 	sub.w	ip, ip, #12
 800238a:	f8dc c000 	ldr.w	ip, [ip]
 800238e:	4460      	add	r0, ip
 8002390:	f7ff bfe3 	b.w	800235a <_ZN3Cpl2Io5Stdio7Output_5closeEv>

08002394 <_Z41__static_initialization_and_destruction_0ii>:
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d102      	bne.n	80023b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80023ae:	4809      	ldr	r0, [pc, #36]	; (80023d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80023b0:	f002 fa4c 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d102      	bne.n	80023ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80023c6:	f002 fa4c 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20002668 	.word	0x20002668

080023d8 <_GLOBAL__sub_I__ZN3Cpl2Io5Stdio7Output_C2Ei>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
 80023dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff ffd7 	bl	8002394 <_Z41__static_initialization_and_destruction_0ii>
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_GLOBAL__sub_D__ZN3Cpl2Io5Stdio7Output_C2Ei>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff ffcf 	bl	8002394 <_Z41__static_initialization_and_destruction_0ii>
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN3Cpl2Io5Stdio6StdOutC1Ev>:
#include "Cpl/Io/Stdio/StdOut.h"

//
using namespace Cpl::Io::Stdio;

StdOut::StdOut()
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    :Output_( stdout )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	330c      	adds	r3, #12
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fea5 	bl	8002154 <_ZN3Cpl2Io5CloseC1Ev>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff feb5 	bl	800217c <_ZN3Cpl2Io5IsEosC1Ev>
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	490a      	ldr	r1, [pc, #40]	; (8002440 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x48>)
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x4c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	461a      	mov	r2, r3
 800241e:	f7ff fee1 	bl	80021e4 <_ZN3Cpl2Io5Stdio7Output_C2EPv>
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x50>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	330c      	adds	r3, #12
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x54>)
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x50>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	601a      	str	r2, [r3, #0]
{
}
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	08009b64 	.word	0x08009b64
 8002444:	20000014 	.word	0x20000014
 8002448:	08009b14 	.word	0x08009b14
 800244c:	08009b54 	.word	0x08009b54

08002450 <_ZN3Cpl2Io5Stdio6StdOut5closeEv>:

void StdOut::close()
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    // Close the internal class handle/fd - but don't actually close the native stream
    if ( m_outFd.m_handlePtr )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <_ZN3Cpl2Io5Stdio6StdOut5closeEv+0x16>
    {
        m_outFd.m_handlePtr = 0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
    }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZTv0_n12_N3Cpl2Io5Stdio6StdOut5closeEv>:

public:
    /** Overriding inherited behavior so as to NOT close the actual native
        stream. In general closing stdin/stdout/stderr is bad thing.
     */
    void close();
 8002472:	f8d0 c000 	ldr.w	ip, [r0]
 8002476:	f1ac 0c0c 	sub.w	ip, ip, #12
 800247a:	f8dc c000 	ldr.w	ip, [ip]
 800247e:	4460      	add	r0, ip
 8002480:	f7ff bfe6 	b.w	8002450 <_ZN3Cpl2Io5Stdio6StdOut5closeEv>

08002484 <_ZN3Cpl2Io5Stdio6StdOutD0Ev>:
class StdOut : public Output_
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fdb3 	bl	8001ff8 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f006 ff5f 	bl	8009356 <_ZdlPv>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZTv0_n16_N3Cpl2Io5Stdio6StdOutD0Ev>:
 80024a2:	f8d0 c000 	ldr.w	ip, [r0]
 80024a6:	f1ac 0c10 	sub.w	ip, ip, #16
 80024aa:	f8dc c000 	ldr.w	ip, [ip]
 80024ae:	4460      	add	r0, ip
 80024b0:	e7e8      	b.n	8002484 <_ZN3Cpl2Io5Stdio6StdOutD0Ev>
	...

080024b4 <_Z41__static_initialization_and_destruction_0ii>:
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d102      	bne.n	80024d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024ce:	4809      	ldr	r0, [pc, #36]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024d0:	f002 f9bc 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024e6:	f002 f9bc 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000266c 	.word	0x2000266c

080024f8 <_GLOBAL__sub_I__ZN3Cpl2Io5Stdio6StdOutC2Ev>:
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff ffd7 	bl	80024b4 <_Z41__static_initialization_and_destruction_0ii>
 8002506:	bd80      	pop	{r7, pc}

08002508 <_GLOBAL__sub_D__ZN3Cpl2Io5Stdio6StdOutC2Ev>:
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
 800250c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff ffcf 	bl	80024b4 <_Z41__static_initialization_and_destruction_0ii>
 8002516:	bd80      	pop	{r7, pc}

08002518 <_ZL8convert_jPcjjcb>:
#define SECT_   "_0test"


////////////////////////////////////////////
static const char* convert_( size_t num, char* dstString, size_t maxChars, unsigned base, char padChar, bool isNegative )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
	// Error check the base argument
	if ( base < 2 || base > 36 )
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d902      	bls.n	8002532 <_ZL8convert_jPcjjcb+0x1a>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b24      	cmp	r3, #36	; 0x24
 8002530:	d901      	bls.n	8002536 <_ZL8convert_jPcjjcb+0x1e>
	{
		return 0;
 8002532:	2300      	movs	r3, #0
 8002534:	e062      	b.n	80025fc <_ZL8convert_jPcjjcb+0xe4>
	}

	// When convert a negative value, I need to leave room for the minus sign
	size_t sign = isNegative ? 1 : 0;
 8002536:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <_ZL8convert_jPcjjcb+0x2a>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <_ZL8convert_jPcjjcb+0x2c>
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

	// Null terminate the string
	dstString[--maxChars] = '\0';
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3b01      	subs	r3, #1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]

	// Handle  special case: original number is zero
	if ( num == 0 )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <_ZL8convert_jPcjjcb+0x56>
	{
		dstString[--maxChars] = '0';
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	2230      	movs	r2, #48	; 0x30
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e02d      	b.n	80025ca <_ZL8convert_jPcjjcb+0xb2>

	// Convert the number 
	else
	{
		// Conversion is done LSB first
		while ( num != 0 && maxChars > sign )
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02a      	beq.n	80025ca <_ZL8convert_jPcjjcb+0xb2>
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d926      	bls.n	80025ca <_ZL8convert_jPcjjcb+0xb2>
		{
			char remainder = (char) ( num % base );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	fbb3 f2f2 	udiv	r2, r3, r2
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	fb01 f202 	mul.w	r2, r1, r2
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	74fb      	strb	r3, [r7, #19]
			if ( remainder <= 9 )
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b09      	cmp	r3, #9
 8002592:	d80a      	bhi.n	80025aa <_ZL8convert_jPcjjcb+0x92>
			{
				dstString[--maxChars] = remainder + '0';
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	7cfa      	ldrb	r2, [r7, #19]
 80025a2:	3230      	adds	r2, #48	; 0x30
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e009      	b.n	80025be <_ZL8convert_jPcjjcb+0xa6>
			}
			else
			{
				dstString[--maxChars] = remainder - 10 + 'A';
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	7cfa      	ldrb	r2, [r7, #19]
 80025b8:	3237      	adds	r2, #55	; 0x37
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
			}

			num /= base;
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	60fb      	str	r3, [r7, #12]
		while ( num != 0 && maxChars > sign )
 80025c8:	e7d1      	b.n	800256e <_ZL8convert_jPcjjcb+0x56>
		}
	}

	// Add the minus when needed
	if ( isNegative )
 80025ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <_ZL8convert_jPcjjcb+0xca>
	{
		dstString[--maxChars] = '-';
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	222d      	movs	r2, #45	; 0x2d
 80025e0:	701a      	strb	r2, [r3, #0]
	}

	// Add pad character(s) 
	if ( maxChars > 0 )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <_ZL8convert_jPcjjcb+0xde>
	{
		memset( dstString, padChar, maxChars );
 80025e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4619      	mov	r1, r3
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f005 ffa7 	bl	8008544 <memset>
	}


	// Return the 'left justified' string
	return dstString + maxChars;
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4413      	add	r3, r2
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZN3Cpl4Text10sizetToStrEjPcjjc>:
	return convert_( num, dstString, maxChars, base, padChar, false );
}


const char* Cpl::Text::sizetToStr( size_t num, char* dstString, size_t maxChars, unsigned base, char padChar )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
	return convert_( num, dstString, maxChars, base, padChar, false );
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	7e3b      	ldrb	r3, [r7, #24]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ff79 	bl	8002518 <_ZL8convert_jPcjjcb>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_Z41__static_initialization_and_destruction_0ii>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	4293      	cmp	r3, r2
 8002648:	d102      	bne.n	8002650 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800264a:	4809      	ldr	r0, [pc, #36]	; (8002670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800264c:	f002 f8fe 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265c:	4293      	cmp	r3, r2
 800265e:	d102      	bne.n	8002666 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002662:	f002 f8fe 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20002670 	.word	0x20002670

08002674 <_GLOBAL__sub_I__ZN3Cpl4Text9longToStrElPcjjc>:
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
 8002678:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff ffd7 	bl	8002630 <_Z41__static_initialization_and_destruction_0ii>
 8002682:	bd80      	pop	{r7, pc}

08002684 <_GLOBAL__sub_D__ZN3Cpl4Text9longToStrElPcjjc>:
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
 8002688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff ffcf 	bl	8002630 <_Z41__static_initialization_and_destruction_0ii>
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZL6my_minii>:
//
char FString_::m_noMemory[1] = { '\0' };


// 'ole basic min/max methods
inline static int my_min( int a, int b ) { return a < b ? a : b; }
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	da01      	bge.n	80026aa <_ZL6my_minii+0x16>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	e000      	b.n	80026ac <_ZL6my_minii+0x18>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZN3Cpl4Text8FString_C1EPKcPci>:
//inline static int max(int a, int b) { return a>b? a:b;}


///////////////////////////////
FString_::FString_( const char* string, char* internalString, int maxLen )
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	:String_( internalString ),
	m_internalMaxlen( maxLen )
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fa84 	bl	8002bd8 <_ZN3Cpl4Text7String_C1EPc>
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <_ZN3Cpl4Text8FString_C1EPKcPci+0x88>)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	60da      	str	r2, [r3, #12]
{
	// Handle failed memory alloc from DFString
	if ( !internalString )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <_ZN3Cpl4Text8FString_C1EPKcPci+0x3e>
	{
		m_strPtr         = m_noMemory;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <_ZN3Cpl4Text8FString_C1EPKcPci+0x8c>)
 80026e6:	609a      	str	r2, [r3, #8]
		m_internalMaxlen = 0;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	60da      	str	r2, [r3, #12]
		m_truncated      = true;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	711a      	strb	r2, [r3, #4]
 80026f4:	e01f      	b.n	8002736 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else if ( !string )      // trap the case of a NULL initializer string
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <_ZN3Cpl4Text8FString_C1EPKcPci+0x4c>
	{
		internalString[0] = '\0';
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e018      	b.n	8002736 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else
	{
		int inStrLen = (int) strlen( string );
 8002704:	68b8      	ldr	r0, [r7, #8]
 8002706:	f7fd fd95 	bl	8000234 <strlen>
 800270a:	4603      	mov	r3, r0
 800270c:	617b      	str	r3, [r7, #20]
		m_truncated  = inStrLen <= maxLen ? false : true;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	bfcc      	ite	gt
 8002716:	2301      	movgt	r3, #1
 8002718:	2300      	movle	r3, #0
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	711a      	strb	r2, [r3, #4]
		strncpy( internalString, string, maxLen );
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f006 f8cb 	bl	80088c2 <strncpy>
		internalString[maxLen] = '\0';
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
	}
}
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08009c50 	.word	0x08009c50
 8002744:	20002678 	.word	0x20002678

08002748 <_ZN3Cpl4Text8FString_6copyInEPKci>:


///////////////////////////////
void
FString_::copyIn( const char* src, int len )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	// Trap null pointer for 'src' string
	if (!src)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <_ZN3Cpl4Text8FString_6copyInEPKci+0x22>
	{
		m_truncated = true;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	711a      	strb	r2, [r3, #4]
		m_strPtr[0] = '\0';
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
		m_truncated = len <= m_internalMaxlen ? false : true;
		len = my_min(m_internalMaxlen, len);
		strncpy(m_strPtr, src, len);
		m_strPtr[len] = '\0';
	}
}
 8002768:	e01d      	b.n	80027a6 <_ZN3Cpl4Text8FString_6copyInEPKci+0x5e>
		m_truncated = len <= m_internalMaxlen ? false : true;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	bfcc      	ite	gt
 8002774:	2301      	movgt	r3, #1
 8002776:	2300      	movle	r3, #0
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	711a      	strb	r2, [r3, #4]
		len = my_min(m_internalMaxlen, len);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff85 	bl	8002694 <_ZL6my_minii>
 800278a:	6078      	str	r0, [r7, #4]
		strncpy(m_strPtr, src, len);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f006 f894 	bl	80088c2 <strncpy>
		m_strPtr[len] = '\0';
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZN3Cpl4Text8FString_8appendToEPKci>:

void
FString_::appendTo( const char* string, int len )
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
	// Note: Do NOTHING if null string pointer is passed
	if (string)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d028      	beq.n	8002812 <_ZN3Cpl4Text8FString_8appendToEPKci+0x64>
	{
		int   curlen = strlen(m_strPtr);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fd35 	bl	8000234 <strlen>
 80027ca:	4603      	mov	r3, r0
 80027cc:	61fb      	str	r3, [r7, #28]
		int   avail = m_internalMaxlen - curlen;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	61bb      	str	r3, [r7, #24]
		int   copylen = my_min(len, avail);
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff5a 	bl	8002694 <_ZL6my_minii>
 80027e0:	6178      	str	r0, [r7, #20]
		m_truncated = copylen == len ? false : true;
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	711a      	strb	r2, [r3, #4]
		strncat(m_strPtr, string, copylen);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 f839 	bl	8008874 <strncat>
		m_strPtr[curlen + copylen] = '\0';
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	69f9      	ldr	r1, [r7, #28]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	440a      	add	r2, r1
 800280c:	4413      	add	r3, r2
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
	}
}
 8002812:	bf00      	nop
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_ZN3Cpl4Text8FString_8insertAtEiPKc>:


void
FString_::insertAt( int insertOffset, const char* stringToInsert )
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08c      	sub	sp, #48	; 0x30
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	// Insure offset is NOT negative
	if ( insertOffset < 0 )
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da01      	bge.n	8002830 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x16>
	{
		insertOffset = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
	}

	// If insertOffset is past the '\0', then simply append stringToInsert
	int curlen    = strlen( m_strPtr );
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fcfd 	bl	8000234 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int insertlen = strlen( stringToInsert );
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd fcf8 	bl	8000234 <strlen>
 8002844:	4603      	mov	r3, r0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
	if ( insertOffset >= curlen )
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	db08      	blt.n	8002862 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x48>
	{
		appendTo( stringToInsert, insertlen );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3364      	adds	r3, #100	; 0x64
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	4798      	blx	r3
		return;
 8002860:	e04e      	b.n	8002900 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xe6>
	}

	// Valid insertOffset
	int avail        = m_internalMaxlen - insertOffset;     // Amount left in the buffer starting with from insertOffset
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
	int copylen      = my_min( insertlen, avail );          // Amount of stringToInsert that can be copied in
 800286c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002870:	f7ff ff10 	bl	8002694 <_ZL6my_minii>
 8002874:	6238      	str	r0, [r7, #32]
	int remainderlen = avail - copylen;                     // Amount of room left after stringToInsert has been copied in
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	61fb      	str	r3, [r7, #28]
	int shiftlen     = curlen - insertOffset;               // Amount of characters needing to be shifted
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	61bb      	str	r3, [r7, #24]
	int movelen      = my_min( shiftlen, remainderlen );    // Amount of characters that can be SAFELY shifted
 8002886:	69f9      	ldr	r1, [r7, #28]
 8002888:	69b8      	ldr	r0, [r7, #24]
 800288a:	f7ff ff03 	bl	8002694 <_ZL6my_minii>
 800288e:	6178      	str	r0, [r7, #20]
	if ( movelen > 0 )
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	dd17      	ble.n	80028c6 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xac>
	{
		memmove( m_strPtr + insertOffset + copylen, m_strPtr + insertOffset, movelen );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	440b      	add	r3, r1
 80028a0:	18d0      	adds	r0, r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4413      	add	r3, r2
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f005 fe2f 	bl	8008510 <memmove>
		m_strPtr[insertOffset + copylen + movelen] = '\0';
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6a3a      	ldr	r2, [r7, #32]
 80028ba:	4411      	add	r1, r2
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	440a      	add	r2, r1
 80028c0:	4413      	add	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
	}
	memmove( m_strPtr + insertOffset, stringToInsert, copylen );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f005 fe1c 	bl	8008510 <memmove>
	m_truncated = movelen != shiftlen || copylen != insertlen ? true : false;
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d103      	bne.n	80028e8 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xce>
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd2>
 80028e8:	2201      	movs	r2, #1
 80028ea:	e000      	b.n	80028ee <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd4>
 80028ec:	2200      	movs	r2, #0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	711a      	strb	r2, [r3, #4]
	m_strPtr[m_internalMaxlen] = '\0';
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
}
 8002900:	3730      	adds	r7, #48	; 0x30
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZNK3Cpl4Text8FString_9maxLengthEv>:

int
FString_::maxLength() const
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return m_internalMaxlen;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN3Cpl4Text8FString_aSEi>:



////////////////////////////
Cpl::Text::String& FString_::operator=( int num ) { format( "%d", num ); return *this; }
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	33cc      	adds	r3, #204	; 0xcc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4903      	ldr	r1, [pc, #12]	; (8002944 <_ZN3Cpl4Text8FString_aSEi+0x24>)
 8002938:	4798      	blx	r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08009690 	.word	0x08009690

08002948 <_ZN3Cpl4Text8FString_aSEj>:
Cpl::Text::String& FString_::operator=( unsigned int num ) { format( "%u", num ); return *this; }
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	33cc      	adds	r3, #204	; 0xcc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4903      	ldr	r1, [pc, #12]	; (800296c <_ZN3Cpl4Text8FString_aSEj+0x24>)
 8002960:	4798      	blx	r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	08009694 	.word	0x08009694

08002970 <_ZN3Cpl4Text8FString_aSEl>:
Cpl::Text::String& FString_::operator=( long num ) { format( "%ld", num ); return *this; }
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	33cc      	adds	r3, #204	; 0xcc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4903      	ldr	r1, [pc, #12]	; (8002994 <_ZN3Cpl4Text8FString_aSEl+0x24>)
 8002988:	4798      	blx	r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	08009698 	.word	0x08009698

08002998 <_ZN3Cpl4Text8FString_aSEx>:
Cpl::Text::String& FString_::operator=( long long num ) { format( "%lld", num ); return *this; }
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	e9c7 2300 	strd	r2, r3, [r7]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	33cc      	adds	r3, #204	; 0xcc
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029b2:	4903      	ldr	r1, [pc, #12]	; (80029c0 <_ZN3Cpl4Text8FString_aSEx+0x28>)
 80029b4:	47a0      	blx	r4
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	0800969c 	.word	0x0800969c

080029c4 <_ZN3Cpl4Text8FString_aSEm>:
Cpl::Text::String& FString_::operator=( unsigned long num ) { format( "%lu", num ); return *this; }
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	33cc      	adds	r3, #204	; 0xcc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4903      	ldr	r1, [pc, #12]	; (80029e8 <_ZN3Cpl4Text8FString_aSEm+0x24>)
 80029dc:	4798      	blx	r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	080096a4 	.word	0x080096a4

080029ec <_ZN3Cpl4Text8FString_aSEy>:
Cpl::Text::String& FString_::operator=( unsigned long long num ) { format( "%llu", num ); return *this; }
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	e9c7 2300 	strd	r2, r3, [r7]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	33cc      	adds	r3, #204	; 0xcc
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a06:	4903      	ldr	r1, [pc, #12]	; (8002a14 <_ZN3Cpl4Text8FString_aSEy+0x28>)
 8002a08:	47a0      	blx	r4
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	080096a8 	.word	0x080096a8

08002a18 <_ZN3Cpl4Text8FString_pLEi>:
Cpl::Text::String& FString_::operator +=( int num ) { formatAppend( "%d", num ); return *this; }
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	33d0      	adds	r3, #208	; 0xd0
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4903      	ldr	r1, [pc, #12]	; (8002a3c <_ZN3Cpl4Text8FString_pLEi+0x24>)
 8002a30:	4798      	blx	r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08009690 	.word	0x08009690

08002a40 <_ZN3Cpl4Text8FString_pLEj>:
Cpl::Text::String& FString_::operator +=( unsigned int num ) { formatAppend( "%u", num ); return *this; }
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	33d0      	adds	r3, #208	; 0xd0
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4903      	ldr	r1, [pc, #12]	; (8002a64 <_ZN3Cpl4Text8FString_pLEj+0x24>)
 8002a58:	4798      	blx	r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	08009694 	.word	0x08009694

08002a68 <_ZN3Cpl4Text8FString_pLEl>:
Cpl::Text::String& FString_::operator +=( long num ) { formatAppend( "%ld", num ); return *this; }
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	33d0      	adds	r3, #208	; 0xd0
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	4903      	ldr	r1, [pc, #12]	; (8002a8c <_ZN3Cpl4Text8FString_pLEl+0x24>)
 8002a80:	4798      	blx	r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	08009698 	.word	0x08009698

08002a90 <_ZN3Cpl4Text8FString_pLEx>:
Cpl::Text::String& FString_::operator +=( long long num ) { formatAppend( "%lld", num ); return *this; }
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	e9c7 2300 	strd	r2, r3, [r7]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	33d0      	adds	r3, #208	; 0xd0
 8002aa4:	681c      	ldr	r4, [r3, #0]
 8002aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aaa:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <_ZN3Cpl4Text8FString_pLEx+0x28>)
 8002aac:	47a0      	blx	r4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	0800969c 	.word	0x0800969c

08002abc <_ZN3Cpl4Text8FString_pLEm>:
Cpl::Text::String& FString_::operator +=( unsigned long num ) { formatAppend( "%lu", num ); return *this; }
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	33d0      	adds	r3, #208	; 0xd0
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <_ZN3Cpl4Text8FString_pLEm+0x24>)
 8002ad4:	4798      	blx	r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	080096a4 	.word	0x080096a4

08002ae4 <_ZN3Cpl4Text8FString_pLEy>:
Cpl::Text::String& FString_::operator +=( unsigned long long num ) { formatAppend( "%llu", num ); return *this; }
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	e9c7 2300 	strd	r2, r3, [r7]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	33d0      	adds	r3, #208	; 0xd0
 8002af8:	681c      	ldr	r4, [r3, #0]
 8002afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afe:	4903      	ldr	r1, [pc, #12]	; (8002b0c <_ZN3Cpl4Text8FString_pLEy+0x28>)
 8002b00:	47a0      	blx	r4
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}
 8002b0c:	080096a8 	.word	0x080096a8

08002b10 <_Z41__static_initialization_and_destruction_0ii>:
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d102      	bne.n	8002b30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b2c:	f001 fe8e 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d102      	bne.n	8002b46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002b40:	4803      	ldr	r0, [pc, #12]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b42:	f001 fe8e 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20002674 	.word	0x20002674

08002b54 <_GLOBAL__sub_I__ZN3Cpl4Text8FString_10m_noMemoryE>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff ffd7 	bl	8002b10 <_Z41__static_initialization_and_destruction_0ii>
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_GLOBAL__sub_D__ZN3Cpl4Text8FString_10m_noMemoryE>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7ff ffcf 	bl	8002b10 <_Z41__static_initialization_and_destruction_0ii>
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZNK3Cpl4Text6StringcvPKcEv>:

	/// Read-only Access to the "raw" string.
	virtual const char* getString() const = 0;

	/// Cast to read-only character string pointer.
	inline operator const char* ( ) const { return getString(); }
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	336c      	adds	r3, #108	; 0x6c
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <_ZN3Cpl9Container3KeyC1Ev>:
class Key
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <_ZN3Cpl9Container3KeyC1Ev+0x1c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	08009ac4 	.word	0x08009ac4

08002bb4 <_ZN3Cpl4Text6StringC1Ev>:
class String : public Cpl::Container::Key
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ffe8 	bl	8002b94 <_ZN3Cpl9Container3KeyC1Ev>
 8002bc4:	4a03      	ldr	r2, [pc, #12]	; (8002bd4 <_ZN3Cpl4Text6StringC1Ev+0x20>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	080099ac 	.word	0x080099ac

08002bd8 <_ZN3Cpl4Text7String_C1EPc>:
//
using namespace Cpl::Text;


///////////////////////////////
String_::String_( char* internalString )
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	:m_truncated( false ),
	m_strPtr( internalString )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffe5 	bl	8002bb4 <_ZN3Cpl4Text6StringC1Ev>
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <_ZN3Cpl4Text7String_C1EPc+0x30>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	711a      	strb	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	609a      	str	r2, [r3, #8]
{
}
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08009d68 	.word	0x08009d68

08002c0c <_ZN3Cpl4Text7String_5clearEv>:

///////////////////////////////
void
String_::clear()
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	m_strPtr[0] = '\0';
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
	m_truncated = false;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	711a      	strb	r2, [r3, #4]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_ZNK3Cpl4Text7String_cvcEv>:

String_::operator char() const
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	return m_strPtr[0];
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <_ZNK3Cpl4Text7String_6lengthEv>:

int
String_::length() const
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	return strlen( m_strPtr );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd faed 	bl	8000234 <strlen>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZNK3Cpl4Text7String_7isEmptyEv>:

bool
String_::isEmpty() const
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	return *( m_strPtr ) == '\0';
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_ZNK3Cpl4Text7String_9truncatedEv>:

bool String_::truncated() const
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	return m_truncated;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_ZNK3Cpl4Text7String_eqEPKc>:

bool
String_::operator ==( const char* string ) const
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) == 0 : false;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fab2 	bl	8000220 <strcmp>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <_ZNK3Cpl4Text7String_eqEPKc+0x28>
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZNK3Cpl4Text7String_eqERKNS0_6StringE>:

bool
String_::operator ==( const String& string ) const
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) == 0;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689c      	ldr	r4, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	336c      	adds	r3, #108	; 0x6c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	4798      	blx	r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	4619      	mov	r1, r3
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7fd fa96 	bl	8000220 <strcmp>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd90      	pop	{r4, r7, pc}

08002d08 <_ZNK3Cpl4Text7String_neEPKc>:

bool
String_::operator !=( const char* string ) const
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) != 0 : true;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <_ZNK3Cpl4Text7String_neEPKc+0x22>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fa7e 	bl	8000220 <strcmp>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <_ZNK3Cpl4Text7String_neEPKc+0x26>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <_ZNK3Cpl4Text7String_neEPKc+0x28>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZNK3Cpl4Text7String_neERKNS0_6StringE>:

bool
String_::operator !=( const String& string ) const
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) != 0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689c      	ldr	r4, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	336c      	adds	r3, #108	; 0x6c
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	4798      	blx	r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fd fa62 	bl	8000220 <strcmp>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}

08002d70 <_ZNK3Cpl4Text7String_7compareEPKc>:

int String_::compare( const char* string ) const
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) : -1;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <_ZNK3Cpl4Text7String_7compareEPKc+0x20>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fa4a 	bl	8000220 <strcmp>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	e001      	b.n	8002d94 <_ZNK3Cpl4Text7String_7compareEPKc+0x24>
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc>:

int String_::compareIgnoreCase( const char* string ) const
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) : -1;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x20>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 fd02 	bl	80087bc <strcasecmp>
 8002db8:	4603      	mov	r3, r0
 8002dba:	e001      	b.n	8002dc0 <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x24>
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc>:


bool
String_::isEqualIgnoreCase( const char* string ) const
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) == 0 : false;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f005 fcec 	bl	80087bc <strcasecmp>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x28>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc>:

bool
String_::isEqualSubstring( int startpos, int endpos, const char* string ) const
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
	if ( !string )
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x18>
	{
		return false;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e031      	b.n	8002e74 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fa0d 	bl	8000234 <strlen>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da01      	bge.n	8002e28 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x30>
	{
		startpos = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	db02      	blt.n	8002e36 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x3e>
	{
		startpos = len - 1;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	db02      	blt.n	8002e44 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x4c>
	{
		endpos   = len - 1;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	da01      	bge.n	8002e50 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x58>
	{
		endpos   = startpos;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	607b      	str	r3, [r7, #4]
	}
	return strncmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	18d0      	adds	r0, r2, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	461a      	mov	r2, r3
 8002e62:	6839      	ldr	r1, [r7, #0]
 8002e64:	f005 fd19 	bl	800889a <strncmp>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc>:

bool
String_::isEqualSubstringIgnoreCase( int startpos, int endpos, const char* string ) const
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
	if ( !string )
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x18>
	{
		return false;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e031      	b.n	8002ef8 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd f9cb 	bl	8000234 <strlen>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da01      	bge.n	8002eac <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x30>
	{
		startpos = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	db02      	blt.n	8002eba <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x3e>
	{
		startpos = len - 1;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	db02      	blt.n	8002ec8 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x4c>
	{
		endpos   = len - 1;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	da01      	bge.n	8002ed4 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x58>
	{
		endpos   = startpos;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	607b      	str	r3, [r7, #4]
	}

	return strncasecmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	18d0      	adds	r0, r2, r3
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	f005 fca2 	bl	8008830 <strncasecmp>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_ZNK3Cpl4Text7String_eqEc>:

bool
String_::operator ==( const char c ) const
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
	return c == m_strPtr[0];
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_ZNK3Cpl4Text7String_10startsWithEPKc>:

bool
String_::startsWith( const char* string ) const
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
	return String_::startsWith( string, 0 );
 8002f34:	2200      	movs	r2, #0
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f805 	bl	8002f48 <_ZNK3Cpl4Text7String_10startsWithEPKci>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZNK3Cpl4Text7String_10startsWithEPKci>:

bool
String_::startsWith( const char* string, int startOffset ) const
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	if ( !string )
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x16>
	{
		return false;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e028      	b.n	8002fb0 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	int len  = strlen( m_strPtr );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd f966 	bl	8000234 <strlen>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	617b      	str	r3, [r7, #20]
	int len2 = strlen( string );
 8002f6c:	68b8      	ldr	r0, [r7, #8]
 8002f6e:	f7fd f961 	bl	8000234 <strlen>
 8002f72:	4603      	mov	r3, r0
 8002f74:	613b      	str	r3, [r7, #16]
	if ( startOffset < 0 || ( startOffset + len2 ) > len || len2 == 0 )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db08      	blt.n	8002f8e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	db02      	blt.n	8002f8e <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x4a>
	{
		return false;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e00e      	b.n	8002fb0 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	return strncmp( m_strPtr + startOffset, string, len2 ) == 0;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f005 fc7b 	bl	800889a <strncmp>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZNK3Cpl4Text7String_8endsWithEPKc>:

bool
String_::endsWith( const char* string ) const
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	if ( !string )
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <_ZNK3Cpl4Text7String_8endsWithEPKc+0x14>
	{
		return false;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e025      	b.n	8003018 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	int len  = strlen( m_strPtr );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd f92f 	bl	8000234 <strlen>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	60fb      	str	r3, [r7, #12]
	int len2 = strlen( string );
 8002fda:	6838      	ldr	r0, [r7, #0]
 8002fdc:	f7fd f92a 	bl	8000234 <strlen>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60bb      	str	r3, [r7, #8]
	if ( len2 > len || len2 == 0 )
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	dc02      	bgt.n	8002ff2 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3a>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3e>
	{
		return false;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e010      	b.n	8003018 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	return strncmp( m_strPtr + len - len2, string, len2 ) == 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1acb      	subs	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f005 fc47 	bl	800889a <strncmp>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZN3Cpl4Text7String_6formatEPKcz>:


void
String_::format( const char* format, ... )
{
 8003020:	b40e      	push	{r1, r2, r3}
 8003022:	b580      	push	{r7, lr}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
	if ( !format )
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <_ZN3Cpl4Text7String_6formatEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8003030:	f107 0320 	add.w	r3, r7, #32
 8003034:	60fb      	str	r3, [r7, #12]
	vformat( format, ap );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	33d8      	adds	r3, #216	; 0xd8
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	69f9      	ldr	r1, [r7, #28]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	e000      	b.n	800304a <_ZN3Cpl4Text7String_6formatEPKcz+0x2a>
		return;
 8003048:	bf00      	nop
	va_end( ap );
}
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003052:	b003      	add	sp, #12
 8003054:	4770      	bx	lr

08003056 <_ZN3Cpl4Text7String_12formatAppendEPKcz>:

void
String_::formatAppend( const char* format, ... )
{
 8003056:	b40e      	push	{r1, r2, r3}
 8003058:	b580      	push	{r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	if ( !format )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8003066:	f107 0320 	add.w	r3, r7, #32
 800306a:	60fb      	str	r3, [r7, #12]
	vformatAppend( format, ap );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	33dc      	adds	r3, #220	; 0xdc
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	69f9      	ldr	r1, [r7, #28]
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e000      	b.n	8003080 <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x2a>
		return;
 800307e:	bf00      	nop
	va_end( ap );
}
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003088:	b003      	add	sp, #12
 800308a:	4770      	bx	lr

0800308c <_ZN3Cpl4Text7String_9formatOptEbPKcz>:

void
String_::formatOpt( bool appendFlag, const char* format, ... )
{
 800308c:	b40c      	push	{r2, r3}
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
	if ( !format )
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d017      	beq.n	80030d0 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x44>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 80030a0:	f107 031c 	add.w	r3, r7, #28
 80030a4:	60fb      	str	r3, [r7, #12]
	if ( appendFlag )
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x32>
	{
		vformatAppend( format, ap );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	33dc      	adds	r3, #220	; 0xdc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e009      	b.n	80030d2 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
	}
	else
	{
		vformat( format, ap );
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	33d8      	adds	r3, #216	; 0xd8
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
 80030ce:	e000      	b.n	80030d2 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
		return;
 80030d0:	bf00      	nop
	}

	va_end( ap );
}
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030da:	b002      	add	sp, #8
 80030dc:	4770      	bx	lr

080030de <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list>:

void
String_::vformat( const char* format, va_list ap )
{
 80030de:	b590      	push	{r4, r7, lr}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
	if ( !format )
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d027      	beq.n	8003140 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x62>
	{
		return;
	}

	int flen = vsnprintf( m_strPtr, maxLength() + 1, format, ap );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689c      	ldr	r4, [r3, #8]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3374      	adds	r3, #116	; 0x74
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4610      	mov	r0, r2
 8003100:	4798      	blx	r3
 8003102:	4603      	mov	r3, r0
 8003104:	3301      	adds	r3, #1
 8003106:	4619      	mov	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4620      	mov	r0, r4
 800310e:	f005 fc53 	bl	80089b8 <vsniprintf>
 8003112:	6178      	str	r0, [r7, #20]
	validateSizeAfterFormat( maxLength(), flen, maxLength() );
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3374      	adds	r3, #116	; 0x74
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4610      	mov	r0, r2
 8003120:	4798      	blx	r3
 8003122:	4604      	mov	r4, r0
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3374      	adds	r3, #116	; 0x74
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4610      	mov	r0, r2
 8003130:	4798      	blx	r3
 8003132:	4603      	mov	r3, r0
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4621      	mov	r1, r4
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 faef 	bl	800371c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 800313e:	e000      	b.n	8003142 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x64>
		return;
 8003140:	bf00      	nop
}
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd90      	pop	{r4, r7, pc}

08003148 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>:

void
String_::vformatAppend( const char* format, va_list ap )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
	if ( !format )
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02d      	beq.n	80031b6 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x6e>
	{
		return;
	}

	int   len   = strlen( m_strPtr );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f868 	bl	8000234 <strlen>
 8003164:	4603      	mov	r3, r0
 8003166:	61fb      	str	r3, [r7, #28]
	int   avail = maxLength() - len;
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3374      	adds	r3, #116	; 0x74
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4610      	mov	r0, r2
 8003174:	4798      	blx	r3
 8003176:	4602      	mov	r2, r0
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	61bb      	str	r3, [r7, #24]
	char* ptr   = m_strPtr + len;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
	int   flen  = vsnprintf( ptr, avail + 1, format, ap );
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	3301      	adds	r3, #1
 800318c:	4619      	mov	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f005 fc10 	bl	80089b8 <vsniprintf>
 8003198:	6138      	str	r0, [r7, #16]
	validateSizeAfterFormat( avail, flen, maxLength() );
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3374      	adds	r3, #116	; 0x74
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4610      	mov	r0, r2
 80031a6:	4798      	blx	r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fab4 	bl	800371c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 80031b4:	e000      	b.n	80031b8 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x70>
		return;
 80031b6:	bf00      	nop
}
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list>:

void
String_::vformatOpt( bool appendFlag, const char* format, va_list ap )
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	460b      	mov	r3, r1
 80031cc:	72fb      	strb	r3, [r7, #11]
	if ( !format )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x40>
	{
		return;
	}

	if ( appendFlag )
 80031d4:	7afb      	ldrb	r3, [r7, #11]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x2e>
	{
		vformatAppend( format, ap );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	33dc      	adds	r3, #220	; 0xdc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	4798      	blx	r3
 80031ea:	e009      	b.n	8003200 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
	}
	else
	{
		vformat( format, ap );
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	33d8      	adds	r3, #216	; 0xd8
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	4798      	blx	r3
 80031fc:	e000      	b.n	8003200 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
		return;
 80031fe:	bf00      	nop
	}
}
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <_ZN3Cpl4Text7String_7toUpperEv>:


const char*
String_::toUpper()
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	strupr( m_strPtr );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f005 fb92 	bl	800893c <strupr>
	return m_strPtr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <_ZN3Cpl4Text7String_7toLowerEv>:

const char*
String_::toLower()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	strlwr( m_strPtr );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f005 faeb 	bl	800880c <strlwr>
	return m_strPtr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv>:

void
String_::removeLeadingSpaces()
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
	m_truncated   = false;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripSpace( m_strPtr );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fb70 	bl	800393a <_ZN3Cpl4Text10stripSpaceEPKc>
 800325a:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading spaces
	if ( p == m_strPtr )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	d01c      	beq.n	80032a0 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x5e>
	{
		return;
	}

	// else re-adjust the string to remove the spaces
	size_t i = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 800326a:	68b8      	ldr	r0, [r7, #8]
 800326c:	f7fc ffe2 	bl	8000234 <strlen>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4293      	cmp	r3, r2
 8003276:	d20c      	bcs.n	8003292 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x50>
	{
		m_strPtr[i] = p[i];
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6899      	ldr	r1, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	440b      	add	r3, r1
 8003286:	7812      	ldrb	r2, [r2, #0]
 8003288:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e7eb      	b.n	800326a <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x28>
	}

	m_strPtr[i] = '\0';
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e000      	b.n	80032a2 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x60>
		return;
 80032a0:	bf00      	nop
}
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_ZN3Cpl4Text7String_20removeTrailingSpacesEv>:

void
String_::removeTrailingSpaces()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	m_truncated = false;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingSpace( m_strPtr );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fb87 	bl	80039ce <_ZN3Cpl4Text19removeTrailingSpaceEPc>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc>:

void
String_::removeLeadingChars( const char* charsSet )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	m_truncated   = false;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripChars( m_strPtr, charsSet );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb95 	bl	8003a0e <_ZN3Cpl4Text10stripCharsEPKcS2_>
 80032e4:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading chars
	if ( p == m_strPtr )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d01c      	beq.n	800332a <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x62>
	{
		return;
	}

	// else re-adjust the string to remove the chars
	size_t i = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 80032f4:	68b8      	ldr	r0, [r7, #8]
 80032f6:	f7fc ff9d 	bl	8000234 <strlen>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d20c      	bcs.n	800331c <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x54>
	{
		m_strPtr[i] = p[i];
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	440b      	add	r3, r1
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3301      	adds	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e7eb      	b.n	80032f4 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x2c>
	}

	m_strPtr[i] = '\0';
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e000      	b.n	800332c <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x64>
		return;
 800332a:	bf00      	nop
}
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_ZN3Cpl4Text7String_19removeTrailingCharsEPKc>:

void
String_::removeTrailingChars( const char* charsSet )
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingChars( m_strPtr, charsSet );
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fbc2 	bl	8003ad2 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZNK3Cpl4Text7String_7indexOfEc>:

int
String_::indexOf( char c ) const
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
	return String_::indexOf( c, 0 );
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	2200      	movs	r2, #0
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f805 	bl	8003378 <_ZNK3Cpl4Text7String_7indexOfEci>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZNK3Cpl4Text7String_7indexOfEci>:

int
String_::indexOf( char c, int startpos ) const
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	460b      	mov	r3, r1
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	72fb      	strb	r3, [r7, #11]
	int len = strlen( m_strPtr );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fc ff52 	bl	8000234 <strlen>
 8003390:	4603      	mov	r3, r0
 8003392:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db03      	blt.n	80033a2 <_ZNK3Cpl4Text7String_7indexOfEci+0x2a>
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	db02      	blt.n	80033a8 <_ZNK3Cpl4Text7String_7indexOfEci+0x30>
	{
		return -1;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	e013      	b.n	80033d0 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	char* ptr = strchr( m_strPtr + startpos, c );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	7afa      	ldrb	r2, [r7, #11]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 fa1b 	bl	80087f0 <strchr>
 80033ba:	6138      	str	r0, [r7, #16]
	if ( ptr )
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <_ZNK3Cpl4Text7String_7indexOfEci+0x54>
	{
		return ptr - m_strPtr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	e001      	b.n	80033d0 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZNK3Cpl4Text7String_7indexOfEPKc>:

int
String_::indexOf( const char* str ) const
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	return String_::indexOf( str, 0 );
 80033e2:	2200      	movs	r2, #0
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f805 	bl	80033f6 <_ZNK3Cpl4Text7String_7indexOfEPKci>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZNK3Cpl4Text7String_7indexOfEPKci>:

int
String_::indexOf( const char* str, int startpos ) const
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
	int len = strlen( m_strPtr );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fc ff14 	bl	8000234 <strlen>
 800340c:	4603      	mov	r3, r0
 800340e:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len || !str )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db06      	blt.n	8003424 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	429a      	cmp	r2, r3
 800341c:	da02      	bge.n	8003424 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <_ZNK3Cpl4Text7String_7indexOfEPKci+0x34>
	{
		return -1;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	e012      	b.n	8003450 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	char* ptr = strstr( m_strPtr + startpos, str );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	4618      	mov	r0, r3
 8003436:	f005 fa6b 	bl	8008910 <strstr>
 800343a:	6138      	str	r0, [r7, #16]
	if ( ptr )
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <_ZNK3Cpl4Text7String_7indexOfEPKci+0x56>
	{
		return ptr - m_strPtr;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	e001      	b.n	8003450 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	return -1;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZNK3Cpl4Text7String_11lastIndexOfEc>:
int
String_::lastIndexOf( char c ) const
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
	char* ptr = strrchr( m_strPtr, c );
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f005 fa3b 	bl	80088e8 <strrchr>
 8003472:	60f8      	str	r0, [r7, #12]
	if ( ptr )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x2c>
	{
		return ptr - m_strPtr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	e001      	b.n	8003488 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x30>
	}

	return -1;
 8003484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZNK3Cpl4Text7String_5countEc>:

int
String_::count( char c ) const
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
	int   count = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
	char* ptr   = m_strPtr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	4619      	mov	r1, r3
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f005 f9a0 	bl	80087f0 <strchr>
 80034b0:	60b8      	str	r0, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <_ZNK3Cpl4Text7String_5countEc+0x40>
	{
		count++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
		ptr++;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 80034ce:	e7ea      	b.n	80034a6 <_ZNK3Cpl4Text7String_5countEc+0x16>
	}

	return count;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZN3Cpl4Text7String_3cutEii>:

void
String_::cut( int startpos, int endpos )
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
	m_truncated = false;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc fe9f 	bl	8000234 <strlen>
 80034f6:	4603      	mov	r3, r0
 80034f8:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos > endpos || startpos >= len || endpos >= len )
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db37      	blt.n	8003570 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	dc33      	bgt.n	8003570 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	da2f      	bge.n	8003570 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	da2b      	bge.n	8003570 <_ZN3Cpl4Text7String_3cutEii+0x96>
	{
		return;
	}

	if ( endpos + 1 >= len )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3301      	adds	r3, #1
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	429a      	cmp	r2, r3
 8003520:	dc0b      	bgt.n	800353a <_ZN3Cpl4Text7String_3cutEii+0x60>
	{
		trimRight( len - startpos );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6979      	ldr	r1, [r7, #20]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	1a8a      	subs	r2, r1, r2
 8003532:	4611      	mov	r1, r2
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	4798      	blx	r3
		return;
 8003538:	e01b      	b.n	8003572 <_ZN3Cpl4Text7String_3cutEii+0x98>
	}
	int movelen = len - ( endpos + 1 );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3301      	adds	r3, #1
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	613b      	str	r3, [r7, #16]
	memmove( m_strPtr + startpos, m_strPtr + endpos + 1, movelen );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	18d0      	adds	r0, r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3301      	adds	r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4619      	mov	r1, r3
 800355a:	f004 ffd9 	bl	8008510 <memmove>
	m_strPtr[startpos + movelen] = '\0';
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	440a      	add	r2, r1
 8003568:	4413      	add	r3, r2
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
 800356e:	e000      	b.n	8003572 <_ZN3Cpl4Text7String_3cutEii+0x98>
		return;
 8003570:	bf00      	nop
}
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN3Cpl4Text7String_9trimRightEi>:

void
String_::trimRight( int n )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fe51 	bl	8000234 <strlen>
 8003592:	4603      	mov	r3, r0
 8003594:	60fb      	str	r3, [r7, #12]
	int index   = len - n;
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	60bb      	str	r3, [r7, #8]
	if ( index < 0 || n < 0 )
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db09      	blt.n	80035b8 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db06      	blt.n	80035b8 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
	{
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
	}
	else
	{
		m_strPtr[index] = '\0';
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e000      	b.n	80035ba <_ZN3Cpl4Text7String_9trimRightEi+0x42>
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
 80035b8:	bf00      	nop
	}

}
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN3Cpl4Text7String_7setCharEic>:

void String_::setChar( int atPosition, char newchar )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
	m_truncated = false;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc fe2b 	bl	8000234 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	617b      	str	r3, [r7, #20]
	if ( atPosition < 0 || atPosition >= len )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <_ZN3Cpl4Text7String_7setCharEic+0x3e>
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	da06      	bge.n	80035fe <_ZN3Cpl4Text7String_7setCharEic+0x3e>
	{
		return;
	}

	m_strPtr[atPosition] = newchar;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4413      	add	r3, r2
 80035f8:	79fa      	ldrb	r2, [r7, #7]
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e000      	b.n	8003600 <_ZN3Cpl4Text7String_7setCharEic+0x40>
		return;
 80035fe:	bf00      	nop
}
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZN3Cpl4Text7String_7replaceEcc>:

int
String_::replace( char targetChar, char newChar )
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
 8003612:	4613      	mov	r3, r2
 8003614:	70bb      	strb	r3, [r7, #2]
	int replaceCount = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
	if ( targetChar != newChar )
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	78bb      	ldrb	r3, [r7, #2]
 800361e:	429a      	cmp	r2, r3
 8003620:	d015      	beq.n	800364e <_ZN3Cpl4Text7String_7replaceEcc+0x48>
	{
		char* ptr 	     = m_strPtr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00e      	beq.n	800364e <_ZN3Cpl4Text7String_7replaceEcc+0x48>
		{
			if ( *ptr == targetChar )
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	429a      	cmp	r2, r3
 8003638:	d105      	bne.n	8003646 <_ZN3Cpl4Text7String_7replaceEcc+0x40>
			{
				*ptr = newChar;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	78ba      	ldrb	r2, [r7, #2]
 800363e:	701a      	strb	r2, [r3, #0]
				replaceCount++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
			}
			ptr++;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 800364c:	e7ec      	b.n	8003628 <_ZN3Cpl4Text7String_7replaceEcc+0x22>
		}
	}

	m_truncated = false;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	711a      	strb	r2, [r3, #4]
	return replaceCount;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <_ZNK3Cpl4Text7String_9getStringEv>:

const char*
String_::getString() const
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
	return m_strPtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <_ZN3Cpl4Text7String_9getBufferERi>:

char *
String_::getBuffer( int& maxAllowedLength )
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
	m_truncated      = false;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	711a      	strb	r2, [r3, #4]
	maxAllowedLength = maxLength();
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3374      	adds	r3, #116	; 0x74
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
 8003698:	4602      	mov	r2, r0
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
	return m_strPtr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_ZNK3Cpl4Text7String_10compareKeyERKNS_9Container3KeyE>:


////////////////////////////////////
int String_::compareKey( const Key& key ) const
{
 80036aa:	b590      	push	{r4, r7, lr}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
	unsigned    otherLen = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
	const char* otherPtr = (const char*) key.getRawKey( &otherLen );
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f107 0208 	add.w	r2, r7, #8
 80036c4:	4611      	mov	r1, r2
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	4798      	blx	r3
 80036ca:	60f8      	str	r0, [r7, #12]
	return Cpl::Container::KeyStringBuffer::compare( m_strPtr, strlen( m_strPtr ), otherPtr, otherLen );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689c      	ldr	r4, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc fdad 	bl	8000234 <strlen>
 80036da:	4601      	mov	r1, r0
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4620      	mov	r0, r4
 80036e2:	f004 f85a 	bl	800779a <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd90      	pop	{r4, r7, pc}

080036f0 <_ZNK3Cpl4Text7String_9getRawKeyEPj>:

const void* String_::getRawKey( unsigned* returnRawKeyLenPtr ) const
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	if ( returnRawKeyLenPtr )
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <_ZNK3Cpl4Text7String_9getRawKeyEPj+0x20>
	{
		*returnRawKeyLenPtr = strlen( m_strPtr );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc fd95 	bl	8000234 <strlen>
 800370a:	4602      	mov	r2, r0
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	601a      	str	r2, [r3, #0]
	}

	return m_strPtr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>:


////////////////////////////////////
void String_::validateSizeAfterFormat( int availableLen, int formattedLen, int maxlen )
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
	if ( formattedLen <= availableLen && formattedLen >= 0 )
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	dc06      	bgt.n	8003740 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db03      	blt.n	8003740 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
	{
		m_truncated = false;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	711a      	strb	r2, [r3, #4]
 800373e:	e009      	b.n	8003754 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x38>
	}
	else
	{
		m_truncated      = true;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	711a      	strb	r2, [r3, #4]
		m_strPtr[maxlen] = '\0';    // ENSURE the string is terminated
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	4413      	add	r3, r2
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
	}
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_ZN3Cpl4Text7String_aSERKNS0_6StringE>:

////////////////////////////////////
Cpl::Text::String& String_::operator=( const String& string ) { copyIn( string, string.length() ); return *this; }
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	687d      	ldr	r5, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3334      	adds	r3, #52	; 0x34
 8003772:	681c      	ldr	r4, [r3, #0]
 8003774:	6838      	ldr	r0, [r7, #0]
 8003776:	f7ff f9fd 	bl	8002b74 <_ZNK3Cpl4Text6StringcvPKcEv>
 800377a:	4606      	mov	r6, r0
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3370      	adds	r3, #112	; 0x70
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	4631      	mov	r1, r6
 800378e:	4628      	mov	r0, r5
 8003790:	47a0      	blx	r4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379c <_ZN3Cpl4Text7String_aSEPKc>:
Cpl::Text::String& String_::operator=( const char* string ) { copyIn( string, string ? strlen( string ) : 0 ); return *this; }
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	687d      	ldr	r5, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3334      	adds	r3, #52	; 0x34
 80037ae:	681c      	ldr	r4, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <_ZN3Cpl4Text7String_aSEPKc+0x24>
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f7fc fd3c 	bl	8000234 <strlen>
 80037bc:	4603      	mov	r3, r0
 80037be:	e000      	b.n	80037c2 <_ZN3Cpl4Text7String_aSEPKc+0x26>
 80037c0:	2300      	movs	r3, #0
 80037c2:	461a      	mov	r2, r3
 80037c4:	6839      	ldr	r1, [r7, #0]
 80037c6:	4628      	mov	r0, r5
 80037c8:	47a0      	blx	r4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}

080037d4 <_ZN3Cpl4Text7String_aSEc>:
Cpl::Text::String& String_::operator=( char c ) { copyIn( &c, 1 ); return *this; }
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3334      	adds	r3, #52	; 0x34
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1cf9      	adds	r1, r7, #3
 80037ec:	2201      	movs	r2, #1
 80037ee:	4798      	blx	r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <_ZN3Cpl4Text7String_pLERKNS0_6StringE>:
Cpl::Text::String& String_::operator +=( const String& string ) { appendTo( string, string.length() ); return *this; }
 80037fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
 8003804:	687d      	ldr	r5, [r7, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3364      	adds	r3, #100	; 0x64
 800380c:	681c      	ldr	r4, [r3, #0]
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	f7ff f9b0 	bl	8002b74 <_ZNK3Cpl4Text6StringcvPKcEv>
 8003814:	4606      	mov	r6, r0
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3370      	adds	r3, #112	; 0x70
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6838      	ldr	r0, [r7, #0]
 8003820:	4798      	blx	r3
 8003822:	4603      	mov	r3, r0
 8003824:	461a      	mov	r2, r3
 8003826:	4631      	mov	r1, r6
 8003828:	4628      	mov	r0, r5
 800382a:	47a0      	blx	r4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003836 <_ZN3Cpl4Text7String_pLEPKc>:
Cpl::Text::String& String_::operator +=( const char* string ) { appendTo( string, string ? strlen( string ) : 0 ); return *this; }
 8003836:	b5b0      	push	{r4, r5, r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
 8003840:	687d      	ldr	r5, [r7, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3364      	adds	r3, #100	; 0x64
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <_ZN3Cpl4Text7String_pLEPKc+0x24>
 8003850:	6838      	ldr	r0, [r7, #0]
 8003852:	f7fc fcef 	bl	8000234 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	e000      	b.n	800385c <_ZN3Cpl4Text7String_pLEPKc+0x26>
 800385a:	2300      	movs	r3, #0
 800385c:	461a      	mov	r2, r3
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4628      	mov	r0, r5
 8003862:	47a0      	blx	r4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bdb0      	pop	{r4, r5, r7, pc}

0800386e <_ZN3Cpl4Text7String_pLEc>:
Cpl::Text::String& String_::operator +=( char c ) { appendTo( &c, 1 ); return *this; }
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	70fb      	strb	r3, [r7, #3]
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3364      	adds	r3, #100	; 0x64
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1cf9      	adds	r1, r7, #3
 8003886:	2201      	movs	r2, #1
 8003888:	4798      	blx	r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_Z41__static_initialization_and_destruction_0ii>:
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d102      	bne.n	80038b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80038ae:	4809      	ldr	r0, [pc, #36]	; (80038d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80038b0:	f000 ffcc 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d107      	bne.n	80038ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <_Z41__static_initialization_and_destruction_0ii+0x36>
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80038c6:	f000 ffcc 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	2000267c 	.word	0x2000267c

080038d8 <_GLOBAL__sub_I__ZN3Cpl4Text7String_C2EPc>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7ff ffd7 	bl	8003894 <_Z41__static_initialization_and_destruction_0ii>
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_GLOBAL__sub_D__ZN3Cpl4Text7String_C2EPc>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7ff ffcf 	bl	8003894 <_Z41__static_initialization_and_destruction_0ii>
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_ZN3Cpl4Text14isCharInStringEPKcc>:
#include <ctype.h>


////////////////
bool Cpl::Text::isCharInString( const char* charsSet, const char c )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fc fc93 	bl	8000234 <strlen>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4293      	cmp	r3, r2
 8003914:	d20c      	bcs.n	8003930 <_ZN3Cpl4Text14isCharInStringEPKcc+0x38>
	{
		if ( c == charsSet[i] )
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	429a      	cmp	r2, r3
 8003922:	d101      	bne.n	8003928 <_ZN3Cpl4Text14isCharInStringEPKcc+0x30>
		{
			return true;
 8003924:	2301      	movs	r3, #1
 8003926:	e004      	b.n	8003932 <_ZN3Cpl4Text14isCharInStringEPKcc+0x3a>
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e7eb      	b.n	8003908 <_ZN3Cpl4Text14isCharInStringEPKcc+0x10>
		}
	}
	return false;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZN3Cpl4Text10stripSpaceEPKc>:


////////////////
const char* Cpl::Text::stripSpace( const char *s )
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	if ( !s )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	{
		return 0;
 8003948:	2300      	movs	r3, #0
 800394a:	e010      	b.n	800396e <_ZN3Cpl4Text10stripSpaceEPKc+0x34>
	}

	while ( *s && isspace( (int) *s ) )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f004 fdbf 	bl	80084dc <isspace>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
	{
		s++;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
	while ( *s && isspace( (int) *s ) )
 800396a:	e7ef      	b.n	800394c <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	}
	return s;
 800396c:	687b      	ldr	r3, [r7, #4]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>:
	return s;
}


const char* Cpl::Text::stripTrailingSpace( const char *s )
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
	if ( !s )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x12>
	{
		return 0;
 8003984:	2300      	movs	r3, #0
 8003986:	e01e      	b.n	80039c6 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fc fc53 	bl	8000234 <strlen>
 800398e:	60b8      	str	r0, [r7, #8]
	if ( !len )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x24>
	{
		return s;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	e015      	b.n	80039c6 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3b01      	subs	r3, #1
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d00b      	beq.n	80039c4 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 fd93 	bl	80084dc <isspace>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
	{
		p--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 80039c2:	e7ef      	b.n	80039a4 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x2e>
	}
	return p;
 80039c4:	68fb      	ldr	r3, [r7, #12]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <_ZN3Cpl4Text19removeTrailingSpaceEPc>:


void Cpl::Text::removeTrailingSpace( char* s )
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
	if ( !s )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d014      	beq.n	8003a06 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x38>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingSpace( s );
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ffca 	bl	8003976 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>
 80039e2:	60f8      	str	r0, [r7, #12]
	if ( isspace( (int) *ptr ) )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 fd77 	bl	80084dc <isspace>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x2e>
	{
		*ptr = '\0';
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e005      	b.n	8003a08 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3301      	adds	r3, #1
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e000      	b.n	8003a08 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
		return;
 8003a06:	bf00      	nop
	}
}
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZN3Cpl4Text10stripCharsEPKcS2_>:


//////////////////////	
const char* Cpl::Text::stripChars( const char *s, const char* charsSet )
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
	if ( !s )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x14>
	{
		return 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e01b      	b.n	8003a5a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	if ( !charsSet )
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	{
		return s;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	e016      	b.n	8003a5a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	while ( *s && isCharInString( charsSet, *s ) )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f7ff ff5c 	bl	80038f8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3e>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4a>
	{
		s++;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3301      	adds	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
	while ( *s && isCharInString( charsSet, *s ) )
 8003a56:	e7e9      	b.n	8003a2c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	}
	return s;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>:
	return s;
}


const char* Cpl::Text::stripTrailingChars( const char *s, const char* charsSet )
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
	if ( !s )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x14>
	{
		return 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e029      	b.n	8003aca <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	if ( !charsSet )
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x1e>
	{
		return s;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	e024      	b.n	8003aca <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fc fbd7 	bl	8000234 <strlen>
 8003a86:	60b8      	str	r0, [r7, #8]
	if ( !len )
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x30>
	{
		return s;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	e01b      	b.n	8003aca <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d00a      	beq.n	8003aba <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6838      	ldr	r0, [r7, #0]
 8003aac:	f7ff ff24 	bl	80038f8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x5a>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x66>
	{
		p--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 8003ac6:	e7e9      	b.n	8003a9c <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x3a>
	}
	return p;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>:


void Cpl::Text::removeTrailingChars( char* s, const char* charsSet )
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
	if ( !s || !charsSet )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d019      	beq.n	8003b16 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d016      	beq.n	8003b16 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingChars( (const char*) s, charsSet );
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ffb9 	bl	8003a62 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>
 8003af0:	60f8      	str	r0, [r7, #12]
	if ( isCharInString( charsSet, *ptr ) )
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7ff fefd 	bl	80038f8 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x3a>
	{
		*ptr = '\0';        // trap the case of string is ALL spaces
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e005      	b.n	8003b18 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e000      	b.n	8003b18 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
		return;
 8003b16:	bf00      	nop
	}
}
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZNK3Cpl4Text6StringclEv>:

	/// Returns a Read-only pointer to the "raw" (short-hand for getString())
	inline const char* operator()() const { return getString(); }
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	336c      	adds	r3, #108	; 0x6c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN3Cpl2Io6Output5writeEc>:
using namespace Cpl::Io;


//////////////////////
bool Output::write( char c )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
    return write( (const void*) &c, sizeof( c ) );
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1cf9      	adds	r1, r7, #3
 8003b52:	2201      	movs	r2, #1
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_ZN3Cpl2Io6Output5writeEPKc>:


bool Output::write( const char* string )
{
 8003b62:	b590      	push	{r4, r7, lr}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
    return write( string, strlen( string ) );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3320      	adds	r3, #32
 8003b72:	681c      	ldr	r4, [r3, #0]
 8003b74:	6838      	ldr	r0, [r7, #0]
 8003b76:	f7fc fb5d 	bl	8000234 <strlen>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6839      	ldr	r1, [r7, #0]
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	47a0      	blx	r4
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}

08003b8e <_ZN3Cpl2Io6Output5writeERKNS_4Text6StringE>:


bool Output::write( const Cpl::Text::String& string )
{
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
    return write( string(), string.length() );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	681c      	ldr	r4, [r3, #0]
 8003ba0:	6838      	ldr	r0, [r7, #0]
 8003ba2:	f7ff ffbc 	bl	8003b1e <_ZNK3Cpl4Text6StringclEv>
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3370      	adds	r3, #112	; 0x70
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6838      	ldr	r0, [r7, #0]
 8003bb2:	4798      	blx	r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4629      	mov	r1, r5
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	47a0      	blx	r4
 8003bbe:	4603      	mov	r3, r0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}

08003bc8 <_ZN3Cpl2Io6Output5writeERNS_4Text6StringEPKcz>:


bool Output::write( Cpl::Text::String& formatBuffer, const char* format, ... )
{
 8003bc8:	b40c      	push	{r2, r3}
 8003bca:	b590      	push	{r4, r7, lr}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start( ap, format );
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	60bb      	str	r3, [r7, #8]
    bool result = vwrite( formatBuffer, format, ap );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	331c      	adds	r3, #28
 8003be0:	681c      	ldr	r4, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	47a0      	blx	r4
 8003bec:	4603      	mov	r3, r0
 8003bee:	73fb      	strb	r3, [r7, #15]
    va_end( ap );
    return result;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003bfc:	b002      	add	sp, #8
 8003bfe:	4770      	bx	lr

08003c00 <_ZN3Cpl2Io6Output6vwriteERNS_4Text6StringEPKcSt9__va_list>:


bool Output::vwrite( Cpl::Text::String& formatBuffer, const char* format, va_list ap )
{
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
    formatBuffer.vformat( format, ap );
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	33d8      	adds	r3, #216	; 0xd8
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68b8      	ldr	r0, [r7, #8]
 8003c1c:	4798      	blx	r3
    return write( formatBuffer(), formatBuffer.length() );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3320      	adds	r3, #32
 8003c24:	681c      	ldr	r4, [r3, #0]
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	f7ff ff79 	bl	8003b1e <_ZNK3Cpl4Text6StringclEv>
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3370      	adds	r3, #112	; 0x70
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68b8      	ldr	r0, [r7, #8]
 8003c38:	4798      	blx	r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4629      	mov	r1, r5
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	47a0      	blx	r4
 8003c44:	4603      	mov	r3, r0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}

08003c4e <_ZN3Cpl2Io6Output5writeEPKvi>:


bool Output::write( const void* buffer, int numBytes )
{
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
    int  written       = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
    const uint8_t* ptr = (const uint8_t*) buffer;
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	617b      	str	r3, [r7, #20]

    // Loop until all data is written
    while ( numBytes )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <_ZN3Cpl2Io6Output5writeEPKvi+0x52>
    {
        if ( !write( ptr, numBytes, written ) )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	681c      	ldr	r4, [r3, #0]
 8003c70:	f107 0310 	add.w	r3, r7, #16
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	47a0      	blx	r4
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f083 0301 	eor.w	r3, r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <_ZN3Cpl2Io6Output5writeEPKvi+0x3e>
        {
            return false;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e00a      	b.n	8003ca2 <_ZN3Cpl2Io6Output5writeEPKvi+0x54>
        }
        numBytes -= written;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	607b      	str	r3, [r7, #4]
        ptr      += written;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	461a      	mov	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    while ( numBytes )
 8003c9e:	e7e0      	b.n	8003c62 <_ZN3Cpl2Io6Output5writeEPKvi+0x14>
    }

    // If I get here, all data has been written
    return true;
 8003ca0:	2301      	movs	r3, #1
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
	...

08003cac <_Z41__static_initialization_and_destruction_0ii>:
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d102      	bne.n	8003ccc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003cc6:	4809      	ldr	r0, [pc, #36]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003cc8:	f000 fdc0 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d102      	bne.n	8003ce2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003cde:	f000 fdc0 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20002680 	.word	0x20002680

08003cf0 <_GLOBAL__sub_I__ZN3Cpl2Io6Output5writeEc>:
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff ffd7 	bl	8003cac <_Z41__static_initialization_and_destruction_0ii>
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_GLOBAL__sub_D__ZN3Cpl2Io6Output5writeEc>:
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7ff ffcf 	bl	8003cac <_Z41__static_initialization_and_destruction_0ii>
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_>:
    return false;
}

///////////////////////////////////////////////////////
ElapsedTime::Precision_T ElapsedTime::deltaPrecision( Precision_T startTime, Precision_T endTime ) noexcept
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
    Precision_T delta;
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7fd fb99 	bl	8001454 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>

    // Calc delta seconds
    delta.m_seconds = endTime.m_seconds - startTime.m_seconds;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

    // Calc delta milliseconds (trap case of 'borrow')
    delta.m_thousandths = endTime.m_thousandths - startTime.m_thousandths;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	889a      	ldrh	r2, [r3, #4]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	889b      	ldrh	r3, [r3, #4]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	809a      	strh	r2, [r3, #4]
    if ( delta.m_thousandths > MAX_POSITVE_MSEC_ )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da0b      	bge.n	8003d62 <_ZN3Cpl6System11ElapsedTime14deltaPrecisionENS1_11Precision_TES2_+0x52>
    {
        delta.m_seconds--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]
        delta.m_thousandths += 1000;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	809a      	strh	r2, [r3, #4]
    }

    return delta;
 8003d62:	bf00      	nop
}
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZN3Cpl6System8RunnableC1Ev>:
///
using namespace Cpl::System;


/////////////////////////////////////////////////////////////
Runnable::Runnable( void )
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    :m_running( false )
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <_ZN3Cpl6System8RunnableC1Ev+0x24>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	711a      	strb	r2, [r3, #4]
{
}
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	08009e80 	.word	0x08009e80

08003d94 <_ZN3Cpl6System8Runnable3runEv>:

void Runnable::run( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    // Set my running state
    Locks_::system().lock();
 8003d9c:	f000 f89e 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f93a 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
    m_running = true;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8003dae:	f000 f895 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f945 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>

    // Run my application code
    appRun();
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3

    // Clear my running state
    Locks_::system().lock();
 8003dc6:	f000 f889 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f925 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
    m_running = false;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8003dd8:	f000 f880 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f930 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZN3Cpl6System8Runnable9isRunningEv>:

bool Runnable::isRunning( void ) noexcept
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    bool result = false;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]

    Locks_::system().lock();
 8003df8:	f000 f870 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f90c 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
    result = m_running;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	791b      	ldrb	r3, [r3, #4]
 8003e08:	73fb      	strb	r3, [r7, #15]
    Locks_::system().unlock();
 8003e0a:	f000 f867 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f917 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>

    return result;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_Z41__static_initialization_and_destruction_0ii>:
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d107      	bne.n	8003e40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d102      	bne.n	8003e40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e3a:	4809      	ldr	r0, [pc, #36]	; (8003e60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003e3c:	f000 fd06 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d102      	bne.n	8003e56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003e50:	4803      	ldr	r0, [pc, #12]	; (8003e60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003e52:	f000 fd06 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20002684 	.word	0x20002684

08003e64 <_GLOBAL__sub_I__ZN3Cpl6System8RunnableC2Ev>:
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7ff ffd7 	bl	8003e20 <_Z41__static_initialization_and_destruction_0ii>
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_GLOBAL__sub_D__ZN3Cpl6System8RunnableC2Ev>:
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f7ff ffcf 	bl	8003e20 <_Z41__static_initialization_and_destruction_0ii>
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZN3Cpl6System3Api10initializeEv>:

bool cpl_system_thread_freertos_schedulerStarted_ = false;

////////////////////////////////////////////////////////////////////////////////
void Api::initialize( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
    // Init the Colony.Core sub-systems
    StartupHook_::notifyStartupClients();
 8003e88:	f003 fe30 	bl	8007aec <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_ZN3Cpl6System3Api16enableSchedulingEv>:


void Api::enableScheduling( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
    // This method should never return
    cpl_system_thread_freertos_schedulerStarted_ = true;            // Manually track the scheduler state since xTaskGetSchedulerState() is return 'taskSCHEDULER_RUNNING' BEFORE I have started the scheduler!!!!
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <_ZN3Cpl6System3Api16enableSchedulingEv+0x18>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
    vTaskStartScheduler();
 8003e9a:	f002 fb31 	bl	8006500 <vTaskStartScheduler>

    // If I get here something is wrong!!
    Bsp_Api_disableIrqs();
 8003e9e:	f003 fafb 	bl	8007498 <vPortEnterCritical>
    for ( ;;)
    {
        Bsp_Api_nop();
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <_ZN3Cpl6System3Api16enableSchedulingEv+0x12>
 8003ea6:	bf00      	nop
 8003ea8:	2000269c 	.word	0x2000269c

08003eac <_ZN3Cpl6System3Api19isSchedulingEnabledEv>:
    }
}

bool Api::isSchedulingEnabled( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
    return cpl_system_thread_freertos_schedulerStarted_;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <_ZN3Cpl6System3Api19isSchedulingEnabledEv+0x14>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000269c 	.word	0x2000269c

08003ec4 <_ZN3Cpl6System3Api5sleepEm>:

void Api::sleep( unsigned long milliseconds ) noexcept
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    vTaskDelay( milliseconds * portTICK_PERIOD_MS );
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f002 fc8b 	bl	80067e8 <vTaskDelay>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <_ZN3Cpl6System6Locks_6systemEv>:
    xTaskResumeAll();
}

////////////////////////////////////////////////////////////////////////////////
Mutex& Locks_::system( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
    return systemMutex_;
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <_ZN3Cpl6System6Locks_6systemEv+0x10>)
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	2000268c 	.word	0x2000268c

08003ef0 <_ZN3Cpl6System6Locks_8sysListsEv>:
{
    return tracingMutex_;
}

Mutex& Locks_::sysLists( void )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    return sysList_;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <_ZN3Cpl6System6Locks_8sysListsEv+0x10>)
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	20002698 	.word	0x20002698

08003f04 <_Z41__static_initialization_and_destruction_0ii>:

Mutex& Locks_::tracingOutput( void )
{
    return tracingOutputMutex_;
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d113      	bne.n	8003f3c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10e      	bne.n	8003f3c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8003f1e:	4815      	ldr	r0, [pc, #84]	; (8003f74 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003f20:	f000 fc94 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Mutex systemMutex_;
 8003f24:	4814      	ldr	r0, [pc, #80]	; (8003f78 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003f26:	f000 f853 	bl	8003fd0 <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingMutex_;
 8003f2a:	4814      	ldr	r0, [pc, #80]	; (8003f7c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003f2c:	f000 f850 	bl	8003fd0 <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingOutputMutex_;
 8003f30:	4813      	ldr	r0, [pc, #76]	; (8003f80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f32:	f000 f84d 	bl	8003fd0 <_ZN3Cpl6System5MutexC1Ev>
static Mutex sysList_;
 8003f36:	4813      	ldr	r0, [pc, #76]	; (8003f84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003f38:	f000 f84a 	bl	8003fd0 <_ZN3Cpl6System5MutexC1Ev>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d113      	bne.n	8003f6a <_Z41__static_initialization_and_destruction_0ii+0x66>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10e      	bne.n	8003f6a <_Z41__static_initialization_and_destruction_0ii+0x66>
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003f4e:	f000 f857 	bl	8004000 <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingOutputMutex_;
 8003f52:	480b      	ldr	r0, [pc, #44]	; (8003f80 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003f54:	f000 f854 	bl	8004000 <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingMutex_;
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003f5a:	f000 f851 	bl	8004000 <_ZN3Cpl6System5MutexD1Ev>
static Mutex systemMutex_;
 8003f5e:	4806      	ldr	r0, [pc, #24]	; (8003f78 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003f60:	f000 f84e 	bl	8004000 <_ZN3Cpl6System5MutexD1Ev>
 8003f64:	4803      	ldr	r0, [pc, #12]	; (8003f74 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003f66:	f000 fc7c 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20002688 	.word	0x20002688
 8003f78:	2000268c 	.word	0x2000268c
 8003f7c:	20002690 	.word	0x20002690
 8003f80:	20002694 	.word	0x20002694
 8003f84:	20002698 	.word	0x20002698

08003f88 <_GLOBAL__sub_I_cpl_system_thread_freertos_schedulerStarted_>:
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f90:	2001      	movs	r0, #1
 8003f92:	f7ff ffb7 	bl	8003f04 <_Z41__static_initialization_and_destruction_0ii>
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_GLOBAL__sub_D_cpl_system_thread_freertos_schedulerStarted_>:
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7ff ffaf 	bl	8003f04 <_Z41__static_initialization_and_destruction_0ii>
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN3Cpl6System11ElapsedTime12millisecondsEv>:
using namespace Cpl::System;

///////////////////////////////////////////////////////////////
// Simulated time NOT supported
unsigned long ElapsedTime::milliseconds( void ) noexcept
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
    return millisecondsInRealTime();
 8003fac:	f003 fc7e 	bl	80078ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <_ZN3Cpl6System11ElapsedTime9precisionEv>:
{
    return secondsInRealTime();
}

ElapsedTime::Precision_T ElapsedTime::precision( void ) noexcept
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
    return precisionInRealTime();
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f003 fcb9 	bl	8007938 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv>
}
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <_ZN3Cpl6System5MutexC1Ev>:
#include "Cpl/System/FatalError.h"



//////////////////////////////////////////////////////////////////////////////
Cpl::System::Mutex::Mutex()
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
{
    m_mutex = xSemaphoreCreateRecursiveMutex();
 8003fd8:	2004      	movs	r0, #4
 8003fda:	f001 fdf1 	bl	8005bc0 <xQueueCreateMutex>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
    if ( m_mutex == NULL )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <_ZN3Cpl6System5MutexC1Ev+0x22>
    {
        Cpl::System::FatalError::logf( "Cpl:System::Mutex::Mutex().  Failed to create mutex" );
 8003fec:	4803      	ldr	r0, [pc, #12]	; (8003ffc <_ZN3Cpl6System5MutexC1Ev+0x2c>)
 8003fee:	f7fd febf 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	080096b0 	.word	0x080096b0

08004000 <_ZN3Cpl6System5MutexD1Ev>:

Cpl::System::Mutex::~Mutex()
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete( m_mutex );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fffd 	bl	800600c <vQueueDelete>
}
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <_ZN3Cpl6System5Mutex4lockEv>:


void Cpl::System::Mutex::lock( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    // Do nothing if the scheduler has not yet been started, i.e, if there is only 
    // one thread running -->then by definition I have mutual exclusion. It also allows
    // an application to lock a mutex BEFORE the scheduler has been started (i am looking
    // at you Cpl::System::Trace engine).
    if ( Cpl::System::Api::isSchedulingEnabled() )
 8004024:	f7ff ff42 	bl	8003eac <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <_ZN3Cpl6System5Mutex4lockEv+0x20>
    {
        xSemaphoreTakeRecursive( m_mutex, portMAX_DELAY );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f04f 31ff 	mov.w	r1, #4294967295
 8004036:	4618      	mov	r0, r3
 8004038:	f001 ffa3 	bl	8005f82 <xQueueTakeMutexRecursive>
    }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <_ZN3Cpl6System5Mutex6unlockEv>:


void Cpl::System::Mutex::unlock( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    if ( Cpl::System::Api::isSchedulingEnabled() )
 800404c:	f7ff ff2e 	bl	8003eac <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d004      	beq.n	8004060 <_ZN3Cpl6System5Mutex6unlockEv+0x1c>
    {
        xSemaphoreGiveRecursive( m_mutex );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fd92 	bl	8005b84 <xQueueGiveMutexRecursive>
    }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZL21shutdown_application_i>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
static int shutdown_application_( int exit_code )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    // Check if the scheduler has even started (or is still running)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004070:	f002 fd14 	bl	8006a9c <xTaskGetSchedulerState>
 8004074:	4603      	mov	r3, r0
 8004076:	2b02      	cmp	r3, #2
 8004078:	bf0c      	ite	eq
 800407a:	2301      	moveq	r3, #1
 800407c:	2300      	movne	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <_ZL21shutdown_application_i+0x22>
    {
        vTaskEndScheduler(); // Note: This only works a very few platforms (at this time only x86 Real Mode PC)!
 8004084:	f002 fa82 	bl	800658c <vTaskEndScheduler>
 8004088:	e002      	b.n	8004090 <_ZL21shutdown_application_i+0x28>
    }

    // If the scheduler is not running (typical case is it hasn't been started) -->then lock up in forever loop
    else
    {
        Bsp_Api_disableIrqs();
 800408a:	f003 fa05 	bl	8007498 <vPortEnterCritical>
        for ( ;;);
 800408e:	e7fe      	b.n	800408e <_ZL21shutdown_application_i+0x26>
    }

    return exit_code;
 8004090:	687b      	ldr	r3, [r7, #4]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <_ZN3Cpl6System8Shutdown7failureEi>:
{
    return shutdown_application_( notifyShutdownHandlers_( OPTION_CPL_SYSTEM_SHUTDOWN_SUCCESS_ERROR_CODE ) );
}

int Shutdown::failure( int exit_code )
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
    return shutdown_application_( notifyShutdownHandlers_( exit_code ) );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f003 fe24 	bl	8007cf0 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ffdc 	bl	8004068 <_ZL21shutdown_application_i>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <_ZN3Cpl6System8SignableD1Ev>:
 */
class Signable : public Cpl::Container::Item
{
public:
    /// Virtual destructor
    virtual ~Signable() {};
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <_ZN3Cpl6System8SignableD1Ev+0x1c>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	0800a014 	.word	0x0800a014

080040dc <_ZN3Cpl6System8SignableD0Ev>:
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffe9 	bl	80040bc <_ZN3Cpl6System8SignableD1Ev>
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f005 f933 	bl	8009356 <_ZdlPv>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <_ZN3Cpl6System6ThreadD1Ev>:
 */
class Thread : public Signable
{
public:
    /// Virtual destructor.
    virtual ~Thread() {};
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	4a05      	ldr	r2, [pc, #20]	; (800411c <_ZN3Cpl6System6ThreadD1Ev+0x20>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ffd5 	bl	80040bc <_ZN3Cpl6System8SignableD1Ev>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08009fe8 	.word	0x08009fe8

08004120 <_ZN3Cpl6System6ThreadD0Ev>:
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ffe7 	bl	80040fc <_ZN3Cpl6System6ThreadD1Ev>
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f005 f911 	bl	8009356 <_ZdlPv>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <_ZN3Cpl6System8SignableC1Ev>:
class Signable : public Cpl::Container::Item
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd ffbd 	bl	80020cc <_ZN3Cpl9Container4ItemC1Ev>
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <_ZN3Cpl6System8SignableC1Ev+0x24>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	0800a014 	.word	0x0800a014

08004168 <_ZN3Cpl6System6ThreadC1Ev>:
class Thread : public Signable
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ffe4 	bl	8004140 <_ZN3Cpl6System8SignableC1Ev>
 8004178:	4a03      	ldr	r2, [pc, #12]	; (8004188 <_ZN3Cpl6System6ThreadC1Ev+0x20>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	08009fe8 	.word	0x08009fe8

0800418c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>:
    // Add the native thread to the list of active threads
    addThreadToActiveList_( *this );
}


Thread::Thread( Cpl::System::Runnable&   runnable,
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
                int                      priority,
                unsigned                 stackSize
)
    :m_runnable( runnable ),
    m_name( name ),
    m_threadHandle( NULL )
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ffe3 	bl	8004168 <_ZN3Cpl6System6ThreadC1Ev>
 80041a2:	4a21      	ldr	r2, [pc, #132]	; (8004228 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x9c>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3310      	adds	r3, #16
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f9af 	bl	8004518 <_ZN3Cpl4Text7FStringILi16EEC1EPKc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	635a      	str	r2, [r3, #52]	; 0x34
{
    // Initialize by TLS storage for this thread
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b07      	cmp	r3, #7
 80041c8:	d809      	bhi.n	80041de <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x52>
    {
        m_tlsArray[i]   = 0;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	320e      	adds	r2, #14
 80041d0:	2100      	movs	r1, #0
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	3301      	adds	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e7f2      	b.n	80041c4 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x38>
    }

    // Calculate stack size in terms of 'depth' (not bytes)
    if ( stackSize == 0 )
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x60>
    {
        stackSize = OPTION_CPL_SYSTEM_FREERTOS_DEFAULT_STACK_SIZE >> ( sizeof( StackType_t ) / 2 );
 80041e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	e002      	b.n	80041f2 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x66>
    }
    else
    {
        stackSize = stackSize >> ( sizeof( StackType_t ) / 2 );
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	623b      	str	r3, [r7, #32]
    }


    // Create the thread
    xTaskCreate( &entryPoint, name, stackSize, this, priority, &m_threadHandle );
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	b299      	uxth	r1, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	3234      	adds	r2, #52	; 0x34
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	460a      	mov	r2, r1
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4809      	ldr	r0, [pc, #36]	; (800422c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa0>)
 8004208:	f002 f8e3 	bl	80063d2 <xTaskCreate>
    if ( m_threadHandle == NULL )
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x90>
    {
        Cpl::System::FatalError::logf( "FreeRTOS::Thread::Thread().  Failed to create thread %s.", name );
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4806      	ldr	r0, [pc, #24]	; (8004230 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa4>)
 8004218:	f7fd fdaa 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	08009ea4 	.word	0x08009ea4
 800422c:	080043a1 	.word	0x080043a1
 8004230:	080096f0 	.word	0x080096f0

08004234 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>:

Thread::~Thread()
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x7c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
    //       let the thread "run-to-completion", i.e. have the run() method
    //       of the associated Runnable object complete.  If you do
    //       need to kill a thread - be dang sure that it is state such
    //       that it is ok to die - i.e. it has released all of its acquired
    //       resources: mutexes, semaphores, file handles, etc.
    if ( m_runnable.isRunning() )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3310      	adds	r3, #16
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01c      	beq.n	8004294 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
    {
        // Ask the runnable object nicely to stop 
        m_runnable.pleaseStop();
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4610      	mov	r0, r2
 800426a:	4798      	blx	r3
        Cpl::System::Api::sleep( 100 );     // Yield execution and allow time for the thread to actually exit.
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	f7ff fe29 	bl	8003ec4 <_ZN3Cpl6System3Api5sleepEm>

        // Just to make sure: Brute the force the thread to end - IF it is still running
        // NOTE: This will NOT free any resources associated with the thread including the stack!
        if ( m_runnable.isRunning() )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3310      	adds	r3, #16
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
        {
            vTaskDelete( m_threadHandle );
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	4618      	mov	r0, r3
 8004290:	f002 f8cc 	bl	800642c <vTaskDelete>
Thread::~Thread()
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3310      	adds	r3, #16
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f9e5 	bl	8004668 <_ZN3Cpl4Text7FStringILi16EED1Ev>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff2b 	bl	80040fc <_ZN3Cpl6System6ThreadD1Ev>
        }
    }
}
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08009ea4 	.word	0x08009ea4

080042b4 <_ZN3Cpl6System8FreeRTOS6ThreadD0Ev>:
Thread::~Thread()
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
}
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffb9 	bl	8004234 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f005 f847 	bl	8009356 <_ZdlPv>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZN3Cpl6System8FreeRTOS6Thread6signalEv>:


//////////////////////////////
int Thread::signal() noexcept
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
    xTaskNotifyGive( m_threadHandle );
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80042de:	2300      	movs	r3, #0
 80042e0:	2202      	movs	r2, #2
 80042e2:	2100      	movs	r1, #0
 80042e4:	f002 fd1e 	bl	8006d24 <xTaskGenericNotify>
    return 0; // Always return success
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_ZN3Cpl6System8FreeRTOS6Thread9su_signalEv>:
/** NOTE: This method returns the 'higherPriorityTaskWoken' instead of the
          defined 'return zero on success' semantics.  This is to overcome
          the oddities of FreeRTOS.
 */
int Thread::su_signal() noexcept
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR( m_threadHandle, &higherPriorityTaskWoken );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	f107 020c 	add.w	r2, r7, #12
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f002 fd81 	bl	8006e10 <vTaskNotifyGiveFromISR>
    return higherPriorityTaskWoken;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZN3Cpl6System8FreeRTOS6Thread7getNameEv>:



const char* Thread::getName() noexcept
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    return m_name;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fc25 	bl	8002b74 <_ZNK3Cpl4Text6StringcvPKcEv>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN3Cpl6System8FreeRTOS6Thread5getIdEv>:

size_t Thread::getId() noexcept
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    return (size_t) m_threadHandle;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_ZN3Cpl6System8FreeRTOS6Thread9isRunningEv>:

bool Thread::isRunning() noexcept
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
    return m_runnable.isRunning();
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3310      	adds	r3, #16
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN3Cpl6System8FreeRTOS6Thread15getNativeHandleEv>:

Cpl_System_Thread_NativeHdl_T Thread::getNativeHandle( void ) noexcept
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    return m_threadHandle;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN3Cpl6System8FreeRTOS6Thread11getRunnableEv>:

Cpl::System::Runnable& Thread::getRunnable( void ) noexcept
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    return m_runnable;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv>:

//////////////////////////////
void Thread::entryPoint( void* data )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    // Convert data arg to a pointer to a Thread Object
    Thread* myThreadPtr = (Thread*) data;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

    // Plant the address of my TLS array into FreeRTOS's TCB
    vTaskSetApplicationTaskTag( myThreadPtr->m_threadHandle, (TaskHookFunction_t) myThreadPtr );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f002 fa3b 	bl	8006830 <vTaskSetApplicationTaskTag>


    // Go Execute the "Runnable" object
    addThreadToActiveList_( *myThreadPtr );
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f84e 	bl	800445c <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>
    myThreadPtr->m_runnable.setThreadOfExecution_( myThreadPtr );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3318      	adds	r3, #24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
    myThreadPtr->m_runnable.run();
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4610      	mov	r0, r2
 80043e4:	4798      	blx	r3

    // Remove the thread from the list of active threads
    removeThreadFromActiveList_( *myThreadPtr );
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f854 	bl	8004494 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>

    // Terminate myself
    vTaskDelete( NULL );
 80043ec:	2000      	movs	r0, #0
 80043ee:	f002 f81d 	bl	800642c <vTaskDelete>

    // Per the FreeRTOS API -->this function can NEVER return
    for ( ;;);
 80043f2:	e7fe      	b.n	80043f2 <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv+0x52>

080043f4 <_ZN3Cpl6System6Thread4waitEv>:
    return *( (Thread*) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) );
}


void Cpl::System::Thread::wait() noexcept
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
    ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	2000      	movs	r0, #0
 80043fe:	f002 fc5f 	bl	8006cc0 <ulTaskNotifyTake>
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <_ZN3Cpl6System6Thread6myNameEv>:
{
    return ulTaskNotifyTake( pdFALSE, msecs * portTICK_PERIOD_MS ) > 0;
}

const char* Cpl::System::Thread::myName() noexcept
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
    // Provide some protection in case this method is called before the scheduler is running (e.g. called by the trace engine)
    if ( !Cpl::System::Api::isSchedulingEnabled() )
 800440c:	f7ff fd4e 	bl	8003eac <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8004410:	4603      	mov	r3, r0
 8004412:	f083 0301 	eor.w	r3, r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <_ZN3Cpl6System6Thread6myNameEv+0x1a>
    {
        return emptyString_;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_ZN3Cpl6System6Thread6myNameEv+0x38>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	e00b      	b.n	800443a <_ZN3Cpl6System6Thread6myNameEv+0x32>
    }

    return ( ( Cpl::System::FreeRTOS::Thread* ) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) )->m_name;
 8004422:	f002 fb35 	bl	8006a90 <xTaskGetCurrentTaskHandle>
 8004426:	4603      	mov	r3, r0
 8004428:	4618      	mov	r0, r3
 800442a:	f002 fa11 	bl	8006850 <xTaskGetApplicationTaskTag>
 800442e:	4603      	mov	r3, r0
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fb9e 	bl	8002b74 <_ZNK3Cpl4Text6StringcvPKcEv>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000004 	.word	0x20000004

08004444 <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>:
    return (size_t) ( ( ( Cpl::System::FreeRTOS::Thread* )( &getCurrent() ) )->m_threadHandle );
}


void** Thread::getTlsArray() noexcept
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    return ( ( Cpl::System::FreeRTOS::Thread* ) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) )->m_tlsArray;
 8004448:	f002 fb22 	bl	8006a90 <xTaskGetCurrentTaskHandle>
 800444c:	4603      	mov	r3, r0
 800444e:	4618      	mov	r0, r3
 8004450:	f002 f9fe 	bl	8006850 <xTaskGetApplicationTaskTag>
 8004454:	4603      	mov	r3, r0
 8004456:	3338      	adds	r3, #56	; 0x38
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:
    }
}


void addThreadToActiveList_( Thread& thread )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 8004464:	f7ff fd44 	bl	8003ef0 <_ZN3Cpl6System6Locks_8sysListsEv>
 8004468:	4602      	mov	r2, r0
 800446a:	f107 030c 	add.w	r3, r7, #12
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f7fc ffcf 	bl	8001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.put( thread );
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4805      	ldr	r0, [pc, #20]	; (8004490 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 800447a:	f000 f87e 	bl	800457a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc ffd8 	bl	8001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200026a4 	.word	0x200026a4

08004494 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:

void removeThreadFromActiveList_( Thread& thread )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 800449c:	f7ff fd28 	bl	8003ef0 <_ZN3Cpl6System6Locks_8sysListsEv>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc ffb3 	bl	8001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.remove( thread );
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4805      	ldr	r0, [pc, #20]	; (80044c8 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 80044b2:	f000 f886 	bl	80045c2 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 80044b6:	f107 030c 	add.w	r3, r7, #12
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc ffbc 	bl	8001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200026a4 	.word	0x200026a4

080044cc <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>:
                                                  int         priority,
                                                  int         stackSize,
                                                  void*       stackPtr,
                                                  bool        allowSimTicks
)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
    return new Cpl::System::FreeRTOS::Thread( runnable, name, priority, stackSize );
 80044da:	2058      	movs	r0, #88	; 0x58
 80044dc:	f004 ff46 	bl	800936c <_Znwj>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461c      	mov	r4, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	68f9      	ldr	r1, [r7, #12]
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff fe4c 	bl	800418c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>
 80044f4:	4623      	mov	r3, r4
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}

080044fe <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>:
    :m_headPtr( 0 ), m_tailPtr( 0 )
{
}

template <class ITEM>
SList<ITEM>::SList( const char* notUsed ) noexcept
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
{
}
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <_ZN3Cpl4Text7FStringILi16EEC1EPKc>:
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0210 	add.w	r2, r3, #16
 800452a:	2310      	movs	r3, #16
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	f7fe f8c3 	bl	80026b8 <_ZN3Cpl4Text8FString_C1EPKcPci>
 8004532:	4a04      	ldr	r2, [pc, #16]	; (8004544 <_ZN3Cpl4Text7FStringILi16EEC1EPKc+0x2c>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08009ed0 	.word	0x08009ed0

08004548 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>:
{
    return  item.isInContainer_( this );
}

template <class ITEM>
inline ITEM* SList<ITEM>::first( void ) const noexcept
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
{
    return m_headPtr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>:
{
    return m_tailPtr;
}

template <class ITEM>
inline ITEM* SList<ITEM>::next( const ITEM& item ) const  noexcept
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
{
    return (ITEM*) (item.m_nextPtr_);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3304      	adds	r3, #4
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 f8c6 	bl	800771c <_ZN3Cpl9Container4Item7insert_EPv>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x40>
        if ( m_headPtr )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e002      	b.n	80045ae <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x34>
            m_headPtr = &item;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	605a      	str	r2, [r3, #4]
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>:
inline bool SList<ITEM>::remove( ITEM& item ) noexcept
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
    if ( item.isInContainer_( this ) )
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f003 f8be 	bl	8007754 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03f      	beq.n	800465e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffb2 	bl	8004548 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d036      	beq.n	800465e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
            if ( nxtPtr == &item )
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d12a      	bne.n	800464e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x8c>
                if ( prvPtr )
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x5e>
                    if ( !(prvPtr->m_nextPtr_=nxtPtr->m_nextPtr_) )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = prvPtr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	e00f      	b.n	8004640 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                    if ( !(m_headPtr=(ITEM*) nxtPtr->m_nextPtr_) )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = 0;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	605a      	str	r2, [r3, #4]
                Item::remove_( &item );
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f003 f898 	bl	800777a <_ZN3Cpl9Container4Item7remove_EPS1_>
                return true;
 800464a:	2301      	movs	r3, #1
 800464c:	e008      	b.n	8004660 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9e>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff83 	bl	8004560 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	e7c5      	b.n	80045ea <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x28>
    return false;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <_ZN3Cpl4Text7FStringILi16EED1Ev>:
class FString : public FString_
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <_ZN3Cpl4Text7FStringILi16EED1Ev+0x20>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fd fbdb 	bl	8001e34 <_ZN3Cpl4Text8FString_D1Ev>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08009ed0 	.word	0x08009ed0

0800468c <_ZN3Cpl4Text7FStringILi16EED0Ev>:
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ffe7 	bl	8004668 <_ZN3Cpl4Text7FStringILi16EED1Ev>
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f004 fe5b 	bl	8009356 <_ZdlPv>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <_Z41__static_initialization_and_destruction_0ii>:


void Cpl::System::Thread::destroy( Thread& threadToDestroy )
{
    delete &threadToDestroy;
}
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10b      	bne.n	80046d4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d106      	bne.n	80046d4 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80046c6:	480b      	ldr	r0, [pc, #44]	; (80046f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80046c8:	f000 f8c0 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Thread>  	threadList_( "StaticConstructor" );
 80046cc:	490a      	ldr	r1, [pc, #40]	; (80046f8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80046ce:	480b      	ldr	r0, [pc, #44]	; (80046fc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80046d0:	f7ff ff15 	bl	80044fe <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d102      	bne.n	80046ea <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80046e4:	4803      	ldr	r0, [pc, #12]	; (80046f4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80046e6:	f000 f8bc 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200026a0 	.word	0x200026a0
 80046f8:	0800972c 	.word	0x0800972c
 80046fc:	200026a4 	.word	0x200026a4

08004700 <_GLOBAL__sub_I__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
 8004704:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004708:	2001      	movs	r0, #1
 800470a:	f7ff ffcf 	bl	80046ac <_Z41__static_initialization_and_destruction_0ii>
 800470e:	bd80      	pop	{r7, pc}

08004710 <_GLOBAL__sub_D__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
 8004714:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff ffc7 	bl	80046ac <_Z41__static_initialization_and_destruction_0ii>
 800471e:	bd80      	pop	{r7, pc}

08004720 <_ZN3Cpl6System3TlsC1Ev>:

static uint16_t nextTlsIndex_;  // This guarantied to be initialized to zero (per the C++ standard) because it is in the BSS segment 


/////////////////////////////////////////////////////////
Tls::Tls( void )
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    :m_key( (Cpl_System_TlsKey_T) -1 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	22ff      	movs	r2, #255	; 0xff
 800472c:	701a      	strb	r2, [r3, #0]
{
    // Check if there are any TLS indexes/variables left
    Cpl::System::Locks_::system().lock();
 800472e:	f7ff fbd5 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fc71 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
    if ( nextTlsIndex_ < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES )
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b07      	cmp	r3, #7
 8004740:	d808      	bhi.n	8004754 <_ZN3Cpl6System3TlsC1Ev+0x34>
    {
        m_key = nextTlsIndex_++;
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	b291      	uxth	r1, r2
 800474a:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 800474c:	8011      	strh	r1, [r2, #0]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	701a      	strb	r2, [r3, #0]
    }
    Cpl::System::Locks_::system().unlock();
 8004754:	f7ff fbc2 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8004758:	4603      	mov	r3, r0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fc72 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>


    // Generate a fatal error if I am out of TLS indexes/variables
    if ( m_key == (Cpl_System_TlsKey_T) -1 )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2bff      	cmp	r3, #255	; 0xff
 8004766:	d105      	bne.n	8004774 <_ZN3Cpl6System3TlsC1Ev+0x54>
    {
        Cpl::System::FatalError::logRaw( "FreeRTOS::Tls::Tls().  Exceeded TLS indexes.", nextTlsIndex_ );
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <_ZN3Cpl6System3TlsC1Ev+0x60>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	; (8004784 <_ZN3Cpl6System3TlsC1Ev+0x64>)
 8004770:	f7fd fb30 	bl	8001dd4 <_ZN3Cpl6System10FatalError6logRawEPKcj>
    }
}
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200026ae 	.word	0x200026ae
 8004784:	08009740 	.word	0x08009740

08004788 <_ZN3Cpl6System3Tls3getEv>:
}


/////////////////////////////////////////////////////////
void* Tls::get( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    // Get access to my FreeRTOS thread object.
    void** myArray = Cpl::System::FreeRTOS::Thread::getTlsArray();
 8004790:	f7ff fe58 	bl	8004444 <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>
 8004794:	60f8      	str	r0, [r7, #12]
    return myArray[m_key];
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	681b      	ldr	r3, [r3, #0]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZN3Cpl6System3Tls3setEPv>:

void Tls::set( void* newValue )
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
    // Get access to my FreeRTOS thread object.
    void** myArray = Cpl::System::FreeRTOS::Thread::getTlsArray();
 80047b4:	f7ff fe46 	bl	8004444 <_ZN3Cpl6System8FreeRTOS6Thread11getTlsArrayEv>
 80047b8:	60f8      	str	r0, [r7, #12]
    myArray[m_key] = newValue;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	601a      	str	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_Z41__static_initialization_and_destruction_0ii>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d102      	bne.n	80047f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80047ea:	4809      	ldr	r0, [pc, #36]	; (8004810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80047ec:	f000 f82e 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d102      	bne.n	8004806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004800:	4803      	ldr	r0, [pc, #12]	; (8004810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004802:	f000 f82e 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200026ac 	.word	0x200026ac

08004814 <_GLOBAL__sub_I__ZN3Cpl6System3TlsC2Ev>:
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
 8004818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800481c:	2001      	movs	r0, #1
 800481e:	f7ff ffd7 	bl	80047d0 <_Z41__static_initialization_and_destruction_0ii>
 8004822:	bd80      	pop	{r7, pc}

08004824 <_GLOBAL__sub_D__ZN3Cpl6System3TlsC2Ev>:
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
 8004828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800482c:	2000      	movs	r0, #0
 800482e:	f7ff ffcf 	bl	80047d0 <_Z41__static_initialization_and_destruction_0ii>
 8004832:	bd80      	pop	{r7, pc}

08004834 <Bsp_Api_initialize>:



///////////////////////////////////////////
void Bsp_Api_initialize( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004838:	f000 f86c 	bl	8004914 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 800483c:	f7fc fc8a 	bl	8001154 <SystemClock_Config>


    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004840:	f7fc fb98 	bl	8000f74 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8004844:	f7fc fd1c 	bl	8001280 <MX_USART3_UART_Init>

      // Configure the LEDs as output pins 
      //pinMode( OPTION_BSP_DEBUG_LED1_INDEX, OUTPUT );
}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}

0800484c <_ZNSt8ios_base4InitC1Ev>:
//extern "C" void __cxa_pure_virtual() { while (1); }

/*
** Method stubs to satisfy the linker -->NOTE: C++ Streams are NOT supported by this BSP
*/
std::ios_base::Init::Init()
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
{
}
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZNSt8ios_base4InitD1Ev>:

std::ios_base::Init::~Init()
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
{
}
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <Reset_Handler>:
 8004878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048b0 <LoopFillZerobss+0x12>
 800487c:	480d      	ldr	r0, [pc, #52]	; (80048b4 <LoopFillZerobss+0x16>)
 800487e:	490e      	ldr	r1, [pc, #56]	; (80048b8 <LoopFillZerobss+0x1a>)
 8004880:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <LoopFillZerobss+0x1e>)
 8004882:	2300      	movs	r3, #0
 8004884:	e002      	b.n	800488c <LoopCopyDataInit>

08004886 <CopyDataInit>:
 8004886:	58d4      	ldr	r4, [r2, r3]
 8004888:	50c4      	str	r4, [r0, r3]
 800488a:	3304      	adds	r3, #4

0800488c <LoopCopyDataInit>:
 800488c:	18c4      	adds	r4, r0, r3
 800488e:	428c      	cmp	r4, r1
 8004890:	d3f9      	bcc.n	8004886 <CopyDataInit>
 8004892:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <LoopFillZerobss+0x22>)
 8004894:	4c0b      	ldr	r4, [pc, #44]	; (80048c4 <LoopFillZerobss+0x26>)
 8004896:	2300      	movs	r3, #0
 8004898:	e001      	b.n	800489e <LoopFillZerobss>

0800489a <FillZerobss>:
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	3204      	adds	r2, #4

0800489e <LoopFillZerobss>:
 800489e:	42a2      	cmp	r2, r4
 80048a0:	d3fb      	bcc.n	800489a <FillZerobss>
 80048a2:	f7fc fce3 	bl	800126c <SystemInit>
 80048a6:	f003 fdf5 	bl	8008494 <__libc_init_array>
 80048aa:	f7fc fd43 	bl	8001334 <main>
 80048ae:	4770      	bx	lr
 80048b0:	20050000 	.word	0x20050000
 80048b4:	20000000 	.word	0x20000000
 80048b8:	2000007c 	.word	0x2000007c
 80048bc:	0800a294 	.word	0x0800a294
 80048c0:	2000007c 	.word	0x2000007c
 80048c4:	20012af0 	.word	0x20012af0

080048c8 <ADC_IRQHandler>:
 80048c8:	e7fe      	b.n	80048c8 <ADC_IRQHandler>
	...

080048cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <HAL_InitTick+0x3c>)
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <HAL_InitTick+0x40>)
{
 80048d2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048d4:	7818      	ldrb	r0, [r3, #0]
 80048d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048da:	fbb3 f3f0 	udiv	r3, r3, r0
 80048de:	6810      	ldr	r0, [r2, #0]
 80048e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80048e4:	f000 f894 	bl	8004a10 <HAL_SYSTICK_Config>
 80048e8:	4604      	mov	r4, r0
 80048ea:	b958      	cbnz	r0, 8004904 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ec:	2d0f      	cmp	r5, #15
 80048ee:	d809      	bhi.n	8004904 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048f0:	4602      	mov	r2, r0
 80048f2:	4629      	mov	r1, r5
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	f000 f84a 	bl	8004990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <HAL_InitTick+0x44>)
 80048fe:	4620      	mov	r0, r4
 8004900:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004902:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004904:	2001      	movs	r0, #1
 8004906:	e7fc      	b.n	8004902 <HAL_InitTick+0x36>
 8004908:	20000000 	.word	0x20000000
 800490c:	20000008 	.word	0x20000008
 8004910:	2000000c 	.word	0x2000000c

08004914 <HAL_Init>:
{
 8004914:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_Init+0x30>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004926:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004930:	2003      	movs	r0, #3
 8004932:	f000 f81b 	bl	800496c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004936:	200f      	movs	r0, #15
 8004938:	f7ff ffc8 	bl	80048cc <HAL_InitTick>
  HAL_MspInit();
 800493c:	f7fc fc5e 	bl	80011fc <HAL_MspInit>
}
 8004940:	2000      	movs	r0, #0
 8004942:	bd08      	pop	{r3, pc}
 8004944:	40023c00 	.word	0x40023c00

08004948 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004948:	4a03      	ldr	r2, [pc, #12]	; (8004958 <HAL_IncTick+0x10>)
 800494a:	4b04      	ldr	r3, [pc, #16]	; (800495c <HAL_IncTick+0x14>)
 800494c:	6811      	ldr	r1, [r2, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	440b      	add	r3, r1
 8004952:	6013      	str	r3, [r2, #0]
}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	200026b0 	.word	0x200026b0
 800495c:	20000008 	.word	0x20000008

08004960 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <HAL_GetTick+0x8>)
 8004962:	6818      	ldr	r0, [r3, #0]
}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	200026b0 	.word	0x200026b0

0800496c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800496c:	4907      	ldr	r1, [pc, #28]	; (800498c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800496e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004974:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004976:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004988:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004990:	4b16      	ldr	r3, [pc, #88]	; (80049ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004992:	b530      	push	{r4, r5, lr}
 8004994:	68dc      	ldr	r4, [r3, #12]
 8004996:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800499e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a0:	2d04      	cmp	r5, #4
 80049a2:	bf28      	it	cs
 80049a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ac:	bf8c      	ite	hi
 80049ae:	3c03      	subhi	r4, #3
 80049b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b2:	fa03 f505 	lsl.w	r5, r3, r5
 80049b6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049ba:	40a3      	lsls	r3, r4
 80049bc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80049c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c8:	bfac      	ite	ge
 80049ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	4a08      	ldrlt	r2, [pc, #32]	; (80049f0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	bfb8      	it	lt
 80049d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	bfaa      	itet	ge
 80049de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049e8:	bd30      	pop	{r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	e000ed14 	.word	0xe000ed14

080049f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049f4:	2800      	cmp	r0, #0
 80049f6:	db08      	blt.n	8004a0a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f8:	0942      	lsrs	r2, r0, #5
 80049fa:	2301      	movs	r3, #1
 80049fc:	f000 001f 	and.w	r0, r0, #31
 8004a00:	fa03 f000 	lsl.w	r0, r3, r0
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <HAL_NVIC_EnableIRQ+0x18>)
 8004a06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100

08004a10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a10:	3801      	subs	r0, #1
 8004a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004a16:	d20b      	bcs.n	8004a30 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	4a05      	ldr	r2, [pc, #20]	; (8004a34 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a1e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a20:	21f0      	movs	r1, #240	; 0xf0
 8004a22:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a26:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a28:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a2c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a2e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004a30:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a32:	4770      	bx	lr
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004bdc <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a40:	4a64      	ldr	r2, [pc, #400]	; (8004bd4 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a42:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a44:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004a46:	2401      	movs	r4, #1
 8004a48:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a4a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004a4e:	43ac      	bics	r4, r5
 8004a50:	f040 80ad 	bne.w	8004bae <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a54:	684d      	ldr	r5, [r1, #4]
 8004a56:	f005 0403 	and.w	r4, r5, #3
 8004a5a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a5e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a60:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a62:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a66:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a68:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a6c:	d834      	bhi.n	8004ad8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004a6e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a70:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a74:	68cf      	ldr	r7, [r1, #12]
 8004a76:	fa07 f708 	lsl.w	r7, r7, r8
 8004a7a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004a7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004a80:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a82:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a86:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004a8a:	409f      	lsls	r7, r3
 8004a8c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004a90:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004a92:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a94:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a98:	688f      	ldr	r7, [r1, #8]
 8004a9a:	fa07 f708 	lsl.w	r7, r7, r8
 8004a9e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004aa4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa6:	d119      	bne.n	8004adc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004aa8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004aac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ab0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004ab4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ab8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004abc:	f04f 0e0f 	mov.w	lr, #15
 8004ac0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004ac4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ac8:	690f      	ldr	r7, [r1, #16]
 8004aca:	fa07 f70b 	lsl.w	r7, r7, fp
 8004ace:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004ad2:	f8ca 7020 	str.w	r7, [sl, #32]
 8004ad6:	e001      	b.n	8004adc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ad8:	2c03      	cmp	r4, #3
 8004ada:	d1da      	bne.n	8004a92 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004adc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ade:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ae2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004aea:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aec:	d05f      	beq.n	8004bae <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	f04f 0a00 	mov.w	sl, #0
 8004af2:	f8cd a004 	str.w	sl, [sp, #4]
 8004af6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004afa:	4c37      	ldr	r4, [pc, #220]	; (8004bd8 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004b00:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8004b04:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8004b08:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004b0c:	9601      	str	r6, [sp, #4]
 8004b0e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b10:	f023 0603 	bic.w	r6, r3, #3
 8004b14:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004b18:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b1c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b20:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b24:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004b28:	270f      	movs	r7, #15
 8004b2a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b2e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b30:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b34:	d042      	beq.n	8004bbc <HAL_GPIO_Init+0x184>
 8004b36:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b3a:	42a0      	cmp	r0, r4
 8004b3c:	d040      	beq.n	8004bc0 <HAL_GPIO_Init+0x188>
 8004b3e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b42:	42a0      	cmp	r0, r4
 8004b44:	d03e      	beq.n	8004bc4 <HAL_GPIO_Init+0x18c>
 8004b46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b4a:	42a0      	cmp	r0, r4
 8004b4c:	d03c      	beq.n	8004bc8 <HAL_GPIO_Init+0x190>
 8004b4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b52:	42a0      	cmp	r0, r4
 8004b54:	d03a      	beq.n	8004bcc <HAL_GPIO_Init+0x194>
 8004b56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b5a:	42a0      	cmp	r0, r4
 8004b5c:	d038      	beq.n	8004bd0 <HAL_GPIO_Init+0x198>
 8004b5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b62:	42a0      	cmp	r0, r4
 8004b64:	bf0c      	ite	eq
 8004b66:	2406      	moveq	r4, #6
 8004b68:	2407      	movne	r4, #7
 8004b6a:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b6e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b70:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8004b72:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004b74:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b78:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8004b7a:	bf54      	ite	pl
 8004b7c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b7e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8004b82:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004b84:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b86:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8004b88:	bf54      	ite	pl
 8004b8a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b8c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8004b90:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004b92:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b94:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8004b96:	bf54      	ite	pl
 8004b98:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b9a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8004b9e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ba0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004ba4:	bf54      	ite	pl
 8004ba6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004ba8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004bac:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bae:	3301      	adds	r3, #1
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	f47f af47 	bne.w	8004a44 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004bb6:	b003      	add	sp, #12
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bbc:	4654      	mov	r4, sl
 8004bbe:	e7d4      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bc0:	2401      	movs	r4, #1
 8004bc2:	e7d2      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bc4:	2402      	movs	r4, #2
 8004bc6:	e7d0      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bc8:	2403      	movs	r4, #3
 8004bca:	e7ce      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bcc:	2404      	movs	r4, #4
 8004bce:	e7cc      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bd0:	2405      	movs	r4, #5
 8004bd2:	e7ca      	b.n	8004b6a <HAL_GPIO_Init+0x132>
 8004bd4:	40013c00 	.word	0x40013c00
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	40023800 	.word	0x40023800

08004be0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be0:	b10a      	cbz	r2, 8004be6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004be2:	6181      	str	r1, [r0, #24]
  }
}
 8004be4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004be6:	0409      	lsls	r1, r1, #16
 8004be8:	e7fb      	b.n	8004be2 <HAL_GPIO_WritePin+0x2>

08004bea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bea:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bec:	ea01 0203 	and.w	r2, r1, r3
 8004bf0:	ea21 0103 	bic.w	r1, r1, r3
 8004bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004bf8:	6181      	str	r1, [r0, #24]
}
 8004bfa:	4770      	bx	lr

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	4604      	mov	r4, r0
 8004c02:	b340      	cbz	r0, 8004c56 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	07dd      	lsls	r5, r3, #31
 8004c08:	d410      	bmi.n	8004c2c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	0798      	lsls	r0, r3, #30
 8004c0e:	d45e      	bmi.n	8004cce <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	071a      	lsls	r2, r3, #28
 8004c14:	f100 80a0 	bmi.w	8004d58 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	075b      	lsls	r3, r3, #29
 8004c1c:	f100 80c0 	bmi.w	8004da0 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c20:	69a0      	ldr	r0, [r4, #24]
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f040 8128 	bne.w	8004e78 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e02b      	b.n	8004c84 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2c:	4b8f      	ldr	r3, [pc, #572]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	f002 020c 	and.w	r2, r2, #12
 8004c34:	2a04      	cmp	r2, #4
 8004c36:	d007      	beq.n	8004c48 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c3e:	2a08      	cmp	r2, #8
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	0251      	lsls	r1, r2, #9
 8004c46:	d508      	bpl.n	8004c5a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	039a      	lsls	r2, r3, #14
 8004c4e:	d5dc      	bpl.n	8004c0a <HAL_RCC_OscConfig+0xe>
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d9      	bne.n	8004c0a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8004c56:	2001      	movs	r0, #1
 8004c58:	e014      	b.n	8004c84 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004c60:	d113      	bne.n	8004c8a <HAL_RCC_OscConfig+0x8e>
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c6a:	f7ff fe79 	bl	8004960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4e7f      	ldr	r6, [pc, #508]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8004c70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	6833      	ldr	r3, [r6, #0]
 8004c74:	039b      	lsls	r3, r3, #14
 8004c76:	d4c8      	bmi.n	8004c0a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c78:	f7ff fe72 	bl	8004960 <HAL_GetTick>
 8004c7c:	1b40      	subs	r0, r0, r5
 8004c7e:	2864      	cmp	r0, #100	; 0x64
 8004c80:	d9f7      	bls.n	8004c72 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8004c82:	2003      	movs	r0, #3
}
 8004c84:	b002      	add	sp, #8
 8004c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8a:	4d78      	ldr	r5, [pc, #480]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004c8c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xa8>
 8004c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c98:	602b      	str	r3, [r5, #0]
 8004c9a:	682b      	ldr	r3, [r5, #0]
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca2:	e7e2      	b.n	8004c6a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d1d9      	bne.n	8004c6a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8004cb6:	f7ff fe53 	bl	8004960 <HAL_GetTick>
 8004cba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	039f      	lsls	r7, r3, #14
 8004cc0:	d5a3      	bpl.n	8004c0a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc2:	f7ff fe4d 	bl	8004960 <HAL_GetTick>
 8004cc6:	1b80      	subs	r0, r0, r6
 8004cc8:	2864      	cmp	r0, #100	; 0x64
 8004cca:	d9f7      	bls.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004ccc:	e7d9      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cce:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	f012 0f0c 	tst.w	r2, #12
 8004cd6:	d007      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cde:	2a08      	cmp	r2, #8
 8004ce0:	d111      	bne.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	025e      	lsls	r6, r3, #9
 8004ce6:	d40e      	bmi.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce8:	4a60      	ldr	r2, [pc, #384]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	079d      	lsls	r5, r3, #30
 8004cee:	d502      	bpl.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
 8004cf0:	68e3      	ldr	r3, [r4, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d1af      	bne.n	8004c56 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	6921      	ldr	r1, [r4, #16]
 8004cfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004cfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d02:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d04:	e784      	b.n	8004c10 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d06:	68e2      	ldr	r2, [r4, #12]
 8004d08:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d0a:	b1b2      	cbz	r2, 8004d3a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d10:	f7ff fe26 	bl	8004960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4d55      	ldr	r5, [pc, #340]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8004d16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	0798      	lsls	r0, r3, #30
 8004d1c:	d507      	bpl.n	8004d2e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	682b      	ldr	r3, [r5, #0]
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	e770      	b.n	8004c10 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7ff fe17 	bl	8004960 <HAL_GetTick>
 8004d32:	1b80      	subs	r0, r0, r6
 8004d34:	2802      	cmp	r0, #2
 8004d36:	d9ef      	bls.n	8004d18 <HAL_RCC_OscConfig+0x11c>
 8004d38:	e7a3      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d3c:	f7ff fe10 	bl	8004960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d40:	4e4a      	ldr	r6, [pc, #296]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8004d42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	0799      	lsls	r1, r3, #30
 8004d48:	f57f af62 	bpl.w	8004c10 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7ff fe08 	bl	8004960 <HAL_GetTick>
 8004d50:	1b40      	subs	r0, r0, r5
 8004d52:	2802      	cmp	r0, #2
 8004d54:	d9f6      	bls.n	8004d44 <HAL_RCC_OscConfig+0x148>
 8004d56:	e794      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d58:	6962      	ldr	r2, [r4, #20]
 8004d5a:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	b182      	cbz	r2, 8004d80 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004d64:	f7ff fdfc 	bl	8004960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d68:	4e40      	ldr	r6, [pc, #256]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004d6a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004d6e:	079f      	lsls	r7, r3, #30
 8004d70:	f53f af52 	bmi.w	8004c18 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d74:	f7ff fdf4 	bl	8004960 <HAL_GetTick>
 8004d78:	1b40      	subs	r0, r0, r5
 8004d7a:	2802      	cmp	r0, #2
 8004d7c:	d9f6      	bls.n	8004d6c <HAL_RCC_OscConfig+0x170>
 8004d7e:	e780      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8004d80:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004d84:	f7ff fdec 	bl	8004960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4e38      	ldr	r6, [pc, #224]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004d8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004d8e:	0798      	lsls	r0, r3, #30
 8004d90:	f57f af42 	bpl.w	8004c18 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d94:	f7ff fde4 	bl	8004960 <HAL_GetTick>
 8004d98:	1b40      	subs	r0, r0, r5
 8004d9a:	2802      	cmp	r0, #2
 8004d9c:	d9f6      	bls.n	8004d8c <HAL_RCC_OscConfig+0x190>
 8004d9e:	e770      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004da8:	d128      	bne.n	8004dfc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004dbe:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	4d2c      	ldr	r5, [pc, #176]	; (8004e74 <HAL_RCC_OscConfig+0x278>)
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	05d9      	lsls	r1, r3, #23
 8004dc6:	d51b      	bpl.n	8004e00 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	4d28      	ldr	r5, [pc, #160]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d127      	bne.n	8004e20 <HAL_RCC_OscConfig+0x224>
 8004dd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004dd8:	f7ff fdc2 	bl	8004960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4e23      	ldr	r6, [pc, #140]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004dde:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004de6:	079b      	lsls	r3, r3, #30
 8004de8:	d539      	bpl.n	8004e5e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8004dea:	2f00      	cmp	r7, #0
 8004dec:	f43f af18 	beq.w	8004c20 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_RCC_OscConfig+0x270>)
 8004df2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfa:	e711      	b.n	8004c20 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004dfc:	2700      	movs	r7, #0
 8004dfe:	e7df      	b.n	8004dc0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e06:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004e08:	f7ff fdaa 	bl	8004960 <HAL_GetTick>
 8004e0c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	05da      	lsls	r2, r3, #23
 8004e12:	d4d9      	bmi.n	8004dc8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7ff fda4 	bl	8004960 <HAL_GetTick>
 8004e18:	1b80      	subs	r0, r0, r6
 8004e1a:	2802      	cmp	r0, #2
 8004e1c:	d9f7      	bls.n	8004e0e <HAL_RCC_OscConfig+0x212>
 8004e1e:	e730      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d104      	bne.n	8004e2e <HAL_RCC_OscConfig+0x232>
 8004e24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	672b      	str	r3, [r5, #112]	; 0x70
 8004e2c:	e7d0      	b.n	8004dd0 <HAL_RCC_OscConfig+0x1d4>
 8004e2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	672a      	str	r2, [r5, #112]	; 0x70
 8004e36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004e38:	f022 0204 	bic.w	r2, r2, #4
 8004e3c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ca      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8004e42:	f7ff fd8d 	bl	8004960 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004e4a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004e4e:	0798      	lsls	r0, r3, #30
 8004e50:	d5cb      	bpl.n	8004dea <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7ff fd85 	bl	8004960 <HAL_GetTick>
 8004e56:	1b80      	subs	r0, r0, r6
 8004e58:	4540      	cmp	r0, r8
 8004e5a:	d9f7      	bls.n	8004e4c <HAL_RCC_OscConfig+0x250>
 8004e5c:	e711      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7ff fd7f 	bl	8004960 <HAL_GetTick>
 8004e62:	1b40      	subs	r0, r0, r5
 8004e64:	4540      	cmp	r0, r8
 8004e66:	d9bd      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1e8>
 8004e68:	e70b      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e78:	4d39      	ldr	r5, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x364>)
 8004e7a:	68ab      	ldr	r3, [r5, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d03d      	beq.n	8004f00 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	4b37      	ldr	r3, [pc, #220]	; (8004f64 <HAL_RCC_OscConfig+0x368>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8c:	d12b      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8004e8e:	f7ff fd67 	bl	8004960 <HAL_GetTick>
 8004e92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	0199      	lsls	r1, r3, #6
 8004e98:	d41f      	bmi.n	8004eda <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e9a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ea2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ea6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ea8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004eac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eb6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <HAL_RCC_OscConfig+0x368>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4d29      	ldr	r5, [pc, #164]	; (8004f60 <HAL_RCC_OscConfig+0x364>)
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004ec0:	f7ff fd4e 	bl	8004960 <HAL_GetTick>
 8004ec4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	019a      	lsls	r2, r3, #6
 8004eca:	f53f aead 	bmi.w	8004c28 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ece:	f7ff fd47 	bl	8004960 <HAL_GetTick>
 8004ed2:	1b00      	subs	r0, r0, r4
 8004ed4:	2802      	cmp	r0, #2
 8004ed6:	d9f6      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x2ca>
 8004ed8:	e6d3      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eda:	f7ff fd41 	bl	8004960 <HAL_GetTick>
 8004ede:	1b80      	subs	r0, r0, r6
 8004ee0:	2802      	cmp	r0, #2
 8004ee2:	d9d7      	bls.n	8004e94 <HAL_RCC_OscConfig+0x298>
 8004ee4:	e6cd      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8004ee6:	f7ff fd3b 	bl	8004960 <HAL_GetTick>
 8004eea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	019b      	lsls	r3, r3, #6
 8004ef0:	f57f ae9a 	bpl.w	8004c28 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7ff fd34 	bl	8004960 <HAL_GetTick>
 8004ef8:	1b00      	subs	r0, r0, r4
 8004efa:	2802      	cmp	r0, #2
 8004efc:	d9f6      	bls.n	8004eec <HAL_RCC_OscConfig+0x2f0>
 8004efe:	e6c0      	b.n	8004c82 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	2801      	cmp	r0, #1
 8004f02:	f43f aebf 	beq.w	8004c84 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8004f06:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f08:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	f47f aea1 	bne.w	8004c56 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	428a      	cmp	r2, r1
 8004f1c:	f47f ae9b 	bne.w	8004c56 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f20:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f22:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004f26:	401a      	ands	r2, r3
 8004f28:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004f2c:	f47f ae93 	bne.w	8004c56 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f32:	0852      	lsrs	r2, r2, #1
 8004f34:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004f38:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004f3e:	f47f ae8a 	bne.w	8004c56 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f48:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004f4c:	f47f ae83 	bne.w	8004c56 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f56:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8004f5a:	f43f ae65 	beq.w	8004c28 <HAL_RCC_OscConfig+0x2c>
 8004f5e:	e67a      	b.n	8004c56 <HAL_RCC_OscConfig+0x5a>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	42470000 	.word	0x42470000

08004f68 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f68:	4913      	ldr	r1, [pc, #76]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004f6a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6c:	688b      	ldr	r3, [r1, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d01c      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x48>
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f7c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f80:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f84:	bf14      	ite	ne
 8004f86:	480d      	ldrne	r0, [pc, #52]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f88:	480d      	ldreq	r0, [pc, #52]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004f8e:	bf18      	it	ne
 8004f90:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f96:	fba1 0100 	umull	r0, r1, r1, r0
 8004f9a:	f7fb fe4f 	bl	8000c3c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x50>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004faa:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004fae:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb0:	4802      	ldr	r0, [pc, #8]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x54>)
 8004fb2:	e7fc      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004fb4:	4802      	ldr	r0, [pc, #8]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004fb6:	e7fa      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x46>
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	007a1200 	.word	0x007a1200
 8004fc0:	00f42400 	.word	0x00f42400

08004fc4 <HAL_RCC_ClockConfig>:
{
 8004fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	b910      	cbnz	r0, 8004fd4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004fce:	2001      	movs	r0, #1
}
 8004fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <HAL_RCC_ClockConfig+0x124>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f002 0207 	and.w	r2, r2, #7
 8004fdc:	428a      	cmp	r2, r1
 8004fde:	d328      	bcc.n	8005032 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	6822      	ldr	r2, [r4, #0]
 8004fe2:	0797      	lsls	r7, r2, #30
 8004fe4:	d42d      	bmi.n	8005042 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	07d0      	lsls	r0, r2, #31
 8004fe8:	d441      	bmi.n	800506e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fea:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCC_ClockConfig+0x124>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	f002 0207 	and.w	r2, r2, #7
 8004ff2:	42aa      	cmp	r2, r5
 8004ff4:	d866      	bhi.n	80050c4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	0751      	lsls	r1, r2, #29
 8004ffa:	d46c      	bmi.n	80050d6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffc:	0713      	lsls	r3, r2, #28
 8004ffe:	d507      	bpl.n	8005010 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005000:	4a3a      	ldr	r2, [pc, #232]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	6893      	ldr	r3, [r2, #8]
 8005006:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800500a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800500e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005010:	f7ff ffaa 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005016:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <HAL_RCC_ClockConfig+0x12c>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	40d8      	lsrs	r0, r3
 8005022:	4b34      	ldr	r3, [pc, #208]	; (80050f4 <HAL_RCC_ClockConfig+0x130>)
 8005024:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005026:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <HAL_RCC_ClockConfig+0x134>)
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	f7ff fc4f 	bl	80048cc <HAL_InitTick>
  return HAL_OK;
 800502e:	2000      	movs	r0, #0
 8005030:	e7ce      	b.n	8004fd0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	b2ca      	uxtb	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	428b      	cmp	r3, r1
 800503e:	d1c6      	bne.n	8004fce <HAL_RCC_ClockConfig+0xa>
 8005040:	e7ce      	b.n	8004fe0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005042:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005044:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	bf1e      	ittt	ne
 800504a:	6899      	ldrne	r1, [r3, #8]
 800504c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8005050:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005052:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005054:	bf42      	ittt	mi
 8005056:	6899      	ldrmi	r1, [r3, #8]
 8005058:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800505c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505e:	4923      	ldr	r1, [pc, #140]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005060:	68a0      	ldr	r0, [r4, #8]
 8005062:	688b      	ldr	r3, [r1, #8]
 8005064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005068:	4303      	orrs	r3, r0
 800506a:	608b      	str	r3, [r1, #8]
 800506c:	e7bb      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506e:	6862      	ldr	r2, [r4, #4]
 8005070:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005072:	2a01      	cmp	r2, #1
 8005074:	d11c      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507c:	d0a7      	beq.n	8004fce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4e1b      	ldr	r6, [pc, #108]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 8005080:	68b3      	ldr	r3, [r6, #8]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	4313      	orrs	r3, r2
 8005088:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800508a:	f7ff fc69 	bl	8004960 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005092:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005094:	68b3      	ldr	r3, [r6, #8]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050a0:	d0a3      	beq.n	8004fea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a2:	f7ff fc5d 	bl	8004960 <HAL_GetTick>
 80050a6:	1bc0      	subs	r0, r0, r7
 80050a8:	4540      	cmp	r0, r8
 80050aa:	d9f3      	bls.n	8005094 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80050ac:	2003      	movs	r0, #3
 80050ae:	e78f      	b.n	8004fd0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b0:	1e91      	subs	r1, r2, #2
 80050b2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	d802      	bhi.n	80050be <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80050bc:	e7de      	b.n	800507c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	f013 0f02 	tst.w	r3, #2
 80050c2:	e7db      	b.n	800507c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c4:	b2ea      	uxtb	r2, r5
 80050c6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	42ab      	cmp	r3, r5
 80050d0:	f47f af7d 	bne.w	8004fce <HAL_RCC_ClockConfig+0xa>
 80050d4:	e78f      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d6:	4905      	ldr	r1, [pc, #20]	; (80050ec <HAL_RCC_ClockConfig+0x128>)
 80050d8:	68e0      	ldr	r0, [r4, #12]
 80050da:	688b      	ldr	r3, [r1, #8]
 80050dc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80050e0:	4303      	orrs	r3, r0
 80050e2:	608b      	str	r3, [r1, #8]
 80050e4:	e78a      	b.n	8004ffc <HAL_RCC_ClockConfig+0x38>
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	08009806 	.word	0x08009806
 80050f4:	20000000 	.word	0x20000000
 80050f8:	2000000c 	.word	0x2000000c

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x14>)
 80050fe:	4a05      	ldr	r2, [pc, #20]	; (8005114 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005106:	5cd3      	ldrb	r3, [r2, r3]
 8005108:	4a03      	ldr	r2, [pc, #12]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800510a:	6810      	ldr	r0, [r2, #0]
}
 800510c:	40d8      	lsrs	r0, r3
 800510e:	4770      	bx	lr
 8005110:	40023800 	.word	0x40023800
 8005114:	08009816 	.word	0x08009816
 8005118:	20000000 	.word	0x20000000

0800511c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x14>)
 800511e:	4a05      	ldr	r2, [pc, #20]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005126:	5cd3      	ldrb	r3, [r2, r3]
 8005128:	4a03      	ldr	r2, [pc, #12]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800512a:	6810      	ldr	r0, [r2, #0]
}
 800512c:	40d8      	lsrs	r0, r3
 800512e:	4770      	bx	lr
 8005130:	40023800 	.word	0x40023800
 8005134:	08009816 	.word	0x08009816
 8005138:	20000000 	.word	0x20000000

0800513c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	f102 030c 	add.w	r3, r2, #12
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	320c      	adds	r2, #12
 800514c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005150:	6802      	ldr	r2, [r0, #0]
 8005152:	2900      	cmp	r1, #0
 8005154:	d1f2      	bne.n	800513c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	f102 0314 	add.w	r3, r2, #20
 800515a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	f102 0c14 	add.w	ip, r2, #20
 8005166:	e84c 3100 	strex	r1, r3, [ip]
 800516a:	2900      	cmp	r1, #0
 800516c:	d1f3      	bne.n	8005156 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10b      	bne.n	800518c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	f102 030c 	add.w	r3, r2, #12
 8005178:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	f102 0c0c 	add.w	ip, r2, #12
 8005184:	e84c 3100 	strex	r1, r3, [ip]
 8005188:	2900      	cmp	r1, #0
 800518a:	d1f3      	bne.n	8005174 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800518c:	2320      	movs	r3, #32
 800518e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005192:	2300      	movs	r3, #0
 8005194:	6303      	str	r3, [r0, #48]	; 0x30
}
 8005196:	4770      	bx	lr

08005198 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005198:	6803      	ldr	r3, [r0, #0]
 800519a:	68c1      	ldr	r1, [r0, #12]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80051a2:	430a      	orrs	r2, r1
{
 80051a4:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a6:	611a      	str	r2, [r3, #16]
{
 80051a8:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051aa:	6882      	ldr	r2, [r0, #8]
 80051ac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80051ae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051b0:	4302      	orrs	r2, r0
 80051b2:	6968      	ldr	r0, [r5, #20]
 80051b4:	4302      	orrs	r2, r0
 80051b6:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80051b8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80051bc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80051c2:	430a      	orrs	r2, r1
 80051c4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	69a9      	ldr	r1, [r5, #24]
 80051ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ce:	430a      	orrs	r2, r1
 80051d0:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80051d2:	4a23      	ldr	r2, [pc, #140]	; (8005260 <UART_SetConfig+0xc8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <UART_SetConfig+0x58>
 80051d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <UART_SetConfig+0x58>
 80051e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <UART_SetConfig+0x58>
 80051e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d123      	bne.n	8005238 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7ff ff94 	bl	800511c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051fc:	e9d5 4600 	ldrd	r4, r6, [r5]
 8005200:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005204:	d11b      	bne.n	800523e <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005206:	19b2      	adds	r2, r6, r6
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	415b      	adcs	r3, r3
 800520e:	f7fb fd15 	bl	8000c3c <__aeabi_uldivmod>
 8005212:	2164      	movs	r1, #100	; 0x64
 8005214:	fbb0 f5f1 	udiv	r5, r0, r1
 8005218:	fb01 0315 	mls	r3, r1, r5, r0
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	fbb3 f3f1 	udiv	r3, r3, r1
 8005224:	f003 0207 	and.w	r2, r3, #7
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800522e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005232:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005234:	60a3      	str	r3, [r4, #8]
  }
}
 8005236:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8005238:	f7ff ff60 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 800523c:	e7da      	b.n	80051f4 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800523e:	00b2      	lsls	r2, r6, #2
 8005240:	0fb3      	lsrs	r3, r6, #30
 8005242:	f7fb fcfb 	bl	8000c3c <__aeabi_uldivmod>
 8005246:	2264      	movs	r2, #100	; 0x64
 8005248:	fbb0 f1f2 	udiv	r1, r0, r2
 800524c:	fb02 0311 	mls	r3, r2, r1, r0
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	3332      	adds	r3, #50	; 0x32
 8005254:	fbb3 f3f2 	udiv	r3, r3, r2
 8005258:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800525c:	e7ea      	b.n	8005234 <UART_SetConfig+0x9c>
 800525e:	bf00      	nop
 8005260:	40011000 	.word	0x40011000

08005264 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	4604      	mov	r4, r0
 8005268:	460e      	mov	r6, r1
 800526a:	4617      	mov	r7, r2
 800526c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	6813      	ldr	r3, [r2, #0]
 8005272:	ea36 0303 	bics.w	r3, r6, r3
 8005276:	d101      	bne.n	800527c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8005278:	2000      	movs	r0, #0
 800527a:	e028      	b.n	80052ce <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800527c:	1c6b      	adds	r3, r5, #1
 800527e:	d0f7      	beq.n	8005270 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005280:	b125      	cbz	r5, 800528c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8005282:	f7ff fb6d 	bl	8004960 <HAL_GetTick>
 8005286:	1bc0      	subs	r0, r0, r7
 8005288:	4285      	cmp	r5, r0
 800528a:	d2f0      	bcs.n	800526e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800528c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	f102 030c 	add.w	r3, r2, #12
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	320c      	adds	r2, #12
 800529c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80052a0:	6821      	ldr	r1, [r4, #0]
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d1f2      	bne.n	800528c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	f101 0314 	add.w	r3, r1, #20
 80052aa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	f101 0014 	add.w	r0, r1, #20
 80052b6:	e840 3200 	strex	r2, r3, [r0]
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1f3      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80052be:	2320      	movs	r3, #32
 80052c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80052c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80052c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80052cc:	2003      	movs	r0, #3
}
 80052ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052d0 <HAL_UART_Init>:
{
 80052d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80052d2:	4604      	mov	r4, r0
 80052d4:	b340      	cbz	r0, 8005328 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052de:	b91b      	cbnz	r3, 80052e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80052e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80052e4:	f7fb ffe8 	bl	80012b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80052e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80052ea:	2324      	movs	r3, #36	; 0x24
 80052ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80052f0:	68d3      	ldr	r3, [r2, #12]
 80052f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff ff4d 	bl	8005198 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005316:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800531a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800531e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005322:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005326:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005328:	2001      	movs	r0, #1
 800532a:	e7fc      	b.n	8005326 <HAL_UART_Init+0x56>

0800532c <HAL_UART_Transmit>:
{
 800532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800532e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005330:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8005334:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8005336:	2a20      	cmp	r2, #32
{
 8005338:	4604      	mov	r4, r0
 800533a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800533c:	d149      	bne.n	80053d2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800533e:	2900      	cmp	r1, #0
 8005340:	d045      	beq.n	80053ce <HAL_UART_Transmit+0xa2>
 8005342:	2f00      	cmp	r7, #0
 8005344:	d043      	beq.n	80053ce <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8005346:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800534a:	2a01      	cmp	r2, #1
 800534c:	d041      	beq.n	80053d2 <HAL_UART_Transmit+0xa6>
 800534e:	2201      	movs	r2, #1
 8005350:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800535e:	f7ff faff 	bl	8004960 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005362:	68a1      	ldr	r1, [r4, #8]
 8005364:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8005366:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005368:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800536c:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800536e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	d103      	bne.n	800537a <HAL_UART_Transmit+0x4e>
 8005372:	6921      	ldr	r1, [r4, #16]
 8005374:	b909      	cbnz	r1, 800537a <HAL_UART_Transmit+0x4e>
 8005376:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005378:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800537a:	2100      	movs	r1, #0
 800537c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005380:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005382:	b289      	uxth	r1, r1
 8005384:	b941      	cbnz	r1, 8005398 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff ff6b 	bl	8005264 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800538e:	b960      	cbnz	r0, 80053aa <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8005390:	2320      	movs	r3, #32
 8005392:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005396:	e009      	b.n	80053ac <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005398:	2180      	movs	r1, #128	; 0x80
 800539a:	4620      	mov	r0, r4
 800539c:	e9cd 2300 	strd	r2, r3, [sp]
 80053a0:	f7ff ff60 	bl	8005264 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80053a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053a8:	b110      	cbz	r0, 80053b0 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80053aa:	2003      	movs	r0, #3
}
 80053ac:	b003      	add	sp, #12
 80053ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b0:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80053b2:	b94e      	cbnz	r6, 80053c8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b4:	f835 1b02 	ldrh.w	r1, [r5], #2
 80053b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053bc:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80053be:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80053c0:	3901      	subs	r1, #1
 80053c2:	b289      	uxth	r1, r1
 80053c4:	84e1      	strh	r1, [r4, #38]	; 0x26
 80053c6:	e7db      	b.n	8005380 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80053cc:	e7f6      	b.n	80053bc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80053ce:	2001      	movs	r0, #1
 80053d0:	e7ec      	b.n	80053ac <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80053d2:	2002      	movs	r0, #2
 80053d4:	e7ea      	b.n	80053ac <HAL_UART_Transmit+0x80>

080053d6 <HAL_UART_TxCpltCallback>:
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_RxCpltCallback>:
 80053d8:	4770      	bx	lr

080053da <HAL_UART_ErrorCallback>:
 80053da:	4770      	bx	lr

080053dc <UART_DMAAbortOnError>:
{
 80053dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80053e6:	f7ff fff8 	bl	80053da <HAL_UART_ErrorCallback>
}
 80053ea:	bd08      	pop	{r3, pc}

080053ec <HAL_UARTEx_RxEventCallback>:
}
 80053ec:	4770      	bx	lr

080053ee <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80053ee:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f0:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053f4:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80053fa:	d13e      	bne.n	800547a <UART_Receive_IT.part.0.isra.0+0x8c>
 80053fc:	6901      	ldr	r1, [r0, #16]
 80053fe:	2900      	cmp	r1, #0
 8005400:	d13e      	bne.n	8005480 <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005402:	6852      	ldr	r2, [r2, #4]
 8005404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005408:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 800540c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800540e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005410:	3b01      	subs	r3, #1
 8005412:	b29b      	uxth	r3, r3
 8005414:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005416:	2b00      	cmp	r3, #0
 8005418:	d12c      	bne.n	8005474 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800541a:	6802      	ldr	r2, [r0, #0]
 800541c:	68d1      	ldr	r1, [r2, #12]
 800541e:	f021 0120 	bic.w	r1, r1, #32
 8005422:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005424:	68d1      	ldr	r1, [r2, #12]
 8005426:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800542a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800542c:	6951      	ldr	r1, [r2, #20]
 800542e:	f021 0101 	bic.w	r1, r1, #1
 8005432:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005434:	2220      	movs	r2, #32
 8005436:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800543c:	2a01      	cmp	r2, #1
 800543e:	6802      	ldr	r2, [r0, #0]
 8005440:	d128      	bne.n	8005494 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	f102 030c 	add.w	r3, r2, #12
 8005448:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	f102 0c0c 	add.w	ip, r2, #12
 8005454:	e84c 3100 	strex	r1, r3, [ip]
 8005458:	2900      	cmp	r1, #0
 800545a:	d1f3      	bne.n	8005444 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800545c:	6813      	ldr	r3, [r2, #0]
 800545e:	06db      	lsls	r3, r3, #27
 8005460:	d505      	bpl.n	800546e <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005462:	9101      	str	r1, [sp, #4]
 8005464:	6813      	ldr	r3, [r2, #0]
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6853      	ldr	r3, [r2, #4]
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800546e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005470:	f7ff ffbc 	bl	80053ec <HAL_UARTEx_RxEventCallback>
}
 8005474:	b003      	add	sp, #12
 8005476:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800547a:	b939      	cbnz	r1, 800548c <UART_Receive_IT.part.0.isra.0+0x9e>
 800547c:	6901      	ldr	r1, [r0, #16]
 800547e:	b929      	cbnz	r1, 800548c <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8005486:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005488:	3301      	adds	r3, #1
 800548a:	e7bf      	b.n	800540c <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800548c:	6852      	ldr	r2, [r2, #4]
 800548e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005492:	e7f7      	b.n	8005484 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8005494:	f7ff ffa0 	bl	80053d8 <HAL_UART_RxCpltCallback>
 8005498:	e7ec      	b.n	8005474 <UART_Receive_IT.part.0.isra.0+0x86>
	...

0800549c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800549c:	6803      	ldr	r3, [r0, #0]
{
 800549e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054a0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054a4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80054a6:	f012 0f0f 	tst.w	r2, #15
{
 80054aa:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80054ac:	d10c      	bne.n	80054c8 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ae:	0695      	lsls	r5, r2, #26
 80054b0:	d570      	bpl.n	8005594 <HAL_UART_IRQHandler+0xf8>
 80054b2:	068d      	lsls	r5, r1, #26
 80054b4:	d56e      	bpl.n	8005594 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80054ba:	2b22      	cmp	r3, #34	; 0x22
 80054bc:	d164      	bne.n	8005588 <HAL_UART_IRQHandler+0xec>
}
 80054be:	b003      	add	sp, #12
 80054c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054c4:	f7ff bf93 	b.w	80053ee <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054c8:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054cc:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80054d0:	4305      	orrs	r5, r0
 80054d2:	d05f      	beq.n	8005594 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054d4:	07d5      	lsls	r5, r2, #31
 80054d6:	d505      	bpl.n	80054e4 <HAL_UART_IRQHandler+0x48>
 80054d8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054da:	bf42      	ittt	mi
 80054dc:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80054de:	f043 0301 	orrmi.w	r3, r3, #1
 80054e2:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e4:	0755      	lsls	r5, r2, #29
 80054e6:	d504      	bpl.n	80054f2 <HAL_UART_IRQHandler+0x56>
 80054e8:	b118      	cbz	r0, 80054f2 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ec:	f043 0302 	orr.w	r3, r3, #2
 80054f0:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f2:	0793      	lsls	r3, r2, #30
 80054f4:	d504      	bpl.n	8005500 <HAL_UART_IRQHandler+0x64>
 80054f6:	b118      	cbz	r0, 8005500 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005500:	0715      	lsls	r5, r2, #28
 8005502:	d507      	bpl.n	8005514 <HAL_UART_IRQHandler+0x78>
 8005504:	f001 0320 	and.w	r3, r1, #32
 8005508:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800550a:	bf1e      	ittt	ne
 800550c:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800550e:	f043 0308 	orrne.w	r3, r3, #8
 8005512:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d036      	beq.n	8005588 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551a:	0690      	lsls	r0, r2, #26
 800551c:	d508      	bpl.n	8005530 <HAL_UART_IRQHandler+0x94>
 800551e:	068a      	lsls	r2, r1, #26
 8005520:	d506      	bpl.n	8005530 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005522:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005526:	2b22      	cmp	r3, #34	; 0x22
 8005528:	d102      	bne.n	8005530 <HAL_UART_IRQHandler+0x94>
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff ff5f 	bl	80053ee <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005534:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800553a:	f005 0508 	and.w	r5, r5, #8
 800553e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8005540:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005542:	d023      	beq.n	800558c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8005544:	f7ff fdfa 	bl	800513c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	6953      	ldr	r3, [r2, #20]
 800554c:	065b      	lsls	r3, r3, #25
 800554e:	d518      	bpl.n	8005582 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	f102 0314 	add.w	r3, r2, #20
 8005554:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	f102 0014 	add.w	r0, r2, #20
 8005560:	e840 3100 	strex	r1, r3, [r0]
 8005564:	2900      	cmp	r1, #0
 8005566:	d1f3      	bne.n	8005550 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8005568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800556a:	b150      	cbz	r0, 8005582 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800556c:	4b72      	ldr	r3, [pc, #456]	; (8005738 <HAL_UART_IRQHandler+0x29c>)
 800556e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005570:	f000 f928 	bl	80057c4 <HAL_DMA_Abort_IT>
 8005574:	b140      	cbz	r0, 8005588 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005578:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800557a:	b003      	add	sp, #12
 800557c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005580:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005582:	4620      	mov	r0, r4
 8005584:	f7ff ff29 	bl	80053da <HAL_UART_ErrorCallback>
}
 8005588:	b003      	add	sp, #12
 800558a:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800558c:	f7ff ff25 	bl	80053da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	6425      	str	r5, [r4, #64]	; 0x40
 8005592:	e7f9      	b.n	8005588 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005596:	2801      	cmp	r0, #1
 8005598:	f040 8091 	bne.w	80056be <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800559c:	06d5      	lsls	r5, r2, #27
 800559e:	f140 808e 	bpl.w	80056be <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055a2:	06c8      	lsls	r0, r1, #27
 80055a4:	f140 808b 	bpl.w	80056be <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055a8:	2200      	movs	r2, #0
 80055aa:	9201      	str	r2, [sp, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	9201      	str	r2, [sp, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	9201      	str	r2, [sp, #4]
 80055b4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	0655      	lsls	r5, r2, #25
 80055ba:	d54c      	bpl.n	8005656 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055be:	680a      	ldr	r2, [r1, #0]
 80055c0:	6852      	ldr	r2, [r2, #4]
 80055c2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	d0df      	beq.n	8005588 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055c8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80055ca:	4290      	cmp	r0, r2
 80055cc:	d9dc      	bls.n	8005588 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80055ce:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055d0:	69ca      	ldr	r2, [r1, #28]
 80055d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80055d6:	d036      	beq.n	8005646 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	f103 020c 	add.w	r2, r3, #12
 80055dc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	f103 000c 	add.w	r0, r3, #12
 80055e8:	e840 2100 	strex	r1, r2, [r0]
 80055ec:	2900      	cmp	r1, #0
 80055ee:	d1f3      	bne.n	80055d8 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	f103 0214 	add.w	r2, r3, #20
 80055f4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	f103 0014 	add.w	r0, r3, #20
 8005600:	e840 2100 	strex	r1, r2, [r0]
 8005604:	2900      	cmp	r1, #0
 8005606:	d1f3      	bne.n	80055f0 <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	f103 0214 	add.w	r2, r3, #20
 800560c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	f103 0014 	add.w	r0, r3, #20
 8005618:	e840 2100 	strex	r1, r2, [r0]
 800561c:	2900      	cmp	r1, #0
 800561e:	d1f3      	bne.n	8005608 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 8005620:	2220      	movs	r2, #32
 8005622:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f103 020c 	add.w	r2, r3, #12
 800562c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005630:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	f103 000c 	add.w	r0, r3, #12
 8005638:	e840 2100 	strex	r1, r2, [r0]
 800563c:	2900      	cmp	r1, #0
 800563e:	d1f3      	bne.n	8005628 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005640:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005642:	f000 f87b 	bl	800573c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005646:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005648:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800564a:	1ac9      	subs	r1, r1, r3
 800564c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff fecc 	bl	80053ec <HAL_UARTEx_RxEventCallback>
 8005654:	e798      	b.n	8005588 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005656:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8005658:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800565a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800565c:	b289      	uxth	r1, r1
 800565e:	2900      	cmp	r1, #0
 8005660:	d092      	beq.n	8005588 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005662:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005664:	1a89      	subs	r1, r1, r2
 8005666:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005668:	2900      	cmp	r1, #0
 800566a:	d08d      	beq.n	8005588 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	f103 020c 	add.w	r2, r3, #12
 8005670:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005674:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	f103 050c 	add.w	r5, r3, #12
 800567c:	e845 2000 	strex	r0, r2, [r5]
 8005680:	2800      	cmp	r0, #0
 8005682:	d1f3      	bne.n	800566c <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f103 0214 	add.w	r2, r3, #20
 8005688:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	f103 0514 	add.w	r5, r3, #20
 8005694:	e845 2000 	strex	r0, r2, [r5]
 8005698:	2800      	cmp	r0, #0
 800569a:	d1f3      	bne.n	8005684 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 800569c:	2220      	movs	r2, #32
 800569e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	f103 020c 	add.w	r2, r3, #12
 80056a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	f103 050c 	add.w	r5, r3, #12
 80056b4:	e845 2000 	strex	r0, r2, [r5]
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d1f3      	bne.n	80056a4 <HAL_UART_IRQHandler+0x208>
 80056bc:	e7c7      	b.n	800564e <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056be:	0610      	lsls	r0, r2, #24
 80056c0:	d528      	bpl.n	8005714 <HAL_UART_IRQHandler+0x278>
 80056c2:	060d      	lsls	r5, r1, #24
 80056c4:	d526      	bpl.n	8005714 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056c6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80056ca:	2a21      	cmp	r2, #33	; 0x21
 80056cc:	f47f af5c 	bne.w	8005588 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056d2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80056d8:	d117      	bne.n	800570a <HAL_UART_IRQHandler+0x26e>
 80056da:	6921      	ldr	r1, [r4, #16]
 80056dc:	b9a9      	cbnz	r1, 800570a <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056de:	f832 1b02 	ldrh.w	r1, [r2], #2
 80056e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80056e6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056e8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80056ea:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80056ec:	3a01      	subs	r2, #1
 80056ee:	b292      	uxth	r2, r2
 80056f0:	84e2      	strh	r2, [r4, #38]	; 0x26
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	f47f af48 	bne.w	8005588 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fe:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e73e      	b.n	8005588 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800570a:	1c51      	adds	r1, r2, #1
 800570c:	6221      	str	r1, [r4, #32]
 800570e:	7812      	ldrb	r2, [r2, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	e7ea      	b.n	80056ea <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005714:	0650      	lsls	r0, r2, #25
 8005716:	f57f af37 	bpl.w	8005588 <HAL_UART_IRQHandler+0xec>
 800571a:	064a      	lsls	r2, r1, #25
 800571c:	f57f af34 	bpl.w	8005588 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005726:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005728:	2320      	movs	r3, #32
 800572a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff fe51 	bl	80053d6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005734:	e728      	b.n	8005588 <HAL_UART_IRQHandler+0xec>
 8005736:	bf00      	nop
 8005738:	080053dd 	.word	0x080053dd

0800573c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005740:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005742:	f7ff f90d 	bl	8004960 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005746:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800574a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 800574c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800574e:	d006      	beq.n	800575e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005754:	2300      	movs	r3, #0
 8005756:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 800575a:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800575c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	f022 0216 	bic.w	r2, r2, #22
 8005766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800576e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005770:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005772:	b90a      	cbnz	r2, 8005778 <HAL_DMA_Abort+0x3c>
 8005774:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005776:	b11a      	cbz	r2, 8005780 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f022 0208 	bic.w	r2, r2, #8
 800577e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f013 0301 	ands.w	r3, r3, #1
 8005790:	d10a      	bne.n	80057a8 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005792:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005794:	223f      	movs	r2, #63	; 0x3f
 8005796:	408a      	lsls	r2, r1
 8005798:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800579a:	2201      	movs	r2, #1
 800579c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80057a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80057a4:	4618      	mov	r0, r3
 80057a6:	e7d9      	b.n	800575c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057a8:	f7ff f8da 	bl	8004960 <HAL_GetTick>
 80057ac:	1b40      	subs	r0, r0, r5
 80057ae:	2805      	cmp	r0, #5
 80057b0:	d9ea      	bls.n	8005788 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057b2:	2320      	movs	r3, #32
 80057b4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057b6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80057b8:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80057be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80057c2:	e7cb      	b.n	800575c <HAL_DMA_Abort+0x20>

080057c4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d003      	beq.n	80057d4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80057d0:	2001      	movs	r0, #1
 80057d2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057d4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80057d6:	2305      	movs	r3, #5
 80057d8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80057dc:	6813      	ldr	r3, [r2, #0]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	4770      	bx	lr

080057e8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057ec:	f001 fe54 	bl	8007498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80057f2:	f001 fe71 	bl	80074d8 <vPortExitCritical>

	return xReturn;
}
 80057f6:	fab4 f084 	clz	r0, r4
 80057fa:	0940      	lsrs	r0, r0, #5
 80057fc:	bd10      	pop	{r4, pc}

080057fe <prvCopyDataToQueue>:
{
 80057fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005800:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005802:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005804:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8005806:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005808:	b952      	cbnz	r2, 8005820 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800580a:	6807      	ldr	r7, [r0, #0]
 800580c:	bb47      	cbnz	r7, 8005860 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800580e:	6880      	ldr	r0, [r0, #8]
 8005810:	f001 f9a0 	bl	8006b54 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005814:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005816:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005818:	3601      	adds	r6, #1
 800581a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800581c:	4628      	mov	r0, r5
 800581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005820:	b965      	cbnz	r5, 800583c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005822:	6840      	ldr	r0, [r0, #4]
 8005824:	f002 fe66 	bl	80084f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800582c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800582e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005830:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005832:	4293      	cmp	r3, r2
 8005834:	d3f0      	bcc.n	8005818 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	e7ed      	b.n	8005818 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800583c:	68c0      	ldr	r0, [r0, #12]
 800583e:	f002 fe59 	bl	80084f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005842:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005844:	68e3      	ldr	r3, [r4, #12]
 8005846:	4251      	negs	r1, r2
 8005848:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800584a:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800584c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800584e:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005850:	bf3e      	ittt	cc
 8005852:	68a3      	ldrcc	r3, [r4, #8]
 8005854:	185b      	addcc	r3, r3, r1
 8005856:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005858:	2d02      	cmp	r5, #2
 800585a:	d101      	bne.n	8005860 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800585c:	b116      	cbz	r6, 8005864 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800585e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005860:	2500      	movs	r5, #0
 8005862:	e7d9      	b.n	8005818 <prvCopyDataToQueue+0x1a>
 8005864:	4635      	mov	r5, r6
 8005866:	e7d7      	b.n	8005818 <prvCopyDataToQueue+0x1a>

08005868 <prvCopyDataFromQueue>:
{
 8005868:	4603      	mov	r3, r0
 800586a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800586c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800586e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005870:	b16a      	cbz	r2, 800588e <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005872:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005874:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005876:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005878:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800587a:	bf28      	it	cs
 800587c:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800587e:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005880:	bf28      	it	cs
 8005882:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005884:	68d9      	ldr	r1, [r3, #12]
}
 8005886:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800588a:	f002 be33 	b.w	80084f4 <memcpy>
}
 800588e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005892:	4770      	bx	lr

08005894 <prvUnlockQueue>:
{
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005898:	f001 fdfe 	bl	8007498 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800589c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80058a4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	dc14      	bgt.n	80058d4 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80058aa:	23ff      	movs	r3, #255	; 0xff
 80058ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80058b0:	f001 fe12 	bl	80074d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80058b4:	f001 fdf0 	bl	8007498 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80058b8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058bc:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80058c0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058c2:	2d00      	cmp	r5, #0
 80058c4:	dc12      	bgt.n	80058ec <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80058c6:	23ff      	movs	r3, #255	; 0xff
 80058c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80058cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80058d0:	f001 be02 	b.w	80074d8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0e7      	beq.n	80058aa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058da:	4630      	mov	r0, r6
 80058dc:	f001 f846 	bl	800696c <xTaskRemoveFromEventList>
 80058e0:	b108      	cbz	r0, 80058e6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80058e2:	f001 f8cf 	bl	8006a84 <vTaskMissedYield>
			--cTxLock;
 80058e6:	3d01      	subs	r5, #1
 80058e8:	b26d      	sxtb	r5, r5
 80058ea:	e7dc      	b.n	80058a6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e9      	beq.n	80058c6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f2:	4630      	mov	r0, r6
 80058f4:	f001 f83a 	bl	800696c <xTaskRemoveFromEventList>
 80058f8:	b108      	cbz	r0, 80058fe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80058fa:	f001 f8c3 	bl	8006a84 <vTaskMissedYield>
				--cRxLock;
 80058fe:	3d01      	subs	r5, #1
 8005900:	b26d      	sxtb	r5, r5
 8005902:	e7de      	b.n	80058c2 <prvUnlockQueue+0x2e>

08005904 <xQueueGenericReset>:
{
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005908:	4604      	mov	r4, r0
 800590a:	b940      	cbnz	r0, 800591e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	e7fe      	b.n	800591c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800591e:	f001 fdbb 	bl	8007498 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005922:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8005926:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005928:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592a:	434b      	muls	r3, r1
 800592c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800592e:	1a5b      	subs	r3, r3, r1
 8005930:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005932:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005934:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005936:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005938:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800593a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800593c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005940:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005944:	b9a5      	cbnz	r5, 8005970 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	b173      	cbz	r3, 8005968 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800594a:	f104 0010 	add.w	r0, r4, #16
 800594e:	f001 f80d 	bl	800696c <xTaskRemoveFromEventList>
 8005952:	b148      	cbz	r0, 8005968 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8005954:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005968:	f001 fdb6 	bl	80074d8 <vPortExitCritical>
}
 800596c:	2001      	movs	r0, #1
 800596e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005970:	f104 0010 	add.w	r0, r4, #16
 8005974:	f001 fc9c 	bl	80072b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800597c:	f001 fc98 	bl	80072b0 <vListInitialise>
 8005980:	e7f2      	b.n	8005968 <xQueueGenericReset+0x64>

08005982 <xQueueGenericCreateStatic>:
	{
 8005982:	b513      	push	{r0, r1, r4, lr}
 8005984:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005986:	b940      	cbnz	r0, 800599a <xQueueGenericCreateStatic+0x18>
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	e7fe      	b.n	8005998 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800599a:	b943      	cbnz	r3, 80059ae <xQueueGenericCreateStatic+0x2c>
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ae:	b14a      	cbz	r2, 80059c4 <xQueueGenericCreateStatic+0x42>
 80059b0:	b991      	cbnz	r1, 80059d8 <xQueueGenericCreateStatic+0x56>
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	e7fe      	b.n	80059c2 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059c4:	b141      	cbz	r1, 80059d8 <xQueueGenericCreateStatic+0x56>
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	e7fe      	b.n	80059d6 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059d8:	2350      	movs	r3, #80	; 0x50
 80059da:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059dc:	9b01      	ldr	r3, [sp, #4]
 80059de:	2b50      	cmp	r3, #80	; 0x50
 80059e0:	d008      	beq.n	80059f4 <xQueueGenericCreateStatic+0x72>
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	e7fe      	b.n	80059f2 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80059f4:	2900      	cmp	r1, #0
 80059f6:	bf08      	it	eq
 80059f8:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059fa:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8005a00:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a04:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	f7ff ff7a 	bl	8005904 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005a10:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005a14:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005a18:	4620      	mov	r0, r4
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <xQueueGenericSend>:
{
 8005a1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a22:	b085      	sub	sp, #20
 8005a24:	4688      	mov	r8, r1
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	b940      	cbnz	r0, 8005a40 <xQueueGenericSend+0x22>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	e7fe      	b.n	8005a3e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a40:	b951      	cbnz	r1, 8005a58 <xQueueGenericSend+0x3a>
 8005a42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a44:	b143      	cbz	r3, 8005a58 <xQueueGenericSend+0x3a>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	e7fe      	b.n	8005a56 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a58:	2f02      	cmp	r7, #2
 8005a5a:	d10b      	bne.n	8005a74 <xQueueGenericSend+0x56>
 8005a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d008      	beq.n	8005a74 <xQueueGenericSend+0x56>
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	e7fe      	b.n	8005a72 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a74:	f001 f812 	bl	8006a9c <xTaskGetSchedulerState>
 8005a78:	4606      	mov	r6, r0
 8005a7a:	b950      	cbnz	r0, 8005a92 <xQueueGenericSend+0x74>
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	b14b      	cbz	r3, 8005a94 <xQueueGenericSend+0x76>
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSend+0x72>
 8005a92:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005a94:	f04f 0900 	mov.w	r9, #0
 8005a98:	e037      	b.n	8005b0a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a9a:	9d01      	ldr	r5, [sp, #4]
 8005a9c:	b91d      	cbnz	r5, 8005aa6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8005a9e:	f001 fd1b 	bl	80074d8 <vPortExitCritical>
			return errQUEUE_FULL;
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e052      	b.n	8005b4c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8005aa6:	b916      	cbnz	r6, 8005aae <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa8:	a802      	add	r0, sp, #8
 8005aaa:	f000 ffa3 	bl	80069f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005aae:	f001 fd13 	bl	80074d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005ab2:	f000 fd7b 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ab6:	f001 fcef 	bl	8007498 <vPortEnterCritical>
 8005aba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005abe:	2bff      	cmp	r3, #255	; 0xff
 8005ac0:	bf08      	it	eq
 8005ac2:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8005ac6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005aca:	2bff      	cmp	r3, #255	; 0xff
 8005acc:	bf08      	it	eq
 8005ace:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8005ad2:	f001 fd01 	bl	80074d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad6:	a901      	add	r1, sp, #4
 8005ad8:	a802      	add	r0, sp, #8
 8005ada:	f000 ff97 	bl	8006a0c <xTaskCheckForTimeOut>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d14a      	bne.n	8005b78 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae2:	f001 fcd9 	bl	8007498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d131      	bne.n	8005b52 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005aee:	f001 fcf3 	bl	80074d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005af2:	9901      	ldr	r1, [sp, #4]
 8005af4:	f104 0010 	add.w	r0, r4, #16
 8005af8:	f000 ff00 	bl	80068fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7ff fec9 	bl	8005894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b02:	f000 fdf9 	bl	80066f8 <xTaskResumeAll>
 8005b06:	b360      	cbz	r0, 8005b62 <xQueueGenericSend+0x144>
 8005b08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005b0a:	f001 fcc5 	bl	8007498 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d301      	bcc.n	8005b1a <xQueueGenericSend+0xfc>
 8005b16:	2f02      	cmp	r7, #2
 8005b18:	d1bf      	bne.n	8005a9a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff fe6d 	bl	80057fe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b26:	b11b      	cbz	r3, 8005b30 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b2c:	f000 ff1e 	bl	800696c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8005b30:	b148      	cbz	r0, 8005b46 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8005b32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005b46:	f001 fcc7 	bl	80074d8 <vPortExitCritical>
				return pdPASS;
 8005b4a:	2001      	movs	r0, #1
}
 8005b4c:	b005      	add	sp, #20
 8005b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8005b52:	f001 fcc1 	bl	80074d8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff fe9c 	bl	8005894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b5c:	f000 fdcc 	bl	80066f8 <xTaskResumeAll>
 8005b60:	e7d2      	b.n	8005b08 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005b62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	e7c7      	b.n	8005b08 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff fe8b 	bl	8005894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7e:	f000 fdbb 	bl	80066f8 <xTaskResumeAll>
 8005b82:	e78e      	b.n	8005aa2 <xQueueGenericSend+0x84>

08005b84 <xQueueGiveMutexRecursive>:
	{
 8005b84:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8005b86:	4604      	mov	r4, r0
 8005b88:	b940      	cbnz	r0, 8005b9c <xQueueGiveMutexRecursive+0x18>
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	e7fe      	b.n	8005b9a <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b9c:	6885      	ldr	r5, [r0, #8]
 8005b9e:	f000 ff77 	bl	8006a90 <xTaskGetCurrentTaskHandle>
 8005ba2:	4285      	cmp	r5, r0
 8005ba4:	d10a      	bne.n	8005bbc <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005ba6:	68e3      	ldr	r3, [r4, #12]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bac:	b923      	cbnz	r3, 8005bb8 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff ff33 	bl	8005a1e <xQueueGenericSend>
			xReturn = pdPASS;
 8005bb8:	2001      	movs	r0, #1
		return xReturn;
 8005bba:	e000      	b.n	8005bbe <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 8005bbc:	2000      	movs	r0, #0
	}
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}

08005bc0 <xQueueCreateMutex>:
	{
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bc4:	2050      	movs	r0, #80	; 0x50
 8005bc6:	f001 fbb5 	bl	8007334 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b198      	cbz	r0, 8005bf6 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bce:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8005bd0:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8005bd2:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bd6:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bda:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bdc:	f7ff fe92 	bl	8005904 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005be0:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005be4:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005be6:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005be8:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bea:	462b      	mov	r3, r5
 8005bec:	462a      	mov	r2, r5
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff ff14 	bl	8005a1e <xQueueGenericSend>
	}
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}

08005bfa <xQueueGenericSendFromISR>:
{
 8005bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfe:	4689      	mov	r9, r1
 8005c00:	4690      	mov	r8, r2
 8005c02:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005c04:	4604      	mov	r4, r0
 8005c06:	b940      	cbnz	r0, 8005c1a <xQueueGenericSendFromISR+0x20>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	e7fe      	b.n	8005c18 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c1a:	b951      	cbnz	r1, 8005c32 <xQueueGenericSendFromISR+0x38>
 8005c1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c1e:	b143      	cbz	r3, 8005c32 <xQueueGenericSendFromISR+0x38>
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c32:	2f02      	cmp	r7, #2
 8005c34:	d10b      	bne.n	8005c4e <xQueueGenericSendFromISR+0x54>
 8005c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d008      	beq.n	8005c4e <xQueueGenericSendFromISR+0x54>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c4e:	f001 fd37 	bl	80076c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c52:	f3ef 8611 	mrs	r6, BASEPRI
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d301      	bcc.n	8005c72 <xQueueGenericSendFromISR+0x78>
 8005c6e:	2f02      	cmp	r7, #2
 8005c70:	d123      	bne.n	8005cba <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c72:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c78:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f7ff fdbd 	bl	80057fe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005c84:	1c6b      	adds	r3, r5, #1
 8005c86:	d113      	bne.n	8005cb0 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c8a:	b90b      	cbnz	r3, 8005c90 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e00b      	b.n	8005ca8 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c94:	f000 fe6a 	bl	800696c <xTaskRemoveFromEventList>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d0f7      	beq.n	8005c8c <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8005c9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ca0:	d0f4      	beq.n	8005c8c <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ca8:	f386 8811 	msr	BASEPRI, r6
}
 8005cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cb0:	3501      	adds	r5, #1
 8005cb2:	b26d      	sxtb	r5, r5
 8005cb4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8005cb8:	e7e8      	b.n	8005c8c <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e7f4      	b.n	8005ca8 <xQueueGenericSendFromISR+0xae>

08005cbe <xQueueReceive>:
{
 8005cbe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	b940      	cbnz	r0, 8005cdc <xQueueReceive+0x1e>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	e7fe      	b.n	8005cda <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cdc:	b951      	cbnz	r1, 8005cf4 <xQueueReceive+0x36>
 8005cde:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005ce0:	b143      	cbz	r3, 8005cf4 <xQueueReceive+0x36>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	e7fe      	b.n	8005cf2 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf4:	f000 fed2 	bl	8006a9c <xTaskGetSchedulerState>
 8005cf8:	4606      	mov	r6, r0
 8005cfa:	b950      	cbnz	r0, 8005d12 <xQueueReceive+0x54>
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	b14b      	cbz	r3, 8005d14 <xQueueReceive+0x56>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	e7fe      	b.n	8005d10 <xQueueReceive+0x52>
 8005d12:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005d14:	f04f 0800 	mov.w	r8, #0
 8005d18:	e03d      	b.n	8005d96 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d1a:	9d01      	ldr	r5, [sp, #4]
 8005d1c:	b91d      	cbnz	r5, 8005d26 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8005d1e:	f001 fbdb 	bl	80074d8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005d22:	2000      	movs	r0, #0
 8005d24:	e056      	b.n	8005dd4 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8005d26:	b916      	cbnz	r6, 8005d2e <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d28:	a802      	add	r0, sp, #8
 8005d2a:	f000 fe63 	bl	80069f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005d2e:	f001 fbd3 	bl	80074d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005d32:	f000 fc3b 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d36:	f001 fbaf 	bl	8007498 <vPortEnterCritical>
 8005d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d3e:	2bff      	cmp	r3, #255	; 0xff
 8005d40:	bf08      	it	eq
 8005d42:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005d46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d4a:	2bff      	cmp	r3, #255	; 0xff
 8005d4c:	bf08      	it	eq
 8005d4e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005d52:	f001 fbc1 	bl	80074d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d56:	a901      	add	r1, sp, #4
 8005d58:	a802      	add	r0, sp, #8
 8005d5a:	f000 fe57 	bl	8006a0c <xTaskCheckForTimeOut>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	d141      	bne.n	8005de6 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fd40 	bl	80057e8 <prvIsQueueEmpty>
 8005d68:	b3b8      	cbz	r0, 8005dda <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d6a:	9901      	ldr	r1, [sp, #4]
 8005d6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d70:	f000 fdc4 	bl	80068fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fd8d 	bl	8005894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d7a:	f000 fcbd 	bl	80066f8 <xTaskResumeAll>
 8005d7e:	b948      	cbnz	r0, 8005d94 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8005d80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005d96:	f001 fb7f 	bl	8007498 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d0bc      	beq.n	8005d1a <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005da0:	4639      	mov	r1, r7
 8005da2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005da4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005da6:	f7ff fd5f 	bl	8005868 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005daa:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dac:	6923      	ldr	r3, [r4, #16]
 8005dae:	b173      	cbz	r3, 8005dce <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db0:	f104 0010 	add.w	r0, r4, #16
 8005db4:	f000 fdda 	bl	800696c <xTaskRemoveFromEventList>
 8005db8:	b148      	cbz	r0, 8005dce <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8005dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005dce:	f001 fb83 	bl	80074d8 <vPortExitCritical>
				return pdPASS;
 8005dd2:	2001      	movs	r0, #1
}
 8005dd4:	b004      	add	sp, #16
 8005dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff fd5a 	bl	8005894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005de0:	f000 fc8a 	bl	80066f8 <xTaskResumeAll>
 8005de4:	e7d6      	b.n	8005d94 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff fd54 	bl	8005894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dec:	f000 fc84 	bl	80066f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fcf9 	bl	80057e8 <prvIsQueueEmpty>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d0cc      	beq.n	8005d94 <xQueueReceive+0xd6>
 8005dfa:	e792      	b.n	8005d22 <xQueueReceive+0x64>

08005dfc <xQueueSemaphoreTake>:
{
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfe:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8005e00:	4604      	mov	r4, r0
{
 8005e02:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005e04:	b940      	cbnz	r0, 8005e18 <xQueueSemaphoreTake+0x1c>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	e7fe      	b.n	8005e16 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e18:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005e1a:	b145      	cbz	r5, 8005e2e <xQueueSemaphoreTake+0x32>
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	e7fe      	b.n	8005e2c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2e:	f000 fe35 	bl	8006a9c <xTaskGetSchedulerState>
 8005e32:	4606      	mov	r6, r0
 8005e34:	b950      	cbnz	r0, 8005e4c <xQueueSemaphoreTake+0x50>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	b15b      	cbz	r3, 8005e52 <xQueueSemaphoreTake+0x56>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	e7fe      	b.n	8005e4a <xQueueSemaphoreTake+0x4e>
 8005e4c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005e4e:	2700      	movs	r7, #0
 8005e50:	e053      	b.n	8005efa <xQueueSemaphoreTake+0xfe>
 8005e52:	4605      	mov	r5, r0
 8005e54:	e7fb      	b.n	8005e4e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	b963      	cbnz	r3, 8005e74 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e5a:	b145      	cbz	r5, 8005e6e <xQueueSemaphoreTake+0x72>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	e7fe      	b.n	8005e6c <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8005e6e:	f001 fb33 	bl	80074d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005e72:	e062      	b.n	8005f3a <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8005e74:	b916      	cbnz	r6, 8005e7c <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e76:	a802      	add	r0, sp, #8
 8005e78:	f000 fdbc 	bl	80069f4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005e7c:	f001 fb2c 	bl	80074d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005e80:	f000 fb94 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e84:	f001 fb08 	bl	8007498 <vPortEnterCritical>
 8005e88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	bf08      	it	eq
 8005e90:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e98:	2bff      	cmp	r3, #255	; 0xff
 8005e9a:	bf08      	it	eq
 8005e9c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005ea0:	f001 fb1a 	bl	80074d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea4:	a901      	add	r1, sp, #4
 8005ea6:	a802      	add	r0, sp, #8
 8005ea8:	f000 fdb0 	bl	8006a0c <xTaskCheckForTimeOut>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d14d      	bne.n	8005f4c <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff fc99 	bl	80057e8 <prvIsQueueEmpty>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d042      	beq.n	8005f40 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	b93b      	cbnz	r3, 8005ece <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8005ebe:	f001 faeb 	bl	8007498 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ec2:	68a0      	ldr	r0, [r4, #8]
 8005ec4:	f000 fdfa 	bl	8006abc <xTaskPriorityInherit>
 8005ec8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005eca:	f001 fb05 	bl	80074d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ece:	9901      	ldr	r1, [sp, #4]
 8005ed0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ed4:	f000 fd12 	bl	80068fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fcdb 	bl	8005894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ede:	f000 fc0b 	bl	80066f8 <xTaskResumeAll>
 8005ee2:	b948      	cbnz	r0, 8005ef8 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8005ee4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005efa:	f001 facd 	bl	8007498 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0a8      	beq.n	8005e56 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f04:	3b01      	subs	r3, #1
 8005f06:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	b913      	cbnz	r3, 8005f12 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005f0c:	f000 fecc 	bl	8006ca8 <pvTaskIncrementMutexHeldCount>
 8005f10:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	b173      	cbz	r3, 8005f34 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f16:	f104 0010 	add.w	r0, r4, #16
 8005f1a:	f000 fd27 	bl	800696c <xTaskRemoveFromEventList>
 8005f1e:	b148      	cbz	r0, 8005f34 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8005f20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005f34:	f001 fad0 	bl	80074d8 <vPortExitCritical>
				return pdPASS;
 8005f38:	2501      	movs	r5, #1
}
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	b005      	add	sp, #20
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff fca7 	bl	8005894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f46:	f000 fbd7 	bl	80066f8 <xTaskResumeAll>
 8005f4a:	e7d5      	b.n	8005ef8 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff fca1 	bl	8005894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f52:	f000 fbd1 	bl	80066f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff fc46 	bl	80057e8 <prvIsQueueEmpty>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d0cb      	beq.n	8005ef8 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d0ea      	beq.n	8005f3a <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8005f64:	f001 fa98 	bl	8007498 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f6a:	b119      	cbz	r1, 8005f74 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f74:	68a0      	ldr	r0, [r4, #8]
 8005f76:	f000 fe3f 	bl	8006bf8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8005f7a:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8005f7c:	f001 faac 	bl	80074d8 <vPortExitCritical>
 8005f80:	e7db      	b.n	8005f3a <xQueueSemaphoreTake+0x13e>

08005f82 <xQueueTakeMutexRecursive>:
	{
 8005f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8005f84:	4604      	mov	r4, r0
 8005f86:	b940      	cbnz	r0, 8005f9a <xQueueTakeMutexRecursive+0x18>
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	e7fe      	b.n	8005f98 <xQueueTakeMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005f9a:	6885      	ldr	r5, [r0, #8]
 8005f9c:	9101      	str	r1, [sp, #4]
 8005f9e:	f000 fd77 	bl	8006a90 <xTaskGetCurrentTaskHandle>
 8005fa2:	4285      	cmp	r5, r0
 8005fa4:	9901      	ldr	r1, [sp, #4]
 8005fa6:	d105      	bne.n	8005fb4 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8005fae:	2001      	movs	r0, #1
	}
 8005fb0:	b003      	add	sp, #12
 8005fb2:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff ff21 	bl	8005dfc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0f8      	beq.n	8005fb0 <xQueueTakeMutexRecursive+0x2e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8005fc4:	e7f4      	b.n	8005fb0 <xQueueTakeMutexRecursive+0x2e>
	...

08005fc8 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <vQueueAddToRegistry+0x18>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	b112      	cbz	r2, 8005fd4 <vQueueAddToRegistry+0xc>
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	b92a      	cbnz	r2, 8005fde <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd2:	2201      	movs	r2, #1
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fdc:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fde:	4770      	bx	lr
 8005fe0:	200026b4 	.word	0x200026b4

08005fe4 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005fe4:	4b08      	ldr	r3, [pc, #32]	; (8006008 <vQueueUnregisterQueue+0x24>)
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	4290      	cmp	r0, r2
 8005fea:	d00a      	beq.n	8006002 <vQueueUnregisterQueue+0x1e>
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	4290      	cmp	r0, r2
 8005ff0:	d106      	bne.n	8006000 <vQueueUnregisterQueue+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff2:	2201      	movs	r2, #1
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ffe:	6059      	str	r1, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006000:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006002:	2200      	movs	r2, #0
 8006004:	e7f6      	b.n	8005ff4 <vQueueUnregisterQueue+0x10>
 8006006:	bf00      	nop
 8006008:	200026b4 	.word	0x200026b4

0800600c <vQueueDelete>:
{
 800600c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800600e:	b940      	cbnz	r0, 8006022 <vQueueDelete+0x16>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	e7fe      	b.n	8006020 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8006022:	f7ff ffdf 	bl	8005fe4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006026:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800602a:	b91b      	cbnz	r3, 8006034 <vQueueDelete+0x28>
}
 800602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8006030:	f001 b9ae 	b.w	8007390 <vPortFree>
}
 8006034:	bd10      	pop	{r4, pc}

08006036 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006036:	b570      	push	{r4, r5, r6, lr}
 8006038:	4604      	mov	r4, r0
 800603a:	460d      	mov	r5, r1
 800603c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800603e:	f001 fa2b 	bl	8007498 <vPortEnterCritical>
 8006042:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006046:	2bff      	cmp	r3, #255	; 0xff
 8006048:	bf04      	itt	eq
 800604a:	2300      	moveq	r3, #0
 800604c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8006050:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006054:	2bff      	cmp	r3, #255	; 0xff
 8006056:	bf04      	itt	eq
 8006058:	2300      	moveq	r3, #0
 800605a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800605e:	f001 fa3b 	bl	80074d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006064:	b92b      	cbnz	r3, 8006072 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006066:	4632      	mov	r2, r6
 8006068:	4629      	mov	r1, r5
 800606a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800606e:	f000 fc5f 	bl	8006930 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006072:	4620      	mov	r0, r4
	}
 8006074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006078:	f7ff bc0c 	b.w	8005894 <prvUnlockQueue>

0800607c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006082:	f001 fa09 	bl	8007498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8006088:	4e30      	ldr	r6, [pc, #192]	; (800614c <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4f30      	ldr	r7, [pc, #192]	; (8006150 <prvAddNewTaskToReadyList+0xd4>)
 800608e:	3201      	adds	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006092:	6835      	ldr	r5, [r6, #0]
 8006094:	2d00      	cmp	r5, #0
 8006096:	d14b      	bne.n	8006130 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006098:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d11f      	bne.n	80060e0 <prvAddNewTaskToReadyList+0x64>
 80060a0:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060a2:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a4:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060a6:	f001 f903 	bl	80072b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060aa:	2d07      	cmp	r5, #7
 80060ac:	f108 0814 	add.w	r8, r8, #20
 80060b0:	d1f7      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060b2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8006178 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80060b6:	4d27      	ldr	r5, [pc, #156]	; (8006154 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80060b8:	4640      	mov	r0, r8
 80060ba:	f001 f8f9 	bl	80072b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060be:	4628      	mov	r0, r5
 80060c0:	f001 f8f6 	bl	80072b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c4:	4824      	ldr	r0, [pc, #144]	; (8006158 <prvAddNewTaskToReadyList+0xdc>)
 80060c6:	f001 f8f3 	bl	80072b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060ca:	4824      	ldr	r0, [pc, #144]	; (800615c <prvAddNewTaskToReadyList+0xe0>)
 80060cc:	f001 f8f0 	bl	80072b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060d0:	4823      	ldr	r0, [pc, #140]	; (8006160 <prvAddNewTaskToReadyList+0xe4>)
 80060d2:	f001 f8ed 	bl	80072b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <prvAddNewTaskToReadyList+0xe8>)
 80060d8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060dc:	4b22      	ldr	r3, [pc, #136]	; (8006168 <prvAddNewTaskToReadyList+0xec>)
 80060de:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80060e2:	4923      	ldr	r1, [pc, #140]	; (8006170 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 80060e4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060e6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80060e8:	3301      	adds	r3, #1
 80060ea:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060ee:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80060f0:	2301      	movs	r3, #1
 80060f2:	4093      	lsls	r3, r2
 80060f4:	4303      	orrs	r3, r0
 80060f6:	2014      	movs	r0, #20
 80060f8:	600b      	str	r3, [r1, #0]
 80060fa:	fb00 7002 	mla	r0, r0, r2, r7
 80060fe:	1d21      	adds	r1, r4, #4
 8006100:	f001 f8e4 	bl	80072cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006104:	f001 f9e8 	bl	80074d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006108:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <prvAddNewTaskToReadyList+0xf8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	b173      	cbz	r3, 800612c <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800610e:	6833      	ldr	r3, [r6, #0]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006114:	429a      	cmp	r2, r3
 8006116:	d209      	bcs.n	800612c <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8006118:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800611c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006120:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	f3bf 8f6f 	isb	sy
}
 800612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <prvAddNewTaskToReadyList+0xf8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1d3      	bne.n	80060e0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800613e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006140:	bf98      	it	ls
 8006142:	6034      	strls	r4, [r6, #0]
 8006144:	e7cc      	b.n	80060e0 <prvAddNewTaskToReadyList+0x64>
 8006146:	bf00      	nop
 8006148:	2000275c 	.word	0x2000275c
 800614c:	200026c4 	.word	0x200026c4
 8006150:	200026d0 	.word	0x200026d0
 8006154:	20002784 	.word	0x20002784
 8006158:	200027a4 	.word	0x200027a4
 800615c:	200027d0 	.word	0x200027d0
 8006160:	200027bc 	.word	0x200027bc
 8006164:	200026c8 	.word	0x200026c8
 8006168:	200026cc 	.word	0x200026cc
 800616c:	20002768 	.word	0x20002768
 8006170:	2000276c 	.word	0x2000276c
 8006174:	200027b8 	.word	0x200027b8
 8006178:	20002770 	.word	0x20002770

0800617c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800617e:	4b1a      	ldr	r3, [pc, #104]	; (80061e8 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006180:	4e1a      	ldr	r6, [pc, #104]	; (80061ec <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8006182:	681d      	ldr	r5, [r3, #0]
{
 8006184:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006186:	6830      	ldr	r0, [r6, #0]
 8006188:	3004      	adds	r0, #4
{
 800618a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618c:	f001 f8c1 	bl	8007312 <uxListRemove>
 8006190:	b940      	cbnz	r0, 80061a4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006192:	6832      	ldr	r2, [r6, #0]
 8006194:	4916      	ldr	r1, [pc, #88]	; (80061f0 <prvAddCurrentTaskToDelayedList+0x74>)
 8006196:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006198:	680b      	ldr	r3, [r1, #0]
 800619a:	2201      	movs	r2, #1
 800619c:	4082      	lsls	r2, r0
 800619e:	ea23 0302 	bic.w	r3, r3, r2
 80061a2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061a4:	1c63      	adds	r3, r4, #1
 80061a6:	d107      	bne.n	80061b8 <prvAddCurrentTaskToDelayedList+0x3c>
 80061a8:	b137      	cbz	r7, 80061b8 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061aa:	6831      	ldr	r1, [r6, #0]
 80061ac:	4811      	ldr	r0, [pc, #68]	; (80061f4 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b2:	3104      	adds	r1, #4
 80061b4:	f001 b88a 	b.w	80072cc <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	192c      	adds	r4, r5, r4
 80061bc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061be:	d307      	bcc.n	80061d0 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	6831      	ldr	r1, [r6, #0]
}
 80061c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ca:	3104      	adds	r1, #4
 80061cc:	f001 b88a 	b.w	80072e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <prvAddCurrentTaskToDelayedList+0x80>)
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	6831      	ldr	r1, [r6, #0]
 80061d6:	3104      	adds	r1, #4
 80061d8:	f001 f884 	bl	80072e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <prvAddCurrentTaskToDelayedList+0x84>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80061e2:	bf88      	it	hi
 80061e4:	601c      	strhi	r4, [r3, #0]
}
 80061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e8:	200027e4 	.word	0x200027e4
 80061ec:	200026c4 	.word	0x200026c4
 80061f0:	2000276c 	.word	0x2000276c
 80061f4:	200027bc 	.word	0x200027bc
 80061f8:	200026cc 	.word	0x200026cc
 80061fc:	200026c8 	.word	0x200026c8
 8006200:	20002798 	.word	0x20002798

08006204 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006204:	4a06      	ldr	r2, [pc, #24]	; (8006220 <prvResetNextTaskUnblockTime+0x1c>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <prvResetNextTaskUnblockTime+0x20>)
 800620c:	b919      	cbnz	r1, 8006216 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800620e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800621a:	68d2      	ldr	r2, [r2, #12]
 800621c:	6852      	ldr	r2, [r2, #4]
 800621e:	e7f8      	b.n	8006212 <prvResetNextTaskUnblockTime+0xe>
 8006220:	200026c8 	.word	0x200026c8
 8006224:	20002798 	.word	0x20002798

08006228 <prvDeleteTCB>:
	{
 8006228:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800622a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 800622e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006230:	b93b      	cbnz	r3, 8006242 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8006232:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006234:	f001 f8ac 	bl	8007390 <vPortFree>
				vPortFree( pxTCB );
 8006238:	4620      	mov	r0, r4
	}
 800623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800623e:	f001 b8a7 	b.w	8007390 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006242:	2b01      	cmp	r3, #1
 8006244:	d0f9      	beq.n	800623a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006246:	2b02      	cmp	r3, #2
 8006248:	d008      	beq.n	800625c <prvDeleteTCB+0x34>
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	e7fe      	b.n	800625a <prvDeleteTCB+0x32>
	}
 800625c:	bd10      	pop	{r4, pc}
	...

08006260 <prvIdleTask>:
{
 8006260:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006262:	4c13      	ldr	r4, [pc, #76]	; (80062b0 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006264:	4f13      	ldr	r7, [pc, #76]	; (80062b4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006266:	4d14      	ldr	r5, [pc, #80]	; (80062b8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	b973      	cbnz	r3, 800628a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800626c:	4b13      	ldr	r3, [pc, #76]	; (80062bc <prvIdleTask+0x5c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d9f8      	bls.n	8006266 <prvIdleTask+0x6>
				taskYIELD();
 8006274:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	e7ed      	b.n	8006266 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800628a:	f001 f905 	bl	8007498 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006292:	1d30      	adds	r0, r6, #4
 8006294:	f001 f83d 	bl	8007312 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	3b01      	subs	r3, #1
 800629c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80062a4:	f001 f918 	bl	80074d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80062a8:	4630      	mov	r0, r6
 80062aa:	f7ff ffbd 	bl	8006228 <prvDeleteTCB>
 80062ae:	e7db      	b.n	8006268 <prvIdleTask+0x8>
 80062b0:	20002760 	.word	0x20002760
 80062b4:	200027d0 	.word	0x200027d0
 80062b8:	2000275c 	.word	0x2000275c
 80062bc:	200026d0 	.word	0x200026d0

080062c0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062c8:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80062cc:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80062ce:	4606      	mov	r6, r0
 80062d0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80062d4:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80062d6:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d8:	f002 f934 	bl	8008544 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062de:	f1a9 0904 	sub.w	r9, r9, #4
 80062e2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062e4:	f029 0907 	bic.w	r9, r9, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80062e8:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	if( pcName != NULL )
 80062ec:	b3b5      	cbz	r5, 800635c <prvInitialiseNewTask.constprop.0+0x9c>
 80062ee:	1e6b      	subs	r3, r5, #1
 80062f0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80062f4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062f6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80062fa:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80062fe:	b108      	cbz	r0, 8006304 <prvInitialiseNewTask.constprop.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006300:	42ab      	cmp	r3, r5
 8006302:	d1f8      	bne.n	80062f6 <prvInitialiseNewTask.constprop.0+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006304:	2300      	movs	r3, #0
 8006306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630a:	9d08      	ldr	r5, [sp, #32]
 800630c:	2d06      	cmp	r5, #6
 800630e:	bf28      	it	cs
 8006310:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006312:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006316:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006318:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800631a:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800631c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006320:	f000 ffd1 	bl	80072c6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006324:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006328:	f104 0018 	add.w	r0, r4, #24
 800632c:	f000 ffcb 	bl	80072c6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006330:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006334:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006336:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006338:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800633a:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800633e:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006342:	463a      	mov	r2, r7
 8006344:	4631      	mov	r1, r6
 8006346:	4648      	mov	r0, r9
 8006348:	f001 f86c 	bl	8007424 <pxPortInitialiseStack>
 800634c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800634e:	f1b8 0f00 	cmp.w	r8, #0
 8006352:	d001      	beq.n	8006358 <prvInitialiseNewTask.constprop.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006354:	f8c8 4000 	str.w	r4, [r8]
}
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800635c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8006360:	e7d3      	b.n	800630a <prvInitialiseNewTask.constprop.0+0x4a>

08006362 <xTaskCreateStatic>:
	{
 8006362:	b570      	push	{r4, r5, r6, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800636a:	b945      	cbnz	r5, 800637e <xTaskCreateStatic+0x1c>
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	e7fe      	b.n	800637c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800637e:	b944      	cbnz	r4, 8006392 <xTaskCreateStatic+0x30>
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	e7fe      	b.n	8006390 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006392:	2664      	movs	r6, #100	; 0x64
 8006394:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006396:	9e05      	ldr	r6, [sp, #20]
 8006398:	2e64      	cmp	r6, #100	; 0x64
 800639a:	d008      	beq.n	80063ae <xTaskCreateStatic+0x4c>
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	e7fe      	b.n	80063ac <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063ae:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063b0:	2502      	movs	r5, #2
 80063b2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063b6:	ad04      	add	r5, sp, #16
 80063b8:	9501      	str	r5, [sp, #4]
 80063ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80063bc:	9402      	str	r4, [sp, #8]
 80063be:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063c0:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063c2:	f7ff ff7d 	bl	80062c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7ff fe58 	bl	800607c <prvAddNewTaskToReadyList>
	}
 80063cc:	9804      	ldr	r0, [sp, #16]
 80063ce:	b006      	add	sp, #24
 80063d0:	bd70      	pop	{r4, r5, r6, pc}

080063d2 <xTaskCreate>:
	{
 80063d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063d6:	4607      	mov	r7, r0
 80063d8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063da:	0090      	lsls	r0, r2, #2
	{
 80063dc:	4688      	mov	r8, r1
 80063de:	4616      	mov	r6, r2
 80063e0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e2:	f000 ffa7 	bl	8007334 <pvPortMalloc>
			if( pxStack != NULL )
 80063e6:	4605      	mov	r5, r0
 80063e8:	b1e8      	cbz	r0, 8006426 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063ea:	2064      	movs	r0, #100	; 0x64
 80063ec:	f000 ffa2 	bl	8007334 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80063f0:	4604      	mov	r4, r0
 80063f2:	b1a8      	cbz	r0, 8006420 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80063fc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006402:	9002      	str	r0, [sp, #8]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4632      	mov	r2, r6
 8006408:	464b      	mov	r3, r9
 800640a:	4641      	mov	r1, r8
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff ff57 	bl	80062c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006412:	4620      	mov	r0, r4
 8006414:	f7ff fe32 	bl	800607c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006418:	2001      	movs	r0, #1
	}
 800641a:	b005      	add	sp, #20
 800641c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006420:	4628      	mov	r0, r5
 8006422:	f000 ffb5 	bl	8007390 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800642a:	e7f6      	b.n	800641a <xTaskCreate+0x48>

0800642c <vTaskDelete>:
	{
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	4d2a      	ldr	r5, [pc, #168]	; (80064dc <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 8006432:	f001 f831 	bl	8007498 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006436:	b904      	cbnz	r4, 800643a <vTaskDelete+0xe>
 8006438:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800643a:	1d26      	adds	r6, r4, #4
 800643c:	4630      	mov	r0, r6
 800643e:	f000 ff68 	bl	8007312 <uxListRemove>
 8006442:	b960      	cbnz	r0, 800645e <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006444:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006446:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <vTaskDelete+0xb4>)
 8006448:	2014      	movs	r0, #20
 800644a:	4378      	muls	r0, r7
 800644c:	581b      	ldr	r3, [r3, r0]
 800644e:	b933      	cbnz	r3, 800645e <vTaskDelete+0x32>
 8006450:	4924      	ldr	r1, [pc, #144]	; (80064e4 <vTaskDelete+0xb8>)
 8006452:	2201      	movs	r2, #1
 8006454:	680b      	ldr	r3, [r1, #0]
 8006456:	40ba      	lsls	r2, r7
 8006458:	ea23 0302 	bic.w	r3, r3, r2
 800645c:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800645e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006460:	b11b      	cbz	r3, 800646a <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006462:	f104 0018 	add.w	r0, r4, #24
 8006466:	f000 ff54 	bl	8007312 <uxListRemove>
			uxTaskNumber++;
 800646a:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <vTaskDelete+0xbc>)
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	42a3      	cmp	r3, r4
 8006476:	d11b      	bne.n	80064b0 <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006478:	481c      	ldr	r0, [pc, #112]	; (80064ec <vTaskDelete+0xc0>)
 800647a:	4631      	mov	r1, r6
 800647c:	f000 ff26 	bl	80072cc <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <vTaskDelete+0xc4>)
 8006482:	6813      	ldr	r3, [r2, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8006488:	f001 f826 	bl	80074d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800648c:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <vTaskDelete+0xc8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	b313      	cbz	r3, 80064d8 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	42a3      	cmp	r3, r4
 8006496:	d11f      	bne.n	80064d8 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8006498:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <vTaskDelete+0xcc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	b193      	cbz	r3, 80064c4 <vTaskDelete+0x98>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	e7fe      	b.n	80064ae <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <vTaskDelete+0xd0>)
 80064b2:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80064b4:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 80064b6:	3b01      	subs	r3, #1
 80064b8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80064ba:	f7ff feb5 	bl	8006228 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80064be:	f7ff fea1 	bl	8006204 <prvResetNextTaskUnblockTime>
 80064c2:	e7e1      	b.n	8006488 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 80064c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
	}
 80064d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064da:	bf00      	nop
 80064dc:	200026c4 	.word	0x200026c4
 80064e0:	200026d0 	.word	0x200026d0
 80064e4:	2000276c 	.word	0x2000276c
 80064e8:	20002768 	.word	0x20002768
 80064ec:	200027d0 	.word	0x200027d0
 80064f0:	20002760 	.word	0x20002760
 80064f4:	200027b8 	.word	0x200027b8
 80064f8:	20002764 	.word	0x20002764
 80064fc:	2000275c 	.word	0x2000275c

08006500 <vTaskStartScheduler>:
{
 8006500:	b510      	push	{r4, lr}
 8006502:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006504:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006506:	aa07      	add	r2, sp, #28
 8006508:	a906      	add	r1, sp, #24
 800650a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800650c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006510:	f7fa fd18 	bl	8000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	9b06      	ldr	r3, [sp, #24]
 800651a:	9a07      	ldr	r2, [sp, #28]
 800651c:	4916      	ldr	r1, [pc, #88]	; (8006578 <vTaskStartScheduler+0x78>)
 800651e:	4817      	ldr	r0, [pc, #92]	; (800657c <vTaskStartScheduler+0x7c>)
 8006520:	e9cd 4300 	strd	r4, r3, [sp]
 8006524:	4623      	mov	r3, r4
 8006526:	f7ff ff1c 	bl	8006362 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800652a:	b318      	cbz	r0, 8006574 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 800652c:	f000 fd26 	bl	8006f7c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006530:	2801      	cmp	r0, #1
 8006532:	d114      	bne.n	800655e <vTaskStartScheduler+0x5e>
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <vTaskStartScheduler+0x80>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <vTaskStartScheduler+0x84>)
 800654e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <vTaskStartScheduler+0x88>)
 8006552:	601c      	str	r4, [r3, #0]
}
 8006554:	b008      	add	sp, #32
 8006556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800655a:	f001 b82b 	b.w	80075b4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800655e:	3001      	adds	r0, #1
 8006560:	d108      	bne.n	8006574 <vTaskStartScheduler+0x74>
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	e7fe      	b.n	8006572 <vTaskStartScheduler+0x72>
}
 8006574:	b008      	add	sp, #32
 8006576:	bd10      	pop	{r4, pc}
 8006578:	0800a024 	.word	0x0800a024
 800657c:	08006261 	.word	0x08006261
 8006580:	20002798 	.word	0x20002798
 8006584:	200027b8 	.word	0x200027b8
 8006588:	200027e4 	.word	0x200027e4

0800658c <vTaskEndScheduler>:
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <vTaskEndScheduler+0x1c>)
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 80065a2:	f000 bf67 	b.w	8007474 <vPortEndScheduler>
 80065a6:	bf00      	nop
 80065a8:	200027b8 	.word	0x200027b8

080065ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80065ac:	4a02      	ldr	r2, [pc, #8]	; (80065b8 <vTaskSuspendAll+0xc>)
 80065ae:	6813      	ldr	r3, [r2, #0]
 80065b0:	3301      	adds	r3, #1
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20002764 	.word	0x20002764

080065bc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80065bc:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <xTaskGetTickCount+0x8>)
 80065be:	6818      	ldr	r0, [r3, #0]
}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	200027e4 	.word	0x200027e4

080065c8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c8:	4b40      	ldr	r3, [pc, #256]	; (80066cc <xTaskIncrementTick+0x104>)
 80065ca:	681b      	ldr	r3, [r3, #0]
{
 80065cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d174      	bne.n	80066be <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d4:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <xTaskIncrementTick+0x108>)
 80065d6:	681d      	ldr	r5, [r3, #0]
 80065d8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80065da:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065dc:	b9bd      	cbnz	r5, 800660e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <xTaskIncrementTick+0x10c>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	b142      	cbz	r2, 80065f8 <xTaskIncrementTick+0x30>
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	e7fe      	b.n	80065f6 <xTaskIncrementTick+0x2e>
 80065f8:	4a37      	ldr	r2, [pc, #220]	; (80066d8 <xTaskIncrementTick+0x110>)
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	6810      	ldr	r0, [r2, #0]
 80065fe:	6018      	str	r0, [r3, #0]
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	4a36      	ldr	r2, [pc, #216]	; (80066dc <xTaskIncrementTick+0x114>)
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	f7ff fdfb 	bl	8006204 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800660e:	4e34      	ldr	r6, [pc, #208]	; (80066e0 <xTaskIncrementTick+0x118>)
 8006610:	4f34      	ldr	r7, [pc, #208]	; (80066e4 <xTaskIncrementTick+0x11c>)
 8006612:	6833      	ldr	r3, [r6, #0]
 8006614:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80066f0 <xTaskIncrementTick+0x128>
 8006618:	429d      	cmp	r5, r3
BaseType_t xSwitchRequired = pdFALSE;
 800661a:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800661e:	d211      	bcs.n	8006644 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006620:	f8d8 3000 	ldr.w	r3, [r8]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	2214      	movs	r2, #20
 8006628:	4353      	muls	r3, r2
 800662a:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800662c:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800662e:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <xTaskIncrementTick+0x120>)
 8006630:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8006632:	bf28      	it	cs
 8006634:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf18      	it	ne
 800663a:	2401      	movne	r4, #1
}
 800663c:	4620      	mov	r0, r4
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006644:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80066d4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006648:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80066f4 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800664c:	f8da 3000 	ldr.w	r3, [sl]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	b91b      	cbnz	r3, 800665c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006654:	f04f 33ff 	mov.w	r3, #4294967295
 8006658:	6033      	str	r3, [r6, #0]
					break;
 800665a:	e7e1      	b.n	8006620 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	f8da 3000 	ldr.w	r3, [sl]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006666:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800666a:	4295      	cmp	r5, r2
 800666c:	d201      	bcs.n	8006672 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800666e:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006670:	e7d6      	b.n	8006620 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006672:	f10b 0104 	add.w	r1, fp, #4
 8006676:	4608      	mov	r0, r1
 8006678:	9101      	str	r1, [sp, #4]
 800667a:	f000 fe4a 	bl	8007312 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800667e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8006682:	9901      	ldr	r1, [sp, #4]
 8006684:	b122      	cbz	r2, 8006690 <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006686:	f10b 0018 	add.w	r0, fp, #24
 800668a:	f000 fe42 	bl	8007312 <uxListRemove>
 800668e:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8006690:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8006694:	f8d9 3000 	ldr.w	r3, [r9]
 8006698:	2201      	movs	r2, #1
 800669a:	4082      	lsls	r2, r0
 800669c:	431a      	orrs	r2, r3
 800669e:	f8c9 2000 	str.w	r2, [r9]
 80066a2:	2214      	movs	r2, #20
 80066a4:	fb02 7000 	mla	r0, r2, r0, r7
 80066a8:	f000 fe10 	bl	80072cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ac:	f8d8 1000 	ldr.w	r1, [r8]
 80066b0:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80066b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80066b6:	429a      	cmp	r2, r3
 80066b8:	bf28      	it	cs
 80066ba:	2401      	movcs	r4, #1
 80066bc:	e7c6      	b.n	800664c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80066be:	4a0b      	ldr	r2, [pc, #44]	; (80066ec <xTaskIncrementTick+0x124>)
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80066c6:	2400      	movs	r4, #0
	return xSwitchRequired;
 80066c8:	e7b8      	b.n	800663c <xTaskIncrementTick+0x74>
 80066ca:	bf00      	nop
 80066cc:	20002764 	.word	0x20002764
 80066d0:	200027e4 	.word	0x200027e4
 80066d4:	200026c8 	.word	0x200026c8
 80066d8:	200026cc 	.word	0x200026cc
 80066dc:	2000279c 	.word	0x2000279c
 80066e0:	20002798 	.word	0x20002798
 80066e4:	200026d0 	.word	0x200026d0
 80066e8:	200027e8 	.word	0x200027e8
 80066ec:	200027a0 	.word	0x200027a0
 80066f0:	200026c4 	.word	0x200026c4
 80066f4:	2000276c 	.word	0x2000276c

080066f8 <xTaskResumeAll>:
{
 80066f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80066fc:	4c32      	ldr	r4, [pc, #200]	; (80067c8 <xTaskResumeAll+0xd0>)
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	b943      	cbnz	r3, 8006714 <xTaskResumeAll+0x1c>
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	e7fe      	b.n	8006712 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006714:	f000 fec0 	bl	8007498 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	6824      	ldr	r4, [r4, #0]
 8006720:	b134      	cbz	r4, 8006730 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8006722:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006724:	f000 fed8 	bl	80074d8 <vPortExitCritical>
}
 8006728:	4620      	mov	r0, r4
 800672a:	b002      	add	sp, #8
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006730:	4b26      	ldr	r3, [pc, #152]	; (80067cc <xTaskResumeAll+0xd4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f4      	beq.n	8006722 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006738:	4d25      	ldr	r5, [pc, #148]	; (80067d0 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 800673a:	4e26      	ldr	r6, [pc, #152]	; (80067d4 <xTaskResumeAll+0xdc>)
 800673c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80067e4 <xTaskResumeAll+0xec>
 8006740:	e01f      	b.n	8006782 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006742:	68eb      	ldr	r3, [r5, #12]
 8006744:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006746:	f104 0018 	add.w	r0, r4, #24
 800674a:	f000 fde2 	bl	8007312 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800674e:	1d21      	adds	r1, r4, #4
 8006750:	4608      	mov	r0, r1
 8006752:	9101      	str	r1, [sp, #4]
 8006754:	f000 fddd 	bl	8007312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800675a:	6830      	ldr	r0, [r6, #0]
 800675c:	9901      	ldr	r1, [sp, #4]
 800675e:	2701      	movs	r7, #1
 8006760:	fa07 f302 	lsl.w	r3, r7, r2
 8006764:	4303      	orrs	r3, r0
 8006766:	2014      	movs	r0, #20
 8006768:	fb00 8002 	mla	r0, r0, r2, r8
 800676c:	6033      	str	r3, [r6, #0]
 800676e:	f000 fdad 	bl	80072cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006772:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <xTaskResumeAll+0xe0>)
 8006774:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	429a      	cmp	r2, r3
 800677c:	d301      	bcc.n	8006782 <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 800677e:	4b17      	ldr	r3, [pc, #92]	; (80067dc <xTaskResumeAll+0xe4>)
 8006780:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006782:	682b      	ldr	r3, [r5, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1dc      	bne.n	8006742 <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 8006788:	b10c      	cbz	r4, 800678e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 800678a:	f7ff fd3b 	bl	8006204 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800678e:	4d14      	ldr	r5, [pc, #80]	; (80067e0 <xTaskResumeAll+0xe8>)
 8006790:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006792:	b144      	cbz	r4, 80067a6 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 8006794:	4e11      	ldr	r6, [pc, #68]	; (80067dc <xTaskResumeAll+0xe4>)
 8006796:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006798:	f7ff ff16 	bl	80065c8 <xTaskIncrementTick>
 800679c:	b100      	cbz	r0, 80067a0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800679e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067a0:	3c01      	subs	r4, #1
 80067a2:	d1f9      	bne.n	8006798 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 80067a4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <xTaskResumeAll+0xe4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0b9      	beq.n	8006722 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80067ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80067c2:	2401      	movs	r4, #1
 80067c4:	e7ae      	b.n	8006724 <xTaskResumeAll+0x2c>
 80067c6:	bf00      	nop
 80067c8:	20002764 	.word	0x20002764
 80067cc:	2000275c 	.word	0x2000275c
 80067d0:	200027a4 	.word	0x200027a4
 80067d4:	2000276c 	.word	0x2000276c
 80067d8:	200026c4 	.word	0x200026c4
 80067dc:	200027e8 	.word	0x200027e8
 80067e0:	200027a0 	.word	0x200027a0
 80067e4:	200026d0 	.word	0x200026d0

080067e8 <vTaskDelay>:
	{
 80067e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067ea:	b950      	cbnz	r0, 8006802 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80067ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
	}
 8006800:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <vTaskDelay+0x44>)
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	b141      	cbz	r1, 800681a <vTaskDelay+0x32>
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	e7fe      	b.n	8006818 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800681a:	f7ff fec7 	bl	80065ac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800681e:	f7ff fcad 	bl	800617c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006822:	f7ff ff69 	bl	80066f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006826:	2800      	cmp	r0, #0
 8006828:	d0e0      	beq.n	80067ec <vTaskDelay+0x4>
 800682a:	e7e9      	b.n	8006800 <vTaskDelay+0x18>
 800682c:	20002764 	.word	0x20002764

08006830 <vTaskSetApplicationTaskTag>:
	{
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	460d      	mov	r5, r1
		if( xTask == NULL )
 8006834:	4604      	mov	r4, r0
 8006836:	b908      	cbnz	r0, 800683c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <vTaskSetApplicationTaskTag+0x1c>)
 800683a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800683c:	f000 fe2c 	bl	8007498 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8006840:	65a5      	str	r5, [r4, #88]	; 0x58
	}
 8006842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8006846:	f000 be47 	b.w	80074d8 <vPortExitCritical>
 800684a:	bf00      	nop
 800684c:	200026c4 	.word	0x200026c4

08006850 <xTaskGetApplicationTaskTag>:
	{
 8006850:	b513      	push	{r0, r1, r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 8006852:	4604      	mov	r4, r0
 8006854:	b908      	cbnz	r0, 800685a <xTaskGetApplicationTaskTag+0xa>
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <xTaskGetApplicationTaskTag+0x1c>)
 8006858:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800685a:	f000 fe1d 	bl	8007498 <vPortEnterCritical>
			xReturn = pxTCB->pxTaskTag;
 800685e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006860:	9001      	str	r0, [sp, #4]
		taskEXIT_CRITICAL();
 8006862:	f000 fe39 	bl	80074d8 <vPortExitCritical>
	}
 8006866:	9801      	ldr	r0, [sp, #4]
 8006868:	b002      	add	sp, #8
 800686a:	bd10      	pop	{r4, pc}
 800686c:	200026c4 	.word	0x200026c4

08006870 <vTaskSwitchContext>:
{
 8006870:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006872:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <vTaskSwitchContext+0x78>)
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <vTaskSwitchContext+0x7c>)
 8006878:	b112      	cbz	r2, 8006880 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8006880:	4c1b      	ldr	r4, [pc, #108]	; (80068f0 <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 8006882:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	429a      	cmp	r2, r3
 800688e:	d804      	bhi.n	800689a <vTaskSwitchContext+0x2a>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	3134      	adds	r1, #52	; 0x34
 8006896:	f7fa fb53 	bl	8000f40 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <vTaskSwitchContext+0x84>)
 800689c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800689e:	fab2 f282 	clz	r2, r2
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	f1c2 021f 	rsb	r2, r2, #31
 80068a8:	2314      	movs	r3, #20
 80068aa:	4913      	ldr	r1, [pc, #76]	; (80068f8 <vTaskSwitchContext+0x88>)
 80068ac:	4353      	muls	r3, r2
 80068ae:	18c8      	adds	r0, r1, r3
 80068b0:	58cd      	ldr	r5, [r1, r3]
 80068b2:	b945      	cbnz	r5, 80068c6 <vTaskSwitchContext+0x56>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	e7fe      	b.n	80068c4 <vTaskSwitchContext+0x54>
 80068c6:	6845      	ldr	r5, [r0, #4]
 80068c8:	3308      	adds	r3, #8
 80068ca:	686d      	ldr	r5, [r5, #4]
 80068cc:	6045      	str	r5, [r0, #4]
 80068ce:	440b      	add	r3, r1
 80068d0:	429d      	cmp	r5, r3
 80068d2:	bf04      	itt	eq
 80068d4:	686b      	ldreq	r3, [r5, #4]
 80068d6:	6043      	streq	r3, [r0, #4]
 80068d8:	2314      	movs	r3, #20
 80068da:	fb03 1202 	mla	r2, r3, r2, r1
 80068de:	6853      	ldr	r3, [r2, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	6023      	str	r3, [r4, #0]
}
 80068e4:	e7cb      	b.n	800687e <vTaskSwitchContext+0xe>
 80068e6:	bf00      	nop
 80068e8:	20002764 	.word	0x20002764
 80068ec:	200027e8 	.word	0x200027e8
 80068f0:	200026c4 	.word	0x200026c4
 80068f4:	2000276c 	.word	0x2000276c
 80068f8:	200026d0 	.word	0x200026d0

080068fc <vTaskPlaceOnEventList>:
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006900:	b940      	cbnz	r0, 8006914 <vTaskPlaceOnEventList+0x18>
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	e7fe      	b.n	8006912 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <vTaskPlaceOnEventList+0x30>)
 8006916:	6819      	ldr	r1, [r3, #0]
 8006918:	3118      	adds	r1, #24
 800691a:	f000 fce3 	bl	80072e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800691e:	4620      	mov	r0, r4
 8006920:	2101      	movs	r1, #1
}
 8006922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006926:	f7ff bc29 	b.w	800617c <prvAddCurrentTaskToDelayedList>
 800692a:	bf00      	nop
 800692c:	200026c4 	.word	0x200026c4

08006930 <vTaskPlaceOnEventListRestricted>:
	{
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	460d      	mov	r5, r1
 8006934:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006936:	b940      	cbnz	r0, 800694a <vTaskPlaceOnEventListRestricted+0x1a>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	e7fe      	b.n	8006948 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <vTaskPlaceOnEventListRestricted+0x38>)
 800694c:	6819      	ldr	r1, [r3, #0]
 800694e:	3118      	adds	r1, #24
 8006950:	f000 fcbc 	bl	80072cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006954:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006956:	4621      	mov	r1, r4
 8006958:	bf0c      	ite	eq
 800695a:	4628      	moveq	r0, r5
 800695c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8006960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006964:	f7ff bc0a 	b.w	800617c <prvAddCurrentTaskToDelayedList>
 8006968:	200026c4 	.word	0x200026c4

0800696c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800696c:	68c3      	ldr	r3, [r0, #12]
{
 800696e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006970:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006972:	b944      	cbnz	r4, 8006986 <xTaskRemoveFromEventList+0x1a>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	e7fe      	b.n	8006984 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006986:	f104 0118 	add.w	r1, r4, #24
 800698a:	4608      	mov	r0, r1
 800698c:	9101      	str	r1, [sp, #4]
 800698e:	f000 fcc0 	bl	8007312 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <xTaskRemoveFromEventList+0x70>)
 8006994:	9901      	ldr	r1, [sp, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	b9f3      	cbnz	r3, 80069d8 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800699a:	1d21      	adds	r1, r4, #4
 800699c:	4608      	mov	r0, r1
 800699e:	9101      	str	r1, [sp, #4]
 80069a0:	f000 fcb7 	bl	8007312 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069a4:	480e      	ldr	r0, [pc, #56]	; (80069e0 <xTaskRemoveFromEventList+0x74>)
 80069a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069a8:	6805      	ldr	r5, [r0, #0]
 80069aa:	9901      	ldr	r1, [sp, #4]
 80069ac:	2301      	movs	r3, #1
 80069ae:	4093      	lsls	r3, r2
 80069b0:	432b      	orrs	r3, r5
 80069b2:	6003      	str	r3, [r0, #0]
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <xTaskRemoveFromEventList+0x78>)
 80069b6:	2014      	movs	r0, #20
 80069b8:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069bc:	f000 fc86 	bl	80072cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <xTaskRemoveFromEventList+0x7c>)
 80069c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80069ca:	bf85      	ittet	hi
 80069cc:	4b07      	ldrhi	r3, [pc, #28]	; (80069ec <xTaskRemoveFromEventList+0x80>)
 80069ce:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80069d0:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80069d2:	6018      	strhi	r0, [r3, #0]
}
 80069d4:	b003      	add	sp, #12
 80069d6:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069d8:	4805      	ldr	r0, [pc, #20]	; (80069f0 <xTaskRemoveFromEventList+0x84>)
 80069da:	e7ef      	b.n	80069bc <xTaskRemoveFromEventList+0x50>
 80069dc:	20002764 	.word	0x20002764
 80069e0:	2000276c 	.word	0x2000276c
 80069e4:	200026d0 	.word	0x200026d0
 80069e8:	200026c4 	.word	0x200026c4
 80069ec:	200027e8 	.word	0x200027e8
 80069f0:	200027a4 	.word	0x200027a4

080069f4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069f4:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <vTaskInternalSetTimeOutState+0x10>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <vTaskInternalSetTimeOutState+0x14>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6043      	str	r3, [r0, #4]
}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	2000279c 	.word	0x2000279c
 8006a08:	200027e4 	.word	0x200027e4

08006a0c <xTaskCheckForTimeOut>:
{
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006a10:	4605      	mov	r5, r0
 8006a12:	b940      	cbnz	r0, 8006a26 <xTaskCheckForTimeOut+0x1a>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	e7fe      	b.n	8006a24 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006a26:	b941      	cbnz	r1, 8006a3a <xTaskCheckForTimeOut+0x2e>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	e7fe      	b.n	8006a38 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006a3a:	f000 fd2d 	bl	8007498 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <xTaskCheckForTimeOut+0x70>)
 8006a40:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	d010      	beq.n	8006a6a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a48:	480d      	ldr	r0, [pc, #52]	; (8006a80 <xTaskCheckForTimeOut+0x74>)
 8006a4a:	682e      	ldr	r6, [r5, #0]
 8006a4c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a4e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a50:	4286      	cmp	r6, r0
 8006a52:	d001      	beq.n	8006a58 <xTaskCheckForTimeOut+0x4c>
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d90f      	bls.n	8006a78 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a58:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	d90a      	bls.n	8006a74 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006a5e:	1a5b      	subs	r3, r3, r1
 8006a60:	4413      	add	r3, r2
 8006a62:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff ffc5 	bl	80069f4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006a6a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006a6c:	f000 fd34 	bl	80074d8 <vPortExitCritical>
}
 8006a70:	4620      	mov	r0, r4
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006a78:	2401      	movs	r4, #1
 8006a7a:	e7f7      	b.n	8006a6c <xTaskCheckForTimeOut+0x60>
 8006a7c:	200027e4 	.word	0x200027e4
 8006a80:	2000279c 	.word	0x2000279c

08006a84 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <vTaskMissedYield+0x8>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
}
 8006a8a:	4770      	bx	lr
 8006a8c:	200027e8 	.word	0x200027e8

08006a90 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006a90:	4b01      	ldr	r3, [pc, #4]	; (8006a98 <xTaskGetCurrentTaskHandle+0x8>)
 8006a92:	6818      	ldr	r0, [r3, #0]
	}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	200026c4 	.word	0x200026c4

08006a9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <xTaskGetSchedulerState+0x18>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	b133      	cbz	r3, 8006ab0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <xTaskGetSchedulerState+0x1c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bf0c      	ite	eq
 8006aaa:	2002      	moveq	r0, #2
 8006aac:	2000      	movne	r0, #0
 8006aae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ab0:	2001      	movs	r0, #1
	}
 8006ab2:	4770      	bx	lr
 8006ab4:	200027b8 	.word	0x200027b8
 8006ab8:	20002764 	.word	0x20002764

08006abc <xTaskPriorityInherit>:
	{
 8006abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006abe:	4604      	mov	r4, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d031      	beq.n	8006b28 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ac4:	4d20      	ldr	r5, [pc, #128]	; (8006b48 <xTaskPriorityInherit+0x8c>)
 8006ac6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006ac8:	682a      	ldr	r2, [r5, #0]
 8006aca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d233      	bcs.n	8006b38 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ad0:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ad2:	4e1e      	ldr	r6, [pc, #120]	; (8006b4c <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ad4:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad6:	bfa1      	itttt	ge
 8006ad8:	682a      	ldrge	r2, [r5, #0]
 8006ada:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8006adc:	f1c2 0207 	rsbge	r2, r2, #7
 8006ae0:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ae2:	2214      	movs	r2, #20
 8006ae4:	fb02 6303 	mla	r3, r2, r3, r6
 8006ae8:	6942      	ldr	r2, [r0, #20]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d11e      	bne.n	8006b2c <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aee:	1d01      	adds	r1, r0, #4
 8006af0:	4608      	mov	r0, r1
 8006af2:	9101      	str	r1, [sp, #4]
 8006af4:	f000 fc0d 	bl	8007312 <uxListRemove>
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <xTaskPriorityInherit+0x94>)
 8006afa:	9901      	ldr	r1, [sp, #4]
 8006afc:	b930      	cbnz	r0, 8006b0c <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006afe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	2001      	movs	r0, #1
 8006b04:	40b8      	lsls	r0, r7
 8006b06:	ea22 0200 	bic.w	r2, r2, r0
 8006b0a:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b0c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b0e:	681d      	ldr	r5, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b12:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b14:	2401      	movs	r4, #1
 8006b16:	fa04 f002 	lsl.w	r0, r4, r2
 8006b1a:	4328      	orrs	r0, r5
 8006b1c:	6018      	str	r0, [r3, #0]
 8006b1e:	2014      	movs	r0, #20
 8006b20:	fb00 6002 	mla	r0, r0, r2, r6
 8006b24:	f000 fbd2 	bl	80072cc <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8006b28:	4620      	mov	r0, r4
		return xReturn;
 8006b2a:	e003      	b.n	8006b34 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8006b32:	2001      	movs	r0, #1
	}
 8006b34:	b003      	add	sp, #12
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8006b3c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006b3e:	42a0      	cmp	r0, r4
 8006b40:	bf2c      	ite	cs
 8006b42:	2000      	movcs	r0, #0
 8006b44:	2001      	movcc	r0, #1
 8006b46:	e7f5      	b.n	8006b34 <xTaskPriorityInherit+0x78>
 8006b48:	200026c4 	.word	0x200026c4
 8006b4c:	200026d0 	.word	0x200026d0
 8006b50:	2000276c 	.word	0x2000276c

08006b54 <xTaskPriorityDisinherit>:
	{
 8006b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006b56:	4604      	mov	r4, r0
 8006b58:	b910      	cbnz	r0, 8006b60 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8006b5a:	2000      	movs	r0, #0
	}
 8006b5c:	b003      	add	sp, #12
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006b60:	4b22      	ldr	r3, [pc, #136]	; (8006bec <xTaskPriorityDisinherit+0x98>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4283      	cmp	r3, r0
 8006b66:	d008      	beq.n	8006b7a <xTaskPriorityDisinherit+0x26>
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	e7fe      	b.n	8006b78 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	b943      	cbnz	r3, 8006b90 <xTaskPriorityDisinherit+0x3c>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	e7fe      	b.n	8006b8e <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006b92:	6d02      	ldr	r2, [r0, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8006b94:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b96:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006b98:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b9a:	d0de      	beq.n	8006b5a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1dc      	bne.n	8006b5a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ba0:	1d01      	adds	r1, r0, #4
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	9101      	str	r1, [sp, #4]
 8006ba6:	f000 fbb4 	bl	8007312 <uxListRemove>
 8006baa:	4f11      	ldr	r7, [pc, #68]	; (8006bf0 <xTaskPriorityDisinherit+0x9c>)
 8006bac:	4a11      	ldr	r2, [pc, #68]	; (8006bf4 <xTaskPriorityDisinherit+0xa0>)
 8006bae:	9901      	ldr	r1, [sp, #4]
 8006bb0:	b950      	cbnz	r0, 8006bc8 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006bb4:	2614      	movs	r6, #20
 8006bb6:	4346      	muls	r6, r0
 8006bb8:	59bb      	ldr	r3, [r7, r6]
 8006bba:	b92b      	cbnz	r3, 8006bc8 <xTaskPriorityDisinherit+0x74>
 8006bbc:	6813      	ldr	r3, [r2, #0]
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	4085      	lsls	r5, r0
 8006bc2:	ea23 0305 	bic.w	r3, r3, r5
 8006bc6:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006bca:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bcc:	f1c3 0007 	rsb	r0, r3, #7
 8006bd0:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bd2:	6810      	ldr	r0, [r2, #0]
 8006bd4:	2401      	movs	r4, #1
 8006bd6:	fa04 f503 	lsl.w	r5, r4, r3
 8006bda:	4305      	orrs	r5, r0
 8006bdc:	2014      	movs	r0, #20
 8006bde:	fb00 7003 	mla	r0, r0, r3, r7
 8006be2:	6015      	str	r5, [r2, #0]
 8006be4:	f000 fb72 	bl	80072cc <vListInsertEnd>
					xReturn = pdTRUE;
 8006be8:	4620      	mov	r0, r4
		return xReturn;
 8006bea:	e7b7      	b.n	8006b5c <xTaskPriorityDisinherit+0x8>
 8006bec:	200026c4 	.word	0x200026c4
 8006bf0:	200026d0 	.word	0x200026d0
 8006bf4:	2000276c 	.word	0x2000276c

08006bf8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8006bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d04b      	beq.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c00:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006c02:	b942      	cbnz	r2, 8006c16 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	e7fe      	b.n	8006c14 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	bf38      	it	cc
 8006c1c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006c20:	428b      	cmp	r3, r1
 8006c22:	d039      	beq.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c24:	2a01      	cmp	r2, #1
 8006c26:	d137      	bne.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	4282      	cmp	r2, r0
 8006c2e:	d108      	bne.n	8006c42 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	e7fe      	b.n	8006c40 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c42:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c44:	4d16      	ldr	r5, [pc, #88]	; (8006ca0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 8006c46:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c48:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c4a:	f04f 0214 	mov.w	r2, #20
 8006c4e:	fb02 5303 	mla	r3, r2, r3, r5
 8006c52:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	bfa4      	itt	ge
 8006c56:	f1c1 0107 	rsbge	r1, r1, #7
 8006c5a:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d11b      	bne.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c60:	1d01      	adds	r1, r0, #4
 8006c62:	4608      	mov	r0, r1
 8006c64:	9101      	str	r1, [sp, #4]
 8006c66:	f000 fb54 	bl	8007312 <uxListRemove>
 8006c6a:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8006c6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ca4 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8006c6e:	9901      	ldr	r1, [sp, #4]
 8006c70:	b928      	cbnz	r0, 8006c7e <vTaskPriorityDisinheritAfterTimeout+0x86>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	2001      	movs	r0, #1
 8006c76:	40a0      	lsls	r0, r4
 8006c78:	ea23 0300 	bic.w	r3, r3, r0
 8006c7c:	6013      	str	r3, [r2, #0]
						prvAddTaskToReadyList( pxTCB );
 8006c7e:	6810      	ldr	r0, [r2, #0]
 8006c80:	2301      	movs	r3, #1
 8006c82:	40a3      	lsls	r3, r4
 8006c84:	4303      	orrs	r3, r0
 8006c86:	2014      	movs	r0, #20
 8006c88:	fb00 5004 	mla	r0, r0, r4, r5
 8006c8c:	6013      	str	r3, [r2, #0]
	}
 8006c8e:	b003      	add	sp, #12
 8006c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8006c94:	f000 bb1a 	b.w	80072cc <vListInsertEnd>
	}
 8006c98:	b003      	add	sp, #12
 8006c9a:	bd30      	pop	{r4, r5, pc}
 8006c9c:	200026c4 	.word	0x200026c4
 8006ca0:	200026d0 	.word	0x200026d0
 8006ca4:	2000276c 	.word	0x2000276c

08006ca8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <pvTaskIncrementMutexHeldCount+0x14>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	b11a      	cbz	r2, 8006cb6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8006cb6:	6818      	ldr	r0, [r3, #0]
	}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	200026c4 	.word	0x200026c4

08006cc0 <ulTaskNotifyTake>:
	{
 8006cc0:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006cc2:	4c17      	ldr	r4, [pc, #92]	; (8006d20 <ulTaskNotifyTake+0x60>)
	{
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8006cc8:	f000 fbe6 	bl	8007498 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	b98b      	cbnz	r3, 8006cf6 <ulTaskNotifyTake+0x36>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8006cda:	b165      	cbz	r5, 8006cf6 <ulTaskNotifyTake+0x36>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f7ff fa4d 	bl	800617c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8006ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8006cf6:	f000 fbef 	bl	80074d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006cfa:	f000 fbcd 	bl	8007498 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8006d02:	b11d      	cbz	r5, 8006d0c <ulTaskNotifyTake+0x4c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006d04:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8006d06:	b14e      	cbz	r6, 8006d1c <ulTaskNotifyTake+0x5c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006d08:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006d0a:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8006d14:	f000 fbe0 	bl	80074d8 <vPortExitCritical>
	}
 8006d18:	4628      	mov	r0, r5
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006d1c:	1e6a      	subs	r2, r5, #1
 8006d1e:	e7f4      	b.n	8006d0a <ulTaskNotifyTake+0x4a>
 8006d20:	200026c4 	.word	0x200026c4

08006d24 <xTaskGenericNotify>:
	{
 8006d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d26:	460e      	mov	r6, r1
 8006d28:	4617      	mov	r7, r2
 8006d2a:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	b940      	cbnz	r0, 8006d42 <xTaskGenericNotify+0x1e>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	e7fe      	b.n	8006d40 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8006d42:	f000 fba9 	bl	8007498 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8006d46:	b10d      	cbz	r5, 8006d4c <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006d48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d4a:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d4c:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d50:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006d52:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006d54:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			switch( eAction )
 8006d58:	2f04      	cmp	r7, #4
 8006d5a:	d817      	bhi.n	8006d8c <xTaskGenericNotify+0x68>
 8006d5c:	e8df f007 	tbb	[pc, r7]
 8006d60:	0507030a 	.word	0x0507030a
 8006d64:	12          	.byte	0x12
 8006d65:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8006d66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006d68:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8006d6a:	65e6      	str	r6, [r4, #92]	; 0x5c
 8006d6c:	e002      	b.n	8006d74 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8006d6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d70:	3301      	adds	r3, #1
 8006d72:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d74:	2d01      	cmp	r5, #1
 8006d76:	d015      	beq.n	8006da4 <xTaskGenericNotify+0x80>
	{
 8006d78:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8006d7a:	f000 fbad 	bl	80074d8 <vPortExitCritical>
	}
 8006d7e:	4628      	mov	r0, r5
 8006d80:	b003      	add	sp, #12
 8006d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006d84:	2d02      	cmp	r5, #2
 8006d86:	d1f0      	bne.n	8006d6a <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8006d88:	2500      	movs	r5, #0
 8006d8a:	e7f6      	b.n	8006d7a <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006d8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d8e:	3301      	adds	r3, #1
 8006d90:	d0f0      	beq.n	8006d74 <xTaskGenericNotify+0x50>
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	e7fe      	b.n	8006da2 <xTaskGenericNotify+0x7e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006da4:	1d21      	adds	r1, r4, #4
 8006da6:	4608      	mov	r0, r1
 8006da8:	9101      	str	r1, [sp, #4]
 8006daa:	f000 fab2 	bl	8007312 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006dae:	4815      	ldr	r0, [pc, #84]	; (8006e04 <xTaskGenericNotify+0xe0>)
 8006db0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006db2:	6806      	ldr	r6, [r0, #0]
 8006db4:	9901      	ldr	r1, [sp, #4]
 8006db6:	fa05 f302 	lsl.w	r3, r5, r2
 8006dba:	4333      	orrs	r3, r6
 8006dbc:	6003      	str	r3, [r0, #0]
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <xTaskGenericNotify+0xe4>)
 8006dc0:	2014      	movs	r0, #20
 8006dc2:	fb00 3002 	mla	r0, r0, r2, r3
 8006dc6:	f000 fa81 	bl	80072cc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dcc:	b143      	cbz	r3, 8006de0 <xTaskGenericNotify+0xbc>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	e7fe      	b.n	8006dde <xTaskGenericNotify+0xba>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <xTaskGenericNotify+0xe8>)
 8006de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d9c5      	bls.n	8006d78 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8006dec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	e7bb      	b.n	8006d7a <xTaskGenericNotify+0x56>
 8006e02:	bf00      	nop
 8006e04:	2000276c 	.word	0x2000276c
 8006e08:	200026d0 	.word	0x200026d0
 8006e0c:	200026c4 	.word	0x200026c4

08006e10 <vTaskNotifyGiveFromISR>:
	{
 8006e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e12:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 8006e14:	4604      	mov	r4, r0
 8006e16:	b940      	cbnz	r0, 8006e2a <vTaskNotifyGiveFromISR+0x1a>
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	e7fe      	b.n	8006e28 <vTaskNotifyGiveFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e2a:	f000 fc49 	bl	80076c0 <vPortValidateInterruptPriority>
	__asm volatile
 8006e2e:	f3ef 8711 	mrs	r7, BASEPRI
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e42:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006e44:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e48:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
 8006e4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006e4e:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8006e50:	f103 0301 	add.w	r3, r3, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006e54:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 8006e56:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006e58:	d12a      	bne.n	8006eb0 <vTaskNotifyGiveFromISR+0xa0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e5c:	b143      	cbz	r3, 8006e70 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	e7fe      	b.n	8006e6e <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <vTaskNotifyGiveFromISR+0xb0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	bb03      	cbnz	r3, 8006eb8 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e76:	1d21      	adds	r1, r4, #4
 8006e78:	4608      	mov	r0, r1
 8006e7a:	9101      	str	r1, [sp, #4]
 8006e7c:	f000 fa49 	bl	8007312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e80:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <vTaskNotifyGiveFromISR+0xb4>)
 8006e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e84:	6810      	ldr	r0, [r2, #0]
 8006e86:	9901      	ldr	r1, [sp, #4]
 8006e88:	409d      	lsls	r5, r3
 8006e8a:	4305      	orrs	r5, r0
 8006e8c:	6015      	str	r5, [r2, #0]
 8006e8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ec8 <vTaskNotifyGiveFromISR+0xb8>)
 8006e90:	2014      	movs	r0, #20
 8006e92:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006e96:	f000 fa19 	bl	80072cc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <vTaskNotifyGiveFromISR+0xbc>)
 8006e9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d904      	bls.n	8006eb0 <vTaskNotifyGiveFromISR+0xa0>
					if( pxHigherPriorityTaskWoken != NULL )
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	b106      	cbz	r6, 8006eac <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006eaa:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <vTaskNotifyGiveFromISR+0xc0>)
 8006eae:	6013      	str	r3, [r2, #0]
	__asm volatile
 8006eb0:	f387 8811 	msr	BASEPRI, r7
	}
 8006eb4:	b003      	add	sp, #12
 8006eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006eb8:	4806      	ldr	r0, [pc, #24]	; (8006ed4 <vTaskNotifyGiveFromISR+0xc4>)
 8006eba:	f104 0118 	add.w	r1, r4, #24
 8006ebe:	e7ea      	b.n	8006e96 <vTaskNotifyGiveFromISR+0x86>
 8006ec0:	20002764 	.word	0x20002764
 8006ec4:	2000276c 	.word	0x2000276c
 8006ec8:	200026d0 	.word	0x200026d0
 8006ecc:	200026c4 	.word	0x200026c4
 8006ed0:	200027e8 	.word	0x200027e8
 8006ed4:	200027a4 	.word	0x200027a4

08006ed8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006eda:	4c11      	ldr	r4, [pc, #68]	; (8006f20 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8006edc:	f000 fadc 	bl	8007498 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	b9bd      	cbnz	r5, 8006f14 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ee4:	4f0f      	ldr	r7, [pc, #60]	; (8006f24 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8006ee6:	4e10      	ldr	r6, [pc, #64]	; (8006f28 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f000 f9e1 	bl	80072b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 f9de 	bl	80072b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ef4:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8006ef8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006efc:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8006efe:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f00:	2020      	movs	r0, #32
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <prvCheckForValidListAndQueue+0x60>)
 8006f04:	9500      	str	r5, [sp, #0]
 8006f06:	f7fe fd3c 	bl	8005982 <xQueueGenericCreateStatic>
 8006f0a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f0c:	b110      	cbz	r0, 8006f14 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f0e:	490b      	ldr	r1, [pc, #44]	; (8006f3c <prvCheckForValidListAndQueue+0x64>)
 8006f10:	f7ff f85a 	bl	8005fc8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8006f14:	b003      	add	sp, #12
 8006f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006f1a:	f000 badd 	b.w	80074d8 <vPortExitCritical>
 8006f1e:	bf00      	nop
 8006f20:	20002a70 	.word	0x20002a70
 8006f24:	200029f4 	.word	0x200029f4
 8006f28:	20002a08 	.word	0x20002a08
 8006f2c:	200027ec 	.word	0x200027ec
 8006f30:	200027f4 	.word	0x200027f4
 8006f34:	200027f0 	.word	0x200027f0
 8006f38:	20002a20 	.word	0x20002a20
 8006f3c:	0800a029 	.word	0x0800a029

08006f40 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8006f40:	4291      	cmp	r1, r2
{
 8006f42:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f44:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f46:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006f48:	d80a      	bhi.n	8006f60 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	6983      	ldr	r3, [r0, #24]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d20d      	bcs.n	8006f6e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f52:	4b08      	ldr	r3, [pc, #32]	; (8006f74 <prvInsertTimerInActiveList+0x34>)
 8006f54:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	f000 f9c4 	bl	80072e4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006f5c:	2000      	movs	r0, #0
}
 8006f5e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d201      	bcs.n	8006f68 <prvInsertTimerInActiveList+0x28>
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d202      	bcs.n	8006f6e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <prvInsertTimerInActiveList+0x38>)
 8006f6a:	1d01      	adds	r1, r0, #4
 8006f6c:	e7f3      	b.n	8006f56 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8006f6e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006f70:	e7f5      	b.n	8006f5e <prvInsertTimerInActiveList+0x1e>
 8006f72:	bf00      	nop
 8006f74:	200027f0 	.word	0x200027f0
 8006f78:	200027ec 	.word	0x200027ec

08006f7c <xTimerCreateTimerTask>:
{
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006f80:	f7ff ffaa 	bl	8006ed8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006f84:	4b12      	ldr	r3, [pc, #72]	; (8006fd0 <xTimerCreateTimerTask+0x54>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	b1b3      	cbz	r3, 8006fb8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f8a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f8c:	aa07      	add	r2, sp, #28
 8006f8e:	a906      	add	r1, sp, #24
 8006f90:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f92:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f96:	f7f9 ffe1 	bl	8000f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f9a:	9b05      	ldr	r3, [sp, #20]
 8006f9c:	9302      	str	r3, [sp, #8]
 8006f9e:	9b06      	ldr	r3, [sp, #24]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	9a07      	ldr	r2, [sp, #28]
 8006fa8:	490a      	ldr	r1, [pc, #40]	; (8006fd4 <xTimerCreateTimerTask+0x58>)
 8006faa:	480b      	ldr	r0, [pc, #44]	; (8006fd8 <xTimerCreateTimerTask+0x5c>)
 8006fac:	4623      	mov	r3, r4
 8006fae:	f7ff f9d8 	bl	8006362 <xTaskCreateStatic>
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <xTimerCreateTimerTask+0x60>)
 8006fb4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006fb6:	b940      	cbnz	r0, 8006fca <xTimerCreateTimerTask+0x4e>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006fc8:	e7fe      	b.n	8006fc8 <xTimerCreateTimerTask+0x4c>
}
 8006fca:	2001      	movs	r0, #1
 8006fcc:	b008      	add	sp, #32
 8006fce:	bd10      	pop	{r4, pc}
 8006fd0:	20002a70 	.word	0x20002a70
 8006fd4:	0800a02e 	.word	0x0800a02e
 8006fd8:	080070e5 	.word	0x080070e5
 8006fdc:	20002a74 	.word	0x20002a74

08006fe0 <xTimerGenericCommand>:
{
 8006fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006fe2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8006fe4:	4604      	mov	r4, r0
{
 8006fe6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8006fe8:	b940      	cbnz	r0, 8006ffc <xTimerGenericCommand+0x1c>
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	e7fe      	b.n	8006ffa <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8006ffc:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <xTimerGenericCommand+0x54>)
 8006ffe:	6828      	ldr	r0, [r5, #0]
 8007000:	b180      	cbz	r0, 8007024 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007002:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007004:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007008:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800700a:	dc0d      	bgt.n	8007028 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800700c:	f7ff fd46 	bl	8006a9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007010:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007012:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007014:	bf08      	it	eq
 8007016:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007018:	6828      	ldr	r0, [r5, #0]
 800701a:	bf18      	it	ne
 800701c:	461a      	movne	r2, r3
 800701e:	4669      	mov	r1, sp
 8007020:	f7fe fcfd 	bl	8005a1e <xQueueGenericSend>
}
 8007024:	b004      	add	sp, #16
 8007026:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007028:	2300      	movs	r3, #0
 800702a:	4669      	mov	r1, sp
 800702c:	f7fe fde5 	bl	8005bfa <xQueueGenericSendFromISR>
 8007030:	e7f8      	b.n	8007024 <xTimerGenericCommand+0x44>
 8007032:	bf00      	nop
 8007034:	20002a70 	.word	0x20002a70

08007038 <prvSampleTimeNow>:
{
 8007038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800703c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80070e0 <prvSampleTimeNow+0xa8>
{
 8007040:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007042:	f7ff fabb 	bl	80065bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007046:	f8d8 3000 	ldr.w	r3, [r8]
 800704a:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800704c:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800704e:	d940      	bls.n	80070d2 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007050:	4f21      	ldr	r7, [pc, #132]	; (80070d8 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007052:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	b95a      	cbnz	r2, 8007074 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <prvSampleTimeNow+0xa4>)
 800705e:	6811      	ldr	r1, [r2, #0]
 8007060:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8007062:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007064:	2301      	movs	r3, #1
}
 8007066:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8007068:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800706a:	f8c8 5000 	str.w	r5, [r8]
}
 800706e:	b004      	add	sp, #16
 8007070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007074:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007076:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007078:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	1d21      	adds	r1, r4, #4
 800707e:	4608      	mov	r0, r1
 8007080:	9103      	str	r1, [sp, #12]
 8007082:	f000 f946 	bl	8007312 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007086:	6a23      	ldr	r3, [r4, #32]
 8007088:	4620      	mov	r0, r4
 800708a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800708c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007090:	9903      	ldr	r1, [sp, #12]
 8007092:	f013 0f04 	tst.w	r3, #4
 8007096:	d0de      	beq.n	8007056 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007098:	69a3      	ldr	r3, [r4, #24]
 800709a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800709c:	459a      	cmp	sl, r3
 800709e:	d205      	bcs.n	80070ac <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070a2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070a4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a6:	f000 f91d 	bl	80072e4 <vListInsert>
 80070aa:	e7d4      	b.n	8007056 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8cd 9000 	str.w	r9, [sp]
 80070b2:	4652      	mov	r2, sl
 80070b4:	4619      	mov	r1, r3
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff ff92 	bl	8006fe0 <xTimerGenericCommand>
				configASSERT( xResult );
 80070bc:	2800      	cmp	r0, #0
 80070be:	d1ca      	bne.n	8007056 <prvSampleTimeNow+0x1e>
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	e7fe      	b.n	80070d0 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e7c7      	b.n	8007066 <prvSampleTimeNow+0x2e>
 80070d6:	bf00      	nop
 80070d8:	200027ec 	.word	0x200027ec
 80070dc:	200027f0 	.word	0x200027f0
 80070e0:	20002a1c 	.word	0x20002a1c

080070e4 <prvTimerTask>:
{
 80070e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070e8:	4d6e      	ldr	r5, [pc, #440]	; (80072a4 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070ea:	4e6f      	ldr	r6, [pc, #444]	; (80072a8 <prvTimerTask+0x1c4>)
{
 80070ec:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	f8d3 8000 	ldr.w	r8, [r3]
 80070f4:	f1b8 0f00 	cmp.w	r8, #0
 80070f8:	d035      	beq.n	8007166 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007100:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8007102:	f7ff fa53 	bl	80065ac <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007106:	a804      	add	r0, sp, #16
 8007108:	f7ff ff96 	bl	8007038 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800710c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800710e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007110:	2b00      	cmp	r3, #0
 8007112:	d169      	bne.n	80071e8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007114:	2c00      	cmp	r4, #0
 8007116:	d14c      	bne.n	80071b2 <prvTimerTask+0xce>
 8007118:	4540      	cmp	r0, r8
 800711a:	d350      	bcc.n	80071be <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800711c:	f7ff faec 	bl	80066f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007126:	1d38      	adds	r0, r7, #4
 8007128:	f000 f8f3 	bl	8007312 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800712c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007130:	0758      	lsls	r0, r3, #29
 8007132:	d51a      	bpl.n	800716a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007134:	69b9      	ldr	r1, [r7, #24]
 8007136:	4643      	mov	r3, r8
 8007138:	464a      	mov	r2, r9
 800713a:	4441      	add	r1, r8
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff feff 	bl	8006f40 <prvInsertTimerInActiveList>
 8007142:	b1b0      	cbz	r0, 8007172 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007144:	9400      	str	r4, [sp, #0]
 8007146:	4623      	mov	r3, r4
 8007148:	4642      	mov	r2, r8
 800714a:	4621      	mov	r1, r4
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff ff47 	bl	8006fe0 <xTimerGenericCommand>
			configASSERT( xResult );
 8007152:	b970      	cbnz	r0, 8007172 <prvTimerTask+0x8e>
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	e7fe      	b.n	8007164 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007166:	2401      	movs	r4, #1
 8007168:	e7cb      	b.n	8007102 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	4638      	mov	r0, r7
 8007176:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007178:	6830      	ldr	r0, [r6, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	a904      	add	r1, sp, #16
 800717e:	f7fe fd9e 	bl	8005cbe <xQueueReceive>
 8007182:	2800      	cmp	r0, #0
 8007184:	d0b3      	beq.n	80070ee <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007186:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007188:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800718a:	2b00      	cmp	r3, #0
 800718c:	db2f      	blt.n	80071ee <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800718e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d132      	bne.n	80071fc <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007196:	a803      	add	r0, sp, #12
 8007198:	f7ff ff4e 	bl	8007038 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800719c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800719e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80071a0:	2b09      	cmp	r3, #9
 80071a2:	d8e9      	bhi.n	8007178 <prvTimerTask+0x94>
 80071a4:	e8df f003 	tbb	[pc, r3]
 80071a8:	572e2e2e 	.word	0x572e2e2e
 80071ac:	2e2e765e 	.word	0x2e2e765e
 80071b0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071b2:	4b3e      	ldr	r3, [pc, #248]	; (80072ac <prvTimerTask+0x1c8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681c      	ldr	r4, [r3, #0]
 80071b8:	fab4 f484 	clz	r4, r4
 80071bc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071be:	6830      	ldr	r0, [r6, #0]
 80071c0:	4622      	mov	r2, r4
 80071c2:	eba8 0109 	sub.w	r1, r8, r9
 80071c6:	f7fe ff36 	bl	8006036 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ca:	f7ff fa95 	bl	80066f8 <xTaskResumeAll>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d1d2      	bne.n	8007178 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80071d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	e7c7      	b.n	8007178 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80071e8:	f7ff fa86 	bl	80066f8 <xTaskResumeAll>
}
 80071ec:	e7c4      	b.n	8007178 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071ee:	9b05      	ldr	r3, [sp, #20]
 80071f0:	9907      	ldr	r1, [sp, #28]
 80071f2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dbbe      	blt.n	8007178 <prvTimerTask+0x94>
 80071fa:	e7c8      	b.n	800718e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071fc:	1d20      	adds	r0, r4, #4
 80071fe:	f000 f888 	bl	8007312 <uxListRemove>
 8007202:	e7c8      	b.n	8007196 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007204:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007208:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007212:	9b05      	ldr	r3, [sp, #20]
 8007214:	4620      	mov	r0, r4
 8007216:	4419      	add	r1, r3
 8007218:	f7ff fe92 	bl	8006f40 <prvInsertTimerInActiveList>
 800721c:	2800      	cmp	r0, #0
 800721e:	d0ab      	beq.n	8007178 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007220:	6a23      	ldr	r3, [r4, #32]
 8007222:	4620      	mov	r0, r4
 8007224:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007226:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800722a:	0759      	lsls	r1, r3, #29
 800722c:	d5a4      	bpl.n	8007178 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800722e:	69a2      	ldr	r2, [r4, #24]
 8007230:	9905      	ldr	r1, [sp, #20]
 8007232:	2300      	movs	r3, #0
 8007234:	440a      	add	r2, r1
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	4620      	mov	r0, r4
 800723c:	f7ff fed0 	bl	8006fe0 <xTimerGenericCommand>
							configASSERT( xResult );
 8007240:	2800      	cmp	r0, #0
 8007242:	d199      	bne.n	8007178 <prvTimerTask+0x94>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	e7fe      	b.n	8007254 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007256:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007262:	e789      	b.n	8007178 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007264:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007270:	9905      	ldr	r1, [sp, #20]
 8007272:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007274:	b941      	cbnz	r1, 8007288 <prvTimerTask+0x1a4>
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	e7fe      	b.n	8007286 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007288:	4603      	mov	r3, r0
 800728a:	4401      	add	r1, r0
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff fe57 	bl	8006f40 <prvInsertTimerInActiveList>
					break;
 8007292:	e771      	b.n	8007178 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007294:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007298:	079a      	lsls	r2, r3, #30
 800729a:	d4de      	bmi.n	800725a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f877 	bl	8007390 <vPortFree>
 80072a2:	e769      	b.n	8007178 <prvTimerTask+0x94>
 80072a4:	200027ec 	.word	0x200027ec
 80072a8:	20002a70 	.word	0x20002a70
 80072ac:	200027f0 	.word	0x200027f0

080072b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072bc:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072c4:	4770      	bx	lr

080072c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072ca:	4770      	bx	lr

080072cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80072cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80072da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80072dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80072de:	3301      	adds	r3, #1
 80072e0:	6003      	str	r3, [r0, #0]
}
 80072e2:	4770      	bx	lr

080072e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072e6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072e8:	1c63      	adds	r3, r4, #1
 80072ea:	d10a      	bne.n	8007302 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072ec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072f2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072f4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80072f6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80072f8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80072fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80072fc:	3301      	adds	r3, #1
 80072fe:	6003      	str	r3, [r0, #0]
}
 8007300:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007302:	f100 0208 	add.w	r2, r0, #8
 8007306:	4613      	mov	r3, r2
 8007308:	6852      	ldr	r2, [r2, #4]
 800730a:	6815      	ldr	r5, [r2, #0]
 800730c:	42a5      	cmp	r5, r4
 800730e:	d9fa      	bls.n	8007306 <vListInsert+0x22>
 8007310:	e7ed      	b.n	80072ee <vListInsert+0xa>

08007312 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007312:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007316:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007318:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800731a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007320:	bf08      	it	eq
 8007322:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007324:	2200      	movs	r2, #0
 8007326:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	3a01      	subs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800732e:	6818      	ldr	r0, [r3, #0]
}
 8007330:	4770      	bx	lr
	...

08007334 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007334:	b538      	push	{r3, r4, r5, lr}
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8007336:	0743      	lsls	r3, r0, #29
{
 8007338:	4604      	mov	r4, r0
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800733a:	bf1c      	itt	ne
 800733c:	f020 0407 	bicne.w	r4, r0, #7
 8007340:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 8007342:	f7ff f933 	bl	80065ac <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8007346:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <pvPortMalloc+0x50>)
 8007348:	6813      	ldr	r3, [r2, #0]
 800734a:	b91b      	cbnz	r3, 8007354 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <pvPortMalloc+0x54>)
 800734e:	f023 0307 	bic.w	r3, r3, #7
 8007352:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007354:	490d      	ldr	r1, [pc, #52]	; (800738c <pvPortMalloc+0x58>)
 8007356:	680b      	ldr	r3, [r1, #0]
 8007358:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 800735c:	441c      	add	r4, r3
 800735e:	4284      	cmp	r4, r0
 8007360:	d905      	bls.n	800736e <pvPortMalloc+0x3a>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007362:	f7ff f9c9 	bl	80066f8 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007366:	f7f9 fdec 	bl	8000f42 <vApplicationMallocFailedHook>
 800736a:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
 800736c:	e008      	b.n	8007380 <pvPortMalloc+0x4c>
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800736e:	42a3      	cmp	r3, r4
 8007370:	d2f7      	bcs.n	8007362 <pvPortMalloc+0x2e>
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007372:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
 8007374:	600c      	str	r4, [r1, #0]
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007376:	441d      	add	r5, r3
	( void ) xTaskResumeAll();
 8007378:	f7ff f9be 	bl	80066f8 <xTaskResumeAll>
		if( pvReturn == NULL )
 800737c:	2d00      	cmp	r5, #0
 800737e:	d0f2      	beq.n	8007366 <pvPortMalloc+0x32>
}
 8007380:	4628      	mov	r0, r5
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20002a78 	.word	0x20002a78
 8007388:	20002a84 	.word	0x20002a84
 800738c:	20012a7c 	.word	0x20012a7c

08007390 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007390:	b140      	cbz	r0, 80073a4 <vPortFree+0x14>
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	e7fe      	b.n	80073a2 <vPortFree+0x12>
}
 80073a4:	4770      	bx	lr
	...

080073a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073a8:	4808      	ldr	r0, [pc, #32]	; (80073cc <prvPortStartFirstTask+0x24>)
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f380 8808 	msr	MSP, r0
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8814 	msr	CONTROL, r0
 80073ba:	b662      	cpsie	i
 80073bc:	b661      	cpsie	f
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	df00      	svc	0
 80073c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ca:	0000      	.short	0x0000
 80073cc:	e000ed08 	.word	0xe000ed08

080073d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073e0 <vPortEnableVFP+0x10>
 80073d4:	6801      	ldr	r1, [r0, #0]
 80073d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073da:	6001      	str	r1, [r0, #0]
 80073dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073de:	0000      	.short	0x0000
 80073e0:	e000ed88 	.word	0xe000ed88

080073e4 <prvTaskExitError>:
{
 80073e4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <prvTaskExitError+0x3c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	d008      	beq.n	8007404 <prvTaskExitError+0x20>
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	e7fe      	b.n	8007402 <prvTaskExitError+0x1e>
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0fc      	beq.n	8007414 <prvTaskExitError+0x30>
}
 800741a:	b002      	add	sp, #8
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000010 	.word	0x20000010

08007424 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007428:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800742c:	4b07      	ldr	r3, [pc, #28]	; (800744c <pxPortInitialiseStack+0x28>)
 800742e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007432:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007436:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800743a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800743e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007442:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007446:	3844      	subs	r0, #68	; 0x44
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	080073e5 	.word	0x080073e5

08007450 <SVC_Handler>:
	__asm volatile (
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <pxCurrentTCBConst2>)
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	6808      	ldr	r0, [r1, #0]
 8007456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	f380 8809 	msr	PSP, r0
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8811 	msr	BASEPRI, r0
 800746a:	4770      	bx	lr
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst2>:
 8007470:	200026c4 	.word	0x200026c4

08007474 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <vPortEndScheduler+0x20>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747c:	d008      	beq.n	8007490 <vPortEndScheduler+0x1c>
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	e7fe      	b.n	800748e <vPortEndScheduler+0x1a>
}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000010 	.word	0x20000010

08007498 <vPortEnterCritical>:
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <vPortEnterCritical+0x3c>)
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80074ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80074b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80074b2:	d10e      	bne.n	80074d2 <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074b8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	b143      	cbz	r3, 80074d2 <vPortEnterCritical+0x3a>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	e7fe      	b.n	80074d0 <vPortEnterCritical+0x38>
}
 80074d2:	4770      	bx	lr
 80074d4:	20000010 	.word	0x20000010

080074d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80074d8:	4a08      	ldr	r2, [pc, #32]	; (80074fc <vPortExitCritical+0x24>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b943      	cbnz	r3, 80074f0 <vPortExitCritical+0x18>
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	e7fe      	b.n	80074ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80074f0:	3b01      	subs	r3, #1
 80074f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074f4:	b90b      	cbnz	r3, 80074fa <vPortExitCritical+0x22>
	__asm volatile
 80074f6:	f383 8811 	msr	BASEPRI, r3
}
 80074fa:	4770      	bx	lr
 80074fc:	20000010 	.word	0x20000010

08007500 <PendSV_Handler>:
	__asm volatile
 8007500:	f3ef 8009 	mrs	r0, PSP
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <pxCurrentTCBConst>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	f01e 0f10 	tst.w	lr, #16
 8007510:	bf08      	it	eq
 8007512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007524:	f380 8811 	msr	BASEPRI, r0
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f7ff f99e 	bl	8006870 <vTaskSwitchContext>
 8007534:	f04f 0000 	mov.w	r0, #0
 8007538:	f380 8811 	msr	BASEPRI, r0
 800753c:	bc09      	pop	{r0, r3}
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007546:	f01e 0f10 	tst.w	lr, #16
 800754a:	bf08      	it	eq
 800754c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007550:	f380 8809 	msr	PSP, r0
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst>:
 8007560:	200026c4 	.word	0x200026c4

08007564 <xPortSysTickHandler>:
{
 8007564:	b508      	push	{r3, lr}
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007576:	f7ff f827 	bl	80065c8 <xTaskIncrementTick>
 800757a:	b128      	cbz	r0, 8007588 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007584:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007588:	2300      	movs	r3, #0
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bd08      	pop	{r3, pc}

08007590 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007590:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007594:	2300      	movs	r3, #0
 8007596:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007598:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800759a:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <vPortSetupTimerInterrupt+0x20>)
 800759c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075aa:	2307      	movs	r3, #7
 80075ac:	6113      	str	r3, [r2, #16]
}
 80075ae:	4770      	bx	lr
 80075b0:	20000000 	.word	0x20000000

080075b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075ba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80075be:	4a3a      	ldr	r2, [pc, #232]	; (80076a8 <xPortStartScheduler+0xf4>)
 80075c0:	4291      	cmp	r1, r2
 80075c2:	d108      	bne.n	80075d6 <xPortStartScheduler+0x22>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <xPortStartScheduler+0xf8>)
 80075dc:	429a      	cmp	r2, r3
 80075de:	d108      	bne.n	80075f2 <xPortStartScheduler+0x3e>
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	e7fe      	b.n	80075f0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075f2:	4b2f      	ldr	r3, [pc, #188]	; (80076b0 <xPortStartScheduler+0xfc>)
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075fa:	22ff      	movs	r2, #255	; 0xff
 80075fc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075fe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007600:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007608:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800760c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007610:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007612:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <xPortStartScheduler+0x104>)
 8007614:	2307      	movs	r3, #7
 8007616:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007618:	2100      	movs	r1, #0
 800761a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800761e:	0600      	lsls	r0, r0, #24
 8007620:	f103 34ff 	add.w	r4, r3, #4294967295
 8007624:	d40c      	bmi.n	8007640 <xPortStartScheduler+0x8c>
 8007626:	b111      	cbz	r1, 800762e <xPortStartScheduler+0x7a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007628:	2b03      	cmp	r3, #3
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	d011      	beq.n	8007652 <xPortStartScheduler+0x9e>
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	e7fe      	b.n	800763e <xPortStartScheduler+0x8a>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007640:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f88d 3003 	strb.w	r3, [sp, #3]
 800764c:	2101      	movs	r1, #1
 800764e:	4623      	mov	r3, r4
 8007650:	e7e3      	b.n	800761a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007656:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800765c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007660:	b2db      	uxtb	r3, r3
 8007662:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007664:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800766c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007670:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007674:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007678:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800767c:	f7ff ff88 	bl	8007590 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007680:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <xPortStartScheduler+0x108>)
 8007682:	2500      	movs	r5, #0
 8007684:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007686:	f7ff fea3 	bl	80073d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800768a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800768e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007692:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007696:	f7ff fe87 	bl	80073a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800769a:	f7ff f8e9 	bl	8006870 <vTaskSwitchContext>
	prvTaskExitError();
 800769e:	f7ff fea1 	bl	80073e4 <prvTaskExitError>
}
 80076a2:	4628      	mov	r0, r5
 80076a4:	b003      	add	sp, #12
 80076a6:	bd30      	pop	{r4, r5, pc}
 80076a8:	410fc271 	.word	0x410fc271
 80076ac:	410fc270 	.word	0x410fc270
 80076b0:	e000e400 	.word	0xe000e400
 80076b4:	20012a80 	.word	0x20012a80
 80076b8:	20012a84 	.word	0x20012a84
 80076bc:	20000010 	.word	0x20000010

080076c0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076c0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076c4:	2b0f      	cmp	r3, #15
 80076c6:	d90e      	bls.n	80076e6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076c8:	4a11      	ldr	r2, [pc, #68]	; (8007710 <vPortValidateInterruptPriority+0x50>)
 80076ca:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076cc:	4a11      	ldr	r2, [pc, #68]	; (8007714 <vPortValidateInterruptPriority+0x54>)
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d908      	bls.n	80076e6 <vPortValidateInterruptPriority+0x26>
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	e7fe      	b.n	80076e4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076ea:	4a0b      	ldr	r2, [pc, #44]	; (8007718 <vPortValidateInterruptPriority+0x58>)
 80076ec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d908      	bls.n	800770c <vPortValidateInterruptPriority+0x4c>
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	e7fe      	b.n	800770a <vPortValidateInterruptPriority+0x4a>
	}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e3f0 	.word	0xe000e3f0
 8007714:	20012a80 	.word	0x20012a80
 8007718:	20012a84 	.word	0x20012a84

0800771c <_ZN3Cpl9Container4Item7insert_EPv>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
bool Item::insert_( void* newContainerPtr )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <_ZN3Cpl9Container4Item7insert_EPv+0x24>
    {
        FatalError::logf( "Container Error: Double Insert. item=%p, prev container=%p, new container=%p", this, m_inListPtr_, newContainerPtr );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	4806      	ldr	r0, [pc, #24]	; (8007750 <_ZN3Cpl9Container4Item7insert_EPv+0x34>)
 8007738:	f7fa fb1a 	bl	8001d70 <_ZN3Cpl6System10FatalError4logfEPKcz>
        return false;
 800773c:	2300      	movs	r3, #0
 800773e:	e003      	b.n	8007748 <_ZN3Cpl9Container4Item7insert_EPv+0x2c>
    }
    else
    {
        m_inListPtr_ = newContainerPtr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	605a      	str	r2, [r3, #4]
        return true;
 8007746:	2301      	movs	r3, #1
    }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	08009770 	.word	0x08009770

08007754 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>:

bool Item::isInContainer_( const void* containerPtr ) const noexcept
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ != containerPtr )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d001      	beq.n	800776c <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x18>
    {
        return false;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x1a>
    }
    return true;
 800776c:	2301      	movs	r3, #1
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <_ZN3Cpl9Container4Item7remove_EPS1_>:

void Item::remove_( Item* itemPtr ) noexcept
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
    if ( itemPtr )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <_ZN3Cpl9Container4Item7remove_EPS1_+0x14>
    {
        itemPtr->m_inListPtr_ = 0;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
    }
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>:

    return m_stringKeyPtr;
}

int KeyStringBuffer::compare( const char* myString, unsigned myLen, const char* otherString, unsigned otherLen )
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607a      	str	r2, [r7, #4]
 80077a6:	603b      	str	r3, [r7, #0]
    if ( otherString )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01d      	beq.n	80077ea <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
    {
        if ( myString )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01a      	beq.n	80077ea <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
        {
            unsigned cmpLen      = myLen > otherLen ? otherLen : myLen;
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d901      	bls.n	80077c0 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x26>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	e000      	b.n	80077c2 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x28>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	617b      	str	r3, [r7, #20]
            int      comparision = strncmp( myString, otherString, cmpLen );
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 f866 	bl	800889a <strncmp>
 80077ce:	6138      	str	r0, [r7, #16]

            if ( comparision == 0 && myLen != otherLen )
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d107      	bne.n	80077e6 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d003      	beq.n	80077e6 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
            {
                return myLen - (int) otherLen;
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	e003      	b.n	80077ee <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
            }

            return comparision;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	e001      	b.n	80077ee <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
        }
    }

    return -1;
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>:
//#define CPL_IO_FILE_MAX_NAME_MAP                PATH_MAX


/// Mapping
inline unsigned long CplSystemElapsedTime_getTimeInMilliseconds_MAP()
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	af00      	add	r7, sp, #0
    return xTaskGetTickCount() / portTICK_PERIOD_MS;
 80077fa:	f7fe fedf 	bl	80065bc <xTaskGetTickCount>
 80077fe:	4603      	mov	r3, r0
}
 8007800:	4618      	mov	r0, r3
 8007802:	bd80      	pop	{r7, pc}

08007804 <_ZN3Cpl6System12StartupHook_D1Ev>:
     */
    StartupHook_( InitLevel_T myInitLevel );

public:
    /// Ensure the destructor is virtual
    virtual ~StartupHook_() {}
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	4a04      	ldr	r2, [pc, #16]	; (8007820 <_ZN3Cpl6System12StartupHook_D1Ev+0x1c>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	0800a054 	.word	0x0800a054

08007824 <_ZN3Cpl6System12StartupHook_D0Ev>:
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ffe9 	bl	8007804 <_ZN3Cpl6System12StartupHook_D1Ev>
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fd8f 	bl	8009356 <_ZdlPv>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>:
/// This class is to 'zero' the elapsed to the start of the application
class RegisterInitHandler_ : public Cpl::System::StartupHook_
{
public:
    ///
    RegisterInitHandler_():StartupHook_( eSYSTEM ) {}
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2101      	movs	r1, #1
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f903 	bl	8007a5c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>
 8007856:	4a04      	ldr	r2, [pc, #16]	; (8007868 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev+0x24>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	0800a040 	.word	0x0800a040

0800786c <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE>:


protected:
    ///
    void notify( InitLevel_T init_level )
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
    {
        elapsedMsec_  = 0;
 8007878:	4b08      	ldr	r3, [pc, #32]	; (800789c <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x30>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
        elapsedSec_   = 0;
 800787e:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x34>)
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
        sumDeltaMs_   = 0;
 8007884:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x38>)
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
        lastMsec_     = CplSystemElapsedTime_getTimeInMilliseconds();
 800788a:	f7ff ffb4 	bl	80077f6 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 800788e:	4603      	mov	r3, r0
 8007890:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x3c>)
 8007892:	6013      	str	r3, [r2, #0]
    }
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	20012a8c 	.word	0x20012a8c
 80078a0:	20012a90 	.word	0x20012a90
 80078a4:	20012a98 	.word	0x20012a98
 80078a8:	20012a94 	.word	0x20012a94

080078ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
static RegisterInitHandler_ autoRegister_systemInit_hook_;


///////////////////////////////////////////////////////////////
unsigned long ElapsedTime::millisecondsInRealTime( void ) noexcept
{
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 80078b2:	f7fc fb13 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 80078b6:	4602      	mov	r2, r0
 80078b8:	1d3b      	adds	r3, r7, #4
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7f9 fda9 	bl	8001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    unsigned long newTime = CplSystemElapsedTime_getTimeInMilliseconds();
 80078c2:	f7ff ff98 	bl	80077f6 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 80078c6:	60f8      	str	r0, [r7, #12]
    unsigned long delta   = newTime - lastMsec_;
 80078c8:	4b17      	ldr	r3, [pc, #92]	; (8007928 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	60bb      	str	r3, [r7, #8]
    lastMsec_             = newTime;
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6013      	str	r3, [r2, #0]
    elapsedMsec_         += delta;
 80078d8:	4b14      	ldr	r3, [pc, #80]	; (800792c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4413      	add	r3, r2
 80078e0:	4a12      	ldr	r2, [pc, #72]	; (800792c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 80078e2:	6013      	str	r3, [r2, #0]
    sumDeltaMs_          += delta;
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4413      	add	r3, r2
 80078ec:	4a10      	ldr	r2, [pc, #64]	; (8007930 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80078ee:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f8:	d30b      	bcc.n	8007912 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x66>
    {
        elapsedSec_++;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 8007902:	6013      	str	r3, [r2, #0]
        sumDeltaMs_ -= 1000L;
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800790c:	4a08      	ldr	r2, [pc, #32]	; (8007930 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 800790e:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 8007910:	e7ee      	b.n	80078f0 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x44>
    }
    

    return elapsedMsec_;
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 8007914:	681c      	ldr	r4, [r3, #0]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7f9 fd8d 	bl	8001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return elapsedMsec_;
 800791e:	4623      	mov	r3, r4
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	bd90      	pop	{r4, r7, pc}
 8007928:	20012a94 	.word	0x20012a94
 800792c:	20012a8c 	.word	0x20012a8c
 8007930:	20012a98 	.word	0x20012a98
 8007934:	20012a90 	.word	0x20012a90

08007938 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv>:
    return (unsigned long) (elapsedMsec_ / 1000LL);
}


ElapsedTime::Precision_T ElapsedTime::precisionInRealTime( void ) noexcept
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8007940:	f7fc facc 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8007944:	4602      	mov	r2, r0
 8007946:	f107 030c 	add.w	r3, r7, #12
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f7f9 fd61 	bl	8001414 <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    // Update my internal time
    millisecondsInRealTime();
 8007952:	f7ff ffab 	bl	80078ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>

    // Convert to my Precision format
    Precision_T now;
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7f9 fd7c 	bl	8001454 <_ZN3Cpl6System11ElapsedTime11Precision_TC1Ev>
    now.m_seconds      = elapsedSec_;
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x60>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
    now.m_thousandths  = elapsedMsec_ % 1000L;
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x64>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <_ZN3Cpl6System11ElapsedTime19precisionInRealTimeEv+0x68>)
 800796a:	fba3 1302 	umull	r1, r3, r3, r2
 800796e:	099b      	lsrs	r3, r3, #6
 8007970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	809a      	strh	r2, [r3, #4]
    return now;
 8007980:	bf00      	nop
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8007982:	f107 030c 	add.w	r3, r7, #12
 8007986:	4618      	mov	r0, r3
 8007988:	f7f9 fd56 	bl	8001438 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return now;
 800798c:	bf00      	nop
}
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20012a90 	.word	0x20012a90
 800799c:	20012a8c 	.word	0x20012a8c
 80079a0:	10624dd3 	.word	0x10624dd3

080079a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>:
class RegisterInitHandler_ : public Cpl::System::StartupHook_
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	4a05      	ldr	r2, [pc, #20]	; (80079c4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev+0x20>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff ff25 	bl	8007804 <_ZN3Cpl6System12StartupHook_D1Ev>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	0800a040 	.word	0x0800a040

080079c8 <_ZN12_GLOBAL__N_120RegisterInitHandler_D0Ev>:
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ffe7 	bl	80079a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fcbd 	bl	8009356 <_ZdlPv>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d10a      	bne.n	8007a0e <_Z41__static_initialization_and_destruction_0ii+0x26>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d105      	bne.n	8007a0e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007a02:	480c      	ldr	r0, [pc, #48]	; (8007a34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007a04:	f7fc ff22 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static RegisterInitHandler_ autoRegister_systemInit_hook_;
 8007a08:	480b      	ldr	r0, [pc, #44]	; (8007a38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007a0a:	f7ff ff1b 	bl	8007844 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d105      	bne.n	8007a2a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007a1e:	4806      	ldr	r0, [pc, #24]	; (8007a38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007a20:	f7ff ffc0 	bl	80079a4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 8007a24:	4803      	ldr	r0, [pc, #12]	; (8007a34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007a26:	f7fc ff1c 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20012a88 	.word	0x20012a88
 8007a38:	20012a9c 	.word	0x20012a9c

08007a3c <_GLOBAL__sub_I__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a44:	2001      	movs	r0, #1
 8007a46:	f7ff ffcf 	bl	80079e8 <_Z41__static_initialization_and_destruction_0ii>
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_GLOBAL__sub_D__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7ff ffc7 	bl	80079e8 <_Z41__static_initialization_and_destruction_0ii>
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>:
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );



////////////////////////////////////////////////////////////////////////////////
StartupHook_::StartupHook_( InitLevel_T myInitLevel )
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fa fb2d 	bl	80020cc <_ZN3Cpl9Container4ItemC1Ev>
 8007a72:	4a06      	ldr	r2, [pc, #24]	; (8007a8c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE+0x30>)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
{
    registerHook( *this, myInitLevel );
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f807 	bl	8007a90 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>
}
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	0800a054 	.word	0x0800a054

08007a90 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>:


void StartupHook_::registerHook( StartupHook_& callbackInstance, InitLevel_T initOrder )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
    // NOTE: The assumption is that sub-system register at the time of when
    //       constructor for static object execute - which is before main()
    //       is enter so there should be only one thread.
    if ( initOrder == StartupHook_::eTEST_INFRA )
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x1c>
    {
        levelTest_.put( callbackInstance );
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	480d      	ldr	r0, [pc, #52]	; (8007adc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x4c>)
 8007aa6:	f000 f885 	bl	8007bb4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
    }
    else
    {
        levelApplication_.put( callbackInstance );
    }
}
 8007aaa:	e013      	b.n	8007ad4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eSYSTEM )
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d104      	bne.n	8007abc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x2c>
        levelSystem_.put( callbackInstance );
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	480a      	ldr	r0, [pc, #40]	; (8007ae0 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x50>)
 8007ab6:	f000 f87d 	bl	8007bb4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 8007aba:	e00b      	b.n	8007ad4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eMIDDLE_WARE )
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d104      	bne.n	8007acc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x3c>
        levelMiddleWare_.put( callbackInstance );
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4807      	ldr	r0, [pc, #28]	; (8007ae4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x54>)
 8007ac6:	f000 f875 	bl	8007bb4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 8007aca:	e003      	b.n	8007ad4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
        levelApplication_.put( callbackInstance );
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	4806      	ldr	r0, [pc, #24]	; (8007ae8 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x58>)
 8007ad0:	f000 f870 	bl	8007bb4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20012aac 	.word	0x20012aac
 8007ae0:	20012ab4 	.word	0x20012ab4
 8007ae4:	20012abc 	.word	0x20012abc
 8007ae8:	20012ac4 	.word	0x20012ac4

08007aec <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>:

void StartupHook_::notifyStartupClients( void )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
    // NOTE: The assumption is that no thread protection is required since
    //       there should only be one caller to the initialize() method.

    // Do eTEST_INFRA level first
    StartupHook_* ptr = levelTest_.get();
 8007af2:	4826      	ldr	r0, [pc, #152]	; (8007b8c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 8007af4:	f000 f882 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007af8:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x2a>
    {
        ptr->notify( eTEST_INFRA );
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2100      	movs	r1, #0
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
        ptr = levelTest_.get();
 8007b0c:	481f      	ldr	r0, [pc, #124]	; (8007b8c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 8007b0e:	f000 f875 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b12:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b14:	e7f1      	b.n	8007afa <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xe>
    }

    // Do eSYSTEM level next
    ptr = levelSystem_.get();
 8007b16:	481e      	ldr	r0, [pc, #120]	; (8007b90 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8007b18:	f000 f870 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b1c:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x4e>
    {
        ptr->notify( eSYSTEM );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
        ptr = levelSystem_.get();
 8007b30:	4817      	ldr	r0, [pc, #92]	; (8007b90 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8007b32:	f000 f863 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b36:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b38:	e7f1      	b.n	8007b1e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x32>
    }

    // Do eMIDDLE_WARE level next
    ptr = levelMiddleWare_.get();
 8007b3a:	4816      	ldr	r0, [pc, #88]	; (8007b94 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 8007b3c:	f000 f85e 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b40:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x72>
    {
        ptr->notify( eMIDDLE_WARE );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2102      	movs	r1, #2
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
        ptr = levelMiddleWare_.get();
 8007b54:	480f      	ldr	r0, [pc, #60]	; (8007b94 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 8007b56:	f000 f851 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b5a:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b5c:	e7f1      	b.n	8007b42 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x56>
    }

    // Do eAPPLICATION level last
    ptr = levelApplication_.get();
 8007b5e:	480e      	ldr	r0, [pc, #56]	; (8007b98 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 8007b60:	f000 f84c 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b64:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x96>
    {
        ptr->notify( eAPPLICATION );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2103      	movs	r1, #3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
        ptr = levelApplication_.get();
 8007b78:	4807      	ldr	r0, [pc, #28]	; (8007b98 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 8007b7a:	f000 f83f 	bl	8007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8007b7e:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8007b80:	e7f1      	b.n	8007b66 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x7a>
    }
}
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20012aac 	.word	0x20012aac
 8007b90:	20012ab4 	.word	0x20012ab4
 8007b94:	20012abc 	.word	0x20012abc
 8007b98:	20012ac4 	.word	0x20012ac4

08007b9c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
}
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fda9 	bl	800771c <_ZN3Cpl9Container4Item7insert_EPv>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d011      	beq.n	8007bf4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x40>
        if ( m_headPtr )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	605a      	str	r2, [r3, #4]
 8007be0:	e002      	b.n	8007be8 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x34>
            m_headPtr = &item;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf14      	ite	ne
 8007c10:	2301      	movne	r3, #1
 8007c12:	2300      	moveq	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00f      	beq.n	8007c3a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
            m_tailPtr = 0;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3304      	adds	r3, #4
 8007c44:	e000      	b.n	8007c48 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4c>
 8007c46:	2300      	movs	r3, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fd96 	bl	800777a <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <_Z41__static_initialization_and_destruction_0ii>:
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d117      	bne.n	8007c98 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d112      	bne.n	8007c98 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007c72:	4811      	ldr	r0, [pc, #68]	; (8007cb8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8007c74:	f7fc fdea 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<StartupHook_> levelTest_( "invoke_special_static_constructor" );
 8007c78:	4910      	ldr	r1, [pc, #64]	; (8007cbc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007c7a:	4811      	ldr	r0, [pc, #68]	; (8007cc0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007c7c:	f7ff ff8e 	bl	8007b9c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelSystem_( "invoke_special_static_constructor" );
 8007c80:	490e      	ldr	r1, [pc, #56]	; (8007cbc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007c82:	4810      	ldr	r0, [pc, #64]	; (8007cc4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007c84:	f7ff ff8a 	bl	8007b9c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelMiddleWare_( "invoke_special_static_constructor" );
 8007c88:	490c      	ldr	r1, [pc, #48]	; (8007cbc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007c8a:	480f      	ldr	r0, [pc, #60]	; (8007cc8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007c8c:	f7ff ff86 	bl	8007b9c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );
 8007c90:	490a      	ldr	r1, [pc, #40]	; (8007cbc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007c92:	480e      	ldr	r0, [pc, #56]	; (8007ccc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007c94:	f7ff ff82 	bl	8007b9c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d107      	bne.n	8007cae <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d102      	bne.n	8007cae <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007ca8:	4803      	ldr	r0, [pc, #12]	; (8007cb8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8007caa:	f7fc fdda 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20012aa8 	.word	0x20012aa8
 8007cbc:	080097c0 	.word	0x080097c0
 8007cc0:	20012aac 	.word	0x20012aac
 8007cc4:	20012ab4 	.word	0x20012ab4
 8007cc8:	20012abc 	.word	0x20012abc
 8007ccc:	20012ac4 	.word	0x20012ac4

08007cd0 <_GLOBAL__sub_I__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007cd8:	2001      	movs	r0, #1
 8007cda:	f7ff ffbd 	bl	8007c58 <_Z41__static_initialization_and_destruction_0ii>
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_GLOBAL__sub_D__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007ce8:	2000      	movs	r0, #0
 8007cea:	f7ff ffb5 	bl	8007c58 <_Z41__static_initialization_and_destruction_0ii>
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>:
}


////////////////////////////////////////////////////////////////////////////////
int Shutdown::notifyShutdownHandlers_( int exit_code )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
    Locks_::system().lock();
 8007cf8:	f7fc f8f0 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fc f98c 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
    Shutdown::Handler* ptr = callbacks_.get();
 8007d04:	4814      	ldr	r0, [pc, #80]	; (8007d58 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 8007d06:	f000 f835 	bl	8007d74 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 8007d0a:	60f8      	str	r0, [r7, #12]
    Locks_::system().unlock();
 8007d0c:	f7fc f8e6 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc f996 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>

    while ( ptr )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d017      	beq.n	8007d4e <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x5e>
    {
        exit_code = ptr->notify( exit_code );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3
 8007d2a:	6078      	str	r0, [r7, #4]

        Locks_::system().lock();
 8007d2c:	f7fc f8d6 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8007d30:	4603      	mov	r3, r0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fc f972 	bl	800401c <_ZN3Cpl6System5Mutex4lockEv>
        ptr = callbacks_.pop();
 8007d38:	4807      	ldr	r0, [pc, #28]	; (8007d58 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 8007d3a:	f000 f849 	bl	8007dd0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>
 8007d3e:	60f8      	str	r0, [r7, #12]
        Locks_::system().unlock();
 8007d40:	f7fc f8cc 	bl	8003edc <_ZN3Cpl6System6Locks_6systemEv>
 8007d44:	4603      	mov	r3, r0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fc f97c 	bl	8004044 <_ZN3Cpl6System5Mutex6unlockEv>
    while ( ptr )
 8007d4c:	e7e4      	b.n	8007d18 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x28>
    }

    return exit_code;
 8007d4e:	687b      	ldr	r3, [r7, #4]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20012ad0 	.word	0x20012ad0

08007d5c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
}
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf14      	ite	ne
 8007d88:	2301      	movne	r3, #1
 8007d8a:	2300      	moveq	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf0c      	ite	eq
 8007da2:	2301      	moveq	r3, #1
 8007da4:	2300      	movne	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
            m_tailPtr = 0;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	e000      	b.n	8007dc0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4c>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fcda 	bl	800777a <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>:
{
    putFirst( item );
}

template <class ITEM>
inline ITEM* SList<ITEM>::pop( void ) noexcept
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
{
    return get();
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff ffcb 	bl	8007d74 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <_Z41__static_initialization_and_destruction_0ii>:
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10b      	bne.n	8007e10 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d106      	bne.n	8007e10 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8007e02:	480b      	ldr	r0, [pc, #44]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007e04:	f7fc fd22 	bl	800484c <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Shutdown::Handler> callbacks_( "invoke_special_static_constructor" );
 8007e08:	490a      	ldr	r1, [pc, #40]	; (8007e34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007e0a:	480b      	ldr	r0, [pc, #44]	; (8007e38 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007e0c:	f7ff ffa6 	bl	8007d5c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d102      	bne.n	8007e26 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8007e20:	4803      	ldr	r0, [pc, #12]	; (8007e30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007e22:	f7fc fd1e 	bl	8004862 <_ZNSt8ios_base4InitD1Ev>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20012acc 	.word	0x20012acc
 8007e34:	080097e4 	.word	0x080097e4
 8007e38:	20012ad0 	.word	0x20012ad0

08007e3c <_GLOBAL__sub_I__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e44:	2001      	movs	r0, #1
 8007e46:	f7ff ffcf 	bl	8007de8 <_Z41__static_initialization_and_destruction_0ii>
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <_GLOBAL__sub_D__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e54:	2000      	movs	r0, #0
 8007e56:	f7ff ffc7 	bl	8007de8 <_Z41__static_initialization_and_destruction_0ii>
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <clearerr>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <clearerr+0x64>)
 8007e60:	681d      	ldr	r5, [r3, #0]
 8007e62:	4604      	mov	r4, r0
 8007e64:	b125      	cbz	r5, 8007e70 <clearerr+0x14>
 8007e66:	69ab      	ldr	r3, [r5, #24]
 8007e68:	b913      	cbnz	r3, 8007e70 <clearerr+0x14>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 fa06 	bl	800827c <__sinit>
 8007e70:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <clearerr+0x68>)
 8007e72:	429c      	cmp	r4, r3
 8007e74:	d118      	bne.n	8007ea8 <clearerr+0x4c>
 8007e76:	686c      	ldr	r4, [r5, #4]
 8007e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e7a:	07d8      	lsls	r0, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <clearerr+0x2e>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	0599      	lsls	r1, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <clearerr+0x2e>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f000 fb33 	bl	80084f0 <__retarget_lock_acquire_recursive>
 8007e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e90:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007e94:	07d2      	lsls	r2, r2, #31
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	d410      	bmi.n	8007ebc <clearerr+0x60>
 8007e9a:	059b      	lsls	r3, r3, #22
 8007e9c:	d40e      	bmi.n	8007ebc <clearerr+0x60>
 8007e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea4:	f000 bb25 	b.w	80084f2 <__retarget_lock_release_recursive>
 8007ea8:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <clearerr+0x6c>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d101      	bne.n	8007eb2 <clearerr+0x56>
 8007eae:	68ac      	ldr	r4, [r5, #8]
 8007eb0:	e7e2      	b.n	8007e78 <clearerr+0x1c>
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <clearerr+0x70>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	bf08      	it	eq
 8007eb8:	68ec      	ldreq	r4, [r5, #12]
 8007eba:	e7dd      	b.n	8007e78 <clearerr+0x1c>
 8007ebc:	bd38      	pop	{r3, r4, r5, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000014 	.word	0x20000014
 8007ec4:	0800a080 	.word	0x0800a080
 8007ec8:	0800a0a0 	.word	0x0800a0a0
 8007ecc:	0800a060 	.word	0x0800a060

08007ed0 <_fclose_r>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	b911      	cbnz	r1, 8007ede <_fclose_r+0xe>
 8007ed8:	2600      	movs	r6, #0
 8007eda:	4630      	mov	r0, r6
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	b118      	cbz	r0, 8007ee8 <_fclose_r+0x18>
 8007ee0:	6983      	ldr	r3, [r0, #24]
 8007ee2:	b90b      	cbnz	r3, 8007ee8 <_fclose_r+0x18>
 8007ee4:	f000 f9ca 	bl	800827c <__sinit>
 8007ee8:	4b2c      	ldr	r3, [pc, #176]	; (8007f9c <_fclose_r+0xcc>)
 8007eea:	429c      	cmp	r4, r3
 8007eec:	d114      	bne.n	8007f18 <_fclose_r+0x48>
 8007eee:	686c      	ldr	r4, [r5, #4]
 8007ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef2:	07d8      	lsls	r0, r3, #31
 8007ef4:	d405      	bmi.n	8007f02 <_fclose_r+0x32>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	0599      	lsls	r1, r3, #22
 8007efa:	d402      	bmi.n	8007f02 <_fclose_r+0x32>
 8007efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007efe:	f000 faf7 	bl	80084f0 <__retarget_lock_acquire_recursive>
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	b98b      	cbnz	r3, 8007f2c <_fclose_r+0x5c>
 8007f08:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8007f0a:	f016 0601 	ands.w	r6, r6, #1
 8007f0e:	d1e3      	bne.n	8007ed8 <_fclose_r+0x8>
 8007f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f12:	f000 faee 	bl	80084f2 <__retarget_lock_release_recursive>
 8007f16:	e7e0      	b.n	8007eda <_fclose_r+0xa>
 8007f18:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <_fclose_r+0xd0>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d101      	bne.n	8007f22 <_fclose_r+0x52>
 8007f1e:	68ac      	ldr	r4, [r5, #8]
 8007f20:	e7e6      	b.n	8007ef0 <_fclose_r+0x20>
 8007f22:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <_fclose_r+0xd4>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	bf08      	it	eq
 8007f28:	68ec      	ldreq	r4, [r5, #12]
 8007f2a:	e7e1      	b.n	8007ef0 <_fclose_r+0x20>
 8007f2c:	4621      	mov	r1, r4
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 f878 	bl	8008024 <__sflush_r>
 8007f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f36:	4606      	mov	r6, r0
 8007f38:	b133      	cbz	r3, 8007f48 <_fclose_r+0x78>
 8007f3a:	6a21      	ldr	r1, [r4, #32]
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	4798      	blx	r3
 8007f40:	2800      	cmp	r0, #0
 8007f42:	bfb8      	it	lt
 8007f44:	f04f 36ff 	movlt.w	r6, #4294967295
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	061a      	lsls	r2, r3, #24
 8007f4c:	d503      	bpl.n	8007f56 <_fclose_r+0x86>
 8007f4e:	6921      	ldr	r1, [r4, #16]
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 faff 	bl	8008554 <_free_r>
 8007f56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f58:	b141      	cbz	r1, 8007f6c <_fclose_r+0x9c>
 8007f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d002      	beq.n	8007f68 <_fclose_r+0x98>
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 faf6 	bl	8008554 <_free_r>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6363      	str	r3, [r4, #52]	; 0x34
 8007f6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f6e:	b121      	cbz	r1, 8007f7a <_fclose_r+0xaa>
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 faef 	bl	8008554 <_free_r>
 8007f76:	2300      	movs	r3, #0
 8007f78:	64a3      	str	r3, [r4, #72]	; 0x48
 8007f7a:	f000 f967 	bl	800824c <__sfp_lock_acquire>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	81a3      	strh	r3, [r4, #12]
 8007f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f84:	07db      	lsls	r3, r3, #31
 8007f86:	d402      	bmi.n	8007f8e <_fclose_r+0xbe>
 8007f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8a:	f000 fab2 	bl	80084f2 <__retarget_lock_release_recursive>
 8007f8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f90:	f000 faad 	bl	80084ee <__retarget_lock_close_recursive>
 8007f94:	f000 f960 	bl	8008258 <__sfp_lock_release>
 8007f98:	e79f      	b.n	8007eda <_fclose_r+0xa>
 8007f9a:	bf00      	nop
 8007f9c:	0800a080 	.word	0x0800a080
 8007fa0:	0800a0a0 	.word	0x0800a0a0
 8007fa4:	0800a060 	.word	0x0800a060

08007fa8 <fclose>:
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <fclose+0xc>)
 8007faa:	4601      	mov	r1, r0
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	f7ff bf8f 	b.w	8007ed0 <_fclose_r>
 8007fb2:	bf00      	nop
 8007fb4:	20000014 	.word	0x20000014

08007fb8 <feof>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4b16      	ldr	r3, [pc, #88]	; (8008014 <feof+0x5c>)
 8007fbc:	681d      	ldr	r5, [r3, #0]
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	b125      	cbz	r5, 8007fcc <feof+0x14>
 8007fc2:	69ab      	ldr	r3, [r5, #24]
 8007fc4:	b913      	cbnz	r3, 8007fcc <feof+0x14>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 f958 	bl	800827c <__sinit>
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <feof+0x60>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d116      	bne.n	8008000 <feof+0x48>
 8007fd2:	686c      	ldr	r4, [r5, #4]
 8007fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd6:	07d8      	lsls	r0, r3, #31
 8007fd8:	d405      	bmi.n	8007fe6 <feof+0x2e>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0599      	lsls	r1, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <feof+0x2e>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f000 fa85 	bl	80084f0 <__retarget_lock_acquire_recursive>
 8007fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fe8:	89a3      	ldrh	r3, [r4, #12]
 8007fea:	07d2      	lsls	r2, r2, #31
 8007fec:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8007ff0:	d404      	bmi.n	8007ffc <feof+0x44>
 8007ff2:	059b      	lsls	r3, r3, #22
 8007ff4:	d402      	bmi.n	8007ffc <feof+0x44>
 8007ff6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff8:	f000 fa7b 	bl	80084f2 <__retarget_lock_release_recursive>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <feof+0x64>)
 8008002:	429c      	cmp	r4, r3
 8008004:	d101      	bne.n	800800a <feof+0x52>
 8008006:	68ac      	ldr	r4, [r5, #8]
 8008008:	e7e4      	b.n	8007fd4 <feof+0x1c>
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <feof+0x68>)
 800800c:	429c      	cmp	r4, r3
 800800e:	bf08      	it	eq
 8008010:	68ec      	ldreq	r4, [r5, #12]
 8008012:	e7df      	b.n	8007fd4 <feof+0x1c>
 8008014:	20000014 	.word	0x20000014
 8008018:	0800a080 	.word	0x0800a080
 800801c:	0800a0a0 	.word	0x0800a0a0
 8008020:	0800a060 	.word	0x0800a060

08008024 <__sflush_r>:
 8008024:	898a      	ldrh	r2, [r1, #12]
 8008026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	4605      	mov	r5, r0
 800802c:	0710      	lsls	r0, r2, #28
 800802e:	460c      	mov	r4, r1
 8008030:	d458      	bmi.n	80080e4 <__sflush_r+0xc0>
 8008032:	684b      	ldr	r3, [r1, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dc05      	bgt.n	8008044 <__sflush_r+0x20>
 8008038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc02      	bgt.n	8008044 <__sflush_r+0x20>
 800803e:	2000      	movs	r0, #0
 8008040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008046:	2e00      	cmp	r6, #0
 8008048:	d0f9      	beq.n	800803e <__sflush_r+0x1a>
 800804a:	2300      	movs	r3, #0
 800804c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008050:	682f      	ldr	r7, [r5, #0]
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	d032      	beq.n	80080bc <__sflush_r+0x98>
 8008056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	075a      	lsls	r2, r3, #29
 800805c:	d505      	bpl.n	800806a <__sflush_r+0x46>
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	1ac0      	subs	r0, r0, r3
 8008062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008064:	b10b      	cbz	r3, 800806a <__sflush_r+0x46>
 8008066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008068:	1ac0      	subs	r0, r0, r3
 800806a:	2300      	movs	r3, #0
 800806c:	4602      	mov	r2, r0
 800806e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008070:	6a21      	ldr	r1, [r4, #32]
 8008072:	4628      	mov	r0, r5
 8008074:	47b0      	blx	r6
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	d106      	bne.n	800808a <__sflush_r+0x66>
 800807c:	6829      	ldr	r1, [r5, #0]
 800807e:	291d      	cmp	r1, #29
 8008080:	d82c      	bhi.n	80080dc <__sflush_r+0xb8>
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <__sflush_r+0x108>)
 8008084:	40ca      	lsrs	r2, r1
 8008086:	07d6      	lsls	r6, r2, #31
 8008088:	d528      	bpl.n	80080dc <__sflush_r+0xb8>
 800808a:	2200      	movs	r2, #0
 800808c:	6062      	str	r2, [r4, #4]
 800808e:	04d9      	lsls	r1, r3, #19
 8008090:	6922      	ldr	r2, [r4, #16]
 8008092:	6022      	str	r2, [r4, #0]
 8008094:	d504      	bpl.n	80080a0 <__sflush_r+0x7c>
 8008096:	1c42      	adds	r2, r0, #1
 8008098:	d101      	bne.n	800809e <__sflush_r+0x7a>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b903      	cbnz	r3, 80080a0 <__sflush_r+0x7c>
 800809e:	6560      	str	r0, [r4, #84]	; 0x54
 80080a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a2:	602f      	str	r7, [r5, #0]
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d0ca      	beq.n	800803e <__sflush_r+0x1a>
 80080a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <__sflush_r+0x92>
 80080b0:	4628      	mov	r0, r5
 80080b2:	f000 fa4f 	bl	8008554 <_free_r>
 80080b6:	2000      	movs	r0, #0
 80080b8:	6360      	str	r0, [r4, #52]	; 0x34
 80080ba:	e7c1      	b.n	8008040 <__sflush_r+0x1c>
 80080bc:	6a21      	ldr	r1, [r4, #32]
 80080be:	2301      	movs	r3, #1
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b0      	blx	r6
 80080c4:	1c41      	adds	r1, r0, #1
 80080c6:	d1c7      	bne.n	8008058 <__sflush_r+0x34>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0c4      	beq.n	8008058 <__sflush_r+0x34>
 80080ce:	2b1d      	cmp	r3, #29
 80080d0:	d001      	beq.n	80080d6 <__sflush_r+0xb2>
 80080d2:	2b16      	cmp	r3, #22
 80080d4:	d101      	bne.n	80080da <__sflush_r+0xb6>
 80080d6:	602f      	str	r7, [r5, #0]
 80080d8:	e7b1      	b.n	800803e <__sflush_r+0x1a>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	e7ad      	b.n	8008040 <__sflush_r+0x1c>
 80080e4:	690f      	ldr	r7, [r1, #16]
 80080e6:	2f00      	cmp	r7, #0
 80080e8:	d0a9      	beq.n	800803e <__sflush_r+0x1a>
 80080ea:	0793      	lsls	r3, r2, #30
 80080ec:	680e      	ldr	r6, [r1, #0]
 80080ee:	bf08      	it	eq
 80080f0:	694b      	ldreq	r3, [r1, #20]
 80080f2:	600f      	str	r7, [r1, #0]
 80080f4:	bf18      	it	ne
 80080f6:	2300      	movne	r3, #0
 80080f8:	eba6 0807 	sub.w	r8, r6, r7
 80080fc:	608b      	str	r3, [r1, #8]
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	dd9c      	ble.n	800803e <__sflush_r+0x1a>
 8008104:	6a21      	ldr	r1, [r4, #32]
 8008106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008108:	4643      	mov	r3, r8
 800810a:	463a      	mov	r2, r7
 800810c:	4628      	mov	r0, r5
 800810e:	47b0      	blx	r6
 8008110:	2800      	cmp	r0, #0
 8008112:	dc06      	bgt.n	8008122 <__sflush_r+0xfe>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e78e      	b.n	8008040 <__sflush_r+0x1c>
 8008122:	4407      	add	r7, r0
 8008124:	eba8 0800 	sub.w	r8, r8, r0
 8008128:	e7e9      	b.n	80080fe <__sflush_r+0xda>
 800812a:	bf00      	nop
 800812c:	20400001 	.word	0x20400001

08008130 <_fflush_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	690b      	ldr	r3, [r1, #16]
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	b913      	cbnz	r3, 8008140 <_fflush_r+0x10>
 800813a:	2500      	movs	r5, #0
 800813c:	4628      	mov	r0, r5
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	b118      	cbz	r0, 800814a <_fflush_r+0x1a>
 8008142:	6983      	ldr	r3, [r0, #24]
 8008144:	b90b      	cbnz	r3, 800814a <_fflush_r+0x1a>
 8008146:	f000 f899 	bl	800827c <__sinit>
 800814a:	4b14      	ldr	r3, [pc, #80]	; (800819c <_fflush_r+0x6c>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d11b      	bne.n	8008188 <_fflush_r+0x58>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0ef      	beq.n	800813a <_fflush_r+0xa>
 800815a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800815c:	07d0      	lsls	r0, r2, #31
 800815e:	d404      	bmi.n	800816a <_fflush_r+0x3a>
 8008160:	0599      	lsls	r1, r3, #22
 8008162:	d402      	bmi.n	800816a <_fflush_r+0x3a>
 8008164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008166:	f000 f9c3 	bl	80084f0 <__retarget_lock_acquire_recursive>
 800816a:	4628      	mov	r0, r5
 800816c:	4621      	mov	r1, r4
 800816e:	f7ff ff59 	bl	8008024 <__sflush_r>
 8008172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008174:	07da      	lsls	r2, r3, #31
 8008176:	4605      	mov	r5, r0
 8008178:	d4e0      	bmi.n	800813c <_fflush_r+0xc>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	059b      	lsls	r3, r3, #22
 800817e:	d4dd      	bmi.n	800813c <_fflush_r+0xc>
 8008180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008182:	f000 f9b6 	bl	80084f2 <__retarget_lock_release_recursive>
 8008186:	e7d9      	b.n	800813c <_fflush_r+0xc>
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <_fflush_r+0x70>)
 800818a:	429c      	cmp	r4, r3
 800818c:	d101      	bne.n	8008192 <_fflush_r+0x62>
 800818e:	68ac      	ldr	r4, [r5, #8]
 8008190:	e7df      	b.n	8008152 <_fflush_r+0x22>
 8008192:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <_fflush_r+0x74>)
 8008194:	429c      	cmp	r4, r3
 8008196:	bf08      	it	eq
 8008198:	68ec      	ldreq	r4, [r5, #12]
 800819a:	e7da      	b.n	8008152 <_fflush_r+0x22>
 800819c:	0800a080 	.word	0x0800a080
 80081a0:	0800a0a0 	.word	0x0800a0a0
 80081a4:	0800a060 	.word	0x0800a060

080081a8 <fflush>:
 80081a8:	4601      	mov	r1, r0
 80081aa:	b920      	cbnz	r0, 80081b6 <fflush+0xe>
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <fflush+0x18>)
 80081ae:	4905      	ldr	r1, [pc, #20]	; (80081c4 <fflush+0x1c>)
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f000 b8e1 	b.w	8008378 <_fwalk_reent>
 80081b6:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <fflush+0x20>)
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f7ff bfb9 	b.w	8008130 <_fflush_r>
 80081be:	bf00      	nop
 80081c0:	0800a0c0 	.word	0x0800a0c0
 80081c4:	08008131 	.word	0x08008131
 80081c8:	20000014 	.word	0x20000014

080081cc <std>:
 80081cc:	2300      	movs	r3, #0
 80081ce:	b510      	push	{r4, lr}
 80081d0:	4604      	mov	r4, r0
 80081d2:	e9c0 3300 	strd	r3, r3, [r0]
 80081d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081da:	6083      	str	r3, [r0, #8]
 80081dc:	8181      	strh	r1, [r0, #12]
 80081de:	6643      	str	r3, [r0, #100]	; 0x64
 80081e0:	81c2      	strh	r2, [r0, #14]
 80081e2:	6183      	str	r3, [r0, #24]
 80081e4:	4619      	mov	r1, r3
 80081e6:	2208      	movs	r2, #8
 80081e8:	305c      	adds	r0, #92	; 0x5c
 80081ea:	f000 f9ab 	bl	8008544 <memset>
 80081ee:	4b05      	ldr	r3, [pc, #20]	; (8008204 <std+0x38>)
 80081f0:	6263      	str	r3, [r4, #36]	; 0x24
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <std+0x3c>)
 80081f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <std+0x40>)
 80081f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <std+0x44>)
 80081fc:	6224      	str	r4, [r4, #32]
 80081fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008200:	bd10      	pop	{r4, pc}
 8008202:	bf00      	nop
 8008204:	08008735 	.word	0x08008735
 8008208:	08008757 	.word	0x08008757
 800820c:	0800878f 	.word	0x0800878f
 8008210:	080087b3 	.word	0x080087b3

08008214 <_cleanup_r>:
 8008214:	4901      	ldr	r1, [pc, #4]	; (800821c <_cleanup_r+0x8>)
 8008216:	f000 b8af 	b.w	8008378 <_fwalk_reent>
 800821a:	bf00      	nop
 800821c:	08008131 	.word	0x08008131

08008220 <__sfmoreglue>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	2268      	movs	r2, #104	; 0x68
 8008224:	1e4d      	subs	r5, r1, #1
 8008226:	4355      	muls	r5, r2
 8008228:	460e      	mov	r6, r1
 800822a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800822e:	f000 f9fd 	bl	800862c <_malloc_r>
 8008232:	4604      	mov	r4, r0
 8008234:	b140      	cbz	r0, 8008248 <__sfmoreglue+0x28>
 8008236:	2100      	movs	r1, #0
 8008238:	e9c0 1600 	strd	r1, r6, [r0]
 800823c:	300c      	adds	r0, #12
 800823e:	60a0      	str	r0, [r4, #8]
 8008240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008244:	f000 f97e 	bl	8008544 <memset>
 8008248:	4620      	mov	r0, r4
 800824a:	bd70      	pop	{r4, r5, r6, pc}

0800824c <__sfp_lock_acquire>:
 800824c:	4801      	ldr	r0, [pc, #4]	; (8008254 <__sfp_lock_acquire+0x8>)
 800824e:	f000 b94f 	b.w	80084f0 <__retarget_lock_acquire_recursive>
 8008252:	bf00      	nop
 8008254:	20012ad9 	.word	0x20012ad9

08008258 <__sfp_lock_release>:
 8008258:	4801      	ldr	r0, [pc, #4]	; (8008260 <__sfp_lock_release+0x8>)
 800825a:	f000 b94a 	b.w	80084f2 <__retarget_lock_release_recursive>
 800825e:	bf00      	nop
 8008260:	20012ad9 	.word	0x20012ad9

08008264 <__sinit_lock_acquire>:
 8008264:	4801      	ldr	r0, [pc, #4]	; (800826c <__sinit_lock_acquire+0x8>)
 8008266:	f000 b943 	b.w	80084f0 <__retarget_lock_acquire_recursive>
 800826a:	bf00      	nop
 800826c:	20012ada 	.word	0x20012ada

08008270 <__sinit_lock_release>:
 8008270:	4801      	ldr	r0, [pc, #4]	; (8008278 <__sinit_lock_release+0x8>)
 8008272:	f000 b93e 	b.w	80084f2 <__retarget_lock_release_recursive>
 8008276:	bf00      	nop
 8008278:	20012ada 	.word	0x20012ada

0800827c <__sinit>:
 800827c:	b510      	push	{r4, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	f7ff fff0 	bl	8008264 <__sinit_lock_acquire>
 8008284:	69a3      	ldr	r3, [r4, #24]
 8008286:	b11b      	cbz	r3, 8008290 <__sinit+0x14>
 8008288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828c:	f7ff bff0 	b.w	8008270 <__sinit_lock_release>
 8008290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008294:	6523      	str	r3, [r4, #80]	; 0x50
 8008296:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <__sinit+0x68>)
 8008298:	4a13      	ldr	r2, [pc, #76]	; (80082e8 <__sinit+0x6c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	62a2      	str	r2, [r4, #40]	; 0x28
 800829e:	42a3      	cmp	r3, r4
 80082a0:	bf04      	itt	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	61a3      	streq	r3, [r4, #24]
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 f820 	bl	80082ec <__sfp>
 80082ac:	6060      	str	r0, [r4, #4]
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 f81c 	bl	80082ec <__sfp>
 80082b4:	60a0      	str	r0, [r4, #8]
 80082b6:	4620      	mov	r0, r4
 80082b8:	f000 f818 	bl	80082ec <__sfp>
 80082bc:	2200      	movs	r2, #0
 80082be:	60e0      	str	r0, [r4, #12]
 80082c0:	2104      	movs	r1, #4
 80082c2:	6860      	ldr	r0, [r4, #4]
 80082c4:	f7ff ff82 	bl	80081cc <std>
 80082c8:	68a0      	ldr	r0, [r4, #8]
 80082ca:	2201      	movs	r2, #1
 80082cc:	2109      	movs	r1, #9
 80082ce:	f7ff ff7d 	bl	80081cc <std>
 80082d2:	68e0      	ldr	r0, [r4, #12]
 80082d4:	2202      	movs	r2, #2
 80082d6:	2112      	movs	r1, #18
 80082d8:	f7ff ff78 	bl	80081cc <std>
 80082dc:	2301      	movs	r3, #1
 80082de:	61a3      	str	r3, [r4, #24]
 80082e0:	e7d2      	b.n	8008288 <__sinit+0xc>
 80082e2:	bf00      	nop
 80082e4:	0800a0c0 	.word	0x0800a0c0
 80082e8:	08008215 	.word	0x08008215

080082ec <__sfp>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	4607      	mov	r7, r0
 80082f0:	f7ff ffac 	bl	800824c <__sfp_lock_acquire>
 80082f4:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <__sfp+0x84>)
 80082f6:	681e      	ldr	r6, [r3, #0]
 80082f8:	69b3      	ldr	r3, [r6, #24]
 80082fa:	b913      	cbnz	r3, 8008302 <__sfp+0x16>
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ffbd 	bl	800827c <__sinit>
 8008302:	3648      	adds	r6, #72	; 0x48
 8008304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008308:	3b01      	subs	r3, #1
 800830a:	d503      	bpl.n	8008314 <__sfp+0x28>
 800830c:	6833      	ldr	r3, [r6, #0]
 800830e:	b30b      	cbz	r3, 8008354 <__sfp+0x68>
 8008310:	6836      	ldr	r6, [r6, #0]
 8008312:	e7f7      	b.n	8008304 <__sfp+0x18>
 8008314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008318:	b9d5      	cbnz	r5, 8008350 <__sfp+0x64>
 800831a:	4b16      	ldr	r3, [pc, #88]	; (8008374 <__sfp+0x88>)
 800831c:	60e3      	str	r3, [r4, #12]
 800831e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008322:	6665      	str	r5, [r4, #100]	; 0x64
 8008324:	f000 f8e2 	bl	80084ec <__retarget_lock_init_recursive>
 8008328:	f7ff ff96 	bl	8008258 <__sfp_lock_release>
 800832c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008334:	6025      	str	r5, [r4, #0]
 8008336:	61a5      	str	r5, [r4, #24]
 8008338:	2208      	movs	r2, #8
 800833a:	4629      	mov	r1, r5
 800833c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008340:	f000 f900 	bl	8008544 <memset>
 8008344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800834c:	4620      	mov	r0, r4
 800834e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008350:	3468      	adds	r4, #104	; 0x68
 8008352:	e7d9      	b.n	8008308 <__sfp+0x1c>
 8008354:	2104      	movs	r1, #4
 8008356:	4638      	mov	r0, r7
 8008358:	f7ff ff62 	bl	8008220 <__sfmoreglue>
 800835c:	4604      	mov	r4, r0
 800835e:	6030      	str	r0, [r6, #0]
 8008360:	2800      	cmp	r0, #0
 8008362:	d1d5      	bne.n	8008310 <__sfp+0x24>
 8008364:	f7ff ff78 	bl	8008258 <__sfp_lock_release>
 8008368:	230c      	movs	r3, #12
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	e7ee      	b.n	800834c <__sfp+0x60>
 800836e:	bf00      	nop
 8008370:	0800a0c0 	.word	0x0800a0c0
 8008374:	ffff0001 	.word	0xffff0001

08008378 <_fwalk_reent>:
 8008378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4606      	mov	r6, r0
 800837e:	4688      	mov	r8, r1
 8008380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008384:	2700      	movs	r7, #0
 8008386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800838a:	f1b9 0901 	subs.w	r9, r9, #1
 800838e:	d505      	bpl.n	800839c <_fwalk_reent+0x24>
 8008390:	6824      	ldr	r4, [r4, #0]
 8008392:	2c00      	cmp	r4, #0
 8008394:	d1f7      	bne.n	8008386 <_fwalk_reent+0xe>
 8008396:	4638      	mov	r0, r7
 8008398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800839c:	89ab      	ldrh	r3, [r5, #12]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d907      	bls.n	80083b2 <_fwalk_reent+0x3a>
 80083a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083a6:	3301      	adds	r3, #1
 80083a8:	d003      	beq.n	80083b2 <_fwalk_reent+0x3a>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	47c0      	blx	r8
 80083b0:	4307      	orrs	r7, r0
 80083b2:	3568      	adds	r5, #104	; 0x68
 80083b4:	e7e9      	b.n	800838a <_fwalk_reent+0x12>
	...

080083b8 <_fwrite_r>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	9c08      	ldr	r4, [sp, #32]
 80083be:	468a      	mov	sl, r1
 80083c0:	4690      	mov	r8, r2
 80083c2:	fb02 f903 	mul.w	r9, r2, r3
 80083c6:	4605      	mov	r5, r0
 80083c8:	b118      	cbz	r0, 80083d2 <_fwrite_r+0x1a>
 80083ca:	6983      	ldr	r3, [r0, #24]
 80083cc:	b90b      	cbnz	r3, 80083d2 <_fwrite_r+0x1a>
 80083ce:	f7ff ff55 	bl	800827c <__sinit>
 80083d2:	4b26      	ldr	r3, [pc, #152]	; (800846c <_fwrite_r+0xb4>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	d123      	bne.n	8008420 <_fwrite_r+0x68>
 80083d8:	686c      	ldr	r4, [r5, #4]
 80083da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083dc:	07de      	lsls	r6, r3, #31
 80083de:	d405      	bmi.n	80083ec <_fwrite_r+0x34>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	0598      	lsls	r0, r3, #22
 80083e4:	d402      	bmi.n	80083ec <_fwrite_r+0x34>
 80083e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e8:	f000 f882 	bl	80084f0 <__retarget_lock_acquire_recursive>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	0719      	lsls	r1, r3, #28
 80083f0:	d520      	bpl.n	8008434 <_fwrite_r+0x7c>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	b1f3      	cbz	r3, 8008434 <_fwrite_r+0x7c>
 80083f6:	2600      	movs	r6, #0
 80083f8:	454e      	cmp	r6, r9
 80083fa:	d029      	beq.n	8008450 <_fwrite_r+0x98>
 80083fc:	68a7      	ldr	r7, [r4, #8]
 80083fe:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8008402:	3f01      	subs	r7, #1
 8008404:	2f00      	cmp	r7, #0
 8008406:	60a7      	str	r7, [r4, #8]
 8008408:	da04      	bge.n	8008414 <_fwrite_r+0x5c>
 800840a:	69a3      	ldr	r3, [r4, #24]
 800840c:	429f      	cmp	r7, r3
 800840e:	db19      	blt.n	8008444 <_fwrite_r+0x8c>
 8008410:	290a      	cmp	r1, #10
 8008412:	d017      	beq.n	8008444 <_fwrite_r+0x8c>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	6022      	str	r2, [r4, #0]
 800841a:	7019      	strb	r1, [r3, #0]
 800841c:	3601      	adds	r6, #1
 800841e:	e7eb      	b.n	80083f8 <_fwrite_r+0x40>
 8008420:	4b13      	ldr	r3, [pc, #76]	; (8008470 <_fwrite_r+0xb8>)
 8008422:	429c      	cmp	r4, r3
 8008424:	d101      	bne.n	800842a <_fwrite_r+0x72>
 8008426:	68ac      	ldr	r4, [r5, #8]
 8008428:	e7d7      	b.n	80083da <_fwrite_r+0x22>
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <_fwrite_r+0xbc>)
 800842c:	429c      	cmp	r4, r3
 800842e:	bf08      	it	eq
 8008430:	68ec      	ldreq	r4, [r5, #12]
 8008432:	e7d2      	b.n	80083da <_fwrite_r+0x22>
 8008434:	4621      	mov	r1, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 fb30 	bl	8008a9c <__swsetup_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0da      	beq.n	80083f6 <_fwrite_r+0x3e>
 8008440:	2600      	movs	r6, #0
 8008442:	e005      	b.n	8008450 <_fwrite_r+0x98>
 8008444:	4622      	mov	r2, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 fac4 	bl	80089d4 <__swbuf_r>
 800844c:	3001      	adds	r0, #1
 800844e:	d1e5      	bne.n	800841c <_fwrite_r+0x64>
 8008450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d405      	bmi.n	8008462 <_fwrite_r+0xaa>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	059b      	lsls	r3, r3, #22
 800845a:	d402      	bmi.n	8008462 <_fwrite_r+0xaa>
 800845c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800845e:	f000 f848 	bl	80084f2 <__retarget_lock_release_recursive>
 8008462:	fbb6 f0f8 	udiv	r0, r6, r8
 8008466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846a:	bf00      	nop
 800846c:	0800a080 	.word	0x0800a080
 8008470:	0800a0a0 	.word	0x0800a0a0
 8008474:	0800a060 	.word	0x0800a060

08008478 <fwrite>:
 8008478:	b507      	push	{r0, r1, r2, lr}
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	460a      	mov	r2, r1
 8008480:	4601      	mov	r1, r0
 8008482:	4803      	ldr	r0, [pc, #12]	; (8008490 <fwrite+0x18>)
 8008484:	6800      	ldr	r0, [r0, #0]
 8008486:	f7ff ff97 	bl	80083b8 <_fwrite_r>
 800848a:	b003      	add	sp, #12
 800848c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008490:	20000014 	.word	0x20000014

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	; (80084cc <__libc_init_array+0x38>)
 8008498:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <__libc_init_array+0x3c>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	2600      	movs	r6, #0
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	; (80084d4 <__libc_init_array+0x40>)
 80084a6:	4c0c      	ldr	r4, [pc, #48]	; (80084d8 <__libc_init_array+0x44>)
 80084a8:	f001 f84a 	bl	8009540 <_init>
 80084ac:	1b64      	subs	r4, r4, r5
 80084ae:	10a4      	asrs	r4, r4, #2
 80084b0:	2600      	movs	r6, #0
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	4798      	blx	r3
 80084be:	3601      	adds	r6, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	4798      	blx	r3
 80084c8:	3601      	adds	r6, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	0800a204 	.word	0x0800a204
 80084d0:	0800a204 	.word	0x0800a204
 80084d4:	0800a204 	.word	0x0800a204
 80084d8:	0800a24c 	.word	0x0800a24c

080084dc <isspace>:
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <isspace+0xc>)
 80084de:	4418      	add	r0, r3
 80084e0:	7840      	ldrb	r0, [r0, #1]
 80084e2:	f000 0008 	and.w	r0, r0, #8
 80084e6:	4770      	bx	lr
 80084e8:	0800a0c4 	.word	0x0800a0c4

080084ec <__retarget_lock_init_recursive>:
 80084ec:	4770      	bx	lr

080084ee <__retarget_lock_close_recursive>:
 80084ee:	4770      	bx	lr

080084f0 <__retarget_lock_acquire_recursive>:
 80084f0:	4770      	bx	lr

080084f2 <__retarget_lock_release_recursive>:
 80084f2:	4770      	bx	lr

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <memmove>:
 8008510:	4288      	cmp	r0, r1
 8008512:	b510      	push	{r4, lr}
 8008514:	eb01 0402 	add.w	r4, r1, r2
 8008518:	d902      	bls.n	8008520 <memmove+0x10>
 800851a:	4284      	cmp	r4, r0
 800851c:	4623      	mov	r3, r4
 800851e:	d807      	bhi.n	8008530 <memmove+0x20>
 8008520:	1e43      	subs	r3, r0, #1
 8008522:	42a1      	cmp	r1, r4
 8008524:	d008      	beq.n	8008538 <memmove+0x28>
 8008526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800852a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800852e:	e7f8      	b.n	8008522 <memmove+0x12>
 8008530:	4402      	add	r2, r0
 8008532:	4601      	mov	r1, r0
 8008534:	428a      	cmp	r2, r1
 8008536:	d100      	bne.n	800853a <memmove+0x2a>
 8008538:	bd10      	pop	{r4, pc}
 800853a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800853e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008542:	e7f7      	b.n	8008534 <memmove+0x24>

08008544 <memset>:
 8008544:	4402      	add	r2, r0
 8008546:	4603      	mov	r3, r0
 8008548:	4293      	cmp	r3, r2
 800854a:	d100      	bne.n	800854e <memset+0xa>
 800854c:	4770      	bx	lr
 800854e:	f803 1b01 	strb.w	r1, [r3], #1
 8008552:	e7f9      	b.n	8008548 <memset+0x4>

08008554 <_free_r>:
 8008554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008556:	2900      	cmp	r1, #0
 8008558:	d044      	beq.n	80085e4 <_free_r+0x90>
 800855a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855e:	9001      	str	r0, [sp, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f1a1 0404 	sub.w	r4, r1, #4
 8008566:	bfb8      	it	lt
 8008568:	18e4      	addlt	r4, r4, r3
 800856a:	f000 fb8d 	bl	8008c88 <__malloc_lock>
 800856e:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <_free_r+0x94>)
 8008570:	9801      	ldr	r0, [sp, #4]
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	b933      	cbnz	r3, 8008584 <_free_r+0x30>
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	6014      	str	r4, [r2, #0]
 800857a:	b003      	add	sp, #12
 800857c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008580:	f000 bb88 	b.w	8008c94 <__malloc_unlock>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d908      	bls.n	800859a <_free_r+0x46>
 8008588:	6825      	ldr	r5, [r4, #0]
 800858a:	1961      	adds	r1, r4, r5
 800858c:	428b      	cmp	r3, r1
 800858e:	bf01      	itttt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	1949      	addeq	r1, r1, r5
 8008596:	6021      	streq	r1, [r4, #0]
 8008598:	e7ed      	b.n	8008576 <_free_r+0x22>
 800859a:	461a      	mov	r2, r3
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b10b      	cbz	r3, 80085a4 <_free_r+0x50>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x46>
 80085a4:	6811      	ldr	r1, [r2, #0]
 80085a6:	1855      	adds	r5, r2, r1
 80085a8:	42a5      	cmp	r5, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x70>
 80085ac:	6824      	ldr	r4, [r4, #0]
 80085ae:	4421      	add	r1, r4
 80085b0:	1854      	adds	r4, r2, r1
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	d1e0      	bne.n	800857a <_free_r+0x26>
 80085b8:	681c      	ldr	r4, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	6053      	str	r3, [r2, #4]
 80085be:	4421      	add	r1, r4
 80085c0:	6011      	str	r1, [r2, #0]
 80085c2:	e7da      	b.n	800857a <_free_r+0x26>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x78>
 80085c6:	230c      	movs	r3, #12
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	e7d6      	b.n	800857a <_free_r+0x26>
 80085cc:	6825      	ldr	r5, [r4, #0]
 80085ce:	1961      	adds	r1, r4, r5
 80085d0:	428b      	cmp	r3, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6819      	ldreq	r1, [r3, #0]
 80085d6:	685b      	ldreq	r3, [r3, #4]
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1949      	addeq	r1, r1, r5
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	6054      	str	r4, [r2, #4]
 80085e2:	e7ca      	b.n	800857a <_free_r+0x26>
 80085e4:	b003      	add	sp, #12
 80085e6:	bd30      	pop	{r4, r5, pc}
 80085e8:	20012adc 	.word	0x20012adc

080085ec <sbrk_aligned>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	4e0e      	ldr	r6, [pc, #56]	; (8008628 <sbrk_aligned+0x3c>)
 80085f0:	460c      	mov	r4, r1
 80085f2:	6831      	ldr	r1, [r6, #0]
 80085f4:	4605      	mov	r5, r0
 80085f6:	b911      	cbnz	r1, 80085fe <sbrk_aligned+0x12>
 80085f8:	f000 f88c 	bl	8008714 <_sbrk_r>
 80085fc:	6030      	str	r0, [r6, #0]
 80085fe:	4621      	mov	r1, r4
 8008600:	4628      	mov	r0, r5
 8008602:	f000 f887 	bl	8008714 <_sbrk_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d00a      	beq.n	8008620 <sbrk_aligned+0x34>
 800860a:	1cc4      	adds	r4, r0, #3
 800860c:	f024 0403 	bic.w	r4, r4, #3
 8008610:	42a0      	cmp	r0, r4
 8008612:	d007      	beq.n	8008624 <sbrk_aligned+0x38>
 8008614:	1a21      	subs	r1, r4, r0
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f87c 	bl	8008714 <_sbrk_r>
 800861c:	3001      	adds	r0, #1
 800861e:	d101      	bne.n	8008624 <sbrk_aligned+0x38>
 8008620:	f04f 34ff 	mov.w	r4, #4294967295
 8008624:	4620      	mov	r0, r4
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	20012ae0 	.word	0x20012ae0

0800862c <_malloc_r>:
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	1ccd      	adds	r5, r1, #3
 8008632:	f025 0503 	bic.w	r5, r5, #3
 8008636:	3508      	adds	r5, #8
 8008638:	2d0c      	cmp	r5, #12
 800863a:	bf38      	it	cc
 800863c:	250c      	movcc	r5, #12
 800863e:	2d00      	cmp	r5, #0
 8008640:	4607      	mov	r7, r0
 8008642:	db01      	blt.n	8008648 <_malloc_r+0x1c>
 8008644:	42a9      	cmp	r1, r5
 8008646:	d905      	bls.n	8008654 <_malloc_r+0x28>
 8008648:	230c      	movs	r3, #12
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	2600      	movs	r6, #0
 800864e:	4630      	mov	r0, r6
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	4e2e      	ldr	r6, [pc, #184]	; (8008710 <_malloc_r+0xe4>)
 8008656:	f000 fb17 	bl	8008c88 <__malloc_lock>
 800865a:	6833      	ldr	r3, [r6, #0]
 800865c:	461c      	mov	r4, r3
 800865e:	bb34      	cbnz	r4, 80086ae <_malloc_r+0x82>
 8008660:	4629      	mov	r1, r5
 8008662:	4638      	mov	r0, r7
 8008664:	f7ff ffc2 	bl	80085ec <sbrk_aligned>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	4604      	mov	r4, r0
 800866c:	d14d      	bne.n	800870a <_malloc_r+0xde>
 800866e:	6834      	ldr	r4, [r6, #0]
 8008670:	4626      	mov	r6, r4
 8008672:	2e00      	cmp	r6, #0
 8008674:	d140      	bne.n	80086f8 <_malloc_r+0xcc>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	4631      	mov	r1, r6
 800867a:	4638      	mov	r0, r7
 800867c:	eb04 0803 	add.w	r8, r4, r3
 8008680:	f000 f848 	bl	8008714 <_sbrk_r>
 8008684:	4580      	cmp	r8, r0
 8008686:	d13a      	bne.n	80086fe <_malloc_r+0xd2>
 8008688:	6821      	ldr	r1, [r4, #0]
 800868a:	3503      	adds	r5, #3
 800868c:	1a6d      	subs	r5, r5, r1
 800868e:	f025 0503 	bic.w	r5, r5, #3
 8008692:	3508      	adds	r5, #8
 8008694:	2d0c      	cmp	r5, #12
 8008696:	bf38      	it	cc
 8008698:	250c      	movcc	r5, #12
 800869a:	4629      	mov	r1, r5
 800869c:	4638      	mov	r0, r7
 800869e:	f7ff ffa5 	bl	80085ec <sbrk_aligned>
 80086a2:	3001      	adds	r0, #1
 80086a4:	d02b      	beq.n	80086fe <_malloc_r+0xd2>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	442b      	add	r3, r5
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	e00e      	b.n	80086cc <_malloc_r+0xa0>
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	1b52      	subs	r2, r2, r5
 80086b2:	d41e      	bmi.n	80086f2 <_malloc_r+0xc6>
 80086b4:	2a0b      	cmp	r2, #11
 80086b6:	d916      	bls.n	80086e6 <_malloc_r+0xba>
 80086b8:	1961      	adds	r1, r4, r5
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	6025      	str	r5, [r4, #0]
 80086be:	bf18      	it	ne
 80086c0:	6059      	strne	r1, [r3, #4]
 80086c2:	6863      	ldr	r3, [r4, #4]
 80086c4:	bf08      	it	eq
 80086c6:	6031      	streq	r1, [r6, #0]
 80086c8:	5162      	str	r2, [r4, r5]
 80086ca:	604b      	str	r3, [r1, #4]
 80086cc:	4638      	mov	r0, r7
 80086ce:	f104 060b 	add.w	r6, r4, #11
 80086d2:	f000 fadf 	bl	8008c94 <__malloc_unlock>
 80086d6:	f026 0607 	bic.w	r6, r6, #7
 80086da:	1d23      	adds	r3, r4, #4
 80086dc:	1af2      	subs	r2, r6, r3
 80086de:	d0b6      	beq.n	800864e <_malloc_r+0x22>
 80086e0:	1b9b      	subs	r3, r3, r6
 80086e2:	50a3      	str	r3, [r4, r2]
 80086e4:	e7b3      	b.n	800864e <_malloc_r+0x22>
 80086e6:	6862      	ldr	r2, [r4, #4]
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	bf0c      	ite	eq
 80086ec:	6032      	streq	r2, [r6, #0]
 80086ee:	605a      	strne	r2, [r3, #4]
 80086f0:	e7ec      	b.n	80086cc <_malloc_r+0xa0>
 80086f2:	4623      	mov	r3, r4
 80086f4:	6864      	ldr	r4, [r4, #4]
 80086f6:	e7b2      	b.n	800865e <_malloc_r+0x32>
 80086f8:	4634      	mov	r4, r6
 80086fa:	6876      	ldr	r6, [r6, #4]
 80086fc:	e7b9      	b.n	8008672 <_malloc_r+0x46>
 80086fe:	230c      	movs	r3, #12
 8008700:	603b      	str	r3, [r7, #0]
 8008702:	4638      	mov	r0, r7
 8008704:	f000 fac6 	bl	8008c94 <__malloc_unlock>
 8008708:	e7a1      	b.n	800864e <_malloc_r+0x22>
 800870a:	6025      	str	r5, [r4, #0]
 800870c:	e7de      	b.n	80086cc <_malloc_r+0xa0>
 800870e:	bf00      	nop
 8008710:	20012adc 	.word	0x20012adc

08008714 <_sbrk_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d06      	ldr	r5, [pc, #24]	; (8008730 <_sbrk_r+0x1c>)
 8008718:	2300      	movs	r3, #0
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	f000 fee2 	bl	80094e8 <_sbrk>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_sbrk_r+0x1a>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_sbrk_r+0x1a>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20012ae4 	.word	0x20012ae4

08008734 <__sread>:
 8008734:	b510      	push	{r4, lr}
 8008736:	460c      	mov	r4, r1
 8008738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873c:	f000 fda0 	bl	8009280 <_read_r>
 8008740:	2800      	cmp	r0, #0
 8008742:	bfab      	itete	ge
 8008744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008746:	89a3      	ldrhlt	r3, [r4, #12]
 8008748:	181b      	addge	r3, r3, r0
 800874a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800874e:	bfac      	ite	ge
 8008750:	6563      	strge	r3, [r4, #84]	; 0x54
 8008752:	81a3      	strhlt	r3, [r4, #12]
 8008754:	bd10      	pop	{r4, pc}

08008756 <__swrite>:
 8008756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875a:	461f      	mov	r7, r3
 800875c:	898b      	ldrh	r3, [r1, #12]
 800875e:	05db      	lsls	r3, r3, #23
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4616      	mov	r6, r2
 8008766:	d505      	bpl.n	8008774 <__swrite+0x1e>
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	2302      	movs	r3, #2
 800876e:	2200      	movs	r2, #0
 8008770:	f000 fa12 	bl	8008b98 <_lseek_r>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800877a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	4632      	mov	r2, r6
 8008782:	463b      	mov	r3, r7
 8008784:	4628      	mov	r0, r5
 8008786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	f000 b975 	b.w	8008a78 <_write_r>

0800878e <__sseek>:
 800878e:	b510      	push	{r4, lr}
 8008790:	460c      	mov	r4, r1
 8008792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008796:	f000 f9ff 	bl	8008b98 <_lseek_r>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	bf15      	itete	ne
 80087a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087aa:	81a3      	strheq	r3, [r4, #12]
 80087ac:	bf18      	it	ne
 80087ae:	81a3      	strhne	r3, [r4, #12]
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <__sclose>:
 80087b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b6:	f000 b9df 	b.w	8008b78 <_close_r>
	...

080087bc <strcasecmp>:
 80087bc:	b530      	push	{r4, r5, lr}
 80087be:	4d0b      	ldr	r5, [pc, #44]	; (80087ec <strcasecmp+0x30>)
 80087c0:	4604      	mov	r4, r0
 80087c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087c6:	5d5a      	ldrb	r2, [r3, r5]
 80087c8:	f002 0203 	and.w	r2, r2, #3
 80087cc:	2a01      	cmp	r2, #1
 80087ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087d2:	5ca8      	ldrb	r0, [r5, r2]
 80087d4:	f000 0003 	and.w	r0, r0, #3
 80087d8:	bf08      	it	eq
 80087da:	3320      	addeq	r3, #32
 80087dc:	2801      	cmp	r0, #1
 80087de:	bf08      	it	eq
 80087e0:	3220      	addeq	r2, #32
 80087e2:	1a98      	subs	r0, r3, r2
 80087e4:	d101      	bne.n	80087ea <strcasecmp+0x2e>
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	d1eb      	bne.n	80087c2 <strcasecmp+0x6>
 80087ea:	bd30      	pop	{r4, r5, pc}
 80087ec:	0800a0c5 	.word	0x0800a0c5

080087f0 <strchr>:
 80087f0:	b2c9      	uxtb	r1, r1
 80087f2:	4603      	mov	r3, r0
 80087f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f8:	b11a      	cbz	r2, 8008802 <strchr+0x12>
 80087fa:	428a      	cmp	r2, r1
 80087fc:	d1f9      	bne.n	80087f2 <strchr+0x2>
 80087fe:	4618      	mov	r0, r3
 8008800:	4770      	bx	lr
 8008802:	2900      	cmp	r1, #0
 8008804:	bf18      	it	ne
 8008806:	2300      	movne	r3, #0
 8008808:	e7f9      	b.n	80087fe <strchr+0xe>
	...

0800880c <strlwr>:
 800880c:	b510      	push	{r4, lr}
 800880e:	4c07      	ldr	r4, [pc, #28]	; (800882c <strlwr+0x20>)
 8008810:	1e42      	subs	r2, r0, #1
 8008812:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008816:	b903      	cbnz	r3, 800881a <strlwr+0xe>
 8008818:	bd10      	pop	{r4, pc}
 800881a:	5ce1      	ldrb	r1, [r4, r3]
 800881c:	f001 0103 	and.w	r1, r1, #3
 8008820:	2901      	cmp	r1, #1
 8008822:	bf08      	it	eq
 8008824:	3320      	addeq	r3, #32
 8008826:	7013      	strb	r3, [r2, #0]
 8008828:	e7f3      	b.n	8008812 <strlwr+0x6>
 800882a:	bf00      	nop
 800882c:	0800a0c5 	.word	0x0800a0c5

08008830 <strncasecmp>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4e0f      	ldr	r6, [pc, #60]	; (8008870 <strncasecmp+0x40>)
 8008834:	4604      	mov	r4, r0
 8008836:	440a      	add	r2, r1
 8008838:	428a      	cmp	r2, r1
 800883a:	d101      	bne.n	8008840 <strncasecmp+0x10>
 800883c:	2000      	movs	r0, #0
 800883e:	e013      	b.n	8008868 <strncasecmp+0x38>
 8008840:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008844:	5d98      	ldrb	r0, [r3, r6]
 8008846:	f000 0003 	and.w	r0, r0, #3
 800884a:	2801      	cmp	r0, #1
 800884c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008850:	5c35      	ldrb	r5, [r6, r0]
 8008852:	f005 0503 	and.w	r5, r5, #3
 8008856:	bf08      	it	eq
 8008858:	3320      	addeq	r3, #32
 800885a:	2d01      	cmp	r5, #1
 800885c:	bf08      	it	eq
 800885e:	3020      	addeq	r0, #32
 8008860:	1a1b      	subs	r3, r3, r0
 8008862:	d102      	bne.n	800886a <strncasecmp+0x3a>
 8008864:	2800      	cmp	r0, #0
 8008866:	d1e7      	bne.n	8008838 <strncasecmp+0x8>
 8008868:	bd70      	pop	{r4, r5, r6, pc}
 800886a:	4618      	mov	r0, r3
 800886c:	e7fc      	b.n	8008868 <strncasecmp+0x38>
 800886e:	bf00      	nop
 8008870:	0800a0c5 	.word	0x0800a0c5

08008874 <strncat>:
 8008874:	b530      	push	{r4, r5, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	7825      	ldrb	r5, [r4, #0]
 800887a:	4623      	mov	r3, r4
 800887c:	3401      	adds	r4, #1
 800887e:	2d00      	cmp	r5, #0
 8008880:	d1fa      	bne.n	8008878 <strncat+0x4>
 8008882:	3a01      	subs	r2, #1
 8008884:	d304      	bcc.n	8008890 <strncat+0x1c>
 8008886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888a:	f803 4b01 	strb.w	r4, [r3], #1
 800888e:	b904      	cbnz	r4, 8008892 <strncat+0x1e>
 8008890:	bd30      	pop	{r4, r5, pc}
 8008892:	2a00      	cmp	r2, #0
 8008894:	d1f5      	bne.n	8008882 <strncat+0xe>
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	e7f3      	b.n	8008882 <strncat+0xe>

0800889a <strncmp>:
 800889a:	b510      	push	{r4, lr}
 800889c:	b17a      	cbz	r2, 80088be <strncmp+0x24>
 800889e:	4603      	mov	r3, r0
 80088a0:	3901      	subs	r1, #1
 80088a2:	1884      	adds	r4, r0, r2
 80088a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80088ac:	4290      	cmp	r0, r2
 80088ae:	d101      	bne.n	80088b4 <strncmp+0x1a>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d101      	bne.n	80088b8 <strncmp+0x1e>
 80088b4:	1a80      	subs	r0, r0, r2
 80088b6:	bd10      	pop	{r4, pc}
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1f3      	bne.n	80088a4 <strncmp+0xa>
 80088bc:	e7fa      	b.n	80088b4 <strncmp+0x1a>
 80088be:	4610      	mov	r0, r2
 80088c0:	e7f9      	b.n	80088b6 <strncmp+0x1c>

080088c2 <strncpy>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	3901      	subs	r1, #1
 80088c6:	4603      	mov	r3, r0
 80088c8:	b132      	cbz	r2, 80088d8 <strncpy+0x16>
 80088ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80088ce:	f803 4b01 	strb.w	r4, [r3], #1
 80088d2:	3a01      	subs	r2, #1
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	d1f7      	bne.n	80088c8 <strncpy+0x6>
 80088d8:	441a      	add	r2, r3
 80088da:	2100      	movs	r1, #0
 80088dc:	4293      	cmp	r3, r2
 80088de:	d100      	bne.n	80088e2 <strncpy+0x20>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	f803 1b01 	strb.w	r1, [r3], #1
 80088e6:	e7f9      	b.n	80088dc <strncpy+0x1a>

080088e8 <strrchr>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4603      	mov	r3, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	b969      	cbnz	r1, 800890c <strrchr+0x24>
 80088f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f4:	f7ff bf7c 	b.w	80087f0 <strchr>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	4605      	mov	r5, r0
 80088fc:	4621      	mov	r1, r4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff ff76 	bl	80087f0 <strchr>
 8008904:	2800      	cmp	r0, #0
 8008906:	d1f7      	bne.n	80088f8 <strrchr+0x10>
 8008908:	4628      	mov	r0, r5
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	2500      	movs	r5, #0
 800890e:	e7f5      	b.n	80088fc <strrchr+0x14>

08008910 <strstr>:
 8008910:	780a      	ldrb	r2, [r1, #0]
 8008912:	b570      	push	{r4, r5, r6, lr}
 8008914:	b96a      	cbnz	r2, 8008932 <strstr+0x22>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	429a      	cmp	r2, r3
 800891a:	d109      	bne.n	8008930 <strstr+0x20>
 800891c:	460c      	mov	r4, r1
 800891e:	4605      	mov	r5, r0
 8008920:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f6      	beq.n	8008916 <strstr+0x6>
 8008928:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800892c:	429e      	cmp	r6, r3
 800892e:	d0f7      	beq.n	8008920 <strstr+0x10>
 8008930:	3001      	adds	r0, #1
 8008932:	7803      	ldrb	r3, [r0, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ef      	bne.n	8008918 <strstr+0x8>
 8008938:	4618      	mov	r0, r3
 800893a:	e7ec      	b.n	8008916 <strstr+0x6>

0800893c <strupr>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4c07      	ldr	r4, [pc, #28]	; (800895c <strupr+0x20>)
 8008940:	1e42      	subs	r2, r0, #1
 8008942:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008946:	b903      	cbnz	r3, 800894a <strupr+0xe>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	5ce1      	ldrb	r1, [r4, r3]
 800894c:	f001 0103 	and.w	r1, r1, #3
 8008950:	2902      	cmp	r1, #2
 8008952:	bf08      	it	eq
 8008954:	3b20      	subeq	r3, #32
 8008956:	7013      	strb	r3, [r2, #0]
 8008958:	e7f3      	b.n	8008942 <strupr+0x6>
 800895a:	bf00      	nop
 800895c:	0800a0c5 	.word	0x0800a0c5

08008960 <_vsniprintf_r>:
 8008960:	b530      	push	{r4, r5, lr}
 8008962:	4614      	mov	r4, r2
 8008964:	2c00      	cmp	r4, #0
 8008966:	b09b      	sub	sp, #108	; 0x6c
 8008968:	4605      	mov	r5, r0
 800896a:	461a      	mov	r2, r3
 800896c:	da05      	bge.n	800897a <_vsniprintf_r+0x1a>
 800896e:	238b      	movs	r3, #139	; 0x8b
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	b01b      	add	sp, #108	; 0x6c
 8008978:	bd30      	pop	{r4, r5, pc}
 800897a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800897e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008982:	bf14      	ite	ne
 8008984:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008988:	4623      	moveq	r3, r4
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008992:	9100      	str	r1, [sp, #0]
 8008994:	9104      	str	r1, [sp, #16]
 8008996:	f8ad 300e 	strh.w	r3, [sp, #14]
 800899a:	4669      	mov	r1, sp
 800899c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800899e:	f000 f9db 	bl	8008d58 <_svfiprintf_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	bfbc      	itt	lt
 80089a6:	238b      	movlt	r3, #139	; 0x8b
 80089a8:	602b      	strlt	r3, [r5, #0]
 80089aa:	2c00      	cmp	r4, #0
 80089ac:	d0e3      	beq.n	8008976 <_vsniprintf_r+0x16>
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e7df      	b.n	8008976 <_vsniprintf_r+0x16>
	...

080089b8 <vsniprintf>:
 80089b8:	b507      	push	{r0, r1, r2, lr}
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	460a      	mov	r2, r1
 80089c0:	4601      	mov	r1, r0
 80089c2:	4803      	ldr	r0, [pc, #12]	; (80089d0 <vsniprintf+0x18>)
 80089c4:	6800      	ldr	r0, [r0, #0]
 80089c6:	f7ff ffcb 	bl	8008960 <_vsniprintf_r>
 80089ca:	b003      	add	sp, #12
 80089cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80089d0:	20000014 	.word	0x20000014

080089d4 <__swbuf_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	4605      	mov	r5, r0
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x12>
 80089de:	6983      	ldr	r3, [r0, #24]
 80089e0:	b90b      	cbnz	r3, 80089e6 <__swbuf_r+0x12>
 80089e2:	f7ff fc4b 	bl	800827c <__sinit>
 80089e6:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <__swbuf_r+0x98>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d12b      	bne.n	8008a44 <__swbuf_r+0x70>
 80089ec:	686c      	ldr	r4, [r5, #4]
 80089ee:	69a3      	ldr	r3, [r4, #24]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	071a      	lsls	r2, r3, #28
 80089f6:	d52f      	bpl.n	8008a58 <__swbuf_r+0x84>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	b36b      	cbz	r3, 8008a58 <__swbuf_r+0x84>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1ac0      	subs	r0, r0, r3
 8008a02:	6963      	ldr	r3, [r4, #20]
 8008a04:	b2f6      	uxtb	r6, r6
 8008a06:	4283      	cmp	r3, r0
 8008a08:	4637      	mov	r7, r6
 8008a0a:	dc04      	bgt.n	8008a16 <__swbuf_r+0x42>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff fb8e 	bl	8008130 <_fflush_r>
 8008a14:	bb30      	cbnz	r0, 8008a64 <__swbuf_r+0x90>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	60a3      	str	r3, [r4, #8]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	701e      	strb	r6, [r3, #0]
 8008a24:	6963      	ldr	r3, [r4, #20]
 8008a26:	3001      	adds	r0, #1
 8008a28:	4283      	cmp	r3, r0
 8008a2a:	d004      	beq.n	8008a36 <__swbuf_r+0x62>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d506      	bpl.n	8008a40 <__swbuf_r+0x6c>
 8008a32:	2e0a      	cmp	r6, #10
 8008a34:	d104      	bne.n	8008a40 <__swbuf_r+0x6c>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f7ff fb79 	bl	8008130 <_fflush_r>
 8008a3e:	b988      	cbnz	r0, 8008a64 <__swbuf_r+0x90>
 8008a40:	4638      	mov	r0, r7
 8008a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <__swbuf_r+0x9c>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d101      	bne.n	8008a4e <__swbuf_r+0x7a>
 8008a4a:	68ac      	ldr	r4, [r5, #8]
 8008a4c:	e7cf      	b.n	80089ee <__swbuf_r+0x1a>
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__swbuf_r+0xa0>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	bf08      	it	eq
 8008a54:	68ec      	ldreq	r4, [r5, #12]
 8008a56:	e7ca      	b.n	80089ee <__swbuf_r+0x1a>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 f81e 	bl	8008a9c <__swsetup_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d0cb      	beq.n	80089fc <__swbuf_r+0x28>
 8008a64:	f04f 37ff 	mov.w	r7, #4294967295
 8008a68:	e7ea      	b.n	8008a40 <__swbuf_r+0x6c>
 8008a6a:	bf00      	nop
 8008a6c:	0800a080 	.word	0x0800a080
 8008a70:	0800a0a0 	.word	0x0800a0a0
 8008a74:	0800a060 	.word	0x0800a060

08008a78 <_write_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_write_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f000 fd20 	bl	80094cc <_write>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_write_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_write_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20012ae4 	.word	0x20012ae4

08008a9c <__swsetup_r>:
 8008a9c:	4b32      	ldr	r3, [pc, #200]	; (8008b68 <__swsetup_r+0xcc>)
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	b125      	cbz	r5, 8008ab2 <__swsetup_r+0x16>
 8008aa8:	69ab      	ldr	r3, [r5, #24]
 8008aaa:	b913      	cbnz	r3, 8008ab2 <__swsetup_r+0x16>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7ff fbe5 	bl	800827c <__sinit>
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <__swsetup_r+0xd0>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d10f      	bne.n	8008ad8 <__swsetup_r+0x3c>
 8008ab8:	686c      	ldr	r4, [r5, #4]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d42c      	bmi.n	8008b1e <__swsetup_r+0x82>
 8008ac4:	06dd      	lsls	r5, r3, #27
 8008ac6:	d411      	bmi.n	8008aec <__swsetup_r+0x50>
 8008ac8:	2309      	movs	r3, #9
 8008aca:	6033      	str	r3, [r6, #0]
 8008acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad6:	e03e      	b.n	8008b56 <__swsetup_r+0xba>
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <__swsetup_r+0xd4>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <__swsetup_r+0x46>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7eb      	b.n	8008aba <__swsetup_r+0x1e>
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <__swsetup_r+0xd8>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7e6      	b.n	8008aba <__swsetup_r+0x1e>
 8008aec:	0758      	lsls	r0, r3, #29
 8008aee:	d512      	bpl.n	8008b16 <__swsetup_r+0x7a>
 8008af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af2:	b141      	cbz	r1, 8008b06 <__swsetup_r+0x6a>
 8008af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af8:	4299      	cmp	r1, r3
 8008afa:	d002      	beq.n	8008b02 <__swsetup_r+0x66>
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff fd29 	bl	8008554 <_free_r>
 8008b02:	2300      	movs	r3, #0
 8008b04:	6363      	str	r3, [r4, #52]	; 0x34
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f043 0308 	orr.w	r3, r3, #8
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	b94b      	cbnz	r3, 8008b36 <__swsetup_r+0x9a>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2c:	d003      	beq.n	8008b36 <__swsetup_r+0x9a>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 f869 	bl	8008c08 <__smakebuf_r>
 8008b36:	89a0      	ldrh	r0, [r4, #12]
 8008b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3c:	f010 0301 	ands.w	r3, r0, #1
 8008b40:	d00a      	beq.n	8008b58 <__swsetup_r+0xbc>
 8008b42:	2300      	movs	r3, #0
 8008b44:	60a3      	str	r3, [r4, #8]
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	425b      	negs	r3, r3
 8008b4a:	61a3      	str	r3, [r4, #24]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	b943      	cbnz	r3, 8008b62 <__swsetup_r+0xc6>
 8008b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b54:	d1ba      	bne.n	8008acc <__swsetup_r+0x30>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	0781      	lsls	r1, r0, #30
 8008b5a:	bf58      	it	pl
 8008b5c:	6963      	ldrpl	r3, [r4, #20]
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	e7f4      	b.n	8008b4c <__swsetup_r+0xb0>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e7f7      	b.n	8008b56 <__swsetup_r+0xba>
 8008b66:	bf00      	nop
 8008b68:	20000014 	.word	0x20000014
 8008b6c:	0800a080 	.word	0x0800a080
 8008b70:	0800a0a0 	.word	0x0800a0a0
 8008b74:	0800a060 	.word	0x0800a060

08008b78 <_close_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	; (8008b94 <_close_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f000 fcca 	bl	800951c <_close>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_close_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_close_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20012ae4 	.word	0x20012ae4

08008b98 <_lseek_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	; (8008bb8 <_lseek_r+0x20>)
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f000 fcc2 	bl	8009530 <_lseek>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_lseek_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_lseek_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20012ae4 	.word	0x20012ae4

08008bbc <__swhatbuf_r>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	460e      	mov	r6, r1
 8008bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	b096      	sub	sp, #88	; 0x58
 8008bc8:	4614      	mov	r4, r2
 8008bca:	461d      	mov	r5, r3
 8008bcc:	da08      	bge.n	8008be0 <__swhatbuf_r+0x24>
 8008bce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	061a      	lsls	r2, r3, #24
 8008bd8:	d410      	bmi.n	8008bfc <__swhatbuf_r+0x40>
 8008bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bde:	e00e      	b.n	8008bfe <__swhatbuf_r+0x42>
 8008be0:	466a      	mov	r2, sp
 8008be2:	f000 fb5f 	bl	80092a4 <_fstat_r>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	dbf1      	blt.n	8008bce <__swhatbuf_r+0x12>
 8008bea:	9a01      	ldr	r2, [sp, #4]
 8008bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bf4:	425a      	negs	r2, r3
 8008bf6:	415a      	adcs	r2, r3
 8008bf8:	602a      	str	r2, [r5, #0]
 8008bfa:	e7ee      	b.n	8008bda <__swhatbuf_r+0x1e>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	2000      	movs	r0, #0
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	b016      	add	sp, #88	; 0x58
 8008c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c08 <__smakebuf_r>:
 8008c08:	898b      	ldrh	r3, [r1, #12]
 8008c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c0c:	079d      	lsls	r5, r3, #30
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	d507      	bpl.n	8008c24 <__smakebuf_r+0x1c>
 8008c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	6163      	str	r3, [r4, #20]
 8008c20:	b002      	add	sp, #8
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	ab01      	add	r3, sp, #4
 8008c26:	466a      	mov	r2, sp
 8008c28:	f7ff ffc8 	bl	8008bbc <__swhatbuf_r>
 8008c2c:	9900      	ldr	r1, [sp, #0]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff fcfb 	bl	800862c <_malloc_r>
 8008c36:	b948      	cbnz	r0, 8008c4c <__smakebuf_r+0x44>
 8008c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3c:	059a      	lsls	r2, r3, #22
 8008c3e:	d4ef      	bmi.n	8008c20 <__smakebuf_r+0x18>
 8008c40:	f023 0303 	bic.w	r3, r3, #3
 8008c44:	f043 0302 	orr.w	r3, r3, #2
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	e7e3      	b.n	8008c14 <__smakebuf_r+0xc>
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <__smakebuf_r+0x7c>)
 8008c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	6163      	str	r3, [r4, #20]
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	6120      	str	r0, [r4, #16]
 8008c62:	b15b      	cbz	r3, 8008c7c <__smakebuf_r+0x74>
 8008c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f000 fb2d 	bl	80092c8 <_isatty_r>
 8008c6e:	b128      	cbz	r0, 8008c7c <__smakebuf_r+0x74>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	89a0      	ldrh	r0, [r4, #12]
 8008c7e:	4305      	orrs	r5, r0
 8008c80:	81a5      	strh	r5, [r4, #12]
 8008c82:	e7cd      	b.n	8008c20 <__smakebuf_r+0x18>
 8008c84:	08008215 	.word	0x08008215

08008c88 <__malloc_lock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_lock+0x8>)
 8008c8a:	f7ff bc31 	b.w	80084f0 <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20012ad8 	.word	0x20012ad8

08008c94 <__malloc_unlock>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__malloc_unlock+0x8>)
 8008c96:	f7ff bc2c 	b.w	80084f2 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20012ad8 	.word	0x20012ad8

08008ca0 <__ssputs_r>:
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	688e      	ldr	r6, [r1, #8]
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	4682      	mov	sl, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	4690      	mov	r8, r2
 8008cae:	461f      	mov	r7, r3
 8008cb0:	d838      	bhi.n	8008d24 <__ssputs_r+0x84>
 8008cb2:	898a      	ldrh	r2, [r1, #12]
 8008cb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cb8:	d032      	beq.n	8008d20 <__ssputs_r+0x80>
 8008cba:	6825      	ldr	r5, [r4, #0]
 8008cbc:	6909      	ldr	r1, [r1, #16]
 8008cbe:	eba5 0901 	sub.w	r9, r5, r1
 8008cc2:	6965      	ldr	r5, [r4, #20]
 8008cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ccc:	3301      	adds	r3, #1
 8008cce:	444b      	add	r3, r9
 8008cd0:	106d      	asrs	r5, r5, #1
 8008cd2:	429d      	cmp	r5, r3
 8008cd4:	bf38      	it	cc
 8008cd6:	461d      	movcc	r5, r3
 8008cd8:	0553      	lsls	r3, r2, #21
 8008cda:	d531      	bpl.n	8008d40 <__ssputs_r+0xa0>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7ff fca5 	bl	800862c <_malloc_r>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	b950      	cbnz	r0, 8008cfc <__ssputs_r+0x5c>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	f8ca 3000 	str.w	r3, [sl]
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf2:	81a3      	strh	r3, [r4, #12]
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfc:	6921      	ldr	r1, [r4, #16]
 8008cfe:	464a      	mov	r2, r9
 8008d00:	f7ff fbf8 	bl	80084f4 <memcpy>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	6126      	str	r6, [r4, #16]
 8008d12:	6165      	str	r5, [r4, #20]
 8008d14:	444e      	add	r6, r9
 8008d16:	eba5 0509 	sub.w	r5, r5, r9
 8008d1a:	6026      	str	r6, [r4, #0]
 8008d1c:	60a5      	str	r5, [r4, #8]
 8008d1e:	463e      	mov	r6, r7
 8008d20:	42be      	cmp	r6, r7
 8008d22:	d900      	bls.n	8008d26 <__ssputs_r+0x86>
 8008d24:	463e      	mov	r6, r7
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	f7ff fbf0 	bl	8008510 <memmove>
 8008d30:	68a3      	ldr	r3, [r4, #8]
 8008d32:	1b9b      	subs	r3, r3, r6
 8008d34:	60a3      	str	r3, [r4, #8]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	4433      	add	r3, r6
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7db      	b.n	8008cf8 <__ssputs_r+0x58>
 8008d40:	462a      	mov	r2, r5
 8008d42:	f000 fad1 	bl	80092e8 <_realloc_r>
 8008d46:	4606      	mov	r6, r0
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1e1      	bne.n	8008d10 <__ssputs_r+0x70>
 8008d4c:	6921      	ldr	r1, [r4, #16]
 8008d4e:	4650      	mov	r0, sl
 8008d50:	f7ff fc00 	bl	8008554 <_free_r>
 8008d54:	e7c7      	b.n	8008ce6 <__ssputs_r+0x46>
	...

08008d58 <_svfiprintf_r>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	4698      	mov	r8, r3
 8008d5e:	898b      	ldrh	r3, [r1, #12]
 8008d60:	061b      	lsls	r3, r3, #24
 8008d62:	b09d      	sub	sp, #116	; 0x74
 8008d64:	4607      	mov	r7, r0
 8008d66:	460d      	mov	r5, r1
 8008d68:	4614      	mov	r4, r2
 8008d6a:	d50e      	bpl.n	8008d8a <_svfiprintf_r+0x32>
 8008d6c:	690b      	ldr	r3, [r1, #16]
 8008d6e:	b963      	cbnz	r3, 8008d8a <_svfiprintf_r+0x32>
 8008d70:	2140      	movs	r1, #64	; 0x40
 8008d72:	f7ff fc5b 	bl	800862c <_malloc_r>
 8008d76:	6028      	str	r0, [r5, #0]
 8008d78:	6128      	str	r0, [r5, #16]
 8008d7a:	b920      	cbnz	r0, 8008d86 <_svfiprintf_r+0x2e>
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e0d1      	b.n	8008f2a <_svfiprintf_r+0x1d2>
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	616b      	str	r3, [r5, #20]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d8e:	2320      	movs	r3, #32
 8008d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d98:	2330      	movs	r3, #48	; 0x30
 8008d9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f44 <_svfiprintf_r+0x1ec>
 8008d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da2:	f04f 0901 	mov.w	r9, #1
 8008da6:	4623      	mov	r3, r4
 8008da8:	469a      	mov	sl, r3
 8008daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dae:	b10a      	cbz	r2, 8008db4 <_svfiprintf_r+0x5c>
 8008db0:	2a25      	cmp	r2, #37	; 0x25
 8008db2:	d1f9      	bne.n	8008da8 <_svfiprintf_r+0x50>
 8008db4:	ebba 0b04 	subs.w	fp, sl, r4
 8008db8:	d00b      	beq.n	8008dd2 <_svfiprintf_r+0x7a>
 8008dba:	465b      	mov	r3, fp
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ff6d 	bl	8008ca0 <__ssputs_r>
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f000 80aa 	beq.w	8008f20 <_svfiprintf_r+0x1c8>
 8008dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dce:	445a      	add	r2, fp
 8008dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 80a2 	beq.w	8008f20 <_svfiprintf_r+0x1c8>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de6:	f10a 0a01 	add.w	sl, sl, #1
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	9307      	str	r3, [sp, #28]
 8008dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008df2:	931a      	str	r3, [sp, #104]	; 0x68
 8008df4:	4654      	mov	r4, sl
 8008df6:	2205      	movs	r2, #5
 8008df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfc:	4851      	ldr	r0, [pc, #324]	; (8008f44 <_svfiprintf_r+0x1ec>)
 8008dfe:	f7f7 fa27 	bl	8000250 <memchr>
 8008e02:	9a04      	ldr	r2, [sp, #16]
 8008e04:	b9d8      	cbnz	r0, 8008e3e <_svfiprintf_r+0xe6>
 8008e06:	06d0      	lsls	r0, r2, #27
 8008e08:	bf44      	itt	mi
 8008e0a:	2320      	movmi	r3, #32
 8008e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e10:	0711      	lsls	r1, r2, #28
 8008e12:	bf44      	itt	mi
 8008e14:	232b      	movmi	r3, #43	; 0x2b
 8008e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e20:	d015      	beq.n	8008e4e <_svfiprintf_r+0xf6>
 8008e22:	9a07      	ldr	r2, [sp, #28]
 8008e24:	4654      	mov	r4, sl
 8008e26:	2000      	movs	r0, #0
 8008e28:	f04f 0c0a 	mov.w	ip, #10
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e32:	3b30      	subs	r3, #48	; 0x30
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	d94e      	bls.n	8008ed6 <_svfiprintf_r+0x17e>
 8008e38:	b1b0      	cbz	r0, 8008e68 <_svfiprintf_r+0x110>
 8008e3a:	9207      	str	r2, [sp, #28]
 8008e3c:	e014      	b.n	8008e68 <_svfiprintf_r+0x110>
 8008e3e:	eba0 0308 	sub.w	r3, r0, r8
 8008e42:	fa09 f303 	lsl.w	r3, r9, r3
 8008e46:	4313      	orrs	r3, r2
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	46a2      	mov	sl, r4
 8008e4c:	e7d2      	b.n	8008df4 <_svfiprintf_r+0x9c>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	1d19      	adds	r1, r3, #4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	9103      	str	r1, [sp, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfbb      	ittet	lt
 8008e5a:	425b      	neglt	r3, r3
 8008e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e60:	9307      	strge	r3, [sp, #28]
 8008e62:	9307      	strlt	r3, [sp, #28]
 8008e64:	bfb8      	it	lt
 8008e66:	9204      	strlt	r2, [sp, #16]
 8008e68:	7823      	ldrb	r3, [r4, #0]
 8008e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e6c:	d10c      	bne.n	8008e88 <_svfiprintf_r+0x130>
 8008e6e:	7863      	ldrb	r3, [r4, #1]
 8008e70:	2b2a      	cmp	r3, #42	; 0x2a
 8008e72:	d135      	bne.n	8008ee0 <_svfiprintf_r+0x188>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	1d1a      	adds	r2, r3, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9203      	str	r2, [sp, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfb8      	it	lt
 8008e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e84:	3402      	adds	r4, #2
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f54 <_svfiprintf_r+0x1fc>
 8008e8c:	7821      	ldrb	r1, [r4, #0]
 8008e8e:	2203      	movs	r2, #3
 8008e90:	4650      	mov	r0, sl
 8008e92:	f7f7 f9dd 	bl	8000250 <memchr>
 8008e96:	b140      	cbz	r0, 8008eaa <_svfiprintf_r+0x152>
 8008e98:	2340      	movs	r3, #64	; 0x40
 8008e9a:	eba0 000a 	sub.w	r0, r0, sl
 8008e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008ea2:	9b04      	ldr	r3, [sp, #16]
 8008ea4:	4303      	orrs	r3, r0
 8008ea6:	3401      	adds	r4, #1
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eae:	4826      	ldr	r0, [pc, #152]	; (8008f48 <_svfiprintf_r+0x1f0>)
 8008eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eb4:	2206      	movs	r2, #6
 8008eb6:	f7f7 f9cb 	bl	8000250 <memchr>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d038      	beq.n	8008f30 <_svfiprintf_r+0x1d8>
 8008ebe:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <_svfiprintf_r+0x1f4>)
 8008ec0:	bb1b      	cbnz	r3, 8008f0a <_svfiprintf_r+0x1b2>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	3307      	adds	r3, #7
 8008ec6:	f023 0307 	bic.w	r3, r3, #7
 8008eca:	3308      	adds	r3, #8
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	4433      	add	r3, r6
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed4:	e767      	b.n	8008da6 <_svfiprintf_r+0x4e>
 8008ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eda:	460c      	mov	r4, r1
 8008edc:	2001      	movs	r0, #1
 8008ede:	e7a5      	b.n	8008e2c <_svfiprintf_r+0xd4>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	3401      	adds	r4, #1
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f04f 0c0a 	mov.w	ip, #10
 8008eec:	4620      	mov	r0, r4
 8008eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ef2:	3a30      	subs	r2, #48	; 0x30
 8008ef4:	2a09      	cmp	r2, #9
 8008ef6:	d903      	bls.n	8008f00 <_svfiprintf_r+0x1a8>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0c5      	beq.n	8008e88 <_svfiprintf_r+0x130>
 8008efc:	9105      	str	r1, [sp, #20]
 8008efe:	e7c3      	b.n	8008e88 <_svfiprintf_r+0x130>
 8008f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f04:	4604      	mov	r4, r0
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7f0      	b.n	8008eec <_svfiprintf_r+0x194>
 8008f0a:	ab03      	add	r3, sp, #12
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <_svfiprintf_r+0x1f8>)
 8008f12:	a904      	add	r1, sp, #16
 8008f14:	4638      	mov	r0, r7
 8008f16:	f3af 8000 	nop.w
 8008f1a:	1c42      	adds	r2, r0, #1
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	d1d6      	bne.n	8008ece <_svfiprintf_r+0x176>
 8008f20:	89ab      	ldrh	r3, [r5, #12]
 8008f22:	065b      	lsls	r3, r3, #25
 8008f24:	f53f af2c 	bmi.w	8008d80 <_svfiprintf_r+0x28>
 8008f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f2a:	b01d      	add	sp, #116	; 0x74
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	462a      	mov	r2, r5
 8008f36:	4b06      	ldr	r3, [pc, #24]	; (8008f50 <_svfiprintf_r+0x1f8>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f000 f87a 	bl	8009034 <_printf_i>
 8008f40:	e7eb      	b.n	8008f1a <_svfiprintf_r+0x1c2>
 8008f42:	bf00      	nop
 8008f44:	0800a1c5 	.word	0x0800a1c5
 8008f48:	0800a1cf 	.word	0x0800a1cf
 8008f4c:	00000000 	.word	0x00000000
 8008f50:	08008ca1 	.word	0x08008ca1
 8008f54:	0800a1cb 	.word	0x0800a1cb

08008f58 <_printf_common>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	4699      	mov	r9, r3
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	bfb8      	it	lt
 8008f6c:	4613      	movlt	r3, r2
 8008f6e:	6033      	str	r3, [r6, #0]
 8008f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f74:	4607      	mov	r7, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b10a      	cbz	r2, 8008f7e <_printf_common+0x26>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0699      	lsls	r1, r3, #26
 8008f82:	bf42      	ittt	mi
 8008f84:	6833      	ldrmi	r3, [r6, #0]
 8008f86:	3302      	addmi	r3, #2
 8008f88:	6033      	strmi	r3, [r6, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	f015 0506 	ands.w	r5, r5, #6
 8008f90:	d106      	bne.n	8008fa0 <_printf_common+0x48>
 8008f92:	f104 0a19 	add.w	sl, r4, #25
 8008f96:	68e3      	ldr	r3, [r4, #12]
 8008f98:	6832      	ldr	r2, [r6, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc26      	bgt.n	8008fee <_printf_common+0x96>
 8008fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fa4:	1e13      	subs	r3, r2, #0
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	0692      	lsls	r2, r2, #26
 8008fae:	d42b      	bmi.n	8009008 <_printf_common+0xb0>
 8008fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d01e      	beq.n	8008ffc <_printf_common+0xa4>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	68e5      	ldr	r5, [r4, #12]
 8008fc2:	6832      	ldr	r2, [r6, #0]
 8008fc4:	f003 0306 	and.w	r3, r3, #6
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	bf08      	it	eq
 8008fcc:	1aad      	subeq	r5, r5, r2
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	6922      	ldr	r2, [r4, #16]
 8008fd2:	bf0c      	ite	eq
 8008fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fd8:	2500      	movne	r5, #0
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	bfc4      	itt	gt
 8008fde:	1a9b      	subgt	r3, r3, r2
 8008fe0:	18ed      	addgt	r5, r5, r3
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	341a      	adds	r4, #26
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	d11a      	bne.n	8009020 <_printf_common+0xc8>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e008      	b.n	8009000 <_printf_common+0xa8>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	47c0      	blx	r8
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d103      	bne.n	8009004 <_printf_common+0xac>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	3501      	adds	r5, #1
 8009006:	e7c6      	b.n	8008f96 <_printf_common+0x3e>
 8009008:	18e1      	adds	r1, r4, r3
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	2030      	movs	r0, #48	; 0x30
 800900e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009012:	4422      	add	r2, r4
 8009014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800901c:	3302      	adds	r3, #2
 800901e:	e7c7      	b.n	8008fb0 <_printf_common+0x58>
 8009020:	2301      	movs	r3, #1
 8009022:	4622      	mov	r2, r4
 8009024:	4649      	mov	r1, r9
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xa4>
 800902e:	3601      	adds	r6, #1
 8009030:	e7d9      	b.n	8008fe6 <_printf_common+0x8e>
	...

08009034 <_printf_i>:
 8009034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	7e0f      	ldrb	r7, [r1, #24]
 800903a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800903c:	2f78      	cmp	r7, #120	; 0x78
 800903e:	4691      	mov	r9, r2
 8009040:	4680      	mov	r8, r0
 8009042:	460c      	mov	r4, r1
 8009044:	469a      	mov	sl, r3
 8009046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800904a:	d807      	bhi.n	800905c <_printf_i+0x28>
 800904c:	2f62      	cmp	r7, #98	; 0x62
 800904e:	d80a      	bhi.n	8009066 <_printf_i+0x32>
 8009050:	2f00      	cmp	r7, #0
 8009052:	f000 80d8 	beq.w	8009206 <_printf_i+0x1d2>
 8009056:	2f58      	cmp	r7, #88	; 0x58
 8009058:	f000 80a3 	beq.w	80091a2 <_printf_i+0x16e>
 800905c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009064:	e03a      	b.n	80090dc <_printf_i+0xa8>
 8009066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800906a:	2b15      	cmp	r3, #21
 800906c:	d8f6      	bhi.n	800905c <_printf_i+0x28>
 800906e:	a101      	add	r1, pc, #4	; (adr r1, 8009074 <_printf_i+0x40>)
 8009070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090e1 	.word	0x080090e1
 800907c:	0800905d 	.word	0x0800905d
 8009080:	0800905d 	.word	0x0800905d
 8009084:	0800905d 	.word	0x0800905d
 8009088:	0800905d 	.word	0x0800905d
 800908c:	080090e1 	.word	0x080090e1
 8009090:	0800905d 	.word	0x0800905d
 8009094:	0800905d 	.word	0x0800905d
 8009098:	0800905d 	.word	0x0800905d
 800909c:	0800905d 	.word	0x0800905d
 80090a0:	080091ed 	.word	0x080091ed
 80090a4:	08009111 	.word	0x08009111
 80090a8:	080091cf 	.word	0x080091cf
 80090ac:	0800905d 	.word	0x0800905d
 80090b0:	0800905d 	.word	0x0800905d
 80090b4:	0800920f 	.word	0x0800920f
 80090b8:	0800905d 	.word	0x0800905d
 80090bc:	08009111 	.word	0x08009111
 80090c0:	0800905d 	.word	0x0800905d
 80090c4:	0800905d 	.word	0x0800905d
 80090c8:	080091d7 	.word	0x080091d7
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	602a      	str	r2, [r5, #0]
 80090d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090dc:	2301      	movs	r3, #1
 80090de:	e0a3      	b.n	8009228 <_printf_i+0x1f4>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	6829      	ldr	r1, [r5, #0]
 80090e4:	0606      	lsls	r6, r0, #24
 80090e6:	f101 0304 	add.w	r3, r1, #4
 80090ea:	d50a      	bpl.n	8009102 <_printf_i+0xce>
 80090ec:	680e      	ldr	r6, [r1, #0]
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	da03      	bge.n	80090fc <_printf_i+0xc8>
 80090f4:	232d      	movs	r3, #45	; 0x2d
 80090f6:	4276      	negs	r6, r6
 80090f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fc:	485e      	ldr	r0, [pc, #376]	; (8009278 <_printf_i+0x244>)
 80090fe:	230a      	movs	r3, #10
 8009100:	e019      	b.n	8009136 <_printf_i+0x102>
 8009102:	680e      	ldr	r6, [r1, #0]
 8009104:	602b      	str	r3, [r5, #0]
 8009106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800910a:	bf18      	it	ne
 800910c:	b236      	sxthne	r6, r6
 800910e:	e7ef      	b.n	80090f0 <_printf_i+0xbc>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	6820      	ldr	r0, [r4, #0]
 8009114:	1d19      	adds	r1, r3, #4
 8009116:	6029      	str	r1, [r5, #0]
 8009118:	0601      	lsls	r1, r0, #24
 800911a:	d501      	bpl.n	8009120 <_printf_i+0xec>
 800911c:	681e      	ldr	r6, [r3, #0]
 800911e:	e002      	b.n	8009126 <_printf_i+0xf2>
 8009120:	0646      	lsls	r6, r0, #25
 8009122:	d5fb      	bpl.n	800911c <_printf_i+0xe8>
 8009124:	881e      	ldrh	r6, [r3, #0]
 8009126:	4854      	ldr	r0, [pc, #336]	; (8009278 <_printf_i+0x244>)
 8009128:	2f6f      	cmp	r7, #111	; 0x6f
 800912a:	bf0c      	ite	eq
 800912c:	2308      	moveq	r3, #8
 800912e:	230a      	movne	r3, #10
 8009130:	2100      	movs	r1, #0
 8009132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009136:	6865      	ldr	r5, [r4, #4]
 8009138:	60a5      	str	r5, [r4, #8]
 800913a:	2d00      	cmp	r5, #0
 800913c:	bfa2      	ittt	ge
 800913e:	6821      	ldrge	r1, [r4, #0]
 8009140:	f021 0104 	bicge.w	r1, r1, #4
 8009144:	6021      	strge	r1, [r4, #0]
 8009146:	b90e      	cbnz	r6, 800914c <_printf_i+0x118>
 8009148:	2d00      	cmp	r5, #0
 800914a:	d04d      	beq.n	80091e8 <_printf_i+0x1b4>
 800914c:	4615      	mov	r5, r2
 800914e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009152:	fb03 6711 	mls	r7, r3, r1, r6
 8009156:	5dc7      	ldrb	r7, [r0, r7]
 8009158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800915c:	4637      	mov	r7, r6
 800915e:	42bb      	cmp	r3, r7
 8009160:	460e      	mov	r6, r1
 8009162:	d9f4      	bls.n	800914e <_printf_i+0x11a>
 8009164:	2b08      	cmp	r3, #8
 8009166:	d10b      	bne.n	8009180 <_printf_i+0x14c>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	07de      	lsls	r6, r3, #31
 800916c:	d508      	bpl.n	8009180 <_printf_i+0x14c>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	4299      	cmp	r1, r3
 8009174:	bfde      	ittt	le
 8009176:	2330      	movle	r3, #48	; 0x30
 8009178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800917c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009180:	1b52      	subs	r2, r2, r5
 8009182:	6122      	str	r2, [r4, #16]
 8009184:	f8cd a000 	str.w	sl, [sp]
 8009188:	464b      	mov	r3, r9
 800918a:	aa03      	add	r2, sp, #12
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f7ff fee2 	bl	8008f58 <_printf_common>
 8009194:	3001      	adds	r0, #1
 8009196:	d14c      	bne.n	8009232 <_printf_i+0x1fe>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b004      	add	sp, #16
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	4835      	ldr	r0, [pc, #212]	; (8009278 <_printf_i+0x244>)
 80091a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091a8:	6829      	ldr	r1, [r5, #0]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80091b0:	6029      	str	r1, [r5, #0]
 80091b2:	061d      	lsls	r5, r3, #24
 80091b4:	d514      	bpl.n	80091e0 <_printf_i+0x1ac>
 80091b6:	07df      	lsls	r7, r3, #31
 80091b8:	bf44      	itt	mi
 80091ba:	f043 0320 	orrmi.w	r3, r3, #32
 80091be:	6023      	strmi	r3, [r4, #0]
 80091c0:	b91e      	cbnz	r6, 80091ca <_printf_i+0x196>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f023 0320 	bic.w	r3, r3, #32
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	2310      	movs	r3, #16
 80091cc:	e7b0      	b.n	8009130 <_printf_i+0xfc>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	f043 0320 	orr.w	r3, r3, #32
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2378      	movs	r3, #120	; 0x78
 80091d8:	4828      	ldr	r0, [pc, #160]	; (800927c <_printf_i+0x248>)
 80091da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091de:	e7e3      	b.n	80091a8 <_printf_i+0x174>
 80091e0:	0659      	lsls	r1, r3, #25
 80091e2:	bf48      	it	mi
 80091e4:	b2b6      	uxthmi	r6, r6
 80091e6:	e7e6      	b.n	80091b6 <_printf_i+0x182>
 80091e8:	4615      	mov	r5, r2
 80091ea:	e7bb      	b.n	8009164 <_printf_i+0x130>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	6826      	ldr	r6, [r4, #0]
 80091f0:	6961      	ldr	r1, [r4, #20]
 80091f2:	1d18      	adds	r0, r3, #4
 80091f4:	6028      	str	r0, [r5, #0]
 80091f6:	0635      	lsls	r5, r6, #24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0x1cc>
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	e002      	b.n	8009206 <_printf_i+0x1d2>
 8009200:	0670      	lsls	r0, r6, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0x1c8>
 8009204:	8019      	strh	r1, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	4615      	mov	r5, r2
 800920c:	e7ba      	b.n	8009184 <_printf_i+0x150>
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	602a      	str	r2, [r5, #0]
 8009214:	681d      	ldr	r5, [r3, #0]
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	2100      	movs	r1, #0
 800921a:	4628      	mov	r0, r5
 800921c:	f7f7 f818 	bl	8000250 <memchr>
 8009220:	b108      	cbz	r0, 8009226 <_printf_i+0x1f2>
 8009222:	1b40      	subs	r0, r0, r5
 8009224:	6060      	str	r0, [r4, #4]
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	2300      	movs	r3, #0
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009230:	e7a8      	b.n	8009184 <_printf_i+0x150>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	462a      	mov	r2, r5
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d0ab      	beq.n	8009198 <_printf_i+0x164>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	079b      	lsls	r3, r3, #30
 8009244:	d413      	bmi.n	800926e <_printf_i+0x23a>
 8009246:	68e0      	ldr	r0, [r4, #12]
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	4298      	cmp	r0, r3
 800924c:	bfb8      	it	lt
 800924e:	4618      	movlt	r0, r3
 8009250:	e7a4      	b.n	800919c <_printf_i+0x168>
 8009252:	2301      	movs	r3, #1
 8009254:	4632      	mov	r2, r6
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d09b      	beq.n	8009198 <_printf_i+0x164>
 8009260:	3501      	adds	r5, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	9903      	ldr	r1, [sp, #12]
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	42ab      	cmp	r3, r5
 800926a:	dcf2      	bgt.n	8009252 <_printf_i+0x21e>
 800926c:	e7eb      	b.n	8009246 <_printf_i+0x212>
 800926e:	2500      	movs	r5, #0
 8009270:	f104 0619 	add.w	r6, r4, #25
 8009274:	e7f5      	b.n	8009262 <_printf_i+0x22e>
 8009276:	bf00      	nop
 8009278:	0800a1d6 	.word	0x0800a1d6
 800927c:	0800a1e7 	.word	0x0800a1e7

08009280 <_read_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	; (80092a0 <_read_r+0x20>)
 8009284:	4604      	mov	r4, r0
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f000 f90e 	bl	80094b0 <_read>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_read_r+0x1e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_read_r+0x1e>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	20012ae4 	.word	0x20012ae4

080092a4 <_fstat_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	; (80092c4 <_fstat_r+0x20>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f000 f936 	bl	8009522 <_fstat>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d102      	bne.n	80092c0 <_fstat_r+0x1c>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	b103      	cbz	r3, 80092c0 <_fstat_r+0x1c>
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	bf00      	nop
 80092c4:	20012ae4 	.word	0x20012ae4

080092c8 <_isatty_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_isatty_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f000 f92a 	bl	800952c <_isatty>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_isatty_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_isatty_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20012ae4 	.word	0x20012ae4

080092e8 <_realloc_r>:
 80092e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ec:	4680      	mov	r8, r0
 80092ee:	4614      	mov	r4, r2
 80092f0:	460e      	mov	r6, r1
 80092f2:	b921      	cbnz	r1, 80092fe <_realloc_r+0x16>
 80092f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	4611      	mov	r1, r2
 80092fa:	f7ff b997 	b.w	800862c <_malloc_r>
 80092fe:	b92a      	cbnz	r2, 800930c <_realloc_r+0x24>
 8009300:	f7ff f928 	bl	8008554 <_free_r>
 8009304:	4625      	mov	r5, r4
 8009306:	4628      	mov	r0, r5
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	f000 f81b 	bl	8009346 <_malloc_usable_size_r>
 8009310:	4284      	cmp	r4, r0
 8009312:	4607      	mov	r7, r0
 8009314:	d802      	bhi.n	800931c <_realloc_r+0x34>
 8009316:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800931a:	d812      	bhi.n	8009342 <_realloc_r+0x5a>
 800931c:	4621      	mov	r1, r4
 800931e:	4640      	mov	r0, r8
 8009320:	f7ff f984 	bl	800862c <_malloc_r>
 8009324:	4605      	mov	r5, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d0ed      	beq.n	8009306 <_realloc_r+0x1e>
 800932a:	42bc      	cmp	r4, r7
 800932c:	4622      	mov	r2, r4
 800932e:	4631      	mov	r1, r6
 8009330:	bf28      	it	cs
 8009332:	463a      	movcs	r2, r7
 8009334:	f7ff f8de 	bl	80084f4 <memcpy>
 8009338:	4631      	mov	r1, r6
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff f90a 	bl	8008554 <_free_r>
 8009340:	e7e1      	b.n	8009306 <_realloc_r+0x1e>
 8009342:	4635      	mov	r5, r6
 8009344:	e7df      	b.n	8009306 <_realloc_r+0x1e>

08009346 <_malloc_usable_size_r>:
 8009346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934a:	1f18      	subs	r0, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	bfbc      	itt	lt
 8009350:	580b      	ldrlt	r3, [r1, r0]
 8009352:	18c0      	addlt	r0, r0, r3
 8009354:	4770      	bx	lr

08009356 <_ZdlPv>:
 8009356:	f000 b83f 	b.w	80093d8 <free>
	...

0800935c <_ZSt15get_new_handlerv>:
 800935c:	4b02      	ldr	r3, [pc, #8]	; (8009368 <_ZSt15get_new_handlerv+0xc>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	f3bf 8f5b 	dmb	ish
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20012ae8 	.word	0x20012ae8

0800936c <_Znwj>:
 800936c:	2801      	cmp	r0, #1
 800936e:	bf38      	it	cc
 8009370:	2001      	movcc	r0, #1
 8009372:	b510      	push	{r4, lr}
 8009374:	4604      	mov	r4, r0
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f826 	bl	80093c8 <malloc>
 800937c:	b930      	cbnz	r0, 800938c <_Znwj+0x20>
 800937e:	f7ff ffed 	bl	800935c <_ZSt15get_new_handlerv>
 8009382:	b908      	cbnz	r0, 8009388 <_Znwj+0x1c>
 8009384:	f000 f819 	bl	80093ba <abort>
 8009388:	4780      	blx	r0
 800938a:	e7f4      	b.n	8009376 <_Znwj+0xa>
 800938c:	bd10      	pop	{r4, pc}

0800938e <_ZnwjRKSt9nothrow_t>:
 800938e:	f7ff bfed 	b.w	800936c <_Znwj>

08009392 <__cxa_pure_virtual>:
 8009392:	b508      	push	{r3, lr}
 8009394:	f000 f80c 	bl	80093b0 <_ZSt9terminatev>

08009398 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009398:	b508      	push	{r3, lr}
 800939a:	4780      	blx	r0
 800939c:	f000 f80d 	bl	80093ba <abort>

080093a0 <_ZSt13get_terminatev>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <_ZSt13get_terminatev+0xc>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	f3bf 8f5b 	dmb	ish
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000078 	.word	0x20000078

080093b0 <_ZSt9terminatev>:
 80093b0:	b508      	push	{r3, lr}
 80093b2:	f7ff fff5 	bl	80093a0 <_ZSt13get_terminatev>
 80093b6:	f7ff ffef 	bl	8009398 <_ZN10__cxxabiv111__terminateEPFvvE>

080093ba <abort>:
 80093ba:	b508      	push	{r3, lr}
 80093bc:	2006      	movs	r0, #6
 80093be:	f000 f83b 	bl	8009438 <raise>
 80093c2:	2001      	movs	r0, #1
 80093c4:	f000 f86e 	bl	80094a4 <_exit>

080093c8 <malloc>:
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <malloc+0xc>)
 80093ca:	4601      	mov	r1, r0
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f7ff b92d 	b.w	800862c <_malloc_r>
 80093d2:	bf00      	nop
 80093d4:	20000014 	.word	0x20000014

080093d8 <free>:
 80093d8:	4b02      	ldr	r3, [pc, #8]	; (80093e4 <free+0xc>)
 80093da:	4601      	mov	r1, r0
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	f7ff b8b9 	b.w	8008554 <_free_r>
 80093e2:	bf00      	nop
 80093e4:	20000014 	.word	0x20000014

080093e8 <_raise_r>:
 80093e8:	291f      	cmp	r1, #31
 80093ea:	b538      	push	{r3, r4, r5, lr}
 80093ec:	4604      	mov	r4, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	d904      	bls.n	80093fc <_raise_r+0x14>
 80093f2:	2316      	movs	r3, #22
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093fe:	b112      	cbz	r2, 8009406 <_raise_r+0x1e>
 8009400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009404:	b94b      	cbnz	r3, 800941a <_raise_r+0x32>
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f830 	bl	800946c <_getpid_r>
 800940c:	462a      	mov	r2, r5
 800940e:	4601      	mov	r1, r0
 8009410:	4620      	mov	r0, r4
 8009412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009416:	f000 b817 	b.w	8009448 <_kill_r>
 800941a:	2b01      	cmp	r3, #1
 800941c:	d00a      	beq.n	8009434 <_raise_r+0x4c>
 800941e:	1c59      	adds	r1, r3, #1
 8009420:	d103      	bne.n	800942a <_raise_r+0x42>
 8009422:	2316      	movs	r3, #22
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	2001      	movs	r0, #1
 8009428:	e7e7      	b.n	80093fa <_raise_r+0x12>
 800942a:	2400      	movs	r4, #0
 800942c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009430:	4628      	mov	r0, r5
 8009432:	4798      	blx	r3
 8009434:	2000      	movs	r0, #0
 8009436:	e7e0      	b.n	80093fa <_raise_r+0x12>

08009438 <raise>:
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <raise+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f7ff bfd3 	b.w	80093e8 <_raise_r>
 8009442:	bf00      	nop
 8009444:	20000014 	.word	0x20000014

08009448 <_kill_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_kill_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f000 f81d 	bl	8009494 <_kill>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_kill_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_kill_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20012ae4 	.word	0x20012ae4

0800946c <_getpid_r>:
 800946c:	f000 b810 	b.w	8009490 <_getpid>

08009470 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8009470:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8009472:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8009476:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8009478:	2201      	movs	r2, #1
 800947a:	a901      	add	r1, sp, #4
 800947c:	4803      	ldr	r0, [pc, #12]	; (800948c <__io_putchar+0x1c>)
 800947e:	f7fb ff55 	bl	800532c <HAL_UART_Transmit>
  return ch;
}
 8009482:	9801      	ldr	r0, [sp, #4]
 8009484:	b003      	add	sp, #12
 8009486:	f85d fb04 	ldr.w	pc, [sp], #4
 800948a:	bf00      	nop
 800948c:	20002560 	.word	0x20002560

08009490 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8009490:	2001      	movs	r0, #1
 8009492:	4770      	bx	lr

08009494 <_kill>:

int _kill(int pid, int sig)
{
 8009494:	b508      	push	{r3, lr}
	errno = EINVAL;
 8009496:	f000 f84d 	bl	8009534 <__errno>
 800949a:	2316      	movs	r3, #22
 800949c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800949e:	f04f 30ff 	mov.w	r0, #4294967295
 80094a2:	bd08      	pop	{r3, pc}

080094a4 <_exit>:

void _exit (int status)
{
 80094a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80094a6:	f000 f845 	bl	8009534 <__errno>
 80094aa:	2316      	movs	r3, #22
 80094ac:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80094ae:	e7fe      	b.n	80094ae <_exit+0xa>

080094b0 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	460d      	mov	r5, r1
 80094b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094b6:	460e      	mov	r6, r1
 80094b8:	1b73      	subs	r3, r6, r5
 80094ba:	429c      	cmp	r4, r3
 80094bc:	dc01      	bgt.n	80094c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80094be:	4620      	mov	r0, r4
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80094c2:	f3af 8000 	nop.w
 80094c6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094ca:	e7f5      	b.n	80094b8 <_read+0x8>

080094cc <_write>:

int _write(int file, char *ptr, int len)
{
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	460d      	mov	r5, r1
 80094d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094d2:	460e      	mov	r6, r1
 80094d4:	1b73      	subs	r3, r6, r5
 80094d6:	429c      	cmp	r4, r3
 80094d8:	dc01      	bgt.n	80094de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80094da:	4620      	mov	r0, r4
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80094de:	f816 0b01 	ldrb.w	r0, [r6], #1
 80094e2:	f7ff ffc5 	bl	8009470 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094e6:	e7f5      	b.n	80094d4 <_write+0x8>

080094e8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094e8:	4a0a      	ldr	r2, [pc, #40]	; (8009514 <_sbrk+0x2c>)
 80094ea:	6811      	ldr	r1, [r2, #0]
{
 80094ec:	b508      	push	{r3, lr}
 80094ee:	4603      	mov	r3, r0
	if (heap_end == 0)
 80094f0:	b909      	cbnz	r1, 80094f6 <_sbrk+0xe>
		heap_end = &end;
 80094f2:	4909      	ldr	r1, [pc, #36]	; (8009518 <_sbrk+0x30>)
 80094f4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80094f6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80094f8:	4669      	mov	r1, sp
 80094fa:	4403      	add	r3, r0
 80094fc:	428b      	cmp	r3, r1
 80094fe:	d906      	bls.n	800950e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8009500:	f000 f818 	bl	8009534 <__errno>
 8009504:	230c      	movs	r3, #12
 8009506:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800950c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800950e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8009510:	e7fc      	b.n	800950c <_sbrk+0x24>
 8009512:	bf00      	nop
 8009514:	20012aec 	.word	0x20012aec
 8009518:	20012af0 	.word	0x20012af0

0800951c <_close>:

int _close(int file)
{
	return -1;
}
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	4770      	bx	lr

08009522 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8009522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009526:	604b      	str	r3, [r1, #4]
	return 0;
}
 8009528:	2000      	movs	r0, #0
 800952a:	4770      	bx	lr

0800952c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800952c:	2001      	movs	r0, #1
 800952e:	4770      	bx	lr

08009530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8009530:	2000      	movs	r0, #0
 8009532:	4770      	bx	lr

08009534 <__errno>:
 8009534:	4b01      	ldr	r3, [pc, #4]	; (800953c <__errno+0x8>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000014 	.word	0x20000014

08009540 <_init>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr

0800954c <_fini>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr
