
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000efc  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000004c  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000004c  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080096ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000af04  20000078  08009764  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00008404  2000af7c  08009764  0002af7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00060a1e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000dd0b  00000000  00000000  00080ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000b6d7  00000000  00000000  0008e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001be8  00000000  00000000  00099ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001fd0  00000000  00000000  0009ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033559  00000000  00000000  0009da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033975  00000000  00000000  000d0fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000de4b0  00000000  00000000  0010492e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001e2dde  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006f00  00000000  00000000  001e2e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008738 	.word	0x08008738

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08008738 	.word	0x08008738

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005f4:	4770      	bx	lr

080005f6 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005f6:	4770      	bx	lr

080005f8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <vApplicationGetIdleTaskMemory+0x10>)
 80005fa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <vApplicationGetIdleTaskMemory+0x14>)
 80005fe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000604:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000606:	4770      	bx	lr
 8000608:	20000c94 	.word	0x20000c94
 800060c:	20000094 	.word	0x20000094

08000610 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <vApplicationGetTimerTaskMemory+0x10>)
 8000612:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <vApplicationGetTimerTaskMemory+0x14>)
 8000616:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000618:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800061c:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800061e:	4770      	bx	lr
 8000620:	200024f4 	.word	0x200024f4
 8000624:	20000cf4 	.word	0x20000cf4

08000628 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800062c:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	2214      	movs	r2, #20
 8000630:	2100      	movs	r1, #0
 8000632:	a809      	add	r0, sp, #36	; 0x24
 8000634:	f006 fe9a 	bl	800736c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000638:	2400      	movs	r4, #0
 800063a:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <MX_GPIO_Init+0x1c4>)
 800063c:	9401      	str	r4, [sp, #4]
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000640:	4f6b      	ldr	r7, [pc, #428]	; (80007f0 <MX_GPIO_Init+0x1c8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000642:	4e6c      	ldr	r6, [pc, #432]	; (80007f4 <MX_GPIO_Init+0x1cc>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000644:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000804 <MX_GPIO_Init+0x1dc>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000648:	f042 0210 	orr.w	r2, r2, #16
 800064c:	631a      	str	r2, [r3, #48]	; 0x30
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	f002 0210 	and.w	r2, r2, #16
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000658:	9402      	str	r4, [sp, #8]
 800065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065c:	f042 0204 	orr.w	r2, r2, #4
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
 8000662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000664:	f002 0204 	and.w	r2, r2, #4
 8000668:	9202      	str	r2, [sp, #8]
 800066a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066c:	9403      	str	r4, [sp, #12]
 800066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000670:	f042 0220 	orr.w	r2, r2, #32
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000678:	f002 0220 	and.w	r2, r2, #32
 800067c:	9203      	str	r2, [sp, #12]
 800067e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000680:	9404      	str	r4, [sp, #16]
 8000682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
 800068a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000690:	9204      	str	r2, [sp, #16]
 8000692:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	9405      	str	r4, [sp, #20]
 8000696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000698:	f042 0201 	orr.w	r2, r2, #1
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
 800069e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a0:	f002 0201 	and.w	r2, r2, #1
 80006a4:	9205      	str	r2, [sp, #20]
 80006a6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	9406      	str	r4, [sp, #24]
 80006aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ac:	f042 0202 	orr.w	r2, r2, #2
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	f002 0202 	and.w	r2, r2, #2
 80006b8:	9206      	str	r2, [sp, #24]
 80006ba:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006bc:	9407      	str	r4, [sp, #28]
 80006be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80006cc:	9207      	str	r2, [sp, #28]
 80006ce:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d0:	9408      	str	r4, [sp, #32]
 80006d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d4:	f042 0208 	orr.w	r2, r2, #8
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006e2:	4622      	mov	r2, r4
 80006e4:	4638      	mov	r0, r7
 80006e6:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ec:	f001 f9c0 	bl	8001a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f0:	4622      	mov	r2, r4
 80006f2:	4630      	mov	r0, r6
 80006f4:	2140      	movs	r1, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2503      	movs	r5, #3
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f8:	f001 f9ba 	bl	8001a70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	f64f 79ff 	movw	r9, #65535	; 0xffff
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000700:	a909      	add	r1, sp, #36	; 0x24
 8000702:	483d      	ldr	r0, [pc, #244]	; (80007f8 <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070a:	f001 f8dd 	bl	80018c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000716:	a909      	add	r1, sp, #36	; 0x24
 8000718:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000720:	f001 f8d2 	bl	80018c8 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000724:	a909      	add	r1, sp, #36	; 0x24
 8000726:	4835      	ldr	r0, [pc, #212]	; (80007fc <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072e:	f001 f8cb 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000732:	f641 73ff 	movw	r3, #8191	; 0x1fff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	a909      	add	r1, sp, #36	; 0x24
 8000738:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f001 f8c0 	bl	80018c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000748:	f248 03ff 	movw	r3, #33023	; 0x80ff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	a909      	add	r1, sp, #36	; 0x24
 800074e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f001 f8b5 	bl	80018c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	a909      	add	r1, sp, #36	; 0x24
 8000764:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	f001 f8ab 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000772:	f64b 7376 	movw	r3, #49014	; 0xbf76
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	a909      	add	r1, sp, #36	; 0x24
 8000778:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800077a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f001 f8a2 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000784:	f64f 733f 	movw	r3, #65343	; 0xff3f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000788:	a909      	add	r1, sp, #36	; 0x24
 800078a:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000792:	f001 f899 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000796:	f64f 43ff 	movw	r3, #64767	; 0xfcff
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	a909      	add	r1, sp, #36	; 0x24
 800079c:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_GPIO_Init+0x1d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a0:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	f001 f890 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007a8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007aa:	a909      	add	r1, sp, #36	; 0x24
 80007ac:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f001 f887 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ba:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007bc:	a909      	add	r1, sp, #36	; 0x24
 80007be:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f001 f87f 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80007ce:	2302      	movs	r3, #2
 80007d0:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d6:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007de:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f001 f872 	bl	80018c8 <HAL_GPIO_Init>

}
 80007e4:	b00f      	add	sp, #60	; 0x3c
 80007e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40021400 	.word	0x40021400
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40020800 	.word	0x40020800

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b510      	push	{r4, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080c:	2210      	movs	r2, #16
 800080e:	2100      	movs	r1, #0
 8000810:	a809      	add	r0, sp, #36	; 0x24
 8000812:	f006 fdab 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000816:	2214      	movs	r2, #20
 8000818:	2100      	movs	r1, #0
 800081a:	a802      	add	r0, sp, #8
 800081c:	f006 fda6 	bl	800736c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <SystemClock_Config+0x9c>)
 8000822:	2100      	movs	r1, #0
 8000824:	9100      	str	r1, [sp, #0]
 8000826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800082c:	641a      	str	r2, [r3, #64]	; 0x40
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <SystemClock_Config+0xa0>)
 800083a:	9101      	str	r1, [sp, #4]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084a:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800084c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000858:	2402      	movs	r4, #2
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 384;
 800085e:	f44f 72c0 	mov.w	r2, #384	; 0x180
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000862:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000866:	2308      	movs	r3, #8
 8000868:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086e:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000870:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000874:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f001 f909 	bl	8001a8c <HAL_RCC_OscConfig>
 800087a:	b108      	cbz	r0, 8000880 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000890:	2103      	movs	r1, #3
 8000892:	a802      	add	r0, sp, #8
 8000894:	f001 fade 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000898:	b108      	cbz	r0, 800089e <SystemClock_Config+0x96>
 800089a:	b672      	cpsid	i
  while (1)
 800089c:	e7fe      	b.n	800089c <SystemClock_Config+0x94>
}
 800089e:	b014      	add	sp, #80	; 0x50
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <Error_Handler>:
 80008ac:	b672      	cpsid	i
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x2>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_MspInit+0x3c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	9200      	str	r2, [sp, #0]
 80008b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80008ba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80008be:	6459      	str	r1, [r3, #68]	; 0x44
 80008c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80008c2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80008c6:	9100      	str	r1, [sp, #0]
 80008c8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	9201      	str	r2, [sp, #4]
 80008cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80008ce:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008d2:	6419      	str	r1, [r3, #64]	; 0x40
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	210f      	movs	r1, #15
 80008e0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	f000 bf9b 	b.w	8001820 <HAL_NVIC_SetPriority>
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler>

080008f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler>

080008f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler>

080008f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler>

080008f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler>

080008fa <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 ff6b 	bl	80017d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000902:	f003 f811 	bl	8003928 <xTaskGetSchedulerState>
 8000906:	2801      	cmp	r0, #1
 8000908:	d003      	beq.n	8000912 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800090e:	f003 bd41 	b.w	8004394 <xPortSysTickHandler>
}
 8000912:	bd08      	pop	{r3, pc}

08000914 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000914:	4801      	ldr	r0, [pc, #4]	; (800091c <USART3_IRQHandler+0x8>)
 8000916:	f001 bd09 	b.w	800232c <HAL_UART_IRQHandler>
 800091a:	bf00      	nop
 800091c:	20002554 	.word	0x20002554

08000920 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <SystemInit+0x10>)
 8000922:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x34>)
{
 8000938:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 800093a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800093e:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000946:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	f001 fc05 	bl	8002160 <HAL_UART_Init>
 8000956:	b118      	cbz	r0, 8000960 <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800095c:	f7ff bfa6 	b.w	80008ac <Error_Handler>
}
 8000960:	bd08      	pop	{r3, pc}
 8000962:	bf00      	nop
 8000964:	20002554 	.word	0x20002554
 8000968:	40004800 	.word	0x40004800

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	4604      	mov	r4, r0
 8000970:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	2214      	movs	r2, #20
 8000974:	2100      	movs	r1, #0
 8000976:	a803      	add	r0, sp, #12
 8000978:	f006 fcf8 	bl	800736c <memset>
  if(uartHandle->Instance==USART3)
 800097c:	6822      	ldr	r2, [r4, #0]
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0x74>)
 8000980:	429a      	cmp	r2, r3
 8000982:	d12b      	bne.n	80009dc <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000984:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000988:	2400      	movs	r4, #0
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	4815      	ldr	r0, [pc, #84]	; (80009e4 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000990:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000994:	641a      	str	r2, [r3, #64]	; 0x40
 8000996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000998:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a0:	9402      	str	r4, [sp, #8]
 80009a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009a4:	f042 0208 	orr.w	r2, r2, #8
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009be:	2103      	movs	r1, #3
 80009c0:	2307      	movs	r3, #7
 80009c2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	a903      	add	r1, sp, #12
 80009c8:	f000 ff7e 	bl	80018c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009cc:	2027      	movs	r0, #39	; 0x27
 80009ce:	4622      	mov	r2, r4
 80009d0:	2105      	movs	r1, #5
 80009d2:	f000 ff25 	bl	8001820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009d6:	2027      	movs	r0, #39	; 0x27
 80009d8:	f000 ff54 	bl	8001884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009dc:	b008      	add	sp, #32
 80009de:	bd10      	pop	{r4, pc}
 80009e0:	40004800 	.word	0x40004800
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <_ZN3Cpl6System8RunnableD1Ev>:
 */
class Runnable
{
public:
    /// Virtual destructor
    virtual ~Runnable() {};
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <_ZN3Cpl6System8RunnableD1Ev+0x1c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08008ab8 	.word	0x08008ab8

08000a08 <_ZN3Cpl6System8RunnableD0Ev>:
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffe9 	bl	80009e8 <_ZN3Cpl6System8RunnableD1Ev>
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f007 fd99 	bl	800854e <_ZdlPv>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_ZN3Cpl6System8Runnable10pleaseStopEv>:
            2) This method is an attempted work-around for terminating
               threads by having the thread run itself to completion.
               Not all OSes support a polite way (i.e. reclaiming
               resource, memory, etc.) of killing threads.
     */
    virtual void pleaseStop() {}
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_ZN3Cpl6System8Runnable21setThreadOfExecution_EPNS0_6ThreadE>:
        to help terminate a thread when pleaseStop() is called. A default
        implementation is provided that does NOTHING.  It is up the concrete
        child class to decide how (if at all) to use this information.  The
        Cpl::System::Thread will call this method BEFORE the run() is called.
     */
    virtual void setThreadOfExecution_( Thread* myThreadPtr ) {}
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_ZN7Thread1C1Ev>:
#include "Cpl/System/FreeRTOS/Thread.h"

class Thread1 : public Cpl::System::Runnable
{
public:
    Thread1() {};
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f8f0 	bl	8000c40 <_ZN3Cpl6System8RunnableC1Ev>
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <_ZN7Thread1C1Ev+0x20>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08008a94 	.word	0x08008a94

08000a74 <_ZN7Thread16appRunEv>:

protected:
    void appRun()
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    {
        Cpl::System::Thread& t1 = Cpl::System::Thread::getCurrent();
 8000a7c:	f000 fc70 	bl	8001360 <_ZN3Cpl6System6Thread10getCurrentEv>
 8000a80:	6178      	str	r0, [r7, #20]
        printf( "Thread Running: %s, %x, %p\n", t1.getName(), t1.getId(), t1.getNativeHandle() );
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3310      	adds	r3, #16
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	4798      	blx	r3
 8000a8e:	4604      	mov	r4, r0
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3314      	adds	r3, #20
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6978      	ldr	r0, [r7, #20]
 8000a9a:	4798      	blx	r3
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	331c      	adds	r3, #28
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	4798      	blx	r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	462a      	mov	r2, r5
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <_ZN7Thread16appRunEv+0xa0>)
 8000ab2:	f006 fd43 	bl	800753c <iprintf>
 
        uint32_t timeMark1 = Cpl::System::ElapsedTime::milliseconds();
 8000ab6:	f000 f9e1 	bl	8000e7c <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8000aba:	61f8      	str	r0, [r7, #28]
        uint32_t timeMark2 = timeMark1;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	61bb      	str	r3, [r7, #24]
        for ( ;;)
        {
            uint32_t now = Cpl::System::ElapsedTime::milliseconds();
 8000ac0:	f000 f9dc 	bl	8000e7c <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8000ac4:	6138      	str	r0, [r7, #16]
            if ( now - timeMark1 >= 100 )
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b63      	cmp	r3, #99	; 0x63
 8000ace:	d905      	bls.n	8000adc <_ZN7Thread16appRunEv+0x68>
            {
                Bsp_Api_toggle_debug1();
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4811      	ldr	r0, [pc, #68]	; (8000b18 <_ZN7Thread16appRunEv+0xa4>)
 8000ad4:	f000 ffd1 	bl	8001a7a <HAL_GPIO_TogglePin>
                timeMark1 = now;
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	61fb      	str	r3, [r7, #28]
            }
            if ( now - timeMark2 >= 1000 )
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ae6:	d309      	bcc.n	8000afc <_ZN7Thread16appRunEv+0x88>
            {
                Bsp_Api_toggle_debug2();
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <_ZN7Thread16appRunEv+0xa4>)
 8000aec:	f000 ffc5 	bl	8001a7a <HAL_GPIO_TogglePin>
                timeMark2 = now;
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	61bb      	str	r3, [r7, #24]
                printf( "now=%lu\n", now );
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	4809      	ldr	r0, [pc, #36]	; (8000b1c <_ZN7Thread16appRunEv+0xa8>)
 8000af8:	f006 fd20 	bl	800753c <iprintf>
            }

            uint32_t now2 = Cpl::System::ElapsedTime::milliseconds();
 8000afc:	f000 f9be 	bl	8000e7c <_ZN3Cpl6System11ElapsedTime12millisecondsEv>
 8000b00:	60f8      	str	r0, [r7, #12]
            Cpl::System::Api::sleep( 10 - ( now2 - now ) );
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	330a      	adds	r3, #10
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f944 	bl	8000d98 <_ZN3Cpl6System3Api5sleepEm>
        }
 8000b10:	e7d6      	b.n	8000ac0 <_ZN7Thread16appRunEv+0x4c>
 8000b12:	bf00      	nop
 8000b14:	08008750 	.word	0x08008750
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	0800876c 	.word	0x0800876c

08000b20 <main>:
         stack and expect it to stay in scope for duration of the applicatoin
*/
static Thread1 runnable_;

int main( void )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
    // Initialize the board
    Bsp_Api_initialize();
 8000b26:	f000 fdcd 	bl	80016c4 <Bsp_Api_initialize>
    printf( "\n**** BSP TEST APPLICATION STARTED ****\n" );
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <main+0x54>)
 8000b2c:	f006 fd8c 	bl	8007648 <puts>

    //// Initialize CPL
    Cpl::System::Api::initialize();
 8000b30:	f000 f912 	bl	8000d58 <_ZN3Cpl6System3Api10initializeEv>

    //// Create my test thread
    Cpl::System::Thread* t1 = Cpl::System::FreeRTOS::Thread::create( runnable_, "TEST", CPL_SYSTEM_THREAD_PRIORITY_NORMAL );
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2203      	movs	r2, #3
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <main+0x58>)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <main+0x5c>)
 8000b44:	f000 fc50 	bl	80013e8 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>
 8000b48:	6078      	str	r0, [r7, #4]
    if ( t1 == nullptr )
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <main+0x38>
    {
        printf( "Failed to created thread!!\n" );
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <main+0x60>)
 8000b52:	f006 fd79 	bl	8007648 <puts>
        while ( 1 );
 8000b56:	e7fe      	b.n	8000b56 <main+0x36>
    }
    else
    {
        printf( "Thread created %s thread\n", t1->getName() );
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	4798      	blx	r3
 8000b64:	4603      	mov	r3, r0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <main+0x64>)
 8000b6a:	f006 fce7 	bl	800753c <iprintf>
    }

    //// Start the scheduler
    Cpl::System::Api::enableScheduling();
 8000b6e:	f000 f8f9 	bl	8000d64 <_ZN3Cpl6System3Api16enableSchedulingEv>
    while ( 1 );    // Enable scheduling should NEVER return!
 8000b72:	e7fe      	b.n	8000b72 <main+0x52>
 8000b74:	08008778 	.word	0x08008778
 8000b78:	080087a0 	.word	0x080087a0
 8000b7c:	2000259c 	.word	0x2000259c
 8000b80:	080087a8 	.word	0x080087a8
 8000b84:	080087c4 	.word	0x080087c4

08000b88 <_ZN7Thread1D1Ev>:
class Thread1 : public Cpl::System::Runnable
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_ZN7Thread1D1Ev+0x20>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff25 	bl	80009e8 <_ZN3Cpl6System8RunnableD1Ev>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08008a94 	.word	0x08008a94

08000bac <_ZN7Thread1D0Ev>:
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ffe7 	bl	8000b88 <_ZN7Thread1D1Ev>
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f007 fcc7 	bl	800854e <_ZdlPv>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <_Z41__static_initialization_and_destruction_0ii>:
}
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10a      	bne.n	8000bf2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <_Z41__static_initialization_and_destruction_0ii+0x26>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000be8:	f000 fd78 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Thread1 runnable_;
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000bee:	f7ff ff2f 	bl	8000a50 <_ZN7Thread1C1Ev>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10a      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d105      	bne.n	8000c0e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000c04:	f7ff ffc0 	bl	8000b88 <_ZN7Thread1D1Ev>
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c0a:	f000 fd72 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20002598 	.word	0x20002598
 8000c1c:	2000259c 	.word	0x2000259c

08000c20 <_GLOBAL__sub_I_main>:
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff ffcf 	bl	8000bcc <_Z41__static_initialization_and_destruction_0ii>
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_GLOBAL__sub_D_main>:
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ffc7 	bl	8000bcc <_Z41__static_initialization_and_destruction_0ii>
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZN3Cpl6System8RunnableC1Ev>:
///
using namespace Cpl::System;


/////////////////////////////////////////////////////////////
Runnable::Runnable( void )
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    :m_running( false )
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <_ZN3Cpl6System8RunnableC1Ev+0x24>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	711a      	strb	r2, [r3, #4]
{
}
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	08008ab8 	.word	0x08008ab8

08000c68 <_ZN3Cpl6System8Runnable3runEv>:

void Runnable::run( void )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    // Set my running state
    Locks_::system().lock();
 8000c70:	f000 f89e 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f92e 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
    m_running = true;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8000c82:	f000 f895 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f939 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>

    // Run my application code
    appRun();
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3314      	adds	r3, #20
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3

    // Clear my running state
    Locks_::system().lock();
 8000c9a:	f000 f889 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f919 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
    m_running = false;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	711a      	strb	r2, [r3, #4]
    Locks_::system().unlock();
 8000cac:	f000 f880 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f924 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZN3Cpl6System8Runnable9isRunningEv>:

bool Runnable::isRunning( void ) noexcept
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    bool result = false;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]

    Locks_::system().lock();
 8000ccc:	f000 f870 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f900 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
    result = m_running;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	73fb      	strb	r3, [r7, #15]
    Locks_::system().unlock();
 8000cde:	f000 f867 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f90b 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>

    return result;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_Z41__static_initialization_and_destruction_0ii>:
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d107      	bne.n	8000d14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d102      	bne.n	8000d14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d10:	f000 fce4 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d107      	bne.n	8000d2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d102      	bne.n	8000d2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d26:	f000 fce4 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200025a4 	.word	0x200025a4

08000d38 <_GLOBAL__sub_I__ZN3Cpl6System8RunnableC2Ev>:
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff ffd7 	bl	8000cf4 <_Z41__static_initialization_and_destruction_0ii>
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_GLOBAL__sub_D__ZN3Cpl6System8RunnableC2Ev>:
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ffcf 	bl	8000cf4 <_Z41__static_initialization_and_destruction_0ii>
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZN3Cpl6System3Api10initializeEv>:

bool cpl_system_thread_freertos_schedulerStarted_ = false;

////////////////////////////////////////////////////////////////////////////////
void Api::initialize( void )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    // Init the Colony.Core sub-systems
    StartupHook_::notifyStartupClients();
 8000d5c:	f005 fc4e 	bl	80065fc <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN3Cpl6System3Api16enableSchedulingEv>:


void Api::enableScheduling( void )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    // This method should never return
    cpl_system_thread_freertos_schedulerStarted_ = true;            // Manually track the scheduler state since xTaskGetSchedulerState() is return 'taskSCHEDULER_RUNNING' BEFORE I have started the scheduler!!!!
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <_ZN3Cpl6System3Api16enableSchedulingEv+0x18>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
    vTaskStartScheduler();
 8000d6e:	f002 fb0d 	bl	800338c <vTaskStartScheduler>

    // If I get here something is wrong!!
    Bsp_Api_disableIrqs();
 8000d72:	f003 faa9 	bl	80042c8 <vPortEnterCritical>
    for ( ;;)
    {
        Bsp_Api_nop();
 8000d76:	bf00      	nop
 8000d78:	e7fd      	b.n	8000d76 <_ZN3Cpl6System3Api16enableSchedulingEv+0x12>
 8000d7a:	bf00      	nop
 8000d7c:	200025bc 	.word	0x200025bc

08000d80 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>:
    }
}

bool Api::isSchedulingEnabled( void )
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
    return cpl_system_thread_freertos_schedulerStarted_;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <_ZN3Cpl6System3Api19isSchedulingEnabledEv+0x14>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200025bc 	.word	0x200025bc

08000d98 <_ZN3Cpl6System3Api5sleepEm>:

void Api::sleep( unsigned long milliseconds ) noexcept
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    vTaskDelay( milliseconds * portTICK_PERIOD_MS );
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f002 fc67 	bl	8003674 <vTaskDelay>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <_ZN3Cpl6System6Locks_6systemEv>:
    xTaskResumeAll();
}

////////////////////////////////////////////////////////////////////////////////
Mutex& Locks_::system( void )
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
    return systemMutex_;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <_ZN3Cpl6System6Locks_6systemEv+0x10>)
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	200025ac 	.word	0x200025ac

08000dc4 <_ZN3Cpl6System6Locks_8sysListsEv>:
{
    return tracingMutex_;
}

Mutex& Locks_::sysLists( void )
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
    return sysList_;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <_ZN3Cpl6System6Locks_8sysListsEv+0x10>)
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	200025b8 	.word	0x200025b8

08000dd8 <_Z41__static_initialization_and_destruction_0ii>:

Mutex& Locks_::tracingOutput( void )
{
    return tracingOutputMutex_;
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d113      	bne.n	8000e10 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10e      	bne.n	8000e10 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000df4:	f000 fc72 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Mutex systemMutex_;
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000dfa:	f000 f847 	bl	8000e8c <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingMutex_;
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e00:	f000 f844 	bl	8000e8c <_ZN3Cpl6System5MutexC1Ev>
static Mutex tracingOutputMutex_;
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000e06:	f000 f841 	bl	8000e8c <_ZN3Cpl6System5MutexC1Ev>
static Mutex sysList_;
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000e0c:	f000 f83e 	bl	8000e8c <_ZN3Cpl6System5MutexC1Ev>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d113      	bne.n	8000e3e <_Z41__static_initialization_and_destruction_0ii+0x66>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d10e      	bne.n	8000e3e <_Z41__static_initialization_and_destruction_0ii+0x66>
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000e22:	f000 f84b 	bl	8000ebc <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingOutputMutex_;
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000e28:	f000 f848 	bl	8000ebc <_ZN3Cpl6System5MutexD1Ev>
static Mutex tracingMutex_;
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e2e:	f000 f845 	bl	8000ebc <_ZN3Cpl6System5MutexD1Ev>
static Mutex systemMutex_;
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000e34:	f000 f842 	bl	8000ebc <_ZN3Cpl6System5MutexD1Ev>
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000e3a:	f000 fc5a 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200025a8 	.word	0x200025a8
 8000e4c:	200025ac 	.word	0x200025ac
 8000e50:	200025b0 	.word	0x200025b0
 8000e54:	200025b4 	.word	0x200025b4
 8000e58:	200025b8 	.word	0x200025b8

08000e5c <_GLOBAL__sub_I_cpl_system_thread_freertos_schedulerStarted_>:
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff ffb7 	bl	8000dd8 <_Z41__static_initialization_and_destruction_0ii>
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_GLOBAL__sub_D_cpl_system_thread_freertos_schedulerStarted_>:
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff ffaf 	bl	8000dd8 <_Z41__static_initialization_and_destruction_0ii>
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZN3Cpl6System11ElapsedTime12millisecondsEv>:
using namespace Cpl::System;

///////////////////////////////////////////////////////////////
// Simulated time NOT supported
unsigned long ElapsedTime::milliseconds( void ) noexcept
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    return millisecondsInRealTime();
 8000e80:	f005 fad2 	bl	8006428 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <_ZN3Cpl6System5MutexC1Ev>:
#include "Cpl/System/FatalError.h"



//////////////////////////////////////////////////////////////////////////////
Cpl::System::Mutex::Mutex()
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
{
    m_mutex = xSemaphoreCreateRecursiveMutex();
 8000e94:	2004      	movs	r0, #4
 8000e96:	f001 fddb 	bl	8002a50 <xQueueCreateMutex>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
    if ( m_mutex == NULL )
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_ZN3Cpl6System5MutexC1Ev+0x22>
    {
        Cpl::System::FatalError::logf( "Cpl:System::Mutex::Mutex().  Failed to create mutex" );
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <_ZN3Cpl6System5MutexC1Ev+0x2c>)
 8000eaa:	f003 fb4f 	bl	800454c <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	080087e0 	.word	0x080087e0

08000ebc <_ZN3Cpl6System5MutexD1Ev>:

Cpl::System::Mutex::~Mutex()
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete( m_mutex );
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 ffe7 	bl	8002e9c <vQueueDelete>
}
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZN3Cpl6System5Mutex4lockEv>:


void Cpl::System::Mutex::lock( void )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    // Do nothing if the scheduler has not yet been started, i.e, if there is only 
    // one thread running -->then by definition I have mutual exclusion. It also allows
    // an application to lock a mutex BEFORE the scheduler has been started (i am looking
    // at you Cpl::System::Trace engine).
    if ( Cpl::System::Api::isSchedulingEnabled() )
 8000ee0:	f7ff ff4e 	bl	8000d80 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <_ZN3Cpl6System5Mutex4lockEv+0x20>
    {
        xSemaphoreTakeRecursive( m_mutex, portMAX_DELAY );
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 ff8d 	bl	8002e12 <xQueueTakeMutexRecursive>
    }
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_ZN3Cpl6System5Mutex6unlockEv>:


void Cpl::System::Mutex::unlock( void )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    if ( Cpl::System::Api::isSchedulingEnabled() )
 8000f08:	f7ff ff3a 	bl	8000d80 <_ZN3Cpl6System3Api19isSchedulingEnabledEv>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <_ZN3Cpl6System5Mutex6unlockEv+0x1c>
    {
        xSemaphoreGiveRecursive( m_mutex );
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fd7c 	bl	8002a14 <xQueueGiveMutexRecursive>
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_ZN3Cpl9Container4ItemC1Ev>:
     */
    void*  m_inListPtr_;

protected:
    /// Constructor
    Item():m_nextPtr_( 0 ), m_inListPtr_( 0 ) {}
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_ZN3Cpl6System8SignableD1Ev>:
 */
class Signable : public Cpl::Container::Item
{
public:
    /// Virtual destructor
    virtual ~Signable() {};
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <_ZN3Cpl6System8SignableD1Ev+0x1c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	08008d7c 	.word	0x08008d7c

08000f68 <_ZN3Cpl6System8SignableD0Ev>:
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffe9 	bl	8000f48 <_ZN3Cpl6System8SignableD1Ev>
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f007 fae9 	bl	800854e <_ZdlPv>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN3Cpl6System6ThreadD1Ev>:
 */
class Thread : public Signable
{
public:
    /// Virtual destructor.
    virtual ~Thread() {};
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_ZN3Cpl6System6ThreadD1Ev+0x20>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffd5 	bl	8000f48 <_ZN3Cpl6System8SignableD1Ev>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08008d50 	.word	0x08008d50

08000fac <_ZN3Cpl6System6ThreadD0Ev>:
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffe7 	bl	8000f88 <_ZN3Cpl6System6ThreadD1Ev>
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f007 fac7 	bl	800854e <_ZdlPv>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_ZN3Cpl9Container3KeyD1Ev>:
 */
class Key
{
public:
    /// Ensure a Virtual destructor
    virtual ~Key() {}
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <_ZN3Cpl9Container3KeyD1Ev+0x1c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	08008d38 	.word	0x08008d38

08000fec <_ZN3Cpl9Container3KeyD0Ev>:
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffe9 	bl	8000fcc <_ZN3Cpl9Container3KeyD1Ev>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f007 faa7 	bl	800854e <_ZdlPv>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <_ZN3Cpl4Text6StringD1Ev>:

class String : public Cpl::Container::Key
{
public:
	/// Virtual destructor!
	virtual ~String() {}
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <_ZN3Cpl4Text6StringD1Ev+0x20>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffd5 	bl	8000fcc <_ZN3Cpl9Container3KeyD1Ev>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	08008c20 	.word	0x08008c20

08001030 <_ZN3Cpl4Text6StringD0Ev>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe7 	bl	800100c <_ZN3Cpl4Text6StringD1Ev>
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f007 fa85 	bl	800854e <_ZdlPv>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZNK3Cpl4Text6StringcvPKcEv>:

	/// Read-only Access to the "raw" string.
	virtual const char* getString() const = 0;

	/// Cast to read-only character string pointer.
	inline operator const char* ( ) const { return getString(); }
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	336c      	adds	r3, #108	; 0x6c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>:
        /// Reference to the mutex to be used for synchronization
        Mutex & m_mutex;

    public:
        /// Constructor.  This will block until the mutex lock is acquired.
        inline ScopeBlock( Mutex& mutex ) noexcept:m_mutex( mutex ) { m_mutex.lock(); }
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff29 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>:

        /// Destructor.  This method releases ownership of the mutex
        inline ~ScopeBlock() { m_mutex.unlock(); }
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff2f 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZN3Cpl6System8SignableC1Ev>:
class Signable : public Cpl::Container::Item
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3304      	adds	r3, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff33 	bl	8000f24 <_ZN3Cpl9Container4ItemC1Ev>
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <_ZN3Cpl6System8SignableC1Ev+0x24>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08008d7c 	.word	0x08008d7c

080010d4 <_ZN3Cpl6System6ThreadC1Ev>:
class Thread : public Signable
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffe4 	bl	80010ac <_ZN3Cpl6System8SignableC1Ev>
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <_ZN3Cpl6System6ThreadC1Ev+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08008d50 	.word	0x08008d50

080010f8 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>:
    // Add the native thread to the list of active threads
    addThreadToActiveList_( *this );
}


Thread::Thread( Cpl::System::Runnable&   runnable,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
                int                      priority,
                unsigned                 stackSize
)
    :m_runnable( runnable ),
    m_name( name ),
    m_threadHandle( NULL )
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ffe3 	bl	80010d4 <_ZN3Cpl6System6ThreadC1Ev>
 800110e:	4a21      	ldr	r2, [pc, #132]	; (8001194 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x9c>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3310      	adds	r3, #16
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f9cb 	bl	80014bc <_ZN3Cpl4Text7FStringILi16EEC1EPKc>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
{
    // Initialize by TLS storage for this thread
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b07      	cmp	r3, #7
 8001134:	d809      	bhi.n	800114a <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x52>
    {
        m_tlsArray[i]   = 0;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	320e      	adds	r2, #14
 800113c:	2100      	movs	r1, #0
 800113e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( unsigned i=0; i < OPTION_CPL_SYSTEM_TLS_DESIRED_MIN_INDEXES; i++ )
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e7f2      	b.n	8001130 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x38>
    }

    // Calculate stack size in terms of 'depth' (not bytes)
    if ( stackSize == 0 )
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x60>
    {
        stackSize = OPTION_CPL_SYSTEM_FREERTOS_DEFAULT_STACK_SIZE >> ( sizeof( StackType_t ) / 2 );
 8001150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e002      	b.n	800115e <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x66>
    }
    else
    {
        stackSize = stackSize >> ( sizeof( StackType_t ) / 2 );
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	623b      	str	r3, [r7, #32]
    }


    // Create the thread
    xTaskCreate( &entryPoint, name, stackSize, this, priority, &m_threadHandle );
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	b299      	uxth	r1, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	3234      	adds	r2, #52	; 0x34
 8001168:	9201      	str	r2, [sp, #4]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	460a      	mov	r2, r1
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa0>)
 8001174:	f002 f873 	bl	800325e <xTaskCreate>
    if ( m_threadHandle == NULL )
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0x90>
    {
        Cpl::System::FatalError::logf( "FreeRTOS::Thread::Thread().  Failed to create thread %s.", name );
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij+0xa4>)
 8001184:	f003 f9e2 	bl	800454c <_ZN3Cpl6System10FatalError4logfEPKcz>
    }
}
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	08008adc 	.word	0x08008adc
 8001198:	0800130d 	.word	0x0800130d
 800119c:	08008924 	.word	0x08008924

080011a0 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>:

Thread::~Thread()
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	; (800121c <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x7c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
    //       let the thread "run-to-completion", i.e. have the run() method
    //       of the associated Runnable object complete.  If you do
    //       need to kill a thread - be dang sure that it is state such
    //       that it is ok to die - i.e. it has released all of its acquired
    //       resources: mutexes, semaphores, file handles, etc.
    if ( m_runnable.isRunning() )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3310      	adds	r3, #16
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4610      	mov	r0, r2
 80011be:	4798      	blx	r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01c      	beq.n	8001200 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
    {
        // Ask the runnable object nicely to stop 
        m_runnable.pleaseStop();
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	330c      	adds	r3, #12
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4610      	mov	r0, r2
 80011d6:	4798      	blx	r3
        Cpl::System::Api::sleep( 100 );     // Yield execution and allow time for the thread to actually exit.
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f7ff fddd 	bl	8000d98 <_ZN3Cpl6System3Api5sleepEm>

        // Just to make sure: Brute the force the thread to end - IF it is still running
        // NOTE: This will NOT free any resources associated with the thread including the stack!
        if ( m_runnable.isRunning() )
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev+0x60>
        {
            vTaskDelete( m_threadHandle );
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 f85c 	bl	80032b8 <vTaskDelete>
Thread::~Thread()
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3310      	adds	r3, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fa01 	bl	800160c <_ZN3Cpl4Text7FStringILi16EED1Ev>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff febb 	bl	8000f88 <_ZN3Cpl6System6ThreadD1Ev>
        }
    }
}
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08008adc 	.word	0x08008adc

08001220 <_ZN3Cpl6System8FreeRTOS6ThreadD0Ev>:
Thread::~Thread()
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
}
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffb9 	bl	80011a0 <_ZN3Cpl6System8FreeRTOS6ThreadD1Ev>
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f007 f98d 	bl	800854e <_ZdlPv>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZN3Cpl6System8FreeRTOS6Thread6signalEv>:


//////////////////////////////
int Thread::signal() noexcept
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
    xTaskNotifyGive( m_threadHandle );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800124a:	2300      	movs	r3, #0
 800124c:	2202      	movs	r2, #2
 800124e:	2100      	movs	r1, #0
 8001250:	f002 fc7c 	bl	8003b4c <xTaskGenericNotify>
    return 0; // Always return success
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZN3Cpl6System8FreeRTOS6Thread9su_signalEv>:
/** NOTE: This method returns the 'higherPriorityTaskWoken' instead of the
          defined 'return zero on success' semantics.  This is to overcome
          the oddities of FreeRTOS.
 */
int Thread::su_signal() noexcept
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR( m_threadHandle, &higherPriorityTaskWoken );
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fcdf 	bl	8003c38 <vTaskNotifyGiveFromISR>
    return higherPriorityTaskWoken;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN3Cpl6System8FreeRTOS6Thread7getNameEv>:



const char* Thread::getName() noexcept
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    return m_name;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3310      	adds	r3, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fedc 	bl	800104e <_ZNK3Cpl4Text6StringcvPKcEv>
 8001296:	4603      	mov	r3, r0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN3Cpl6System8FreeRTOS6Thread5getIdEv>:

size_t Thread::getId() noexcept
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    return (size_t) m_threadHandle;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_ZN3Cpl6System8FreeRTOS6Thread9isRunningEv>:

bool Thread::isRunning() noexcept
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    return m_runnable.isRunning();
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3310      	adds	r3, #16
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4610      	mov	r0, r2
 80012d0:	4798      	blx	r3
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN3Cpl6System8FreeRTOS6Thread15getNativeHandleEv>:

Cpl_System_Thread_NativeHdl_T Thread::getNativeHandle( void ) noexcept
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    return m_threadHandle;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_ZN3Cpl6System8FreeRTOS6Thread11getRunnableEv>:

Cpl::System::Runnable& Thread::getRunnable( void ) noexcept
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return m_runnable;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv>:

//////////////////////////////
void Thread::entryPoint( void* data )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    // Convert data arg to a pointer to a Thread Object
    Thread* myThreadPtr = (Thread*) data;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]

    // Plant the address of my TLS array into FreeRTOS's TCB
    vTaskSetApplicationTaskTag( myThreadPtr->m_threadHandle, (TaskHookFunction_t) myThreadPtr );
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f9cb 	bl	80036bc <vTaskSetApplicationTaskTag>


    // Go Execute the "Runnable" object
    addThreadToActiveList_( *myThreadPtr );
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f826 	bl	8001378 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>
    myThreadPtr->m_runnable.setThreadOfExecution_( myThreadPtr );
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3318      	adds	r3, #24
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	4610      	mov	r0, r2
 800133e:	4798      	blx	r3
    myThreadPtr->m_runnable.run();
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3308      	adds	r3, #8
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4610      	mov	r0, r2
 8001350:	4798      	blx	r3

    // Remove the thread from the list of active threads
    removeThreadFromActiveList_( *myThreadPtr );
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f82c 	bl	80013b0 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>

    // Terminate myself
    vTaskDelete( NULL );
 8001358:	2000      	movs	r0, #0
 800135a:	f001 ffad 	bl	80032b8 <vTaskDelete>

    // Per the FreeRTOS API -->this function can NEVER return
    for ( ;;);
 800135e:	e7fe      	b.n	800135e <_ZN3Cpl6System8FreeRTOS6Thread10entryPointEPv+0x52>

08001360 <_ZN3Cpl6System6Thread10getCurrentEv>:
}


//////////////////////////////
Cpl::System::Thread& Cpl::System::Thread::getCurrent() noexcept
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    return *( (Thread*) xTaskGetApplicationTaskTag( xTaskGetCurrentTaskHandle() ) );
 8001364:	f002 fada 	bl	800391c <xTaskGetCurrentTaskHandle>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f9b6 	bl	80036dc <xTaskGetApplicationTaskTag>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:
    }
}


void addThreadToActiveList_( Thread& thread )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 8001380:	f7ff fd20 	bl	8000dc4 <_ZN3Cpl6System6Locks_8sysListsEv>
 8001384:	4602      	mov	r2, r0
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe6d 	bl	800106c <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.put( thread );
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <_ZL22addThreadToActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 8001396:	f000 f8c2 	bl	800151e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe76 	bl	8001090 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200025c4 	.word	0x200025c4

080013b0 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE>:

void removeThreadFromActiveList_( Thread& thread )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 80013b8:	f7ff fd04 	bl	8000dc4 <_ZN3Cpl6System6Locks_8sysListsEv>
 80013bc:	4602      	mov	r2, r0
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe51 	bl	800106c <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>
    threadList_.remove( thread );
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <_ZL27removeThreadFromActiveList_RN3Cpl6System8FreeRTOS6ThreadE+0x34>)
 80013ce:	f000 f8ca 	bl	8001566 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::sysLists() );
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe5a 	bl	8001090 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200025c4 	.word	0x200025c4

080013e8 <_ZN3Cpl6System6Thread6createERNS0_8RunnableEPKciiPvb>:
                                                  int         priority,
                                                  int         stackSize,
                                                  void*       stackPtr,
                                                  bool        allowSimTicks
)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
    return new Cpl::System::FreeRTOS::Thread( runnable, name, priority, stackSize );
 80013f6:	2058      	movs	r0, #88	; 0x58
 80013f8:	f007 f8ab 	bl	8008552 <_Znwj>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461c      	mov	r4, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff fe74 	bl	80010f8 <_ZN3Cpl6System8FreeRTOS6ThreadC1ERNS0_8RunnableEPKcij>
 8001410:	4623      	mov	r3, r4
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}

0800141a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>:
    :m_headPtr( 0 ), m_tailPtr( 0 )
{
}

template <class ITEM>
SList<ITEM>::SList( const char* notUsed ) noexcept
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
{
}
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN3Cpl4Text7String_D1Ev>:

/** This partially concrete class implements the portions of the String Api
	that is independent of the internal storage mechanisms.
 */

class String_ : public String
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_ZN3Cpl4Text7String_D1Ev+0x20>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fde1 	bl	800100c <_ZN3Cpl4Text6StringD1Ev>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	0800914c 	.word	0x0800914c

08001458 <_ZN3Cpl4Text7String_D0Ev>:
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ffe7 	bl	8001434 <_ZN3Cpl4Text7String_D1Ev>
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f007 f871 	bl	800854e <_ZdlPv>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <_ZN3Cpl4Text8FString_D1Ev>:
		  storage limit is not exceeded and the string is always NULL
		  terminated.  The "incoming" data is silently truncated if the data
		  size exceeds the storage limit.
 */

class FString_ : public String_
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_ZN3Cpl4Text8FString_D1Ev+0x20>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffd3 	bl	8001434 <_ZN3Cpl4Text7String_D1Ev>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	08009034 	.word	0x08009034

0800149c <_ZN3Cpl4Text8FString_D0Ev>:
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ffe7 	bl	8001478 <_ZN3Cpl4Text8FString_D1Ev>
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f007 f84f 	bl	800854e <_ZdlPv>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <_ZN3Cpl4Text7FStringILi16EEC1EPKc>:

	/// Constructor
	FString( const Cpl::Text::String& string ) :FString_( string.getString(), m_strMem, S ) {}

	/// Constructor
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f103 0210 	add.w	r2, r3, #16
 80014ce:	2310      	movs	r3, #16
 80014d0:	6839      	ldr	r1, [r7, #0]
 80014d2:	f003 fc31 	bl	8004d38 <_ZN3Cpl4Text8FString_C1EPKcPci>
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <_ZN3Cpl4Text7FStringILi16EEC1EPKc+0x2c>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08008b08 	.word	0x08008b08

080014ec <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>:
{
    return  item.isInContainer_( this );
}

template <class ITEM>
inline ITEM* SList<ITEM>::first( void ) const noexcept
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
{
    return m_headPtr;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>:
{
    return m_tailPtr;
}

template <class ITEM>
inline ITEM* SList<ITEM>::next( const ITEM& item ) const  noexcept
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
{
    return (ITEM*) (item.m_nextPtr_);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3304      	adds	r3, #4
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fb7e 	bl	8004c30 <_ZN3Cpl9Container4Item7insert_EPv>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d011      	beq.n	800155e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x40>
        if ( m_headPtr )
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	e002      	b.n	8001552 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE3putERS4_+0x34>
            m_headPtr = &item;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	605a      	str	r2, [r3, #4]
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_>:
inline bool SList<ITEM>::remove( ITEM& item ) noexcept
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
    if ( item.isInContainer_( this ) )
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3304      	adds	r3, #4
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fb76 	bl	8004c68 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03f      	beq.n	8001602 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb2 	bl	80014ec <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE5firstEv>
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d036      	beq.n	8001602 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9c>
            if ( nxtPtr == &item )
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d12a      	bne.n	80015f2 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x8c>
                if ( prvPtr )
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x5e>
                    if ( !(prvPtr->m_nextPtr_=nxtPtr->m_nextPtr_) )
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = prvPtr;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	e00f      	b.n	80015e4 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                    if ( !(m_headPtr=(ITEM*) nxtPtr->m_nextPtr_) )
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x7e>
                        m_tailPtr = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
                Item::remove_( &item );
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3304      	adds	r3, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fb50 	bl	8004c8e <_ZN3Cpl9Container4Item7remove_EPS1_>
                return true;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e008      	b.n	8001604 <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x9e>
        for ( nxtPtr=first(), prvPtr=0; nxtPtr; prvPtr=nxtPtr, nxtPtr=next( *nxtPtr ) )
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff83 	bl	8001504 <_ZNK3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE4nextERKS4_>
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	e7c5      	b.n	800158e <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEE6removeERS4_+0x28>
    return false;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN3Cpl4Text7FStringILi16EED1Ev>:
class FString : public FString_
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <_ZN3Cpl4Text7FStringILi16EED1Ev+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff2b 	bl	8001478 <_ZN3Cpl4Text8FString_D1Ev>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	08008b08 	.word	0x08008b08

08001630 <_ZN3Cpl4Text7FStringILi16EED0Ev>:
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_ZN3Cpl4Text7FStringILi16EED1Ev>
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f006 ff85 	bl	800854e <_ZdlPv>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <_Z41__static_initialization_and_destruction_0ii>:


void Cpl::System::Thread::destroy( Thread& threadToDestroy )
{
    delete &threadToDestroy;
}
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10b      	bne.n	8001678 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	4293      	cmp	r3, r2
 8001668:	d106      	bne.n	8001678 <_Z41__static_initialization_and_destruction_0ii+0x28>
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800166c:	f000 f836 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Thread>  	threadList_( "StaticConstructor" );
 8001670:	490a      	ldr	r1, [pc, #40]	; (800169c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001674:	f7ff fed1 	bl	800141a <_ZN3Cpl9Container5SListINS_6System8FreeRTOS6ThreadEEC1EPKc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d107      	bne.n	800168e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800168a:	f000 f832 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200025c0 	.word	0x200025c0
 800169c:	08008960 	.word	0x08008960
 80016a0:	200025c4 	.word	0x200025c4

080016a4 <_GLOBAL__sub_I__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff ffcf 	bl	8001650 <_Z41__static_initialization_and_destruction_0ii>
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_GLOBAL__sub_D__ZN3Cpl6System8FreeRTOS6Thread30makeNativeMainThreadACplThreadEv>:
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff ffc7 	bl	8001650 <_Z41__static_initialization_and_destruction_0ii>
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <Bsp_Api_initialize>:



///////////////////////////////////////////
void Bsp_Api_initialize( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80016c8:	f000 f86c 	bl	80017a4 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80016cc:	f7ff f89c 	bl	8000808 <SystemClock_Config>


    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80016d0:	f7fe ffaa 	bl	8000628 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 80016d4:	f7ff f92e 	bl	8000934 <MX_USART3_UART_Init>

      // Configure the LEDs as output pins 
      //pinMode( OPTION_BSP_DEBUG_LED1_INDEX, OUTPUT );
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt8ios_base4InitC1Ev>:
//extern "C" void __cxa_pure_virtual() { while (1); }

/*
** Method stubs to satisfy the linker -->NOTE: C++ Streams are NOT supported by this BSP
*/
std::ios_base::Init::Init()
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
{
}
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_ZNSt8ios_base4InitD1Ev>:

std::ios_base::Init::~Init()
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
{
}
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <Reset_Handler>:
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001740 <LoopFillZerobss+0x12>
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <LoopFillZerobss+0x16>)
 800170e:	490e      	ldr	r1, [pc, #56]	; (8001748 <LoopFillZerobss+0x1a>)
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <LoopFillZerobss+0x1e>)
 8001712:	2300      	movs	r3, #0
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:
 8001716:	58d4      	ldr	r4, [r2, r3]
 8001718:	50c4      	str	r4, [r0, r3]
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:
 800171c:	18c4      	adds	r4, r0, r3
 800171e:	428c      	cmp	r4, r1
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <LoopFillZerobss+0x22>)
 8001724:	4c0b      	ldr	r4, [pc, #44]	; (8001754 <LoopFillZerobss+0x26>)
 8001726:	2300      	movs	r3, #0
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:
 800172e:	42a2      	cmp	r2, r4
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>
 8001732:	f7ff f8f5 	bl	8000920 <SystemInit>
 8001736:	f005 fdc1 	bl	80072bc <__libc_init_array>
 800173a:	f7ff f9f1 	bl	8000b20 <main>
 800173e:	4770      	bx	lr
 8001740:	20050000 	.word	0x20050000
 8001744:	20000000 	.word	0x20000000
 8001748:	20000078 	.word	0x20000078
 800174c:	080096ec 	.word	0x080096ec
 8001750:	20000078 	.word	0x20000078
 8001754:	2000af7c 	.word	0x2000af7c

08001758 <ADC_IRQHandler>:
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_InitTick+0x3c>)
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_InitTick+0x40>)
{
 8001762:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	7818      	ldrb	r0, [r3, #0]
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f0 	udiv	r3, r3, r0
 800176e:	6810      	ldr	r0, [r2, #0]
 8001770:	fbb0 f0f3 	udiv	r0, r0, r3
 8001774:	f000 f894 	bl	80018a0 <HAL_SYSTICK_Config>
 8001778:	4604      	mov	r4, r0
 800177a:	b958      	cbnz	r0, 8001794 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177c:	2d0f      	cmp	r5, #15
 800177e:	d809      	bhi.n	8001794 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	4602      	mov	r2, r0
 8001782:	4629      	mov	r1, r5
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f84a 	bl	8001820 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_InitTick+0x44>)
 800178e:	4620      	mov	r0, r4
 8001790:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001792:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e7fc      	b.n	8001792 <HAL_InitTick+0x36>
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_Init>:
{
 80017a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_Init+0x30>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f81b 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff ffc8 	bl	800175c <HAL_InitTick>
  HAL_MspInit();
 80017cc:	f7ff f870 	bl	80008b0 <HAL_MspInit>
}
 80017d0:	2000      	movs	r0, #0
 80017d2:	bd08      	pop	{r3, pc}
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_IncTick+0x10>)
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_IncTick+0x14>)
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	440b      	add	r3, r1
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200025cc 	.word	0x200025cc
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <HAL_GetTick+0x8>)
 80017f2:	6818      	ldr	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200025cc 	.word	0x200025cc

080017fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017fe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001818:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b530      	push	{r4, r5, lr}
 8001824:	68dc      	ldr	r4, [r3, #12]
 8001826:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	2d04      	cmp	r5, #4
 8001832:	bf28      	it	cs
 8001834:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183c:	bf8c      	ite	hi
 800183e:	3c03      	subhi	r4, #3
 8001840:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001842:	fa03 f505 	lsl.w	r5, r3, r5
 8001846:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184a:	40a3      	lsls	r3, r4
 800184c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001852:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	bfac      	ite	ge
 800185a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	4a08      	ldrlt	r2, [pc, #32]	; (8001880 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	bfb8      	it	lt
 8001866:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	b2db      	uxtb	r3, r3
 800186c:	bfaa      	itet	ge
 800186e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001878:	bd30      	pop	{r4, r5, pc}
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00
 8001880:	e000ed14 	.word	0xe000ed14

08001884 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001884:	2800      	cmp	r0, #0
 8001886:	db08      	blt.n	800189a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001888:	0942      	lsrs	r2, r0, #5
 800188a:	2301      	movs	r3, #1
 800188c:	f000 001f 	and.w	r0, r0, #31
 8001890:	fa03 f000 	lsl.w	r0, r3, r0
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <HAL_NVIC_EnableIRQ+0x18>)
 8001896:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100

080018a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	3801      	subs	r0, #1
 80018a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018a6:	d20b      	bcs.n	80018c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	21f0      	movs	r1, #240	; 0xf0
 80018b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001a6c <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d0:	4a64      	ldr	r2, [pc, #400]	; (8001a64 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d4:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80018d6:	2401      	movs	r4, #1
 80018d8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80018de:	43ac      	bics	r4, r5
 80018e0:	f040 80ad 	bne.w	8001a3e <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e4:	684d      	ldr	r5, [r1, #4]
 80018e6:	f005 0403 	and.w	r4, r5, #3
 80018ea:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ee:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fc:	d834      	bhi.n	8001968 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80018fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001904:	68cf      	ldr	r7, [r1, #12]
 8001906:	fa07 f708 	lsl.w	r7, r7, r8
 800190a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800190e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001910:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001912:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800191a:	409f      	lsls	r7, r3
 800191c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001920:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001922:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001924:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	688f      	ldr	r7, [r1, #8]
 800192a:	fa07 f708 	lsl.w	r7, r7, r8
 800192e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001934:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	d119      	bne.n	800196c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001938:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800193c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001940:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001944:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001948:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800194c:	f04f 0e0f 	mov.w	lr, #15
 8001950:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001954:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001958:	690f      	ldr	r7, [r1, #16]
 800195a:	fa07 f70b 	lsl.w	r7, r7, fp
 800195e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001962:	f8ca 7020 	str.w	r7, [sl, #32]
 8001966:	e001      	b.n	800196c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	2c03      	cmp	r4, #3
 800196a:	d1da      	bne.n	8001922 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800196c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001974:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001976:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800197a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197c:	d05f      	beq.n	8001a3e <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	f04f 0a00 	mov.w	sl, #0
 8001982:	f8cd a004 	str.w	sl, [sp, #4]
 8001986:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	4c37      	ldr	r4, [pc, #220]	; (8001a68 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001990:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001994:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001998:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800199c:	9601      	str	r6, [sp, #4]
 800199e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019a0:	f023 0603 	bic.w	r6, r3, #3
 80019a4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80019a8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ac:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80019b0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019b8:	270f      	movs	r7, #15
 80019ba:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019be:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c4:	d042      	beq.n	8001a4c <HAL_GPIO_Init+0x184>
 80019c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019ca:	42a0      	cmp	r0, r4
 80019cc:	d040      	beq.n	8001a50 <HAL_GPIO_Init+0x188>
 80019ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019d2:	42a0      	cmp	r0, r4
 80019d4:	d03e      	beq.n	8001a54 <HAL_GPIO_Init+0x18c>
 80019d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019da:	42a0      	cmp	r0, r4
 80019dc:	d03c      	beq.n	8001a58 <HAL_GPIO_Init+0x190>
 80019de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019e2:	42a0      	cmp	r0, r4
 80019e4:	d03a      	beq.n	8001a5c <HAL_GPIO_Init+0x194>
 80019e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019ea:	42a0      	cmp	r0, r4
 80019ec:	d038      	beq.n	8001a60 <HAL_GPIO_Init+0x198>
 80019ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80019f2:	42a0      	cmp	r0, r4
 80019f4:	bf0c      	ite	eq
 80019f6:	2406      	moveq	r4, #6
 80019f8:	2407      	movne	r4, #7
 80019fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80019fe:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001a02:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a08:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	bf54      	ite	pl
 8001a0c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a0e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001a12:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a16:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001a18:	bf54      	ite	pl
 8001a1a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a1c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001a20:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a24:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001a26:	bf54      	ite	pl
 8001a28:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a2a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001a2e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a32:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001a34:	bf54      	ite	pl
 8001a36:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a38:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001a3c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	3301      	adds	r3, #1
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	f47f af47 	bne.w	80018d4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001a46:	b003      	add	sp, #12
 8001a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4c:	4654      	mov	r4, sl
 8001a4e:	e7d4      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a50:	2401      	movs	r4, #1
 8001a52:	e7d2      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a54:	2402      	movs	r4, #2
 8001a56:	e7d0      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a58:	2403      	movs	r4, #3
 8001a5a:	e7ce      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a5c:	2404      	movs	r4, #4
 8001a5e:	e7cc      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a60:	2405      	movs	r4, #5
 8001a62:	e7ca      	b.n	80019fa <HAL_GPIO_Init+0x132>
 8001a64:	40013c00 	.word	0x40013c00
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	b10a      	cbz	r2, 8001a76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	6181      	str	r1, [r0, #24]
  }
}
 8001a74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	0409      	lsls	r1, r1, #16
 8001a78:	e7fb      	b.n	8001a72 <HAL_GPIO_WritePin+0x2>

08001a7a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a7a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7c:	ea01 0203 	and.w	r2, r1, r3
 8001a80:	ea21 0103 	bic.w	r1, r1, r3
 8001a84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001a88:	6181      	str	r1, [r0, #24]
}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	4604      	mov	r4, r0
 8001a92:	b340      	cbz	r0, 8001ae6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	07dd      	lsls	r5, r3, #31
 8001a98:	d410      	bmi.n	8001abc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	0798      	lsls	r0, r3, #30
 8001a9e:	d45e      	bmi.n	8001b5e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	071a      	lsls	r2, r3, #28
 8001aa4:	f100 80a0 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	075b      	lsls	r3, r3, #29
 8001aac:	f100 80c0 	bmi.w	8001c30 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	69a0      	ldr	r0, [r4, #24]
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f040 8128 	bne.w	8001d08 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2000      	movs	r0, #0
 8001aba:	e02b      	b.n	8001b14 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001abc:	4b8f      	ldr	r3, [pc, #572]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	f002 020c 	and.w	r2, r2, #12
 8001ac4:	2a04      	cmp	r2, #4
 8001ac6:	d007      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ace:	2a08      	cmp	r2, #8
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	0251      	lsls	r1, r2, #9
 8001ad6:	d508      	bpl.n	8001aea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	d5dc      	bpl.n	8001a9a <HAL_RCC_OscConfig+0xe>
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1d9      	bne.n	8001a9a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	e014      	b.n	8001b14 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	6862      	ldr	r2, [r4, #4]
 8001aec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001af0:	d113      	bne.n	8001b1a <HAL_RCC_OscConfig+0x8e>
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001afa:	f7ff fe79 	bl	80017f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4e7f      	ldr	r6, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001b00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	6833      	ldr	r3, [r6, #0]
 8001b04:	039b      	lsls	r3, r3, #14
 8001b06:	d4c8      	bmi.n	8001a9a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fe72 	bl	80017f0 <HAL_GetTick>
 8001b0c:	1b40      	subs	r0, r0, r5
 8001b0e:	2864      	cmp	r0, #100	; 0x64
 8001b10:	d9f7      	bls.n	8001b02 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001b12:	2003      	movs	r0, #3
}
 8001b14:	b002      	add	sp, #8
 8001b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	4d78      	ldr	r5, [pc, #480]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b1c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0xa8>
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	602b      	str	r3, [r5, #0]
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b32:	e7e2      	b.n	8001afa <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b40:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d1d9      	bne.n	8001afa <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001b46:	f7ff fe53 	bl	80017f0 <HAL_GetTick>
 8001b4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	039f      	lsls	r7, r3, #14
 8001b50:	d5a3      	bpl.n	8001a9a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b52:	f7ff fe4d 	bl	80017f0 <HAL_GetTick>
 8001b56:	1b80      	subs	r0, r0, r6
 8001b58:	2864      	cmp	r0, #100	; 0x64
 8001b5a:	d9f7      	bls.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b5c:	e7d9      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	f012 0f0c 	tst.w	r2, #12
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6e:	2a08      	cmp	r2, #8
 8001b70:	d111      	bne.n	8001b96 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	025e      	lsls	r6, r3, #9
 8001b76:	d40e      	bmi.n	8001b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b78:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	079d      	lsls	r5, r3, #30
 8001b7e:	d502      	bpl.n	8001b86 <HAL_RCC_OscConfig+0xfa>
 8001b80:	68e3      	ldr	r3, [r4, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d1af      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	6921      	ldr	r1, [r4, #16]
 8001b8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b92:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b94:	e784      	b.n	8001aa0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b96:	68e2      	ldr	r2, [r4, #12]
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	b1b2      	cbz	r2, 8001bca <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fe26 	bl	80017f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	4d55      	ldr	r5, [pc, #340]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001ba6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	0798      	lsls	r0, r3, #30
 8001bac:	d507      	bpl.n	8001bbe <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	6922      	ldr	r2, [r4, #16]
 8001bb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bba:	602b      	str	r3, [r5, #0]
 8001bbc:	e770      	b.n	8001aa0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fe17 	bl	80017f0 <HAL_GetTick>
 8001bc2:	1b80      	subs	r0, r0, r6
 8001bc4:	2802      	cmp	r0, #2
 8001bc6:	d9ef      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x11c>
 8001bc8:	e7a3      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001bca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fe10 	bl	80017f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd0:	4e4a      	ldr	r6, [pc, #296]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001bd2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd4:	6833      	ldr	r3, [r6, #0]
 8001bd6:	0799      	lsls	r1, r3, #30
 8001bd8:	f57f af62 	bpl.w	8001aa0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fe08 	bl	80017f0 <HAL_GetTick>
 8001be0:	1b40      	subs	r0, r0, r5
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f6      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x148>
 8001be6:	e794      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be8:	6962      	ldr	r2, [r4, #20]
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bec:	b182      	cbz	r2, 8001c10 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fdfc 	bl	80017f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	4e40      	ldr	r6, [pc, #256]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001bfa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001bfe:	079f      	lsls	r7, r3, #30
 8001c00:	f53f af52 	bmi.w	8001aa8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fdf4 	bl	80017f0 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f6      	bls.n	8001bfc <HAL_RCC_OscConfig+0x170>
 8001c0e:	e780      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001c10:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001c14:	f7ff fdec 	bl	80017f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4e38      	ldr	r6, [pc, #224]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001c1a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001c1e:	0798      	lsls	r0, r3, #30
 8001c20:	f57f af42 	bpl.w	8001aa8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fde4 	bl	80017f0 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d9f6      	bls.n	8001c1c <HAL_RCC_OscConfig+0x190>
 8001c2e:	e770      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c34:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c38:	d128      	bne.n	8001c8c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	9201      	str	r2, [sp, #4]
 8001c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c4e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4d2c      	ldr	r5, [pc, #176]	; (8001d04 <HAL_RCC_OscConfig+0x278>)
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	05d9      	lsls	r1, r3, #23
 8001c56:	d51b      	bpl.n	8001c90 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	68a3      	ldr	r3, [r4, #8]
 8001c5a:	4d28      	ldr	r5, [pc, #160]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d127      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x224>
 8001c60:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c68:	f7ff fdc2 	bl	80017f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4e23      	ldr	r6, [pc, #140]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001c6e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001c76:	079b      	lsls	r3, r3, #30
 8001c78:	d539      	bpl.n	8001cee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001c7a:	2f00      	cmp	r7, #0
 8001c7c:	f43f af18 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	e711      	b.n	8001ab0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2700      	movs	r7, #0
 8001c8e:	e7df      	b.n	8001c50 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c90:	682b      	ldr	r3, [r5, #0]
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c98:	f7ff fdaa 	bl	80017f0 <HAL_GetTick>
 8001c9c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	05da      	lsls	r2, r3, #23
 8001ca2:	d4d9      	bmi.n	8001c58 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca4:	f7ff fda4 	bl	80017f0 <HAL_GetTick>
 8001ca8:	1b80      	subs	r0, r0, r6
 8001caa:	2802      	cmp	r0, #2
 8001cac:	d9f7      	bls.n	8001c9e <HAL_RCC_OscConfig+0x212>
 8001cae:	e730      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d104      	bne.n	8001cbe <HAL_RCC_OscConfig+0x232>
 8001cb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	672b      	str	r3, [r5, #112]	; 0x70
 8001cbc:	e7d0      	b.n	8001c60 <HAL_RCC_OscConfig+0x1d4>
 8001cbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	672a      	str	r2, [r5, #112]	; 0x70
 8001cc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cc8:	f022 0204 	bic.w	r2, r2, #4
 8001ccc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ca      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fd8d 	bl	80017f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001cda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cde:	0798      	lsls	r0, r3, #30
 8001ce0:	d5cb      	bpl.n	8001c7a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fd85 	bl	80017f0 <HAL_GetTick>
 8001ce6:	1b80      	subs	r0, r0, r6
 8001ce8:	4540      	cmp	r0, r8
 8001cea:	d9f7      	bls.n	8001cdc <HAL_RCC_OscConfig+0x250>
 8001cec:	e711      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff fd7f 	bl	80017f0 <HAL_GetTick>
 8001cf2:	1b40      	subs	r0, r0, r5
 8001cf4:	4540      	cmp	r0, r8
 8001cf6:	d9bd      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1e8>
 8001cf8:	e70b      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470000 	.word	0x42470000
 8001d04:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d08:	4d39      	ldr	r5, [pc, #228]	; (8001df0 <HAL_RCC_OscConfig+0x364>)
 8001d0a:	68ab      	ldr	r3, [r5, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d03d      	beq.n	8001d90 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x368>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	d12b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fd67 	bl	80017f0 <HAL_GetTick>
 8001d22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	0199      	lsls	r1, r3, #6
 8001d28:	d41f      	bmi.n	8001d6a <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d32:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d46:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0x368>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4a:	4d29      	ldr	r5, [pc, #164]	; (8001df0 <HAL_RCC_OscConfig+0x364>)
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001d50:	f7ff fd4e 	bl	80017f0 <HAL_GetTick>
 8001d54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	682b      	ldr	r3, [r5, #0]
 8001d58:	019a      	lsls	r2, r3, #6
 8001d5a:	f53f aead 	bmi.w	8001ab8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7ff fd47 	bl	80017f0 <HAL_GetTick>
 8001d62:	1b00      	subs	r0, r0, r4
 8001d64:	2802      	cmp	r0, #2
 8001d66:	d9f6      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2ca>
 8001d68:	e6d3      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fd41 	bl	80017f0 <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	2802      	cmp	r0, #2
 8001d72:	d9d7      	bls.n	8001d24 <HAL_RCC_OscConfig+0x298>
 8001d74:	e6cd      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001d76:	f7ff fd3b 	bl	80017f0 <HAL_GetTick>
 8001d7a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	019b      	lsls	r3, r3, #6
 8001d80:	f57f ae9a 	bpl.w	8001ab8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fd34 	bl	80017f0 <HAL_GetTick>
 8001d88:	1b00      	subs	r0, r0, r4
 8001d8a:	2802      	cmp	r0, #2
 8001d8c:	d9f6      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
 8001d8e:	e6c0      	b.n	8001b12 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	2801      	cmp	r0, #1
 8001d92:	f43f aebf 	beq.w	8001b14 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8001d96:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9e:	4291      	cmp	r1, r2
 8001da0:	f47f aea1 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	428a      	cmp	r2, r1
 8001dac:	f47f ae9b 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001db6:	401a      	ands	r2, r3
 8001db8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001dbc:	f47f ae93 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dc2:	0852      	lsrs	r2, r2, #1
 8001dc4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001dc8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001dce:	f47f ae8a 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd8:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001ddc:	f47f ae83 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001de0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001de2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001dea:	f43f ae65 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x2c>
 8001dee:	e67a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5a>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470000 	.word	0x42470000

08001df8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df8:	4913      	ldr	r1, [pc, #76]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001dfa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dfc:	688b      	ldr	r3, [r1, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d01c      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x48>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e10:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e14:	bf14      	ite	ne
 8001e16:	480d      	ldrne	r0, [pc, #52]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e18:	480d      	ldreq	r0, [pc, #52]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e1e:	bf18      	it	ne
 8001e20:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e26:	fba1 0100 	umull	r0, r1, r1, r0
 8001e2a:	f7fe fa61 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001e3a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e3e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x54>)
 8001e42:	e7fc      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001e46:	e7fa      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x46>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	00f42400 	.word	0x00f42400

08001e54 <HAL_RCC_ClockConfig>:
{
 8001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	b910      	cbnz	r0, 8001e64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
}
 8001e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_RCC_ClockConfig+0x124>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f002 0207 	and.w	r2, r2, #7
 8001e6c:	428a      	cmp	r2, r1
 8001e6e:	d328      	bcc.n	8001ec2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	0797      	lsls	r7, r2, #30
 8001e74:	d42d      	bmi.n	8001ed2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	07d0      	lsls	r0, r2, #31
 8001e78:	d441      	bmi.n	8001efe <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_ClockConfig+0x124>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f002 0207 	and.w	r2, r2, #7
 8001e82:	42aa      	cmp	r2, r5
 8001e84:	d866      	bhi.n	8001f54 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	0751      	lsls	r1, r2, #29
 8001e8a:	d46c      	bmi.n	8001f66 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	0713      	lsls	r3, r2, #28
 8001e8e:	d507      	bpl.n	8001ea0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e90:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001e92:	6921      	ldr	r1, [r4, #16]
 8001e94:	6893      	ldr	r3, [r2, #8]
 8001e96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea0:	f7ff ffaa 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_RCC_ClockConfig+0x12c>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	40d8      	lsrs	r0, r3
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_ClockConfig+0x130>)
 8001eb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x134>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f7ff fc4f 	bl	800175c <HAL_InitTick>
  return HAL_OK;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e7ce      	b.n	8001e60 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	d1c6      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xa>
 8001ed0:	e7ce      	b.n	8001e70 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001ed4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	bf1e      	ittt	ne
 8001eda:	6899      	ldrne	r1, [r3, #8]
 8001edc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001ee0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee4:	bf42      	ittt	mi
 8001ee6:	6899      	ldrmi	r1, [r3, #8]
 8001ee8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001eec:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eee:	4923      	ldr	r1, [pc, #140]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001ef0:	68a0      	ldr	r0, [r4, #8]
 8001ef2:	688b      	ldr	r3, [r1, #8]
 8001ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ef8:	4303      	orrs	r3, r0
 8001efa:	608b      	str	r3, [r1, #8]
 8001efc:	e7bb      	b.n	8001e76 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	6862      	ldr	r2, [r4, #4]
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001f02:	2a01      	cmp	r2, #1
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	d0a7      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4e1b      	ldr	r6, [pc, #108]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001f10:	68b3      	ldr	r3, [r6, #8]
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fc69 	bl	80017f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	68b3      	ldr	r3, [r6, #8]
 8001f26:	6862      	ldr	r2, [r4, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f30:	d0a3      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f32:	f7ff fc5d 	bl	80017f0 <HAL_GetTick>
 8001f36:	1bc0      	subs	r0, r0, r7
 8001f38:	4540      	cmp	r0, r8
 8001f3a:	d9f3      	bls.n	8001f24 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	e78f      	b.n	8001e60 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f40:	1e91      	subs	r1, r2, #2
 8001f42:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f46:	d802      	bhi.n	8001f4e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f4c:	e7de      	b.n	8001f0c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	f013 0f02 	tst.w	r3, #2
 8001f52:	e7db      	b.n	8001f0c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f54:	b2ea      	uxtb	r2, r5
 8001f56:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	42ab      	cmp	r3, r5
 8001f60:	f47f af7d 	bne.w	8001e5e <HAL_RCC_ClockConfig+0xa>
 8001f64:	e78f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4905      	ldr	r1, [pc, #20]	; (8001f7c <HAL_RCC_ClockConfig+0x128>)
 8001f68:	68e0      	ldr	r0, [r4, #12]
 8001f6a:	688b      	ldr	r3, [r1, #8]
 8001f6c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f70:	4303      	orrs	r3, r0
 8001f72:	608b      	str	r3, [r1, #8]
 8001f74:	e78a      	b.n	8001e8c <HAL_RCC_ClockConfig+0x38>
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08008a72 	.word	0x08008a72
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f9a:	6810      	ldr	r0, [r2, #0]
}
 8001f9c:	40d8      	lsrs	r0, r3
 8001f9e:	4770      	bx	lr
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	08008a82 	.word	0x08008a82
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fba:	6810      	ldr	r0, [r2, #0]
}
 8001fbc:	40d8      	lsrs	r0, r3
 8001fbe:	4770      	bx	lr
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08008a82 	.word	0x08008a82
 8001fc8:	20000000 	.word	0x20000000

08001fcc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fcc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	f102 030c 	add.w	r3, r2, #12
 8001fd2:	e853 3f00 	ldrex	r3, [r3]
 8001fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fda:	320c      	adds	r2, #12
 8001fdc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001fe0:	6802      	ldr	r2, [r0, #0]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d1f2      	bne.n	8001fcc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe6:	f102 0314 	add.w	r3, r2, #20
 8001fea:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff2:	f102 0c14 	add.w	ip, r2, #20
 8001ff6:	e84c 3100 	strex	r1, r3, [ip]
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	d1f3      	bne.n	8001fe6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ffe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10b      	bne.n	800201c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	f102 030c 	add.w	r3, r2, #12
 8002008:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800200c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002010:	f102 0c0c 	add.w	ip, r2, #12
 8002014:	e84c 3100 	strex	r1, r3, [ip]
 8002018:	2900      	cmp	r1, #0
 800201a:	d1f3      	bne.n	8002004 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800201c:	2320      	movs	r3, #32
 800201e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002022:	2300      	movs	r3, #0
 8002024:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002026:	4770      	bx	lr

08002028 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	68c1      	ldr	r1, [r0, #12]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002032:	430a      	orrs	r2, r1
{
 8002034:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002036:	611a      	str	r2, [r3, #16]
{
 8002038:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	6882      	ldr	r2, [r0, #8]
 800203c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800203e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002040:	4302      	orrs	r2, r0
 8002042:	6968      	ldr	r0, [r5, #20]
 8002044:	4302      	orrs	r2, r0
 8002046:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002048:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800204c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002050:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002052:	430a      	orrs	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	69a9      	ldr	r1, [r5, #24]
 800205a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800205e:	430a      	orrs	r2, r1
 8002060:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002062:	4a23      	ldr	r2, [pc, #140]	; (80020f0 <UART_SetConfig+0xc8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <UART_SetConfig+0x58>
 8002068:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <UART_SetConfig+0x58>
 8002070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <UART_SetConfig+0x58>
 8002078:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800207c:	4293      	cmp	r3, r2
 800207e:	d123      	bne.n	80020c8 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002080:	f7ff ff94 	bl	8001fac <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002084:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002086:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800208c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002090:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002094:	d11b      	bne.n	80020ce <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002096:	19b2      	adds	r2, r6, r6
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	415b      	adcs	r3, r3
 800209e:	f7fe f927 	bl	80002f0 <__aeabi_uldivmod>
 80020a2:	2164      	movs	r1, #100	; 0x64
 80020a4:	fbb0 f5f1 	udiv	r5, r0, r1
 80020a8:	fb01 0315 	mls	r3, r1, r5, r0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	3332      	adds	r3, #50	; 0x32
 80020b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b4:	f003 0207 	and.w	r2, r3, #7
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80020be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020c2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c4:	60a3      	str	r3, [r4, #8]
  }
}
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80020c8:	f7ff ff60 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 80020cc:	e7da      	b.n	8002084 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ce:	00b2      	lsls	r2, r6, #2
 80020d0:	0fb3      	lsrs	r3, r6, #30
 80020d2:	f7fe f90d 	bl	80002f0 <__aeabi_uldivmod>
 80020d6:	2264      	movs	r2, #100	; 0x64
 80020d8:	fbb0 f1f2 	udiv	r1, r0, r2
 80020dc:	fb02 0311 	mls	r3, r2, r1, r0
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	3332      	adds	r3, #50	; 0x32
 80020e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80020ec:	e7ea      	b.n	80020c4 <UART_SetConfig+0x9c>
 80020ee:	bf00      	nop
 80020f0:	40011000 	.word	0x40011000

080020f4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	460e      	mov	r6, r1
 80020fa:	4617      	mov	r7, r2
 80020fc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	ea36 0303 	bics.w	r3, r6, r3
 8002106:	d101      	bne.n	800210c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
 800210a:	e028      	b.n	800215e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800210c:	1c6b      	adds	r3, r5, #1
 800210e:	d0f7      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002110:	b125      	cbz	r5, 800211c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002112:	f7ff fb6d 	bl	80017f0 <HAL_GetTick>
 8002116:	1bc0      	subs	r0, r0, r7
 8002118:	4285      	cmp	r5, r0
 800211a:	d2f0      	bcs.n	80020fe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800211c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	f102 030c 	add.w	r3, r2, #12
 8002122:	e853 3f00 	ldrex	r3, [r3]
 8002126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	320c      	adds	r2, #12
 800212c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002130:	6821      	ldr	r1, [r4, #0]
 8002132:	2800      	cmp	r0, #0
 8002134:	d1f2      	bne.n	800211c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	f101 0314 	add.w	r3, r1, #20
 800213a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002142:	f101 0014 	add.w	r0, r1, #20
 8002146:	e840 3200 	strex	r2, r3, [r0]
 800214a:	2a00      	cmp	r2, #0
 800214c:	d1f3      	bne.n	8002136 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800214e:	2320      	movs	r3, #32
 8002150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002154:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800215c:	2003      	movs	r0, #3
}
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002160 <HAL_UART_Init>:
{
 8002160:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002162:	4604      	mov	r4, r0
 8002164:	b340      	cbz	r0, 80021b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800216a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800216e:	b91b      	cbnz	r3, 8002178 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002170:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002174:	f7fe fbfa 	bl	800096c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002178:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800217a:	2324      	movs	r3, #36	; 0x24
 800217c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002180:	68d3      	ldr	r3, [r2, #12]
 8002182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002186:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff4d 	bl	8002028 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002196:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800219e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80021b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021b8:	2001      	movs	r0, #1
 80021ba:	e7fc      	b.n	80021b6 <HAL_UART_Init+0x56>

080021bc <HAL_UART_Transmit>:
{
 80021bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021be:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80021c0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80021c4:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80021c6:	2a20      	cmp	r2, #32
{
 80021c8:	4604      	mov	r4, r0
 80021ca:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80021cc:	d149      	bne.n	8002262 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d045      	beq.n	800225e <HAL_UART_Transmit+0xa2>
 80021d2:	2f00      	cmp	r7, #0
 80021d4:	d043      	beq.n	800225e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80021d6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80021da:	2a01      	cmp	r2, #1
 80021dc:	d041      	beq.n	8002262 <HAL_UART_Transmit+0xa6>
 80021de:	2201      	movs	r2, #1
 80021e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e8:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80021ee:	f7ff faff 	bl	80017f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f2:	68a1      	ldr	r1, [r4, #8]
 80021f4:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80021f6:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80021fc:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80021fe:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002200:	d103      	bne.n	800220a <HAL_UART_Transmit+0x4e>
 8002202:	6921      	ldr	r1, [r4, #16]
 8002204:	b909      	cbnz	r1, 800220a <HAL_UART_Transmit+0x4e>
 8002206:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002208:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800220a:	2100      	movs	r1, #0
 800220c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002210:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002212:	b289      	uxth	r1, r1
 8002214:	b941      	cbnz	r1, 8002228 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002216:	2140      	movs	r1, #64	; 0x40
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ff6b 	bl	80020f4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800221e:	b960      	cbnz	r0, 800223a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002220:	2320      	movs	r3, #32
 8002222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002226:	e009      	b.n	800223c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	4620      	mov	r0, r4
 800222c:	e9cd 2300 	strd	r2, r3, [sp]
 8002230:	f7ff ff60 	bl	80020f4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002234:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002238:	b110      	cbz	r0, 8002240 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800223a:	2003      	movs	r0, #3
}
 800223c:	b003      	add	sp, #12
 800223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002240:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8002242:	b94e      	cbnz	r6, 8002258 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002244:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002248:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800224c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800224e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002250:	3901      	subs	r1, #1
 8002252:	b289      	uxth	r1, r1
 8002254:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002256:	e7db      	b.n	8002210 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002258:	f816 1b01 	ldrb.w	r1, [r6], #1
 800225c:	e7f6      	b.n	800224c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7ec      	b.n	800223c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002262:	2002      	movs	r0, #2
 8002264:	e7ea      	b.n	800223c <HAL_UART_Transmit+0x80>

08002266 <HAL_UART_TxCpltCallback>:
 8002266:	4770      	bx	lr

08002268 <HAL_UART_RxCpltCallback>:
 8002268:	4770      	bx	lr

0800226a <HAL_UART_ErrorCallback>:
 800226a:	4770      	bx	lr

0800226c <UART_DMAAbortOnError>:
{
 800226c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800226e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002274:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002276:	f7ff fff8 	bl	800226a <HAL_UART_ErrorCallback>
}
 800227a:	bd08      	pop	{r3, pc}

0800227c <HAL_UARTEx_RxEventCallback>:
}
 800227c:	4770      	bx	lr

0800227e <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800227e:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002282:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002284:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002286:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800228a:	d13e      	bne.n	800230a <UART_Receive_IT.part.0.isra.0+0x8c>
 800228c:	6901      	ldr	r1, [r0, #16]
 800228e:	2900      	cmp	r1, #0
 8002290:	d13e      	bne.n	8002310 <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002292:	6852      	ldr	r2, [r2, #4]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 800229c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800229e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12c      	bne.n	8002304 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	68d1      	ldr	r1, [r2, #12]
 80022ae:	f021 0120 	bic.w	r1, r1, #32
 80022b2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022b4:	68d1      	ldr	r1, [r2, #12]
 80022b6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80022ba:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022bc:	6951      	ldr	r1, [r2, #20]
 80022be:	f021 0101 	bic.w	r1, r1, #1
 80022c2:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80022c4:	2220      	movs	r2, #32
 80022c6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80022cc:	2a01      	cmp	r2, #1
 80022ce:	6802      	ldr	r2, [r0, #0]
 80022d0:	d128      	bne.n	8002324 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d2:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d4:	f102 030c 	add.w	r3, r2, #12
 80022d8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e0:	f102 0c0c 	add.w	ip, r2, #12
 80022e4:	e84c 3100 	strex	r1, r3, [ip]
 80022e8:	2900      	cmp	r1, #0
 80022ea:	d1f3      	bne.n	80022d4 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	06db      	lsls	r3, r3, #27
 80022f0:	d505      	bpl.n	80022fe <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022f2:	9101      	str	r1, [sp, #4]
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	6853      	ldr	r3, [r2, #4]
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022fe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002300:	f7ff ffbc 	bl	800227c <HAL_UARTEx_RxEventCallback>
}
 8002304:	b003      	add	sp, #12
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800230a:	b939      	cbnz	r1, 800231c <UART_Receive_IT.part.0.isra.0+0x9e>
 800230c:	6901      	ldr	r1, [r0, #16]
 800230e:	b929      	cbnz	r1, 800231c <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002316:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002318:	3301      	adds	r3, #1
 800231a:	e7bf      	b.n	800229c <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800231c:	6852      	ldr	r2, [r2, #4]
 800231e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002322:	e7f7      	b.n	8002314 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8002324:	f7ff ffa0 	bl	8002268 <HAL_UART_RxCpltCallback>
 8002328:	e7ec      	b.n	8002304 <UART_Receive_IT.part.0.isra.0+0x86>
	...

0800232c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800232c:	6803      	ldr	r3, [r0, #0]
{
 800232e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002330:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002332:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002334:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002336:	f012 0f0f 	tst.w	r2, #15
{
 800233a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800233c:	d10c      	bne.n	8002358 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800233e:	0695      	lsls	r5, r2, #26
 8002340:	d570      	bpl.n	8002424 <HAL_UART_IRQHandler+0xf8>
 8002342:	068d      	lsls	r5, r1, #26
 8002344:	d56e      	bpl.n	8002424 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002346:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800234a:	2b22      	cmp	r3, #34	; 0x22
 800234c:	d164      	bne.n	8002418 <HAL_UART_IRQHandler+0xec>
}
 800234e:	b003      	add	sp, #12
 8002350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002354:	f7ff bf93 	b.w	800227e <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002358:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800235c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002360:	4305      	orrs	r5, r0
 8002362:	d05f      	beq.n	8002424 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002364:	07d5      	lsls	r5, r2, #31
 8002366:	d505      	bpl.n	8002374 <HAL_UART_IRQHandler+0x48>
 8002368:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800236a:	bf42      	ittt	mi
 800236c:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800236e:	f043 0301 	orrmi.w	r3, r3, #1
 8002372:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002374:	0755      	lsls	r5, r2, #29
 8002376:	d504      	bpl.n	8002382 <HAL_UART_IRQHandler+0x56>
 8002378:	b118      	cbz	r0, 8002382 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800237a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002382:	0793      	lsls	r3, r2, #30
 8002384:	d504      	bpl.n	8002390 <HAL_UART_IRQHandler+0x64>
 8002386:	b118      	cbz	r0, 8002390 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002390:	0715      	lsls	r5, r2, #28
 8002392:	d507      	bpl.n	80023a4 <HAL_UART_IRQHandler+0x78>
 8002394:	f001 0320 	and.w	r3, r1, #32
 8002398:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239a:	bf1e      	ittt	ne
 800239c:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800239e:	f043 0308 	orrne.w	r3, r3, #8
 80023a2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023aa:	0690      	lsls	r0, r2, #26
 80023ac:	d508      	bpl.n	80023c0 <HAL_UART_IRQHandler+0x94>
 80023ae:	068a      	lsls	r2, r1, #26
 80023b0:	d506      	bpl.n	80023c0 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023b2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80023b6:	2b22      	cmp	r3, #34	; 0x22
 80023b8:	d102      	bne.n	80023c0 <HAL_UART_IRQHandler+0x94>
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff ff5f 	bl	800227e <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023c4:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ca:	f005 0508 	and.w	r5, r5, #8
 80023ce:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80023d0:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023d2:	d023      	beq.n	800241c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 80023d4:	f7ff fdfa 	bl	8001fcc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	6822      	ldr	r2, [r4, #0]
 80023da:	6953      	ldr	r3, [r2, #20]
 80023dc:	065b      	lsls	r3, r3, #25
 80023de:	d518      	bpl.n	8002412 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	f102 0314 	add.w	r3, r2, #20
 80023e4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	f102 0014 	add.w	r0, r2, #20
 80023f0:	e840 3100 	strex	r1, r3, [r0]
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d1f3      	bne.n	80023e0 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 80023f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023fa:	b150      	cbz	r0, 8002412 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fc:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_UART_IRQHandler+0x29c>)
 80023fe:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002400:	f000 f928 	bl	8002654 <HAL_DMA_Abort_IT>
 8002404:	b140      	cbz	r0, 8002418 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002406:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002408:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800240a:	b003      	add	sp, #12
 800240c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002410:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff ff29 	bl	800226a <HAL_UART_ErrorCallback>
}
 8002418:	b003      	add	sp, #12
 800241a:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800241c:	f7ff ff25 	bl	800226a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	6425      	str	r5, [r4, #64]	; 0x40
 8002422:	e7f9      	b.n	8002418 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002424:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002426:	2801      	cmp	r0, #1
 8002428:	f040 8091 	bne.w	800254e <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800242c:	06d5      	lsls	r5, r2, #27
 800242e:	f140 808e 	bpl.w	800254e <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002432:	06c8      	lsls	r0, r1, #27
 8002434:	f140 808b 	bpl.w	800254e <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002438:	2200      	movs	r2, #0
 800243a:	9201      	str	r2, [sp, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9201      	str	r2, [sp, #4]
 8002444:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	0655      	lsls	r5, r2, #25
 800244a:	d54c      	bpl.n	80024e6 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800244c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800244e:	680a      	ldr	r2, [r1, #0]
 8002450:	6852      	ldr	r2, [r2, #4]
 8002452:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002454:	2a00      	cmp	r2, #0
 8002456:	d0df      	beq.n	8002418 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002458:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800245a:	4290      	cmp	r0, r2
 800245c:	d9dc      	bls.n	8002418 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 800245e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002460:	69ca      	ldr	r2, [r1, #28]
 8002462:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002466:	d036      	beq.n	80024d6 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	f103 020c 	add.w	r2, r3, #12
 800246c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002474:	f103 000c 	add.w	r0, r3, #12
 8002478:	e840 2100 	strex	r1, r2, [r0]
 800247c:	2900      	cmp	r1, #0
 800247e:	d1f3      	bne.n	8002468 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	f103 0214 	add.w	r2, r3, #20
 8002484:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002488:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	f103 0014 	add.w	r0, r3, #20
 8002490:	e840 2100 	strex	r1, r2, [r0]
 8002494:	2900      	cmp	r1, #0
 8002496:	d1f3      	bne.n	8002480 <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	f103 0214 	add.w	r2, r3, #20
 800249c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	f103 0014 	add.w	r0, r3, #20
 80024a8:	e840 2100 	strex	r1, r2, [r0]
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d1f3      	bne.n	8002498 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 80024b0:	2220      	movs	r2, #32
 80024b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b6:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b8:	f103 020c 	add.w	r2, r3, #12
 80024bc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	f103 000c 	add.w	r0, r3, #12
 80024c8:	e840 2100 	strex	r1, r2, [r0]
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d1f3      	bne.n	80024b8 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024d2:	f000 f87b 	bl	80025cc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80024d8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80024da:	1ac9      	subs	r1, r1, r3
 80024dc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fecc 	bl	800227c <HAL_UARTEx_RxEventCallback>
 80024e4:	e798      	b.n	8002418 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024e6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80024e8:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80024ea:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80024ec:	b289      	uxth	r1, r1
 80024ee:	2900      	cmp	r1, #0
 80024f0:	d092      	beq.n	8002418 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024f2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80024f4:	1a89      	subs	r1, r1, r2
 80024f6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80024f8:	2900      	cmp	r1, #0
 80024fa:	d08d      	beq.n	8002418 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	f103 020c 	add.w	r2, r3, #12
 8002500:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002504:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002508:	f103 050c 	add.w	r5, r3, #12
 800250c:	e845 2000 	strex	r0, r2, [r5]
 8002510:	2800      	cmp	r0, #0
 8002512:	d1f3      	bne.n	80024fc <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002514:	f103 0214 	add.w	r2, r3, #20
 8002518:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002520:	f103 0514 	add.w	r5, r3, #20
 8002524:	e845 2000 	strex	r0, r2, [r5]
 8002528:	2800      	cmp	r0, #0
 800252a:	d1f3      	bne.n	8002514 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 800252c:	2220      	movs	r2, #32
 800252e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	f103 020c 	add.w	r2, r3, #12
 8002538:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	f103 050c 	add.w	r5, r3, #12
 8002544:	e845 2000 	strex	r0, r2, [r5]
 8002548:	2800      	cmp	r0, #0
 800254a:	d1f3      	bne.n	8002534 <HAL_UART_IRQHandler+0x208>
 800254c:	e7c7      	b.n	80024de <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800254e:	0610      	lsls	r0, r2, #24
 8002550:	d528      	bpl.n	80025a4 <HAL_UART_IRQHandler+0x278>
 8002552:	060d      	lsls	r5, r1, #24
 8002554:	d526      	bpl.n	80025a4 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002556:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800255a:	2a21      	cmp	r2, #33	; 0x21
 800255c:	f47f af5c 	bne.w	8002418 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002560:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002562:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002564:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002568:	d117      	bne.n	800259a <HAL_UART_IRQHandler+0x26e>
 800256a:	6921      	ldr	r1, [r4, #16]
 800256c:	b9a9      	cbnz	r1, 800259a <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800256e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002572:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002576:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002578:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800257a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800257c:	3a01      	subs	r2, #1
 800257e:	b292      	uxth	r2, r2
 8002580:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002582:	2a00      	cmp	r2, #0
 8002584:	f47f af48 	bne.w	8002418 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800258e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	e73e      	b.n	8002418 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800259a:	1c51      	adds	r1, r2, #1
 800259c:	6221      	str	r1, [r4, #32]
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	e7ea      	b.n	800257a <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025a4:	0650      	lsls	r0, r2, #25
 80025a6:	f57f af37 	bpl.w	8002418 <HAL_UART_IRQHandler+0xec>
 80025aa:	064a      	lsls	r2, r1, #25
 80025ac:	f57f af34 	bpl.w	8002418 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	2320      	movs	r3, #32
 80025ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fe51 	bl	8002266 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80025c4:	e728      	b.n	8002418 <HAL_UART_IRQHandler+0xec>
 80025c6:	bf00      	nop
 80025c8:	0800226d 	.word	0x0800226d

080025cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80025d2:	f7ff f90d 	bl	80017f0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80025da:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80025dc:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025de:	d006      	beq.n	80025ee <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	2300      	movs	r3, #0
 80025e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f022 0216 	bic.w	r2, r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025fe:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002600:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002602:	b90a      	cbnz	r2, 8002608 <HAL_DMA_Abort+0x3c>
 8002604:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002606:	b11a      	cbz	r2, 8002610 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f022 0208 	bic.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f013 0301 	ands.w	r3, r3, #1
 8002620:	d10a      	bne.n	8002638 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	408a      	lsls	r2, r1
 8002628:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800262a:	2201      	movs	r2, #1
 800262c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002630:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002634:	4618      	mov	r0, r3
 8002636:	e7d9      	b.n	80025ec <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002638:	f7ff f8da 	bl	80017f0 <HAL_GetTick>
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	2805      	cmp	r0, #5
 8002640:	d9ea      	bls.n	8002618 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002642:	2320      	movs	r3, #32
 8002644:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002646:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8002648:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800264e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002652:	e7cb      	b.n	80025ec <HAL_DMA_Abort+0x20>

08002654 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002654:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002658:	2b02      	cmp	r3, #2
 800265a:	d003      	beq.n	8002664 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
 8002662:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002664:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	2305      	movs	r3, #5
 8002668:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002674:	2000      	movs	r0, #0
}
 8002676:	4770      	bx	lr

08002678 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002678:	b510      	push	{r4, lr}
 800267a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800267c:	f001 fe24 	bl	80042c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002680:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002682:	f001 fe41 	bl	8004308 <vPortExitCritical>

	return xReturn;
}
 8002686:	fab4 f084 	clz	r0, r4
 800268a:	0940      	lsrs	r0, r0, #5
 800268c:	bd10      	pop	{r4, pc}

0800268e <prvCopyDataToQueue>:
{
 800268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002690:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002692:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002694:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002696:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002698:	b952      	cbnz	r2, 80026b0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800269a:	6807      	ldr	r7, [r0, #0]
 800269c:	bb47      	cbnz	r7, 80026f0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800269e:	6880      	ldr	r0, [r0, #8]
 80026a0:	f001 f99e 	bl	80039e0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026a4:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026a6:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026a8:	3601      	adds	r6, #1
 80026aa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80026ac:	4628      	mov	r0, r5
 80026ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80026b0:	b965      	cbnz	r5, 80026cc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b2:	6840      	ldr	r0, [r0, #4]
 80026b4:	f004 fe32 	bl	800731c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026bc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026be:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d3f0      	bcc.n	80026a8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	6063      	str	r3, [r4, #4]
 80026ca:	e7ed      	b.n	80026a8 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026cc:	68c0      	ldr	r0, [r0, #12]
 80026ce:	f004 fe25 	bl	800731c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026d4:	68e3      	ldr	r3, [r4, #12]
 80026d6:	4251      	negs	r1, r2
 80026d8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026da:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026dc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026de:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026e0:	bf3e      	ittt	cc
 80026e2:	68a3      	ldrcc	r3, [r4, #8]
 80026e4:	185b      	addcc	r3, r3, r1
 80026e6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80026e8:	2d02      	cmp	r5, #2
 80026ea:	d101      	bne.n	80026f0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ec:	b116      	cbz	r6, 80026f4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80026ee:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80026f0:	2500      	movs	r5, #0
 80026f2:	e7d9      	b.n	80026a8 <prvCopyDataToQueue+0x1a>
 80026f4:	4635      	mov	r5, r6
 80026f6:	e7d7      	b.n	80026a8 <prvCopyDataToQueue+0x1a>

080026f8 <prvCopyDataFromQueue>:
{
 80026f8:	4603      	mov	r3, r0
 80026fa:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80026fe:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002700:	b16a      	cbz	r2, 800271e <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002702:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002704:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002706:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002708:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800270a:	bf28      	it	cs
 800270c:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800270e:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002710:	bf28      	it	cs
 8002712:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002714:	68d9      	ldr	r1, [r3, #12]
}
 8002716:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800271a:	f004 bdff 	b.w	800731c <memcpy>
}
 800271e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002722:	4770      	bx	lr

08002724 <prvUnlockQueue>:
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002728:	f001 fdce 	bl	80042c8 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800272c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002730:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002734:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002736:	2d00      	cmp	r5, #0
 8002738:	dc14      	bgt.n	8002764 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800273a:	23ff      	movs	r3, #255	; 0xff
 800273c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002740:	f001 fde2 	bl	8004308 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002744:	f001 fdc0 	bl	80042c8 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002748:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002750:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002752:	2d00      	cmp	r5, #0
 8002754:	dc12      	bgt.n	800277c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002756:	23ff      	movs	r3, #255	; 0xff
 8002758:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800275c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002760:	f001 bdd2 	b.w	8004308 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0e7      	beq.n	800273a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800276a:	4630      	mov	r0, r6
 800276c:	f001 f844 	bl	80037f8 <xTaskRemoveFromEventList>
 8002770:	b108      	cbz	r0, 8002776 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002772:	f001 f8cd 	bl	8003910 <vTaskMissedYield>
			--cTxLock;
 8002776:	3d01      	subs	r5, #1
 8002778:	b26d      	sxtb	r5, r5
 800277a:	e7dc      	b.n	8002736 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277c:	6923      	ldr	r3, [r4, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0e9      	beq.n	8002756 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002782:	4630      	mov	r0, r6
 8002784:	f001 f838 	bl	80037f8 <xTaskRemoveFromEventList>
 8002788:	b108      	cbz	r0, 800278e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800278a:	f001 f8c1 	bl	8003910 <vTaskMissedYield>
				--cRxLock;
 800278e:	3d01      	subs	r5, #1
 8002790:	b26d      	sxtb	r5, r5
 8002792:	e7de      	b.n	8002752 <prvUnlockQueue+0x2e>

08002794 <xQueueGenericReset>:
{
 8002794:	b538      	push	{r3, r4, r5, lr}
 8002796:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002798:	4604      	mov	r4, r0
 800279a:	b940      	cbnz	r0, 80027ae <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	e7fe      	b.n	80027ac <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80027ae:	f001 fd8b 	bl	80042c8 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027b2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80027b6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ba:	434b      	muls	r3, r1
 80027bc:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027be:	1a5b      	subs	r3, r3, r1
 80027c0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027c2:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027c4:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027c6:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80027c8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027ca:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80027cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80027d4:	b9a5      	cbnz	r5, 8002800 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	b173      	cbz	r3, 80027f8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027da:	f104 0010 	add.w	r0, r4, #16
 80027de:	f001 f80b 	bl	80037f8 <xTaskRemoveFromEventList>
 80027e2:	b148      	cbz	r0, 80027f8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80027e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80027f8:	f001 fd86 	bl	8004308 <vPortExitCritical>
}
 80027fc:	2001      	movs	r0, #1
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002800:	f104 0010 	add.w	r0, r4, #16
 8002804:	f001 fc68 	bl	80040d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800280c:	f001 fc64 	bl	80040d8 <vListInitialise>
 8002810:	e7f2      	b.n	80027f8 <xQueueGenericReset+0x64>

08002812 <xQueueGenericCreateStatic>:
	{
 8002812:	b513      	push	{r0, r1, r4, lr}
 8002814:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002816:	b940      	cbnz	r0, 800282a <xQueueGenericCreateStatic+0x18>
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	e7fe      	b.n	8002828 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800282a:	b943      	cbnz	r3, 800283e <xQueueGenericCreateStatic+0x2c>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	e7fe      	b.n	800283c <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800283e:	b14a      	cbz	r2, 8002854 <xQueueGenericCreateStatic+0x42>
 8002840:	b991      	cbnz	r1, 8002868 <xQueueGenericCreateStatic+0x56>
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	e7fe      	b.n	8002852 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002854:	b141      	cbz	r1, 8002868 <xQueueGenericCreateStatic+0x56>
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	e7fe      	b.n	8002866 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002868:	2350      	movs	r3, #80	; 0x50
 800286a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286c:	9b01      	ldr	r3, [sp, #4]
 800286e:	2b50      	cmp	r3, #80	; 0x50
 8002870:	d008      	beq.n	8002884 <xQueueGenericCreateStatic+0x72>
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	e7fe      	b.n	8002882 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002884:	2900      	cmp	r1, #0
 8002886:	bf08      	it	eq
 8002888:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800288a:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800288c:	6022      	str	r2, [r4, #0]
 800288e:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8002890:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002894:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002898:	4619      	mov	r1, r3
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ff7a 	bl	8002794 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80028a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80028a4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80028a8:	4620      	mov	r0, r4
 80028aa:	b002      	add	sp, #8
 80028ac:	bd10      	pop	{r4, pc}

080028ae <xQueueGenericSend>:
{
 80028ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	4688      	mov	r8, r1
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80028ba:	4604      	mov	r4, r0
 80028bc:	b940      	cbnz	r0, 80028d0 <xQueueGenericSend+0x22>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028d0:	b951      	cbnz	r1, 80028e8 <xQueueGenericSend+0x3a>
 80028d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028d4:	b143      	cbz	r3, 80028e8 <xQueueGenericSend+0x3a>
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	e7fe      	b.n	80028e6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e8:	2f02      	cmp	r7, #2
 80028ea:	d10b      	bne.n	8002904 <xQueueGenericSend+0x56>
 80028ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d008      	beq.n	8002904 <xQueueGenericSend+0x56>
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	e7fe      	b.n	8002902 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002904:	f001 f810 	bl	8003928 <xTaskGetSchedulerState>
 8002908:	4606      	mov	r6, r0
 800290a:	b950      	cbnz	r0, 8002922 <xQueueGenericSend+0x74>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	b14b      	cbz	r3, 8002924 <xQueueGenericSend+0x76>
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	e7fe      	b.n	8002920 <xQueueGenericSend+0x72>
 8002922:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002924:	f04f 0900 	mov.w	r9, #0
 8002928:	e037      	b.n	800299a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800292a:	9d01      	ldr	r5, [sp, #4]
 800292c:	b91d      	cbnz	r5, 8002936 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800292e:	f001 fceb 	bl	8004308 <vPortExitCritical>
			return errQUEUE_FULL;
 8002932:	2000      	movs	r0, #0
 8002934:	e052      	b.n	80029dc <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8002936:	b916      	cbnz	r6, 800293e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002938:	a802      	add	r0, sp, #8
 800293a:	f000 ffa1 	bl	8003880 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800293e:	f001 fce3 	bl	8004308 <vPortExitCritical>
		vTaskSuspendAll();
 8002942:	f000 fd79 	bl	8003438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002946:	f001 fcbf 	bl	80042c8 <vPortEnterCritical>
 800294a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	bf08      	it	eq
 8002952:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002956:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	bf08      	it	eq
 800295e:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002962:	f001 fcd1 	bl	8004308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002966:	a901      	add	r1, sp, #4
 8002968:	a802      	add	r0, sp, #8
 800296a:	f000 ff95 	bl	8003898 <xTaskCheckForTimeOut>
 800296e:	2800      	cmp	r0, #0
 8002970:	d14a      	bne.n	8002a08 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002972:	f001 fca9 	bl	80042c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002976:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800297a:	429a      	cmp	r2, r3
 800297c:	d131      	bne.n	80029e2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800297e:	f001 fcc3 	bl	8004308 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002982:	9901      	ldr	r1, [sp, #4]
 8002984:	f104 0010 	add.w	r0, r4, #16
 8002988:	f000 fefe 	bl	8003788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff fec9 	bl	8002724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002992:	f000 fdf7 	bl	8003584 <xTaskResumeAll>
 8002996:	b360      	cbz	r0, 80029f2 <xQueueGenericSend+0x144>
 8002998:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800299a:	f001 fc95 	bl	80042c8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800299e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d301      	bcc.n	80029aa <xQueueGenericSend+0xfc>
 80029a6:	2f02      	cmp	r7, #2
 80029a8:	d1bf      	bne.n	800292a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029aa:	463a      	mov	r2, r7
 80029ac:	4641      	mov	r1, r8
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fe6d 	bl	800268e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029b6:	b11b      	cbz	r3, 80029c0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029bc:	f000 ff1c 	bl	80037f8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80029c0:	b148      	cbz	r0, 80029d6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80029c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80029d6:	f001 fc97 	bl	8004308 <vPortExitCritical>
				return pdPASS;
 80029da:	2001      	movs	r0, #1
}
 80029dc:	b005      	add	sp, #20
 80029de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80029e2:	f001 fc91 	bl	8004308 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff fe9c 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ec:	f000 fdca 	bl	8003584 <xTaskResumeAll>
 80029f0:	e7d2      	b.n	8002998 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80029f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80029f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	e7c7      	b.n	8002998 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7ff fe8b 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a0e:	f000 fdb9 	bl	8003584 <xTaskResumeAll>
 8002a12:	e78e      	b.n	8002932 <xQueueGenericSend+0x84>

08002a14 <xQueueGiveMutexRecursive>:
	{
 8002a14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8002a16:	4604      	mov	r4, r0
 8002a18:	b940      	cbnz	r0, 8002a2c <xQueueGiveMutexRecursive+0x18>
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	e7fe      	b.n	8002a2a <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002a2c:	6885      	ldr	r5, [r0, #8]
 8002a2e:	f000 ff75 	bl	800391c <xTaskGetCurrentTaskHandle>
 8002a32:	4285      	cmp	r5, r0
 8002a34:	d10a      	bne.n	8002a4c <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002a36:	68e3      	ldr	r3, [r4, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002a3c:	b923      	cbnz	r3, 8002a48 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff ff33 	bl	80028ae <xQueueGenericSend>
			xReturn = pdPASS;
 8002a48:	2001      	movs	r0, #1
		return xReturn;
 8002a4a:	e000      	b.n	8002a4e <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 8002a4c:	2000      	movs	r0, #0
	}
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}

08002a50 <xQueueCreateMutex>:
	{
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a54:	2050      	movs	r0, #80	; 0x50
 8002a56:	f001 fb81 	bl	800415c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	b198      	cbz	r0, 8002a86 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a5e:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8002a60:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8002a62:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a66:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a6a:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a6c:	f7ff fe92 	bl	8002794 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002a70:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a74:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a76:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a78:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	462a      	mov	r2, r5
 8002a7e:	4629      	mov	r1, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff ff14 	bl	80028ae <xQueueGenericSend>
	}
 8002a86:	4620      	mov	r0, r4
 8002a88:	bd70      	pop	{r4, r5, r6, pc}

08002a8a <xQueueGenericSendFromISR>:
{
 8002a8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a8e:	4689      	mov	r9, r1
 8002a90:	4690      	mov	r8, r2
 8002a92:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a94:	4604      	mov	r4, r0
 8002a96:	b940      	cbnz	r0, 8002aaa <xQueueGenericSendFromISR+0x20>
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aaa:	b951      	cbnz	r1, 8002ac2 <xQueueGenericSendFromISR+0x38>
 8002aac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002aae:	b143      	cbz	r3, 8002ac2 <xQueueGenericSendFromISR+0x38>
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac2:	2f02      	cmp	r7, #2
 8002ac4:	d10b      	bne.n	8002ade <xQueueGenericSendFromISR+0x54>
 8002ac6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d008      	beq.n	8002ade <xQueueGenericSendFromISR+0x54>
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ade:	f001 fd07 	bl	80044f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ae2:	f3ef 8611 	mrs	r6, BASEPRI
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d301      	bcc.n	8002b02 <xQueueGenericSendFromISR+0x78>
 8002afe:	2f02      	cmp	r7, #2
 8002b00:	d123      	bne.n	8002b4a <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b02:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b08:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b0a:	463a      	mov	r2, r7
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff fdbd 	bl	800268e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002b14:	1c6b      	adds	r3, r5, #1
 8002b16:	d113      	bne.n	8002b40 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b1a:	b90b      	cbnz	r3, 8002b20 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e00b      	b.n	8002b38 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b24:	f000 fe68 	bl	80037f8 <xTaskRemoveFromEventList>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0f7      	beq.n	8002b1c <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8002b2c:	f1b8 0f00 	cmp.w	r8, #0
 8002b30:	d0f4      	beq.n	8002b1c <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b32:	2001      	movs	r0, #1
 8002b34:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b38:	f386 8811 	msr	BASEPRI, r6
}
 8002b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b40:	3501      	adds	r5, #1
 8002b42:	b26d      	sxtb	r5, r5
 8002b44:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002b48:	e7e8      	b.n	8002b1c <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e7f4      	b.n	8002b38 <xQueueGenericSendFromISR+0xae>

08002b4e <xQueueReceive>:
{
 8002b4e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002b52:	460f      	mov	r7, r1
 8002b54:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002b56:	4604      	mov	r4, r0
 8002b58:	b940      	cbnz	r0, 8002b6c <xQueueReceive+0x1e>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	e7fe      	b.n	8002b6a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b6c:	b951      	cbnz	r1, 8002b84 <xQueueReceive+0x36>
 8002b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b70:	b143      	cbz	r3, 8002b84 <xQueueReceive+0x36>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	e7fe      	b.n	8002b82 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b84:	f000 fed0 	bl	8003928 <xTaskGetSchedulerState>
 8002b88:	4606      	mov	r6, r0
 8002b8a:	b950      	cbnz	r0, 8002ba2 <xQueueReceive+0x54>
 8002b8c:	9b01      	ldr	r3, [sp, #4]
 8002b8e:	b14b      	cbz	r3, 8002ba4 <xQueueReceive+0x56>
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueReceive+0x52>
 8002ba2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002ba4:	f04f 0800 	mov.w	r8, #0
 8002ba8:	e03d      	b.n	8002c26 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002baa:	9d01      	ldr	r5, [sp, #4]
 8002bac:	b91d      	cbnz	r5, 8002bb6 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8002bae:	f001 fbab 	bl	8004308 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	e056      	b.n	8002c64 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8002bb6:	b916      	cbnz	r6, 8002bbe <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bb8:	a802      	add	r0, sp, #8
 8002bba:	f000 fe61 	bl	8003880 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002bbe:	f001 fba3 	bl	8004308 <vPortExitCritical>
		vTaskSuspendAll();
 8002bc2:	f000 fc39 	bl	8003438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bc6:	f001 fb7f 	bl	80042c8 <vPortEnterCritical>
 8002bca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002bce:	2bff      	cmp	r3, #255	; 0xff
 8002bd0:	bf08      	it	eq
 8002bd2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002bd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	bf08      	it	eq
 8002bde:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002be2:	f001 fb91 	bl	8004308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be6:	a901      	add	r1, sp, #4
 8002be8:	a802      	add	r0, sp, #8
 8002bea:	f000 fe55 	bl	8003898 <xTaskCheckForTimeOut>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d141      	bne.n	8002c76 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff fd40 	bl	8002678 <prvIsQueueEmpty>
 8002bf8:	b3b8      	cbz	r0, 8002c6a <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bfa:	9901      	ldr	r1, [sp, #4]
 8002bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c00:	f000 fdc2 	bl	8003788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fd8d 	bl	8002724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c0a:	f000 fcbb 	bl	8003584 <xTaskResumeAll>
 8002c0e:	b948      	cbnz	r0, 8002c24 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8002c10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002c26:	f001 fb4f 	bl	80042c8 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	d0bc      	beq.n	8002baa <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c30:	4639      	mov	r1, r7
 8002c32:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c34:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c36:	f7ff fd5f 	bl	80026f8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c3a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	b173      	cbz	r3, 8002c5e <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c40:	f104 0010 	add.w	r0, r4, #16
 8002c44:	f000 fdd8 	bl	80037f8 <xTaskRemoveFromEventList>
 8002c48:	b148      	cbz	r0, 8002c5e <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8002c4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c52:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002c5e:	f001 fb53 	bl	8004308 <vPortExitCritical>
				return pdPASS;
 8002c62:	2001      	movs	r0, #1
}
 8002c64:	b004      	add	sp, #16
 8002c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff fd5a 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c70:	f000 fc88 	bl	8003584 <xTaskResumeAll>
 8002c74:	e7d6      	b.n	8002c24 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff fd54 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c7c:	f000 fc82 	bl	8003584 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff fcf9 	bl	8002678 <prvIsQueueEmpty>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d0cc      	beq.n	8002c24 <xQueueReceive+0xd6>
 8002c8a:	e792      	b.n	8002bb2 <xQueueReceive+0x64>

08002c8c <xQueueSemaphoreTake>:
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8002c90:	4604      	mov	r4, r0
{
 8002c92:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002c94:	b940      	cbnz	r0, 8002ca8 <xQueueSemaphoreTake+0x1c>
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ca8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002caa:	b145      	cbz	r5, 8002cbe <xQueueSemaphoreTake+0x32>
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	e7fe      	b.n	8002cbc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cbe:	f000 fe33 	bl	8003928 <xTaskGetSchedulerState>
 8002cc2:	4606      	mov	r6, r0
 8002cc4:	b950      	cbnz	r0, 8002cdc <xQueueSemaphoreTake+0x50>
 8002cc6:	9b01      	ldr	r3, [sp, #4]
 8002cc8:	b15b      	cbz	r3, 8002ce2 <xQueueSemaphoreTake+0x56>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	e7fe      	b.n	8002cda <xQueueSemaphoreTake+0x4e>
 8002cdc:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002cde:	2700      	movs	r7, #0
 8002ce0:	e053      	b.n	8002d8a <xQueueSemaphoreTake+0xfe>
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	e7fb      	b.n	8002cde <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ce6:	9b01      	ldr	r3, [sp, #4]
 8002ce8:	b963      	cbnz	r3, 8002d04 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002cea:	b145      	cbz	r5, 8002cfe <xQueueSemaphoreTake+0x72>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	e7fe      	b.n	8002cfc <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8002cfe:	f001 fb03 	bl	8004308 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d02:	e062      	b.n	8002dca <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8002d04:	b916      	cbnz	r6, 8002d0c <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d06:	a802      	add	r0, sp, #8
 8002d08:	f000 fdba 	bl	8003880 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d0c:	f001 fafc 	bl	8004308 <vPortExitCritical>
		vTaskSuspendAll();
 8002d10:	f000 fb92 	bl	8003438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d14:	f001 fad8 	bl	80042c8 <vPortEnterCritical>
 8002d18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d1c:	2bff      	cmp	r3, #255	; 0xff
 8002d1e:	bf08      	it	eq
 8002d20:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002d24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d28:	2bff      	cmp	r3, #255	; 0xff
 8002d2a:	bf08      	it	eq
 8002d2c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002d30:	f001 faea 	bl	8004308 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d34:	a901      	add	r1, sp, #4
 8002d36:	a802      	add	r0, sp, #8
 8002d38:	f000 fdae 	bl	8003898 <xTaskCheckForTimeOut>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d14d      	bne.n	8002ddc <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff fc99 	bl	8002678 <prvIsQueueEmpty>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d042      	beq.n	8002dd0 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	b93b      	cbnz	r3, 8002d5e <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8002d4e:	f001 fabb 	bl	80042c8 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d52:	68a0      	ldr	r0, [r4, #8]
 8002d54:	f000 fdf8 	bl	8003948 <xTaskPriorityInherit>
 8002d58:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002d5a:	f001 fad5 	bl	8004308 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d5e:	9901      	ldr	r1, [sp, #4]
 8002d60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d64:	f000 fd10 	bl	8003788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff fcdb 	bl	8002724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d6e:	f000 fc09 	bl	8003584 <xTaskResumeAll>
 8002d72:	b948      	cbnz	r0, 8002d88 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8002d74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002d8a:	f001 fa9d 	bl	80042c8 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0a8      	beq.n	8002ce6 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d94:	3b01      	subs	r3, #1
 8002d96:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	b913      	cbnz	r3, 8002da2 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d9c:	f000 feca 	bl	8003b34 <pvTaskIncrementMutexHeldCount>
 8002da0:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da2:	6923      	ldr	r3, [r4, #16]
 8002da4:	b173      	cbz	r3, 8002dc4 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da6:	f104 0010 	add.w	r0, r4, #16
 8002daa:	f000 fd25 	bl	80037f8 <xTaskRemoveFromEventList>
 8002dae:	b148      	cbz	r0, 8002dc4 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002dc4:	f001 faa0 	bl	8004308 <vPortExitCritical>
				return pdPASS;
 8002dc8:	2501      	movs	r5, #1
}
 8002dca:	4628      	mov	r0, r5
 8002dcc:	b005      	add	sp, #20
 8002dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7ff fca7 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd6:	f000 fbd5 	bl	8003584 <xTaskResumeAll>
 8002dda:	e7d5      	b.n	8002d88 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff fca1 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de2:	f000 fbcf 	bl	8003584 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff fc46 	bl	8002678 <prvIsQueueEmpty>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d0cb      	beq.n	8002d88 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	d0ea      	beq.n	8002dca <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8002df4:	f001 fa68 	bl	80042c8 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002dfa:	b119      	cbz	r1, 8002e04 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e04:	68a0      	ldr	r0, [r4, #8]
 8002e06:	f000 fe3d 	bl	8003a84 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002e0a:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002e0c:	f001 fa7c 	bl	8004308 <vPortExitCritical>
 8002e10:	e7db      	b.n	8002dca <xQueueSemaphoreTake+0x13e>

08002e12 <xQueueTakeMutexRecursive>:
	{
 8002e12:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8002e14:	4604      	mov	r4, r0
 8002e16:	b940      	cbnz	r0, 8002e2a <xQueueTakeMutexRecursive+0x18>
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	e7fe      	b.n	8002e28 <xQueueTakeMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002e2a:	6885      	ldr	r5, [r0, #8]
 8002e2c:	9101      	str	r1, [sp, #4]
 8002e2e:	f000 fd75 	bl	800391c <xTaskGetCurrentTaskHandle>
 8002e32:	4285      	cmp	r5, r0
 8002e34:	9901      	ldr	r1, [sp, #4]
 8002e36:	d105      	bne.n	8002e44 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002e38:	68e3      	ldr	r3, [r4, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8002e3e:	2001      	movs	r0, #1
	}
 8002e40:	b003      	add	sp, #12
 8002e42:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7ff ff21 	bl	8002c8c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d0f8      	beq.n	8002e40 <xQueueTakeMutexRecursive+0x2e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8002e54:	e7f4      	b.n	8002e40 <xQueueTakeMutexRecursive+0x2e>
	...

08002e58 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <vQueueAddToRegistry+0x18>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	b112      	cbz	r2, 8002e64 <vQueueAddToRegistry+0xc>
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	b92a      	cbnz	r2, 8002e6e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e62:	2201      	movs	r2, #1
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e6c:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e6e:	4770      	bx	lr
 8002e70:	200025d0 	.word	0x200025d0

08002e74 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <vQueueUnregisterQueue+0x24>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4290      	cmp	r0, r2
 8002e7a:	d00a      	beq.n	8002e92 <vQueueUnregisterQueue+0x1e>
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	4290      	cmp	r0, r2
 8002e80:	d106      	bne.n	8002e90 <vQueueUnregisterQueue+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e82:	2201      	movs	r2, #1
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002e84:	2100      	movs	r1, #0
 8002e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e8e:	6059      	str	r1, [r3, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002e90:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e92:	2200      	movs	r2, #0
 8002e94:	e7f6      	b.n	8002e84 <vQueueUnregisterQueue+0x10>
 8002e96:	bf00      	nop
 8002e98:	200025d0 	.word	0x200025d0

08002e9c <vQueueDelete>:
{
 8002e9c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8002e9e:	b940      	cbnz	r0, 8002eb2 <vQueueDelete+0x16>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	e7fe      	b.n	8002eb0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8002eb2:	f7ff ffdf 	bl	8002e74 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002eb6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8002eba:	b91b      	cbnz	r3, 8002ec4 <vQueueDelete+0x28>
}
 8002ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8002ec0:	f001 b97a 	b.w	80041b8 <vPortFree>
}
 8002ec4:	bd10      	pop	{r4, pc}

08002ec6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ec6:	b570      	push	{r4, r5, r6, lr}
 8002ec8:	4604      	mov	r4, r0
 8002eca:	460d      	mov	r5, r1
 8002ecc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ece:	f001 f9fb 	bl	80042c8 <vPortEnterCritical>
 8002ed2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	bf04      	itt	eq
 8002eda:	2300      	moveq	r3, #0
 8002edc:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002ee0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ee4:	2bff      	cmp	r3, #255	; 0xff
 8002ee6:	bf04      	itt	eq
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002eee:	f001 fa0b 	bl	8004308 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ef4:	b92b      	cbnz	r3, 8002f02 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ef6:	4632      	mov	r2, r6
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002efe:	f000 fc5d 	bl	80037bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f02:	4620      	mov	r0, r4
	}
 8002f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002f08:	f7ff bc0c 	b.w	8002724 <prvUnlockQueue>

08002f0c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f10:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f12:	f001 f9d9 	bl	80042c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8002f18:	4e30      	ldr	r6, [pc, #192]	; (8002fdc <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4f30      	ldr	r7, [pc, #192]	; (8002fe0 <prvAddNewTaskToReadyList+0xd4>)
 8002f1e:	3201      	adds	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f22:	6835      	ldr	r5, [r6, #0]
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	d14b      	bne.n	8002fc0 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f28:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d11f      	bne.n	8002f70 <prvAddNewTaskToReadyList+0x64>
 8002f30:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f32:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f34:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f36:	f001 f8cf 	bl	80040d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f3a:	2d07      	cmp	r5, #7
 8002f3c:	f108 0814 	add.w	r8, r8, #20
 8002f40:	d1f7      	bne.n	8002f32 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f42:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003008 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8002f46:	4d27      	ldr	r5, [pc, #156]	; (8002fe4 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8002f48:	4640      	mov	r0, r8
 8002f4a:	f001 f8c5 	bl	80040d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f001 f8c2 	bl	80040d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f54:	4824      	ldr	r0, [pc, #144]	; (8002fe8 <prvAddNewTaskToReadyList+0xdc>)
 8002f56:	f001 f8bf 	bl	80040d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f5a:	4824      	ldr	r0, [pc, #144]	; (8002fec <prvAddNewTaskToReadyList+0xe0>)
 8002f5c:	f001 f8bc 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f60:	4823      	ldr	r0, [pc, #140]	; (8002ff0 <prvAddNewTaskToReadyList+0xe4>)
 8002f62:	f001 f8b9 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <prvAddNewTaskToReadyList+0xe8>)
 8002f68:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <prvAddNewTaskToReadyList+0xec>)
 8002f6e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002f70:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8002f72:	4923      	ldr	r1, [pc, #140]	; (8003000 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8002f74:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f76:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002f78:	3301      	adds	r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f7e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002f80:	2301      	movs	r3, #1
 8002f82:	4093      	lsls	r3, r2
 8002f84:	4303      	orrs	r3, r0
 8002f86:	2014      	movs	r0, #20
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	fb00 7002 	mla	r0, r0, r2, r7
 8002f8e:	1d21      	adds	r1, r4, #4
 8002f90:	f001 f8b0 	bl	80040f4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f94:	f001 f9b8 	bl	8004308 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <prvAddNewTaskToReadyList+0xf8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b173      	cbz	r3, 8002fbc <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f9e:	6833      	ldr	r3, [r6, #0]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d209      	bcs.n	8002fbc <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8002fa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
}
 8002fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <prvAddNewTaskToReadyList+0xf8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1d3      	bne.n	8002f70 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fce:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002fd0:	bf98      	it	ls
 8002fd2:	6034      	strls	r4, [r6, #0]
 8002fd4:	e7cc      	b.n	8002f70 <prvAddNewTaskToReadyList+0x64>
 8002fd6:	bf00      	nop
 8002fd8:	20002678 	.word	0x20002678
 8002fdc:	200025e0 	.word	0x200025e0
 8002fe0:	200025ec 	.word	0x200025ec
 8002fe4:	200026a0 	.word	0x200026a0
 8002fe8:	200026c0 	.word	0x200026c0
 8002fec:	200026ec 	.word	0x200026ec
 8002ff0:	200026d8 	.word	0x200026d8
 8002ff4:	200025e4 	.word	0x200025e4
 8002ff8:	200025e8 	.word	0x200025e8
 8002ffc:	20002684 	.word	0x20002684
 8003000:	20002688 	.word	0x20002688
 8003004:	200026d4 	.word	0x200026d4
 8003008:	2000268c 	.word	0x2000268c

0800300c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003010:	4e1a      	ldr	r6, [pc, #104]	; (800307c <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8003012:	681d      	ldr	r5, [r3, #0]
{
 8003014:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003016:	6830      	ldr	r0, [r6, #0]
 8003018:	3004      	adds	r0, #4
{
 800301a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800301c:	f001 f88d 	bl	800413a <uxListRemove>
 8003020:	b940      	cbnz	r0, 8003034 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003022:	6832      	ldr	r2, [r6, #0]
 8003024:	4916      	ldr	r1, [pc, #88]	; (8003080 <prvAddCurrentTaskToDelayedList+0x74>)
 8003026:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003028:	680b      	ldr	r3, [r1, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4082      	lsls	r2, r0
 800302e:	ea23 0302 	bic.w	r3, r3, r2
 8003032:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003034:	1c63      	adds	r3, r4, #1
 8003036:	d107      	bne.n	8003048 <prvAddCurrentTaskToDelayedList+0x3c>
 8003038:	b137      	cbz	r7, 8003048 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800303a:	6831      	ldr	r1, [r6, #0]
 800303c:	4811      	ldr	r0, [pc, #68]	; (8003084 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800303e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003042:	3104      	adds	r1, #4
 8003044:	f001 b856 	b.w	80040f4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003048:	6833      	ldr	r3, [r6, #0]
 800304a:	192c      	adds	r4, r5, r4
 800304c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800304e:	d307      	bcc.n	8003060 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	6831      	ldr	r1, [r6, #0]
}
 8003056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800305a:	3104      	adds	r1, #4
 800305c:	f001 b856 	b.w	800410c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <prvAddCurrentTaskToDelayedList+0x80>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	6831      	ldr	r1, [r6, #0]
 8003066:	3104      	adds	r1, #4
 8003068:	f001 f850 	bl	800410c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <prvAddCurrentTaskToDelayedList+0x84>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8003072:	bf88      	it	hi
 8003074:	601c      	strhi	r4, [r3, #0]
}
 8003076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003078:	20002700 	.word	0x20002700
 800307c:	200025e0 	.word	0x200025e0
 8003080:	20002688 	.word	0x20002688
 8003084:	200026d8 	.word	0x200026d8
 8003088:	200025e8 	.word	0x200025e8
 800308c:	200025e4 	.word	0x200025e4
 8003090:	200026b4 	.word	0x200026b4

08003094 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <prvResetNextTaskUnblockTime+0x1c>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <prvResetNextTaskUnblockTime+0x20>)
 800309c:	b919      	cbnz	r1, 80030a6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800309e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	6852      	ldr	r2, [r2, #4]
 80030ae:	e7f8      	b.n	80030a2 <prvResetNextTaskUnblockTime+0xe>
 80030b0:	200025e4 	.word	0x200025e4
 80030b4:	200026b4 	.word	0x200026b4

080030b8 <prvDeleteTCB>:
	{
 80030b8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030ba:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 80030be:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030c0:	b93b      	cbnz	r3, 80030d2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80030c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030c4:	f001 f878 	bl	80041b8 <vPortFree>
				vPortFree( pxTCB );
 80030c8:	4620      	mov	r0, r4
	}
 80030ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80030ce:	f001 b873 	b.w	80041b8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d0f9      	beq.n	80030ca <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d008      	beq.n	80030ec <prvDeleteTCB+0x34>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	e7fe      	b.n	80030ea <prvDeleteTCB+0x32>
	}
 80030ec:	bd10      	pop	{r4, pc}
	...

080030f0 <prvIdleTask>:
{
 80030f0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030f2:	4c13      	ldr	r4, [pc, #76]	; (8003140 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f4:	4f13      	ldr	r7, [pc, #76]	; (8003144 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80030f6:	4d14      	ldr	r5, [pc, #80]	; (8003148 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	b973      	cbnz	r3, 800311a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <prvIdleTask+0x5c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d9f8      	bls.n	80030f6 <prvIdleTask+0x6>
				taskYIELD();
 8003104:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	e7ed      	b.n	80030f6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800311a:	f001 f8d5 	bl	80042c8 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003122:	1d30      	adds	r0, r6, #4
 8003124:	f001 f809 	bl	800413a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	3b01      	subs	r3, #1
 8003132:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003134:	f001 f8e8 	bl	8004308 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003138:	4630      	mov	r0, r6
 800313a:	f7ff ffbd 	bl	80030b8 <prvDeleteTCB>
 800313e:	e7db      	b.n	80030f8 <prvIdleTask+0x8>
 8003140:	2000267c 	.word	0x2000267c
 8003144:	200026ec 	.word	0x200026ec
 8003148:	20002678 	.word	0x20002678
 800314c:	200025ec 	.word	0x200025ec

08003150 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003154:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003158:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800315c:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800315e:	4606      	mov	r6, r0
 8003160:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003162:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003164:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003166:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003168:	f004 f900 	bl	800736c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800316c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800316e:	f1a9 0904 	sub.w	r9, r9, #4
 8003172:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003174:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8003178:	b3b5      	cbz	r5, 80031e8 <prvInitialiseNewTask.constprop.0+0x98>
 800317a:	1e6b      	subs	r3, r5, #1
 800317c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003180:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003182:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003186:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800318a:	b108      	cbz	r0, 8003190 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800318c:	42ab      	cmp	r3, r5
 800318e:	d1f8      	bne.n	8003182 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003190:	2300      	movs	r3, #0
 8003192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003196:	9d08      	ldr	r5, [sp, #32]
 8003198:	2d06      	cmp	r5, #6
 800319a:	bf28      	it	cs
 800319c:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800319e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80031a2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80031a4:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031a6:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80031a8:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031ac:	f000 ff9f 	bl	80040ee <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031b4:	f104 0018 	add.w	r0, r4, #24
 80031b8:	f000 ff99 	bl	80040ee <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80031bc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80031c6:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031ca:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ce:	463a      	mov	r2, r7
 80031d0:	4631      	mov	r1, r6
 80031d2:	4648      	mov	r0, r9
 80031d4:	f001 f83a 	bl	800424c <pxPortInitialiseStack>
 80031d8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80031da:	f1b8 0f00 	cmp.w	r8, #0
 80031de:	d001      	beq.n	80031e4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031e0:	f8c8 4000 	str.w	r4, [r8]
}
 80031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031e8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80031ec:	e7d3      	b.n	8003196 <prvInitialiseNewTask.constprop.0+0x46>

080031ee <xTaskCreateStatic>:
	{
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80031f6:	b945      	cbnz	r5, 800320a <xTaskCreateStatic+0x1c>
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	e7fe      	b.n	8003208 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800320a:	b944      	cbnz	r4, 800321e <xTaskCreateStatic+0x30>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	e7fe      	b.n	800321c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800321e:	2660      	movs	r6, #96	; 0x60
 8003220:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003222:	9e05      	ldr	r6, [sp, #20]
 8003224:	2e60      	cmp	r6, #96	; 0x60
 8003226:	d008      	beq.n	800323a <xTaskCreateStatic+0x4c>
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	e7fe      	b.n	8003238 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800323a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800323c:	2502      	movs	r5, #2
 800323e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003242:	ad04      	add	r5, sp, #16
 8003244:	9501      	str	r5, [sp, #4]
 8003246:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003248:	9402      	str	r4, [sp, #8]
 800324a:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800324c:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800324e:	f7ff ff7f 	bl	8003150 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003252:	4620      	mov	r0, r4
 8003254:	f7ff fe5a 	bl	8002f0c <prvAddNewTaskToReadyList>
	}
 8003258:	9804      	ldr	r0, [sp, #16]
 800325a:	b006      	add	sp, #24
 800325c:	bd70      	pop	{r4, r5, r6, pc}

0800325e <xTaskCreate>:
	{
 800325e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003262:	4607      	mov	r7, r0
 8003264:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003266:	0090      	lsls	r0, r2, #2
	{
 8003268:	4688      	mov	r8, r1
 800326a:	4616      	mov	r6, r2
 800326c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800326e:	f000 ff75 	bl	800415c <pvPortMalloc>
			if( pxStack != NULL )
 8003272:	4605      	mov	r5, r0
 8003274:	b1e8      	cbz	r0, 80032b2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003276:	2060      	movs	r0, #96	; 0x60
 8003278:	f000 ff70 	bl	800415c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800327c:	4604      	mov	r4, r0
 800327e:	b1a8      	cbz	r0, 80032ac <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003280:	2300      	movs	r3, #0
 8003282:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003288:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800328e:	9002      	str	r0, [sp, #8]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	4632      	mov	r2, r6
 8003294:	464b      	mov	r3, r9
 8003296:	4641      	mov	r1, r8
 8003298:	4638      	mov	r0, r7
 800329a:	f7ff ff59 	bl	8003150 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff fe34 	bl	8002f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a4:	2001      	movs	r0, #1
	}
 80032a6:	b005      	add	sp, #20
 80032a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80032ac:	4628      	mov	r0, r5
 80032ae:	f000 ff83 	bl	80041b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032b2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80032b6:	e7f6      	b.n	80032a6 <xTaskCreate+0x48>

080032b8 <vTaskDelete>:
	{
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4604      	mov	r4, r0
 80032bc:	4d2a      	ldr	r5, [pc, #168]	; (8003368 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80032be:	f001 f803 	bl	80042c8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80032c2:	b904      	cbnz	r4, 80032c6 <vTaskDelete+0xe>
 80032c4:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c6:	1d26      	adds	r6, r4, #4
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 ff36 	bl	800413a <uxListRemove>
 80032ce:	b960      	cbnz	r0, 80032ea <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <vTaskDelete+0xb4>)
 80032d4:	2014      	movs	r0, #20
 80032d6:	4378      	muls	r0, r7
 80032d8:	581b      	ldr	r3, [r3, r0]
 80032da:	b933      	cbnz	r3, 80032ea <vTaskDelete+0x32>
 80032dc:	4924      	ldr	r1, [pc, #144]	; (8003370 <vTaskDelete+0xb8>)
 80032de:	2201      	movs	r2, #1
 80032e0:	680b      	ldr	r3, [r1, #0]
 80032e2:	40ba      	lsls	r2, r7
 80032e4:	ea23 0302 	bic.w	r3, r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032ec:	b11b      	cbz	r3, 80032f6 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ee:	f104 0018 	add.w	r0, r4, #24
 80032f2:	f000 ff22 	bl	800413a <uxListRemove>
			uxTaskNumber++;
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <vTaskDelete+0xbc>)
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80032fe:	682b      	ldr	r3, [r5, #0]
 8003300:	42a3      	cmp	r3, r4
 8003302:	d11b      	bne.n	800333c <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003304:	481c      	ldr	r0, [pc, #112]	; (8003378 <vTaskDelete+0xc0>)
 8003306:	4631      	mov	r1, r6
 8003308:	f000 fef4 	bl	80040f4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <vTaskDelete+0xc4>)
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8003314:	f000 fff8 	bl	8004308 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <vTaskDelete+0xc8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b313      	cbz	r3, 8003364 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	42a3      	cmp	r3, r4
 8003322:	d11f      	bne.n	8003364 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <vTaskDelete+0xcc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	b193      	cbz	r3, 8003350 <vTaskDelete+0x98>
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	e7fe      	b.n	800333a <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <vTaskDelete+0xd0>)
 800333e:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003340:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8003342:	3b01      	subs	r3, #1
 8003344:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003346:	f7ff feb7 	bl	80030b8 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800334a:	f7ff fea3 	bl	8003094 <prvResetNextTaskUnblockTime>
 800334e:	e7e1      	b.n	8003314 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8003350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	f3bf 8f6f 	isb	sy
	}
 8003364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003366:	bf00      	nop
 8003368:	200025e0 	.word	0x200025e0
 800336c:	200025ec 	.word	0x200025ec
 8003370:	20002688 	.word	0x20002688
 8003374:	20002684 	.word	0x20002684
 8003378:	200026ec 	.word	0x200026ec
 800337c:	2000267c 	.word	0x2000267c
 8003380:	200026d4 	.word	0x200026d4
 8003384:	20002680 	.word	0x20002680
 8003388:	20002678 	.word	0x20002678

0800338c <vTaskStartScheduler>:
{
 800338c:	b510      	push	{r4, lr}
 800338e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003390:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003392:	aa07      	add	r2, sp, #28
 8003394:	a906      	add	r1, sp, #24
 8003396:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003398:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800339c:	f7fd f92c 	bl	80005f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033a0:	9b05      	ldr	r3, [sp, #20]
 80033a2:	9302      	str	r3, [sp, #8]
 80033a4:	9b06      	ldr	r3, [sp, #24]
 80033a6:	9a07      	ldr	r2, [sp, #28]
 80033a8:	4916      	ldr	r1, [pc, #88]	; (8003404 <vTaskStartScheduler+0x78>)
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <vTaskStartScheduler+0x7c>)
 80033ac:	e9cd 4300 	strd	r4, r3, [sp]
 80033b0:	4623      	mov	r3, r4
 80033b2:	f7ff ff1c 	bl	80031ee <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80033b6:	b318      	cbz	r0, 8003400 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80033b8:	f000 fcf4 	bl	8003da4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80033bc:	2801      	cmp	r0, #1
 80033be:	d114      	bne.n	80033ea <vTaskStartScheduler+0x5e>
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <vTaskStartScheduler+0x80>)
 80033d2:	f04f 32ff 	mov.w	r2, #4294967295
 80033d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <vTaskStartScheduler+0x84>)
 80033da:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <vTaskStartScheduler+0x88>)
 80033de:	601c      	str	r4, [r3, #0]
}
 80033e0:	b008      	add	sp, #32
 80033e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80033e6:	f000 bffd 	b.w	80043e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033ea:	3001      	adds	r0, #1
 80033ec:	d108      	bne.n	8003400 <vTaskStartScheduler+0x74>
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	e7fe      	b.n	80033fe <vTaskStartScheduler+0x72>
}
 8003400:	b008      	add	sp, #32
 8003402:	bd10      	pop	{r4, pc}
 8003404:	08008d8c 	.word	0x08008d8c
 8003408:	080030f1 	.word	0x080030f1
 800340c:	200026b4 	.word	0x200026b4
 8003410:	200026d4 	.word	0x200026d4
 8003414:	20002700 	.word	0x20002700

08003418 <vTaskEndScheduler>:
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
 8003428:	4b02      	ldr	r3, [pc, #8]	; (8003434 <vTaskEndScheduler+0x1c>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 800342e:	f000 bf39 	b.w	80042a4 <vPortEndScheduler>
 8003432:	bf00      	nop
 8003434:	200026d4 	.word	0x200026d4

08003438 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <vTaskSuspendAll+0xc>)
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	6013      	str	r3, [r2, #0]
}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20002680 	.word	0x20002680

08003448 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003448:	4b01      	ldr	r3, [pc, #4]	; (8003450 <xTaskGetTickCount+0x8>)
 800344a:	6818      	ldr	r0, [r3, #0]
}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20002700 	.word	0x20002700

08003454 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <xTaskIncrementTick+0x104>)
 8003456:	681b      	ldr	r3, [r3, #0]
{
 8003458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345c:	2b00      	cmp	r3, #0
 800345e:	d174      	bne.n	800354a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <xTaskIncrementTick+0x108>)
 8003462:	681d      	ldr	r5, [r3, #0]
 8003464:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003466:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003468:	b9bd      	cbnz	r5, 800349a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <xTaskIncrementTick+0x10c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	b142      	cbz	r2, 8003484 <xTaskIncrementTick+0x30>
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	e7fe      	b.n	8003482 <xTaskIncrementTick+0x2e>
 8003484:	4a37      	ldr	r2, [pc, #220]	; (8003564 <xTaskIncrementTick+0x110>)
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	6810      	ldr	r0, [r2, #0]
 800348a:	6018      	str	r0, [r3, #0]
 800348c:	6011      	str	r1, [r2, #0]
 800348e:	4a36      	ldr	r2, [pc, #216]	; (8003568 <xTaskIncrementTick+0x114>)
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	f7ff fdfd 	bl	8003094 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800349a:	4e34      	ldr	r6, [pc, #208]	; (800356c <xTaskIncrementTick+0x118>)
 800349c:	4f34      	ldr	r7, [pc, #208]	; (8003570 <xTaskIncrementTick+0x11c>)
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800357c <xTaskIncrementTick+0x128>
 80034a4:	429d      	cmp	r5, r3
BaseType_t xSwitchRequired = pdFALSE;
 80034a6:	f04f 0400 	mov.w	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034aa:	d211      	bcs.n	80034d0 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034ac:	f8d8 3000 	ldr.w	r3, [r8]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	2214      	movs	r2, #20
 80034b4:	4353      	muls	r3, r2
 80034b6:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80034b8:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 80034ba:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <xTaskIncrementTick+0x120>)
 80034bc:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 80034be:	bf28      	it	cs
 80034c0:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf18      	it	ne
 80034c6:	2401      	movne	r4, #1
}
 80034c8:	4620      	mov	r0, r4
 80034ca:	b003      	add	sp, #12
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8003560 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80034d4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003580 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d8:	f8da 3000 	ldr.w	r3, [sl]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	b91b      	cbnz	r3, 80034e8 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	6033      	str	r3, [r6, #0]
					break;
 80034e6:	e7e1      	b.n	80034ac <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e8:	f8da 3000 	ldr.w	r3, [sl]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034f2:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80034f6:	4295      	cmp	r5, r2
 80034f8:	d201      	bcs.n	80034fe <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80034fa:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034fc:	e7d6      	b.n	80034ac <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034fe:	f10b 0104 	add.w	r1, fp, #4
 8003502:	4608      	mov	r0, r1
 8003504:	9101      	str	r1, [sp, #4]
 8003506:	f000 fe18 	bl	800413a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800350a:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800350e:	9901      	ldr	r1, [sp, #4]
 8003510:	b122      	cbz	r2, 800351c <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003512:	f10b 0018 	add.w	r0, fp, #24
 8003516:	f000 fe10 	bl	800413a <uxListRemove>
 800351a:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800351c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8003520:	f8d9 3000 	ldr.w	r3, [r9]
 8003524:	2201      	movs	r2, #1
 8003526:	4082      	lsls	r2, r0
 8003528:	431a      	orrs	r2, r3
 800352a:	f8c9 2000 	str.w	r2, [r9]
 800352e:	2214      	movs	r2, #20
 8003530:	fb02 7000 	mla	r0, r2, r0, r7
 8003534:	f000 fdde 	bl	80040f4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003538:	f8d8 1000 	ldr.w	r1, [r8]
 800353c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8003540:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003542:	429a      	cmp	r2, r3
 8003544:	bf28      	it	cs
 8003546:	2401      	movcs	r4, #1
 8003548:	e7c6      	b.n	80034d8 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <xTaskIncrementTick+0x124>)
 800354c:	6813      	ldr	r3, [r2, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003552:	2400      	movs	r4, #0
	return xSwitchRequired;
 8003554:	e7b8      	b.n	80034c8 <xTaskIncrementTick+0x74>
 8003556:	bf00      	nop
 8003558:	20002680 	.word	0x20002680
 800355c:	20002700 	.word	0x20002700
 8003560:	200025e4 	.word	0x200025e4
 8003564:	200025e8 	.word	0x200025e8
 8003568:	200026b8 	.word	0x200026b8
 800356c:	200026b4 	.word	0x200026b4
 8003570:	200025ec 	.word	0x200025ec
 8003574:	20002704 	.word	0x20002704
 8003578:	200026bc 	.word	0x200026bc
 800357c:	200025e0 	.word	0x200025e0
 8003580:	20002688 	.word	0x20002688

08003584 <xTaskResumeAll>:
{
 8003584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003588:	4c32      	ldr	r4, [pc, #200]	; (8003654 <xTaskResumeAll+0xd0>)
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	b943      	cbnz	r3, 80035a0 <xTaskResumeAll+0x1c>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	e7fe      	b.n	800359e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80035a0:	f000 fe92 	bl	80042c8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035aa:	6824      	ldr	r4, [r4, #0]
 80035ac:	b134      	cbz	r4, 80035bc <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 80035ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80035b0:	f000 feaa 	bl	8004308 <vPortExitCritical>
}
 80035b4:	4620      	mov	r0, r4
 80035b6:	b002      	add	sp, #8
 80035b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035bc:	4b26      	ldr	r3, [pc, #152]	; (8003658 <xTaskResumeAll+0xd4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f4      	beq.n	80035ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035c4:	4d25      	ldr	r5, [pc, #148]	; (800365c <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 80035c6:	4e26      	ldr	r6, [pc, #152]	; (8003660 <xTaskResumeAll+0xdc>)
 80035c8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003670 <xTaskResumeAll+0xec>
 80035cc:	e01f      	b.n	800360e <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ce:	68eb      	ldr	r3, [r5, #12]
 80035d0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035d2:	f104 0018 	add.w	r0, r4, #24
 80035d6:	f000 fdb0 	bl	800413a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035da:	1d21      	adds	r1, r4, #4
 80035dc:	4608      	mov	r0, r1
 80035de:	9101      	str	r1, [sp, #4]
 80035e0:	f000 fdab 	bl	800413a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035e6:	6830      	ldr	r0, [r6, #0]
 80035e8:	9901      	ldr	r1, [sp, #4]
 80035ea:	2701      	movs	r7, #1
 80035ec:	fa07 f302 	lsl.w	r3, r7, r2
 80035f0:	4303      	orrs	r3, r0
 80035f2:	2014      	movs	r0, #20
 80035f4:	fb00 8002 	mla	r0, r0, r2, r8
 80035f8:	6033      	str	r3, [r6, #0]
 80035fa:	f000 fd7b 	bl	80040f4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <xTaskResumeAll+0xe0>)
 8003600:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	429a      	cmp	r2, r3
 8003608:	d301      	bcc.n	800360e <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <xTaskResumeAll+0xe4>)
 800360c:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360e:	682b      	ldr	r3, [r5, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1dc      	bne.n	80035ce <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 8003614:	b10c      	cbz	r4, 800361a <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 8003616:	f7ff fd3d 	bl	8003094 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800361a:	4d14      	ldr	r5, [pc, #80]	; (800366c <xTaskResumeAll+0xe8>)
 800361c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800361e:	b144      	cbz	r4, 8003632 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 8003620:	4e11      	ldr	r6, [pc, #68]	; (8003668 <xTaskResumeAll+0xe4>)
 8003622:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003624:	f7ff ff16 	bl	8003454 <xTaskIncrementTick>
 8003628:	b100      	cbz	r0, 800362c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800362a:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800362c:	3c01      	subs	r4, #1
 800362e:	d1f9      	bne.n	8003624 <xTaskResumeAll+0xa0>
						xPendedTicks = 0;
 8003630:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <xTaskResumeAll+0xe4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0b9      	beq.n	80035ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800363a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800364e:	2401      	movs	r4, #1
 8003650:	e7ae      	b.n	80035b0 <xTaskResumeAll+0x2c>
 8003652:	bf00      	nop
 8003654:	20002680 	.word	0x20002680
 8003658:	20002678 	.word	0x20002678
 800365c:	200026c0 	.word	0x200026c0
 8003660:	20002688 	.word	0x20002688
 8003664:	200025e0 	.word	0x200025e0
 8003668:	20002704 	.word	0x20002704
 800366c:	200026bc 	.word	0x200026bc
 8003670:	200025ec 	.word	0x200025ec

08003674 <vTaskDelay>:
	{
 8003674:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003676:	b950      	cbnz	r0, 800368e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003678:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
	}
 800368c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <vTaskDelay+0x44>)
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	b141      	cbz	r1, 80036a6 <vTaskDelay+0x32>
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	e7fe      	b.n	80036a4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80036a6:	f7ff fec7 	bl	8003438 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036aa:	f7ff fcaf 	bl	800300c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80036ae:	f7ff ff69 	bl	8003584 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d0e0      	beq.n	8003678 <vTaskDelay+0x4>
 80036b6:	e7e9      	b.n	800368c <vTaskDelay+0x18>
 80036b8:	20002680 	.word	0x20002680

080036bc <vTaskSetApplicationTaskTag>:
	{
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	460d      	mov	r5, r1
		if( xTask == NULL )
 80036c0:	4604      	mov	r4, r0
 80036c2:	b908      	cbnz	r0, 80036c8 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <vTaskSetApplicationTaskTag+0x1c>)
 80036c6:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 80036c8:	f000 fdfe 	bl	80042c8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80036cc:	6565      	str	r5, [r4, #84]	; 0x54
	}
 80036ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80036d2:	f000 be19 	b.w	8004308 <vPortExitCritical>
 80036d6:	bf00      	nop
 80036d8:	200025e0 	.word	0x200025e0

080036dc <xTaskGetApplicationTaskTag>:
	{
 80036dc:	b513      	push	{r0, r1, r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 80036de:	4604      	mov	r4, r0
 80036e0:	b908      	cbnz	r0, 80036e6 <xTaskGetApplicationTaskTag+0xa>
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <xTaskGetApplicationTaskTag+0x1c>)
 80036e4:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 80036e6:	f000 fdef 	bl	80042c8 <vPortEnterCritical>
			xReturn = pxTCB->pxTaskTag;
 80036ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036ec:	9001      	str	r0, [sp, #4]
		taskEXIT_CRITICAL();
 80036ee:	f000 fe0b 	bl	8004308 <vPortExitCritical>
	}
 80036f2:	9801      	ldr	r0, [sp, #4]
 80036f4:	b002      	add	sp, #8
 80036f6:	bd10      	pop	{r4, pc}
 80036f8:	200025e0 	.word	0x200025e0

080036fc <vTaskSwitchContext>:
{
 80036fc:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <vTaskSwitchContext+0x78>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <vTaskSwitchContext+0x7c>)
 8003704:	b112      	cbz	r2, 800370c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800370c:	4c1b      	ldr	r4, [pc, #108]	; (800377c <vTaskSwitchContext+0x80>)
		xYieldPending = pdFALSE;
 800370e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	429a      	cmp	r2, r3
 800371a:	d804      	bhi.n	8003726 <vTaskSwitchContext+0x2a>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	3134      	adds	r1, #52	; 0x34
 8003722:	f7fc ff67 	bl	80005f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <vTaskSwitchContext+0x84>)
 8003728:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f1c2 021f 	rsb	r2, r2, #31
 8003734:	2314      	movs	r3, #20
 8003736:	4913      	ldr	r1, [pc, #76]	; (8003784 <vTaskSwitchContext+0x88>)
 8003738:	4353      	muls	r3, r2
 800373a:	18c8      	adds	r0, r1, r3
 800373c:	58cd      	ldr	r5, [r1, r3]
 800373e:	b945      	cbnz	r5, 8003752 <vTaskSwitchContext+0x56>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	e7fe      	b.n	8003750 <vTaskSwitchContext+0x54>
 8003752:	6845      	ldr	r5, [r0, #4]
 8003754:	3308      	adds	r3, #8
 8003756:	686d      	ldr	r5, [r5, #4]
 8003758:	6045      	str	r5, [r0, #4]
 800375a:	440b      	add	r3, r1
 800375c:	429d      	cmp	r5, r3
 800375e:	bf04      	itt	eq
 8003760:	686b      	ldreq	r3, [r5, #4]
 8003762:	6043      	streq	r3, [r0, #4]
 8003764:	2314      	movs	r3, #20
 8003766:	fb03 1202 	mla	r2, r3, r2, r1
 800376a:	6853      	ldr	r3, [r2, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	6023      	str	r3, [r4, #0]
}
 8003770:	e7cb      	b.n	800370a <vTaskSwitchContext+0xe>
 8003772:	bf00      	nop
 8003774:	20002680 	.word	0x20002680
 8003778:	20002704 	.word	0x20002704
 800377c:	200025e0 	.word	0x200025e0
 8003780:	20002688 	.word	0x20002688
 8003784:	200025ec 	.word	0x200025ec

08003788 <vTaskPlaceOnEventList>:
{
 8003788:	b510      	push	{r4, lr}
 800378a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800378c:	b940      	cbnz	r0, 80037a0 <vTaskPlaceOnEventList+0x18>
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	e7fe      	b.n	800379e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <vTaskPlaceOnEventList+0x30>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	3118      	adds	r1, #24
 80037a6:	f000 fcb1 	bl	800410c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037aa:	4620      	mov	r0, r4
 80037ac:	2101      	movs	r1, #1
}
 80037ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037b2:	f7ff bc2b 	b.w	800300c <prvAddCurrentTaskToDelayedList>
 80037b6:	bf00      	nop
 80037b8:	200025e0 	.word	0x200025e0

080037bc <vTaskPlaceOnEventListRestricted>:
	{
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	460d      	mov	r5, r1
 80037c0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80037c2:	b940      	cbnz	r0, 80037d6 <vTaskPlaceOnEventListRestricted+0x1a>
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	e7fe      	b.n	80037d4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <vTaskPlaceOnEventListRestricted+0x38>)
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	3118      	adds	r1, #24
 80037dc:	f000 fc8a 	bl	80040f4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80037e0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037e2:	4621      	mov	r1, r4
 80037e4:	bf0c      	ite	eq
 80037e6:	4628      	moveq	r0, r5
 80037e8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80037ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037f0:	f7ff bc0c 	b.w	800300c <prvAddCurrentTaskToDelayedList>
 80037f4:	200025e0 	.word	0x200025e0

080037f8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	68c3      	ldr	r3, [r0, #12]
{
 80037fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80037fe:	b944      	cbnz	r4, 8003812 <xTaskRemoveFromEventList+0x1a>
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	e7fe      	b.n	8003810 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003812:	f104 0118 	add.w	r1, r4, #24
 8003816:	4608      	mov	r0, r1
 8003818:	9101      	str	r1, [sp, #4]
 800381a:	f000 fc8e 	bl	800413a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <xTaskRemoveFromEventList+0x70>)
 8003820:	9901      	ldr	r1, [sp, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b9f3      	cbnz	r3, 8003864 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003826:	1d21      	adds	r1, r4, #4
 8003828:	4608      	mov	r0, r1
 800382a:	9101      	str	r1, [sp, #4]
 800382c:	f000 fc85 	bl	800413a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003830:	480e      	ldr	r0, [pc, #56]	; (800386c <xTaskRemoveFromEventList+0x74>)
 8003832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003834:	6805      	ldr	r5, [r0, #0]
 8003836:	9901      	ldr	r1, [sp, #4]
 8003838:	2301      	movs	r3, #1
 800383a:	4093      	lsls	r3, r2
 800383c:	432b      	orrs	r3, r5
 800383e:	6003      	str	r3, [r0, #0]
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <xTaskRemoveFromEventList+0x78>)
 8003842:	2014      	movs	r0, #20
 8003844:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003848:	f000 fc54 	bl	80040f4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <xTaskRemoveFromEventList+0x7c>)
 800384e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003856:	bf85      	ittet	hi
 8003858:	4b07      	ldrhi	r3, [pc, #28]	; (8003878 <xTaskRemoveFromEventList+0x80>)
 800385a:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800385c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800385e:	6018      	strhi	r0, [r3, #0]
}
 8003860:	b003      	add	sp, #12
 8003862:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <xTaskRemoveFromEventList+0x84>)
 8003866:	e7ef      	b.n	8003848 <xTaskRemoveFromEventList+0x50>
 8003868:	20002680 	.word	0x20002680
 800386c:	20002688 	.word	0x20002688
 8003870:	200025ec 	.word	0x200025ec
 8003874:	200025e0 	.word	0x200025e0
 8003878:	20002704 	.word	0x20002704
 800387c:	200026c0 	.word	0x200026c0

08003880 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <vTaskInternalSetTimeOutState+0x10>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <vTaskInternalSetTimeOutState+0x14>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6043      	str	r3, [r0, #4]
}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	200026b8 	.word	0x200026b8
 8003894:	20002700 	.word	0x20002700

08003898 <xTaskCheckForTimeOut>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800389c:	4605      	mov	r5, r0
 800389e:	b940      	cbnz	r0, 80038b2 <xTaskCheckForTimeOut+0x1a>
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	e7fe      	b.n	80038b0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80038b2:	b941      	cbnz	r1, 80038c6 <xTaskCheckForTimeOut+0x2e>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	e7fe      	b.n	80038c4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80038c6:	f000 fcff 	bl	80042c8 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <xTaskCheckForTimeOut+0x70>)
 80038cc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	d010      	beq.n	80038f6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <xTaskCheckForTimeOut+0x74>)
 80038d6:	682e      	ldr	r6, [r5, #0]
 80038d8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038da:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038dc:	4286      	cmp	r6, r0
 80038de:	d001      	beq.n	80038e4 <xTaskCheckForTimeOut+0x4c>
 80038e0:	428a      	cmp	r2, r1
 80038e2:	d90f      	bls.n	8003904 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038e4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038e6:	4283      	cmp	r3, r0
 80038e8:	d90a      	bls.n	8003900 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	4413      	add	r3, r2
 80038ee:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038f0:	4628      	mov	r0, r5
 80038f2:	f7ff ffc5 	bl	8003880 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80038f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80038f8:	f000 fd06 	bl	8004308 <vPortExitCritical>
}
 80038fc:	4620      	mov	r0, r4
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003904:	2401      	movs	r4, #1
 8003906:	e7f7      	b.n	80038f8 <xTaskCheckForTimeOut+0x60>
 8003908:	20002700 	.word	0x20002700
 800390c:	200026b8 	.word	0x200026b8

08003910 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003910:	4b01      	ldr	r3, [pc, #4]	; (8003918 <vTaskMissedYield+0x8>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	4770      	bx	lr
 8003918:	20002704 	.word	0x20002704

0800391c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800391c:	4b01      	ldr	r3, [pc, #4]	; (8003924 <xTaskGetCurrentTaskHandle+0x8>)
 800391e:	6818      	ldr	r0, [r3, #0]
	}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	200025e0 	.word	0x200025e0

08003928 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <xTaskGetSchedulerState+0x18>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	b133      	cbz	r3, 800393c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <xTaskGetSchedulerState+0x1c>)
 8003930:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf0c      	ite	eq
 8003936:	2002      	moveq	r0, #2
 8003938:	2000      	movne	r0, #0
 800393a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800393c:	2001      	movs	r0, #1
	}
 800393e:	4770      	bx	lr
 8003940:	200026d4 	.word	0x200026d4
 8003944:	20002680 	.word	0x20002680

08003948 <xTaskPriorityInherit>:
	{
 8003948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800394a:	4604      	mov	r4, r0
 800394c:	2800      	cmp	r0, #0
 800394e:	d031      	beq.n	80039b4 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003950:	4d20      	ldr	r5, [pc, #128]	; (80039d4 <xTaskPriorityInherit+0x8c>)
 8003952:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003954:	682a      	ldr	r2, [r5, #0]
 8003956:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003958:	4293      	cmp	r3, r2
 800395a:	d233      	bcs.n	80039c4 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800395c:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800395e:	4e1e      	ldr	r6, [pc, #120]	; (80039d8 <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003960:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003962:	bfa1      	itttt	ge
 8003964:	682a      	ldrge	r2, [r5, #0]
 8003966:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003968:	f1c2 0207 	rsbge	r2, r2, #7
 800396c:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800396e:	2214      	movs	r2, #20
 8003970:	fb02 6303 	mla	r3, r2, r3, r6
 8003974:	6942      	ldr	r2, [r0, #20]
 8003976:	429a      	cmp	r2, r3
 8003978:	d11e      	bne.n	80039b8 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397a:	1d01      	adds	r1, r0, #4
 800397c:	4608      	mov	r0, r1
 800397e:	9101      	str	r1, [sp, #4]
 8003980:	f000 fbdb 	bl	800413a <uxListRemove>
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <xTaskPriorityInherit+0x94>)
 8003986:	9901      	ldr	r1, [sp, #4]
 8003988:	b930      	cbnz	r0, 8003998 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800398a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	2001      	movs	r0, #1
 8003990:	40b8      	lsls	r0, r7
 8003992:	ea22 0200 	bic.w	r2, r2, r0
 8003996:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003998:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800399a:	681d      	ldr	r5, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800399c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800399e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80039a0:	2401      	movs	r4, #1
 80039a2:	fa04 f002 	lsl.w	r0, r4, r2
 80039a6:	4328      	orrs	r0, r5
 80039a8:	6018      	str	r0, [r3, #0]
 80039aa:	2014      	movs	r0, #20
 80039ac:	fb00 6002 	mla	r0, r0, r2, r6
 80039b0:	f000 fba0 	bl	80040f4 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80039b4:	4620      	mov	r0, r4
		return xReturn;
 80039b6:	e003      	b.n	80039c0 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 80039be:	2001      	movs	r0, #1
	}
 80039c0:	b003      	add	sp, #12
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80039c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80039ca:	42a0      	cmp	r0, r4
 80039cc:	bf2c      	ite	cs
 80039ce:	2000      	movcs	r0, #0
 80039d0:	2001      	movcc	r0, #1
 80039d2:	e7f5      	b.n	80039c0 <xTaskPriorityInherit+0x78>
 80039d4:	200025e0 	.word	0x200025e0
 80039d8:	200025ec 	.word	0x200025ec
 80039dc:	20002688 	.word	0x20002688

080039e0 <xTaskPriorityDisinherit>:
	{
 80039e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80039e2:	4604      	mov	r4, r0
 80039e4:	b910      	cbnz	r0, 80039ec <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 80039e6:	2000      	movs	r0, #0
	}
 80039e8:	b003      	add	sp, #12
 80039ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <xTaskPriorityDisinherit+0x98>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4283      	cmp	r3, r0
 80039f2:	d008      	beq.n	8003a06 <xTaskPriorityDisinherit+0x26>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	e7fe      	b.n	8003a04 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	b943      	cbnz	r3, 8003a1c <xTaskPriorityDisinherit+0x3c>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	e7fe      	b.n	8003a1a <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003a1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003a20:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a22:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003a24:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a26:	d0de      	beq.n	80039e6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1dc      	bne.n	80039e6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2c:	1d01      	adds	r1, r0, #4
 8003a2e:	4608      	mov	r0, r1
 8003a30:	9101      	str	r1, [sp, #4]
 8003a32:	f000 fb82 	bl	800413a <uxListRemove>
 8003a36:	4f11      	ldr	r7, [pc, #68]	; (8003a7c <xTaskPriorityDisinherit+0x9c>)
 8003a38:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <xTaskPriorityDisinherit+0xa0>)
 8003a3a:	9901      	ldr	r1, [sp, #4]
 8003a3c:	b950      	cbnz	r0, 8003a54 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003a40:	2614      	movs	r6, #20
 8003a42:	4346      	muls	r6, r0
 8003a44:	59bb      	ldr	r3, [r7, r6]
 8003a46:	b92b      	cbnz	r3, 8003a54 <xTaskPriorityDisinherit+0x74>
 8003a48:	6813      	ldr	r3, [r2, #0]
 8003a4a:	2501      	movs	r5, #1
 8003a4c:	4085      	lsls	r5, r0
 8003a4e:	ea23 0305 	bic.w	r3, r3, r5
 8003a52:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a56:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a58:	f1c3 0007 	rsb	r0, r3, #7
 8003a5c:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a5e:	6810      	ldr	r0, [r2, #0]
 8003a60:	2401      	movs	r4, #1
 8003a62:	fa04 f503 	lsl.w	r5, r4, r3
 8003a66:	4305      	orrs	r5, r0
 8003a68:	2014      	movs	r0, #20
 8003a6a:	fb00 7003 	mla	r0, r0, r3, r7
 8003a6e:	6015      	str	r5, [r2, #0]
 8003a70:	f000 fb40 	bl	80040f4 <vListInsertEnd>
					xReturn = pdTRUE;
 8003a74:	4620      	mov	r0, r4
		return xReturn;
 8003a76:	e7b7      	b.n	80039e8 <xTaskPriorityDisinherit+0x8>
 8003a78:	200025e0 	.word	0x200025e0
 8003a7c:	200025ec 	.word	0x200025ec
 8003a80:	20002688 	.word	0x20002688

08003a84 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8003a86:	4604      	mov	r4, r0
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d04b      	beq.n	8003b24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a8c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003a8e:	b942      	cbnz	r2, 8003aa2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003aa2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	bf38      	it	cc
 8003aa8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003aaa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d039      	beq.n	8003b24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ab0:	2a01      	cmp	r2, #1
 8003ab2:	d137      	bne.n	8003b24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4282      	cmp	r2, r0
 8003aba:	d108      	bne.n	8003ace <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	e7fe      	b.n	8003acc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ace:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ad0:	4d16      	ldr	r5, [pc, #88]	; (8003b2c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 8003ad2:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ad4:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ad6:	f04f 0214 	mov.w	r2, #20
 8003ada:	fb02 5303 	mla	r3, r2, r3, r5
 8003ade:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae0:	bfa4      	itt	ge
 8003ae2:	f1c1 0107 	rsbge	r1, r1, #7
 8003ae6:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d11b      	bne.n	8003b24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aec:	1d01      	adds	r1, r0, #4
 8003aee:	4608      	mov	r0, r1
 8003af0:	9101      	str	r1, [sp, #4]
 8003af2:	f000 fb22 	bl	800413a <uxListRemove>
 8003af6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8003af8:	4a0d      	ldr	r2, [pc, #52]	; (8003b30 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8003afa:	9901      	ldr	r1, [sp, #4]
 8003afc:	b928      	cbnz	r0, 8003b0a <vTaskPriorityDisinheritAfterTimeout+0x86>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	2001      	movs	r0, #1
 8003b02:	40a0      	lsls	r0, r4
 8003b04:	ea23 0300 	bic.w	r3, r3, r0
 8003b08:	6013      	str	r3, [r2, #0]
						prvAddTaskToReadyList( pxTCB );
 8003b0a:	6810      	ldr	r0, [r2, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	40a3      	lsls	r3, r4
 8003b10:	4303      	orrs	r3, r0
 8003b12:	2014      	movs	r0, #20
 8003b14:	fb00 5004 	mla	r0, r0, r4, r5
 8003b18:	6013      	str	r3, [r2, #0]
	}
 8003b1a:	b003      	add	sp, #12
 8003b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8003b20:	f000 bae8 	b.w	80040f4 <vListInsertEnd>
	}
 8003b24:	b003      	add	sp, #12
 8003b26:	bd30      	pop	{r4, r5, pc}
 8003b28:	200025e0 	.word	0x200025e0
 8003b2c:	200025ec 	.word	0x200025ec
 8003b30:	20002688 	.word	0x20002688

08003b34 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <pvTaskIncrementMutexHeldCount+0x14>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	b11a      	cbz	r2, 8003b42 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003b3e:	3201      	adds	r2, #1
 8003b40:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8003b42:	6818      	ldr	r0, [r3, #0]
	}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200025e0 	.word	0x200025e0

08003b4c <xTaskGenericNotify>:
	{
 8003b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4e:	460e      	mov	r6, r1
 8003b50:	4617      	mov	r7, r2
 8003b52:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8003b54:	4604      	mov	r4, r0
 8003b56:	b940      	cbnz	r0, 8003b6a <xTaskGenericNotify+0x1e>
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	e7fe      	b.n	8003b68 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8003b6a:	f000 fbad 	bl	80042c8 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8003b6e:	b10d      	cbz	r5, 8003b74 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b72:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003b74:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003b78:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003b7a:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003b7c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			switch( eAction )
 8003b80:	2f04      	cmp	r7, #4
 8003b82:	d817      	bhi.n	8003bb4 <xTaskGenericNotify+0x68>
 8003b84:	e8df f007 	tbb	[pc, r7]
 8003b88:	0507030a 	.word	0x0507030a
 8003b8c:	12          	.byte	0x12
 8003b8d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8003b8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b90:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8003b92:	65a6      	str	r6, [r4, #88]	; 0x58
 8003b94:	e002      	b.n	8003b9c <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8003b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b98:	3301      	adds	r3, #1
 8003b9a:	65a3      	str	r3, [r4, #88]	; 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003b9c:	2d01      	cmp	r5, #1
 8003b9e:	d015      	beq.n	8003bcc <xTaskGenericNotify+0x80>
	{
 8003ba0:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8003ba2:	f000 fbb1 	bl	8004308 <vPortExitCritical>
	}
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	b003      	add	sp, #12
 8003baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003bac:	2d02      	cmp	r5, #2
 8003bae:	d1f0      	bne.n	8003b92 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8003bb0:	2500      	movs	r5, #0
 8003bb2:	e7f6      	b.n	8003ba2 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003bb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	d0f0      	beq.n	8003b9c <xTaskGenericNotify+0x50>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	e7fe      	b.n	8003bca <xTaskGenericNotify+0x7e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bcc:	1d21      	adds	r1, r4, #4
 8003bce:	4608      	mov	r0, r1
 8003bd0:	9101      	str	r1, [sp, #4]
 8003bd2:	f000 fab2 	bl	800413a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003bd6:	4815      	ldr	r0, [pc, #84]	; (8003c2c <xTaskGenericNotify+0xe0>)
 8003bd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bda:	6806      	ldr	r6, [r0, #0]
 8003bdc:	9901      	ldr	r1, [sp, #4]
 8003bde:	fa05 f302 	lsl.w	r3, r5, r2
 8003be2:	4333      	orrs	r3, r6
 8003be4:	6003      	str	r3, [r0, #0]
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <xTaskGenericNotify+0xe4>)
 8003be8:	2014      	movs	r0, #20
 8003bea:	fb00 3002 	mla	r0, r0, r2, r3
 8003bee:	f000 fa81 	bl	80040f4 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bf4:	b143      	cbz	r3, 8003c08 <xTaskGenericNotify+0xbc>
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	e7fe      	b.n	8003c06 <xTaskGenericNotify+0xba>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <xTaskGenericNotify+0xe8>)
 8003c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d9c5      	bls.n	8003ba0 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8003c14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e7bb      	b.n	8003ba2 <xTaskGenericNotify+0x56>
 8003c2a:	bf00      	nop
 8003c2c:	20002688 	.word	0x20002688
 8003c30:	200025ec 	.word	0x200025ec
 8003c34:	200025e0 	.word	0x200025e0

08003c38 <vTaskNotifyGiveFromISR>:
	{
 8003c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3a:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	b940      	cbnz	r0, 8003c52 <vTaskNotifyGiveFromISR+0x1a>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	e7fe      	b.n	8003c50 <vTaskNotifyGiveFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c52:	f000 fc4d 	bl	80044f0 <vPortValidateInterruptPriority>
	__asm volatile
 8003c56:	f3ef 8711 	mrs	r7, BASEPRI
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003c6a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003c6c:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003c70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			( pxTCB->ulNotifiedValue )++;
 8003c74:	6da3      	ldr	r3, [r4, #88]	; 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c76:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8003c78:	f103 0301 	add.w	r3, r3, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003c7c:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 8003c7e:	65a3      	str	r3, [r4, #88]	; 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c80:	d12a      	bne.n	8003cd8 <vTaskNotifyGiveFromISR+0xa0>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c84:	b143      	cbz	r3, 8003c98 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	e7fe      	b.n	8003c96 <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <vTaskNotifyGiveFromISR+0xb0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	bb03      	cbnz	r3, 8003ce0 <vTaskNotifyGiveFromISR+0xa8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c9e:	1d21      	adds	r1, r4, #4
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	9101      	str	r1, [sp, #4]
 8003ca4:	f000 fa49 	bl	800413a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ca8:	4a10      	ldr	r2, [pc, #64]	; (8003cec <vTaskNotifyGiveFromISR+0xb4>)
 8003caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cac:	6810      	ldr	r0, [r2, #0]
 8003cae:	9901      	ldr	r1, [sp, #4]
 8003cb0:	409d      	lsls	r5, r3
 8003cb2:	4305      	orrs	r5, r0
 8003cb4:	6015      	str	r5, [r2, #0]
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <vTaskNotifyGiveFromISR+0xb8>)
 8003cb8:	2014      	movs	r0, #20
 8003cba:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003cbe:	f000 fa19 	bl	80040f4 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <vTaskNotifyGiveFromISR+0xbc>)
 8003cc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d904      	bls.n	8003cd8 <vTaskNotifyGiveFromISR+0xa0>
					if( pxHigherPriorityTaskWoken != NULL )
 8003cce:	2301      	movs	r3, #1
 8003cd0:	b106      	cbz	r6, 8003cd4 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003cd2:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <vTaskNotifyGiveFromISR+0xc0>)
 8003cd6:	6013      	str	r3, [r2, #0]
	__asm volatile
 8003cd8:	f387 8811 	msr	BASEPRI, r7
	}
 8003cdc:	b003      	add	sp, #12
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ce0:	4806      	ldr	r0, [pc, #24]	; (8003cfc <vTaskNotifyGiveFromISR+0xc4>)
 8003ce2:	f104 0118 	add.w	r1, r4, #24
 8003ce6:	e7ea      	b.n	8003cbe <vTaskNotifyGiveFromISR+0x86>
 8003ce8:	20002680 	.word	0x20002680
 8003cec:	20002688 	.word	0x20002688
 8003cf0:	200025ec 	.word	0x200025ec
 8003cf4:	200025e0 	.word	0x200025e0
 8003cf8:	20002704 	.word	0x20002704
 8003cfc:	200026c0 	.word	0x200026c0

08003d00 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003d02:	4c11      	ldr	r4, [pc, #68]	; (8003d48 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8003d04:	f000 fae0 	bl	80042c8 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003d08:	6825      	ldr	r5, [r4, #0]
 8003d0a:	b9bd      	cbnz	r5, 8003d3c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d0c:	4f0f      	ldr	r7, [pc, #60]	; (8003d4c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8003d0e:	4e10      	ldr	r6, [pc, #64]	; (8003d50 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8003d10:	4638      	mov	r0, r7
 8003d12:	f000 f9e1 	bl	80040d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f9de 	bl	80040d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8003d20:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d24:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8003d26:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d28:	2020      	movs	r0, #32
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <prvCheckForValidListAndQueue+0x60>)
 8003d2c:	9500      	str	r5, [sp, #0]
 8003d2e:	f7fe fd70 	bl	8002812 <xQueueGenericCreateStatic>
 8003d32:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d34:	b110      	cbz	r0, 8003d3c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d36:	490b      	ldr	r1, [pc, #44]	; (8003d64 <prvCheckForValidListAndQueue+0x64>)
 8003d38:	f7ff f88e 	bl	8002e58 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8003d3c:	b003      	add	sp, #12
 8003d3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8003d42:	f000 bae1 	b.w	8004308 <vPortExitCritical>
 8003d46:	bf00      	nop
 8003d48:	2000298c 	.word	0x2000298c
 8003d4c:	20002910 	.word	0x20002910
 8003d50:	20002924 	.word	0x20002924
 8003d54:	20002708 	.word	0x20002708
 8003d58:	20002710 	.word	0x20002710
 8003d5c:	2000270c 	.word	0x2000270c
 8003d60:	2000293c 	.word	0x2000293c
 8003d64:	08008d91 	.word	0x08008d91

08003d68 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8003d68:	4291      	cmp	r1, r2
{
 8003d6a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d6c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d6e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003d70:	d80a      	bhi.n	8003d88 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	6983      	ldr	r3, [r0, #24]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d20d      	bcs.n	8003d96 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <prvInsertTimerInActiveList+0x34>)
 8003d7c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	f000 f9c4 	bl	800410c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003d84:	2000      	movs	r0, #0
}
 8003d86:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d201      	bcs.n	8003d90 <prvInsertTimerInActiveList+0x28>
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	d202      	bcs.n	8003d96 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <prvInsertTimerInActiveList+0x38>)
 8003d92:	1d01      	adds	r1, r0, #4
 8003d94:	e7f3      	b.n	8003d7e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8003d96:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8003d98:	e7f5      	b.n	8003d86 <prvInsertTimerInActiveList+0x1e>
 8003d9a:	bf00      	nop
 8003d9c:	2000270c 	.word	0x2000270c
 8003da0:	20002708 	.word	0x20002708

08003da4 <xTimerCreateTimerTask>:
{
 8003da4:	b510      	push	{r4, lr}
 8003da6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003da8:	f7ff ffaa 	bl	8003d00 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <xTimerCreateTimerTask+0x54>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b1b3      	cbz	r3, 8003de0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003db2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003db4:	aa07      	add	r2, sp, #28
 8003db6:	a906      	add	r1, sp, #24
 8003db8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003dba:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003dbe:	f7fc fc27 	bl	8000610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003dc2:	9b05      	ldr	r3, [sp, #20]
 8003dc4:	9302      	str	r3, [sp, #8]
 8003dc6:	9b06      	ldr	r3, [sp, #24]
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2302      	movs	r3, #2
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	9a07      	ldr	r2, [sp, #28]
 8003dd0:	490a      	ldr	r1, [pc, #40]	; (8003dfc <xTimerCreateTimerTask+0x58>)
 8003dd2:	480b      	ldr	r0, [pc, #44]	; (8003e00 <xTimerCreateTimerTask+0x5c>)
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	f7ff fa0a 	bl	80031ee <xTaskCreateStatic>
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <xTimerCreateTimerTask+0x60>)
 8003ddc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003dde:	b940      	cbnz	r0, 8003df2 <xTimerCreateTimerTask+0x4e>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003df0:	e7fe      	b.n	8003df0 <xTimerCreateTimerTask+0x4c>
}
 8003df2:	2001      	movs	r0, #1
 8003df4:	b008      	add	sp, #32
 8003df6:	bd10      	pop	{r4, pc}
 8003df8:	2000298c 	.word	0x2000298c
 8003dfc:	08008d96 	.word	0x08008d96
 8003e00:	08003f0d 	.word	0x08003f0d
 8003e04:	20002990 	.word	0x20002990

08003e08 <xTimerGenericCommand>:
{
 8003e08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003e0a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8003e0c:	4604      	mov	r4, r0
{
 8003e0e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8003e10:	b940      	cbnz	r0, 8003e24 <xTimerGenericCommand+0x1c>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	e7fe      	b.n	8003e22 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8003e24:	4d0d      	ldr	r5, [pc, #52]	; (8003e5c <xTimerGenericCommand+0x54>)
 8003e26:	6828      	ldr	r0, [r5, #0]
 8003e28:	b180      	cbz	r0, 8003e4c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e2a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e2c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e30:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e32:	dc0d      	bgt.n	8003e50 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e34:	f7ff fd78 	bl	8003928 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e38:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e3a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e3c:	bf08      	it	eq
 8003e3e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e40:	6828      	ldr	r0, [r5, #0]
 8003e42:	bf18      	it	ne
 8003e44:	461a      	movne	r2, r3
 8003e46:	4669      	mov	r1, sp
 8003e48:	f7fe fd31 	bl	80028ae <xQueueGenericSend>
}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e50:	2300      	movs	r3, #0
 8003e52:	4669      	mov	r1, sp
 8003e54:	f7fe fe19 	bl	8002a8a <xQueueGenericSendFromISR>
 8003e58:	e7f8      	b.n	8003e4c <xTimerGenericCommand+0x44>
 8003e5a:	bf00      	nop
 8003e5c:	2000298c 	.word	0x2000298c

08003e60 <prvSampleTimeNow>:
{
 8003e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8003e64:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003f08 <prvSampleTimeNow+0xa8>
{
 8003e68:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8003e6a:	f7ff faed 	bl	8003448 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e72:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8003e74:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8003e76:	d940      	bls.n	8003efa <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e78:	4f21      	ldr	r7, [pc, #132]	; (8003f00 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e7a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	b95a      	cbnz	r2, 8003e9c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <prvSampleTimeNow+0xa4>)
 8003e86:	6811      	ldr	r1, [r2, #0]
 8003e88:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8003e8a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
}
 8003e8e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8003e90:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8003e92:	f8c8 5000 	str.w	r5, [r8]
}
 8003e96:	b004      	add	sp, #16
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ea0:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea4:	1d21      	adds	r1, r4, #4
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	9103      	str	r1, [sp, #12]
 8003eaa:	f000 f946 	bl	800413a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eae:	6a23      	ldr	r3, [r4, #32]
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	f013 0f04 	tst.w	r3, #4
 8003ebe:	d0de      	beq.n	8003e7e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ec0:	69a3      	ldr	r3, [r4, #24]
 8003ec2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8003ec4:	459a      	cmp	sl, r3
 8003ec6:	d205      	bcs.n	8003ed4 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ec8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003eca:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ecc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ece:	f000 f91d 	bl	800410c <vListInsert>
 8003ed2:	e7d4      	b.n	8003e7e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8cd 9000 	str.w	r9, [sp]
 8003eda:	4652      	mov	r2, sl
 8003edc:	4619      	mov	r1, r3
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff ff92 	bl	8003e08 <xTimerGenericCommand>
				configASSERT( xResult );
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1ca      	bne.n	8003e7e <prvSampleTimeNow+0x1e>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	e7fe      	b.n	8003ef8 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e7c7      	b.n	8003e8e <prvSampleTimeNow+0x2e>
 8003efe:	bf00      	nop
 8003f00:	20002708 	.word	0x20002708
 8003f04:	2000270c 	.word	0x2000270c
 8003f08:	20002938 	.word	0x20002938

08003f0c <prvTimerTask>:
{
 8003f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f10:	4d6e      	ldr	r5, [pc, #440]	; (80040cc <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f12:	4e6f      	ldr	r6, [pc, #444]	; (80040d0 <prvTimerTask+0x1c4>)
{
 8003f14:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f16:	682b      	ldr	r3, [r5, #0]
 8003f18:	f8d3 8000 	ldr.w	r8, [r3]
 8003f1c:	f1b8 0f00 	cmp.w	r8, #0
 8003f20:	d035      	beq.n	8003f8e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f28:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8003f2a:	f7ff fa85 	bl	8003438 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f2e:	a804      	add	r0, sp, #16
 8003f30:	f7ff ff96 	bl	8003e60 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003f34:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f36:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d169      	bne.n	8004010 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	d14c      	bne.n	8003fda <prvTimerTask+0xce>
 8003f40:	4540      	cmp	r0, r8
 8003f42:	d350      	bcc.n	8003fe6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8003f44:	f7ff fb1e 	bl	8003584 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f4e:	1d38      	adds	r0, r7, #4
 8003f50:	f000 f8f3 	bl	800413a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f58:	0758      	lsls	r0, r3, #29
 8003f5a:	d51a      	bpl.n	8003f92 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	4643      	mov	r3, r8
 8003f60:	464a      	mov	r2, r9
 8003f62:	4441      	add	r1, r8
 8003f64:	4638      	mov	r0, r7
 8003f66:	f7ff feff 	bl	8003d68 <prvInsertTimerInActiveList>
 8003f6a:	b1b0      	cbz	r0, 8003f9a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f6c:	9400      	str	r4, [sp, #0]
 8003f6e:	4623      	mov	r3, r4
 8003f70:	4642      	mov	r2, r8
 8003f72:	4621      	mov	r1, r4
 8003f74:	4638      	mov	r0, r7
 8003f76:	f7ff ff47 	bl	8003e08 <xTimerGenericCommand>
			configASSERT( xResult );
 8003f7a:	b970      	cbnz	r0, 8003f9a <prvTimerTask+0x8e>
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	e7fe      	b.n	8003f8c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f8e:	2401      	movs	r4, #1
 8003f90:	e7cb      	b.n	8003f2a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fa0:	6830      	ldr	r0, [r6, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	a904      	add	r1, sp, #16
 8003fa6:	f7fe fdd2 	bl	8002b4e <xQueueReceive>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d0b3      	beq.n	8003f16 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fae:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fb0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db2f      	blt.n	8004016 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fb6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fb8:	6963      	ldr	r3, [r4, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d132      	bne.n	8004024 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fbe:	a803      	add	r0, sp, #12
 8003fc0:	f7ff ff4e 	bl	8003e60 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8003fc4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fc6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d8e9      	bhi.n	8003fa0 <prvTimerTask+0x94>
 8003fcc:	e8df f003 	tbb	[pc, r3]
 8003fd0:	572e2e2e 	.word	0x572e2e2e
 8003fd4:	2e2e765e 	.word	0x2e2e765e
 8003fd8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <prvTimerTask+0x1c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681c      	ldr	r4, [r3, #0]
 8003fe0:	fab4 f484 	clz	r4, r4
 8003fe4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fe6:	6830      	ldr	r0, [r6, #0]
 8003fe8:	4622      	mov	r2, r4
 8003fea:	eba8 0109 	sub.w	r1, r8, r9
 8003fee:	f7fe ff6a 	bl	8002ec6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ff2:	f7ff fac7 	bl	8003584 <xTaskResumeAll>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d1d2      	bne.n	8003fa0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8003ffa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	e7c7      	b.n	8003fa0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8004010:	f7ff fab8 	bl	8003584 <xTaskResumeAll>
}
 8004014:	e7c4      	b.n	8003fa0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004016:	9b05      	ldr	r3, [sp, #20]
 8004018:	9907      	ldr	r1, [sp, #28]
 800401a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	dbbe      	blt.n	8003fa0 <prvTimerTask+0x94>
 8004022:	e7c8      	b.n	8003fb6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004024:	1d20      	adds	r0, r4, #4
 8004026:	f000 f888 	bl	800413a <uxListRemove>
 800402a:	e7c8      	b.n	8003fbe <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800402c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004030:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800403a:	9b05      	ldr	r3, [sp, #20]
 800403c:	4620      	mov	r0, r4
 800403e:	4419      	add	r1, r3
 8004040:	f7ff fe92 	bl	8003d68 <prvInsertTimerInActiveList>
 8004044:	2800      	cmp	r0, #0
 8004046:	d0ab      	beq.n	8003fa0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004048:	6a23      	ldr	r3, [r4, #32]
 800404a:	4620      	mov	r0, r4
 800404c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800404e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004052:	0759      	lsls	r1, r3, #29
 8004054:	d5a4      	bpl.n	8003fa0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004056:	69a2      	ldr	r2, [r4, #24]
 8004058:	9905      	ldr	r1, [sp, #20]
 800405a:	2300      	movs	r3, #0
 800405c:	440a      	add	r2, r1
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff fed0 	bl	8003e08 <xTimerGenericCommand>
							configASSERT( xResult );
 8004068:	2800      	cmp	r0, #0
 800406a:	d199      	bne.n	8003fa0 <prvTimerTask+0x94>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	e7fe      	b.n	800407c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800407e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800408a:	e789      	b.n	8003fa0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800408c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004098:	9905      	ldr	r1, [sp, #20]
 800409a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800409c:	b941      	cbnz	r1, 80040b0 <prvTimerTask+0x1a4>
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	e7fe      	b.n	80040ae <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040b0:	4603      	mov	r3, r0
 80040b2:	4401      	add	r1, r0
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7ff fe57 	bl	8003d68 <prvInsertTimerInActiveList>
					break;
 80040ba:	e771      	b.n	8003fa0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80040c0:	079a      	lsls	r2, r3, #30
 80040c2:	d4de      	bmi.n	8004082 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 f877 	bl	80041b8 <vPortFree>
 80040ca:	e769      	b.n	8003fa0 <prvTimerTask+0x94>
 80040cc:	20002708 	.word	0x20002708
 80040d0:	2000298c 	.word	0x2000298c
 80040d4:	2000270c 	.word	0x2000270c

080040d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ec:	4770      	bx	lr

080040ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040f2:	4770      	bx	lr

080040f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80040f4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004100:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004102:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004104:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004106:	3301      	adds	r3, #1
 8004108:	6003      	str	r3, [r0, #0]
}
 800410a:	4770      	bx	lr

0800410c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800410c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800410e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004110:	1c63      	adds	r3, r4, #1
 8004112:	d10a      	bne.n	800412a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004114:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800411a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800411c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800411e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004120:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004122:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004124:	3301      	adds	r3, #1
 8004126:	6003      	str	r3, [r0, #0]
}
 8004128:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800412a:	f100 0208 	add.w	r2, r0, #8
 800412e:	4613      	mov	r3, r2
 8004130:	6852      	ldr	r2, [r2, #4]
 8004132:	6815      	ldr	r5, [r2, #0]
 8004134:	42a5      	cmp	r5, r4
 8004136:	d9fa      	bls.n	800412e <vListInsert+0x22>
 8004138:	e7ed      	b.n	8004116 <vListInsert+0xa>

0800413a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800413a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800413e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004140:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004142:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004148:	bf08      	it	eq
 800414a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800414c:	2200      	movs	r2, #0
 800414e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	3a01      	subs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004156:	6818      	ldr	r0, [r3, #0]
}
 8004158:	4770      	bx	lr
	...

0800415c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800415c:	b538      	push	{r3, r4, r5, lr}
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800415e:	0743      	lsls	r3, r0, #29
{
 8004160:	4604      	mov	r4, r0
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004162:	bf1c      	itt	ne
 8004164:	f020 0407 	bicne.w	r4, r0, #7
 8004168:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
 800416a:	f7ff f965 	bl	8003438 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800416e:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <pvPortMalloc+0x50>)
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	b91b      	cbnz	r3, 800417c <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <pvPortMalloc+0x54>)
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800417c:	490d      	ldr	r1, [pc, #52]	; (80041b4 <pvPortMalloc+0x58>)
 800417e:	680b      	ldr	r3, [r1, #0]
 8004180:	f647 70f7 	movw	r0, #32759	; 0x7ff7
 8004184:	441c      	add	r4, r3
 8004186:	4284      	cmp	r4, r0
 8004188:	d905      	bls.n	8004196 <pvPortMalloc+0x3a>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800418a:	f7ff f9fb 	bl	8003584 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800418e:	f7fc fa32 	bl	80005f6 <vApplicationMallocFailedHook>
 8004192:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
 8004194:	e008      	b.n	80041a8 <pvPortMalloc+0x4c>
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004196:	42a3      	cmp	r3, r4
 8004198:	d2f7      	bcs.n	800418a <pvPortMalloc+0x2e>
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800419a:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
 800419c:	600c      	str	r4, [r1, #0]
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800419e:	441d      	add	r5, r3
	( void ) xTaskResumeAll();
 80041a0:	f7ff f9f0 	bl	8003584 <xTaskResumeAll>
		if( pvReturn == NULL )
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	d0f2      	beq.n	800418e <pvPortMalloc+0x32>
}
 80041a8:	4628      	mov	r0, r5
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20002994 	.word	0x20002994
 80041b0:	200029a0 	.word	0x200029a0
 80041b4:	2000a998 	.word	0x2000a998

080041b8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80041b8:	b140      	cbz	r0, 80041cc <vPortFree+0x14>
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	e7fe      	b.n	80041ca <vPortFree+0x12>
}
 80041cc:	4770      	bx	lr
	...

080041d0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041d0:	4808      	ldr	r0, [pc, #32]	; (80041f4 <prvPortStartFirstTask+0x24>)
 80041d2:	6800      	ldr	r0, [r0, #0]
 80041d4:	6800      	ldr	r0, [r0, #0]
 80041d6:	f380 8808 	msr	MSP, r0
 80041da:	f04f 0000 	mov.w	r0, #0
 80041de:	f380 8814 	msr	CONTROL, r0
 80041e2:	b662      	cpsie	i
 80041e4:	b661      	cpsie	f
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	df00      	svc	0
 80041f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041f2:	0000      	.short	0x0000
 80041f4:	e000ed08 	.word	0xe000ed08

080041f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004208 <vPortEnableVFP+0x10>
 80041fc:	6801      	ldr	r1, [r0, #0]
 80041fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004202:	6001      	str	r1, [r0, #0]
 8004204:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004206:	0000      	.short	0x0000
 8004208:	e000ed88 	.word	0xe000ed88

0800420c <prvTaskExitError>:
{
 800420c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <prvTaskExitError+0x3c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	d008      	beq.n	800422c <prvTaskExitError+0x20>
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	e7fe      	b.n	800422a <prvTaskExitError+0x1e>
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800423c:	9b01      	ldr	r3, [sp, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0fc      	beq.n	800423c <prvTaskExitError+0x30>
}
 8004242:	b002      	add	sp, #8
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800424c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004250:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <pxPortInitialiseStack+0x28>)
 8004256:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800425a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800425e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004262:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004266:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800426a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800426e:	3844      	subs	r0, #68	; 0x44
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	0800420d 	.word	0x0800420d
	...

08004280 <SVC_Handler>:
	__asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	4770      	bx	lr
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst2>:
 80042a0:	200025e0 	.word	0x200025e0

080042a4 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <vPortEndScheduler+0x20>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ac:	d008      	beq.n	80042c0 <vPortEndScheduler+0x1c>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	e7fe      	b.n	80042be <vPortEndScheduler+0x1a>
}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000000c 	.word	0x2000000c

080042c8 <vPortEnterCritical>:
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80042d8:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <vPortEnterCritical+0x3c>)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80042de:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80042e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80042e2:	d10e      	bne.n	8004302 <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042e8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	b143      	cbz	r3, 8004302 <vPortEnterCritical+0x3a>
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	e7fe      	b.n	8004300 <vPortEnterCritical+0x38>
}
 8004302:	4770      	bx	lr
 8004304:	2000000c 	.word	0x2000000c

08004308 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004308:	4a08      	ldr	r2, [pc, #32]	; (800432c <vPortExitCritical+0x24>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b943      	cbnz	r3, 8004320 <vPortExitCritical+0x18>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	e7fe      	b.n	800431e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004320:	3b01      	subs	r3, #1
 8004322:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004324:	b90b      	cbnz	r3, 800432a <vPortExitCritical+0x22>
	__asm volatile
 8004326:	f383 8811 	msr	BASEPRI, r3
}
 800432a:	4770      	bx	lr
 800432c:	2000000c 	.word	0x2000000c

08004330 <PendSV_Handler>:
	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f01e 0f10 	tst.w	lr, #16
 8004340:	bf08      	it	eq
 8004342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	6010      	str	r0, [r2, #0]
 800434c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004354:	f380 8811 	msr	BASEPRI, r0
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f7ff f9cc 	bl	80036fc <vTaskSwitchContext>
 8004364:	f04f 0000 	mov.w	r0, #0
 8004368:	f380 8811 	msr	BASEPRI, r0
 800436c:	bc09      	pop	{r0, r3}
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	6808      	ldr	r0, [r1, #0]
 8004372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004376:	f01e 0f10 	tst.w	lr, #16
 800437a:	bf08      	it	eq
 800437c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004380:	f380 8809 	msr	PSP, r0
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst>:
 8004390:	200025e0 	.word	0x200025e0

08004394 <xPortSysTickHandler>:
{
 8004394:	b508      	push	{r3, lr}
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80043a6:	f7ff f855 	bl	8003454 <xTaskIncrementTick>
 80043aa:	b128      	cbz	r0, 80043b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80043b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80043b8:	2300      	movs	r3, #0
 80043ba:	f383 8811 	msr	BASEPRI, r3
}
 80043be:	bd08      	pop	{r3, pc}

080043c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80043c4:	2300      	movs	r3, #0
 80043c6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <vPortSetupTimerInterrupt+0x20>)
 80043cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043da:	2307      	movs	r3, #7
 80043dc:	6113      	str	r3, [r2, #16]
}
 80043de:	4770      	bx	lr
 80043e0:	20000000 	.word	0x20000000

080043e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80043e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ea:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80043ee:	4a3a      	ldr	r2, [pc, #232]	; (80044d8 <xPortStartScheduler+0xf4>)
 80043f0:	4291      	cmp	r1, r2
 80043f2:	d108      	bne.n	8004406 <xPortStartScheduler+0x22>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	e7fe      	b.n	8004404 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004406:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800440a:	4b34      	ldr	r3, [pc, #208]	; (80044dc <xPortStartScheduler+0xf8>)
 800440c:	429a      	cmp	r2, r3
 800440e:	d108      	bne.n	8004422 <xPortStartScheduler+0x3e>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	e7fe      	b.n	8004420 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <xPortStartScheduler+0xfc>)
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800442a:	22ff      	movs	r2, #255	; 0xff
 800442c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800442e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004430:	4a2c      	ldr	r2, [pc, #176]	; (80044e4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004438:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800443c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004440:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004442:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <xPortStartScheduler+0x104>)
 8004444:	2307      	movs	r3, #7
 8004446:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004448:	2100      	movs	r1, #0
 800444a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800444e:	0600      	lsls	r0, r0, #24
 8004450:	f103 34ff 	add.w	r4, r3, #4294967295
 8004454:	d40c      	bmi.n	8004470 <xPortStartScheduler+0x8c>
 8004456:	b111      	cbz	r1, 800445e <xPortStartScheduler+0x7a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004458:	2b03      	cmp	r3, #3
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	d011      	beq.n	8004482 <xPortStartScheduler+0x9e>
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	e7fe      	b.n	800446e <xPortStartScheduler+0x8a>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004470:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f88d 3003 	strb.w	r3, [sp, #3]
 800447c:	2101      	movs	r1, #1
 800447e:	4623      	mov	r3, r4
 8004480:	e7e3      	b.n	800444a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004486:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004488:	9b01      	ldr	r3, [sp, #4]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800448c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004490:	b2db      	uxtb	r3, r3
 8004492:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004494:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800449c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80044a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80044ac:	f7ff ff88 	bl	80043c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <xPortStartScheduler+0x108>)
 80044b2:	2500      	movs	r5, #0
 80044b4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80044b6:	f7ff fe9f 	bl	80041f8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044ba:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80044be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044c2:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80044c6:	f7ff fe83 	bl	80041d0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80044ca:	f7ff f917 	bl	80036fc <vTaskSwitchContext>
	prvTaskExitError();
 80044ce:	f7ff fe9d 	bl	800420c <prvTaskExitError>
}
 80044d2:	4628      	mov	r0, r5
 80044d4:	b003      	add	sp, #12
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	410fc271 	.word	0x410fc271
 80044dc:	410fc270 	.word	0x410fc270
 80044e0:	e000e400 	.word	0xe000e400
 80044e4:	2000a99c 	.word	0x2000a99c
 80044e8:	2000a9a0 	.word	0x2000a9a0
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044f4:	2b0f      	cmp	r3, #15
 80044f6:	d90e      	bls.n	8004516 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <vPortValidateInterruptPriority+0x50>)
 80044fa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044fc:	4a11      	ldr	r2, [pc, #68]	; (8004544 <vPortValidateInterruptPriority+0x54>)
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d908      	bls.n	8004516 <vPortValidateInterruptPriority+0x26>
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	e7fe      	b.n	8004514 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004516:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <vPortValidateInterruptPriority+0x58>)
 800451c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004526:	4293      	cmp	r3, r2
 8004528:	d908      	bls.n	800453c <vPortValidateInterruptPriority+0x4c>
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	e7fe      	b.n	800453a <vPortValidateInterruptPriority+0x4a>
	}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e3f0 	.word	0xe000e3f0
 8004544:	2000a99c 	.word	0x2000a99c
 8004548:	2000a9a0 	.word	0x2000a9a0

0800454c <_ZN3Cpl6System10FatalError4logfEPKcz>:
    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
}


void FatalError::logf( const char* format, ... )
{
 800454c:	b40f      	push	{r0, r1, r2, r3}
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
    va_list ap;
    va_start( ap, format );
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	607b      	str	r3, [r7, #4]

    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800455a:	f7ff f9e5 	bl	8003928 <xTaskGetSchedulerState>
 800455e:	4603      	mov	r3, r0
 8004560:	2b02      	cmp	r3, #2
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d011      	beq.n	8004592 <_ZN3Cpl6System10FatalError4logfEPKcz+0x46>
    {
        buffer_ = EXTRA_INFO;
 800456e:	490e      	ldr	r1, [pc, #56]	; (80045a8 <_ZN3Cpl6System10FatalError4logfEPKcz+0x5c>)
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 8004572:	f001 fc43 	bl	8005dfc <_ZN3Cpl4Text7String_aSEPKc>
        buffer_.vformatAppend( format, ap );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6939      	ldr	r1, [r7, #16]
 800457a:	480c      	ldr	r0, [pc, #48]	; (80045ac <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 800457c:	f001 f914 	bl	80057a8 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>
        Cpl::System::Trace::getDefaultOutputStream_()->write( buffer_ );
 8004580:	f000 f8cc 	bl	800471c <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8004584:	4603      	mov	r3, r0
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	3214      	adds	r2, #20
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	4907      	ldr	r1, [pc, #28]	; (80045ac <_ZN3Cpl6System10FatalError4logfEPKcz+0x60>)
 800458e:	4618      	mov	r0, r3
 8004590:	4790      	blx	r2
    }

    Shutdown::failure( OPTION_CPL_SYSTEM_FATAL_ERROR_EXIT_CODE );
 8004592:	2002      	movs	r0, #2
 8004594:	f002 fa17 	bl	80069c6 <_ZN3Cpl6System8Shutdown7failureEi>
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a2:	b004      	add	sp, #16
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	08008974 	.word	0x08008974
 80045ac:	2000a9a8 	.word	0x2000a9a8

080045b0 <_ZN3Cpl4Text7FStringILi128EEC1EPKc>:
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 0210 	add.w	r2, r3, #16
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	f000 fbb7 	bl	8004d38 <_ZN3Cpl4Text8FString_C1EPKcPci>
 80045ca:	4a04      	ldr	r2, [pc, #16]	; (80045dc <_ZN3Cpl4Text7FStringILi128EEC1EPKc+0x2c>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	08008da8 	.word	0x08008da8

080045e0 <_ZN3Cpl4Text7FStringILi128EED1Ev>:
class FString : public FString_
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	4a05      	ldr	r2, [pc, #20]	; (8004600 <_ZN3Cpl4Text7FStringILi128EED1Ev+0x20>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fc ff41 	bl	8001478 <_ZN3Cpl4Text8FString_D1Ev>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08008da8 	.word	0x08008da8

08004604 <_ZN3Cpl4Text7FStringILi128EED0Ev>:
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ffe7 	bl	80045e0 <_ZN3Cpl4Text7FStringILi128EED1Ev>
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f003 ff9b 	bl	800854e <_ZdlPv>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <_Z41__static_initialization_and_destruction_0ii>:
}

void FatalError::logRaw( const char* message, size_t value )
{
    log( message, value );
}
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d10b      	bne.n	800464c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800463a:	4293      	cmp	r3, r2
 800463c:	d106      	bne.n	800464c <_Z41__static_initialization_and_destruction_0ii+0x28>
 800463e:	480c      	ldr	r0, [pc, #48]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004640:	f7fd f84c 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Text::FString<CPL_SYSTEM_FREERTOS_FATAL_ERROR_BUFSIZE> buffer_;
 8004644:	490b      	ldr	r1, [pc, #44]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004646:	480c      	ldr	r0, [pc, #48]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004648:	f7ff ffb2 	bl	80045b0 <_ZN3Cpl4Text7FStringILi128EEC1EPKc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	4293      	cmp	r3, r2
 800465a:	d105      	bne.n	8004668 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800465c:	4806      	ldr	r0, [pc, #24]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800465e:	f7ff ffbf 	bl	80045e0 <_ZN3Cpl4Text7FStringILi128EED1Ev>
 8004662:	4803      	ldr	r0, [pc, #12]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004664:	f7fd f845 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	2000a9a4 	.word	0x2000a9a4
 8004674:	08008994 	.word	0x08008994
 8004678:	2000a9a8 	.word	0x2000a9a8

0800467c <_GLOBAL__sub_I__ZN3Cpl6System10FatalError3logEPKc>:
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
 8004680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004684:	2001      	movs	r0, #1
 8004686:	f7ff ffcd 	bl	8004624 <_Z41__static_initialization_and_destruction_0ii>
 800468a:	bd80      	pop	{r7, pc}

0800468c <_GLOBAL__sub_D__ZN3Cpl6System10FatalError3logEPKc>:
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
 8004690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff ffc5 	bl	8004624 <_Z41__static_initialization_and_destruction_0ii>
 800469a:	bd80      	pop	{r7, pc}

0800469c <_ZN3Cpl2Io5CloseD1Ev>:
    virtual void close() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Close() {}
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <_ZN3Cpl2Io5CloseD1Ev+0x1c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	08008ed4 	.word	0x08008ed4

080046bc <_ZN3Cpl2Io5CloseD0Ev>:
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ffe9 	bl	800469c <_ZN3Cpl2Io5CloseD1Ev>
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f003 ff3f 	bl	800854e <_ZdlPv>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <_ZN3Cpl2Io5IsEosD1Ev>:
    virtual bool isEos() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~IsEos() {}
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <_ZN3Cpl2Io5IsEosD1Ev+0x1c>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	08008ec0 	.word	0x08008ec0

080046fc <_ZN3Cpl2Io5IsEosD0Ev>:
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ffe9 	bl	80046dc <_ZN3Cpl2Io5IsEosD1Ev>
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f003 ff1f 	bl	800854e <_ZdlPv>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
static Cpl::Io::Stdio::StdOut fd_;


////////////////////////////////////////////////////////////////////////////////
Cpl::Io::Output* Trace::getDefaultOutputStream_( void ) noexcept
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
    return &fd_;
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev+0x10>)
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	2000aa40 	.word	0x2000aa40

08004730 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>:

    NOTE: Many instances of this class may be created - even
          though there is only ONE stdout.  This is OK because
          all instance reference the systems/platform 'stdout'
 */
class StdOut : public Output_
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x44>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	330c      	adds	r3, #12
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x48>)
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x44>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0b      	ldr	r2, [pc, #44]	; (800477c <_ZN3Cpl2Io5Stdio6StdOutD1Ev+0x4c>)
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f905 	bl	8004962 <_ZN3Cpl2Io5Stdio7Output_D2Ev>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffbe 	bl	80046dc <_ZN3Cpl2Io5IsEosD1Ev>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	330c      	adds	r3, #12
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff ff99 	bl	800469c <_ZN3Cpl2Io5CloseD1Ev>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	08008ef8 	.word	0x08008ef8
 8004778:	08008f38 	.word	0x08008f38
 800477c:	08008f48 	.word	0x08008f48

08004780 <_ZTv0_n16_N3Cpl2Io5Stdio6StdOutD1Ev>:
 8004780:	f8d0 c000 	ldr.w	ip, [r0]
 8004784:	f1ac 0c10 	sub.w	ip, ip, #16
 8004788:	f8dc c000 	ldr.w	ip, [ip]
 800478c:	4460      	add	r0, ip
 800478e:	e7cf      	b.n	8004730 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>

08004790 <_Z41__static_initialization_and_destruction_0ii>:
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10a      	bne.n	80047b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d105      	bne.n	80047b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80047aa:	480c      	ldr	r0, [pc, #48]	; (80047dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80047ac:	f7fc ff96 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Io::Stdio::StdOut fd_;
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80047b2:	f000 f9ad 	bl	8004b10 <_ZN3Cpl2Io5Stdio6StdOutC1Ev>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d105      	bne.n	80047d2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80047c6:	4806      	ldr	r0, [pc, #24]	; (80047e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80047c8:	f7ff ffb2 	bl	8004730 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>
 80047cc:	4803      	ldr	r0, [pc, #12]	; (80047dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80047ce:	f7fc ff90 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2000aa3c 	.word	0x2000aa3c
 80047e0:	2000aa40 	.word	0x2000aa40

080047e4 <_GLOBAL__sub_I__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7ff ffcf 	bl	8004790 <_Z41__static_initialization_and_destruction_0ii>
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_GLOBAL__sub_D__ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>:
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7ff ffc7 	bl	8004790 <_Z41__static_initialization_and_destruction_0ii>
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZN3Cpl2Io6OutputD2Ev>:
    virtual void flush() = 0;


public:
    /// Lets the make the destructor virtual
    virtual ~Output() {}
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3b14      	subs	r3, #20
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	6852      	ldr	r2, [r2, #4]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3b18      	subs	r3, #24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	6892      	ldr	r2, [r2, #8]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_ZN3Cpl2Io10DescriptorC1EPv>:
public:
    /// fd Constructor
    Descriptor( int fd ):m_fd( fd ) {}

    /// handle Constructor
    Descriptor( void* ptr ):m_handlePtr( ptr ) {}
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <_ZN3Cpl2Io5CloseC1Ev>:
class Close : public Cpl::Container::Item
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc fb53 	bl	8000f24 <_ZN3Cpl9Container4ItemC1Ev>
 800487e:	4a04      	ldr	r2, [pc, #16]	; (8004890 <_ZN3Cpl2Io5CloseC1Ev+0x24>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08008ed4 	.word	0x08008ed4

08004894 <_ZN3Cpl2Io5IsEosC1Ev>:
class IsEos 
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <_ZN3Cpl2Io5IsEosC1Ev+0x1c>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	08008ec0 	.word	0x08008ec0

080048b4 <_ZN3Cpl2Io6OutputC2Ev>:
class Output : virtual public Close, virtual public IsEos
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3b14      	subs	r3, #20
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	6852      	ldr	r2, [r2, #4]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3b18      	subs	r3, #24
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <_ZN3Cpl2Io5Stdio7Output_C2EPv>:
    , m_outEos( false )
{
    Cpl::System::FatalError::logf( "Cpl:Io::Stdio::Output_().  Constructed with an 'int' instead of a 'FILE*'." );
}

Output_::Output_( void* handle )
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
    : m_outFd( handle )
    , m_outEos( false )
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff ffcf 	bl	80048b4 <_ZN3Cpl2Io6OutputC2Ev>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3b14      	subs	r3, #20
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	6912      	ldr	r2, [r2, #16]
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b18      	subs	r3, #24
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	6952      	ldr	r2, [r2, #20]
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3304      	adds	r3, #4
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff7d 	bl	800484c <_ZN3Cpl2Io10DescriptorC1EPv>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	721a      	strb	r2, [r3, #8]
{
}
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <_ZN3Cpl2Io5Stdio7Output_D2Ev>:
    : m_outFd( 0 )
    , m_outEos( false )
{
}

Output_::~Output_( void )
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3b14      	subs	r3, #20
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	6912      	ldr	r2, [r2, #16]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b18      	subs	r3, #24
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	6952      	ldr	r2, [r2, #20]
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f7ff ff2d 	bl	8004804 <_ZN3Cpl2Io6OutputD2Ev>
{
}
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi>:
}


//////////////////////
bool Output_::write( const void* buffer, int maxBytes, int& bytesWritten )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
    // Trap that the stream has been CLOSED!
    if ( !m_outFd.m_handlePtr )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x1a>
    {
        return false;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e030      	b.n	8004a30 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x7c>
    }

    // Ignore write requests of ZERO bytes
    if ( maxBytes == 0 )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x2a>
    {
        bytesWritten = 0;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
        return true;
 80049da:	2301      	movs	r3, #1
 80049dc:	e028      	b.n	8004a30 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x7c>
    }

    // perform the write
    bytesWritten = (int) fwrite( buffer, sizeof( char ), maxBytes, (FILE*) (m_outFd.m_handlePtr) );
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2101      	movs	r1, #1
 80049e6:	68b8      	ldr	r0, [r7, #8]
 80049e8:	f002 fc5a 	bl	80072a0 <fwrite>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	601a      	str	r2, [r3, #0]
	bool result  = true;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
	m_outEos     = false;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	721a      	strb	r2, [r3, #8]
	if ( bytesWritten <= 0 )
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dc0e      	bgt.n	8004a24 <_ZN3Cpl2Io5Stdio7Output_5writeEPKviRi+0x70>
	{
		m_outEos = feof( (FILE*) ( m_outFd.m_handlePtr ) )? true: false;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f002 f9e8 	bl	8006de0 <feof>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	721a      	strb	r2, [r3, #8]
		result   = false;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]
	}
	//printf( "eos=%d, ferr=%d, bytesRead=%d, result=%d\n", m_outEos, ferror( (FILE*) ( m_inFd.m_handlePtr ) ), bytesWritten, result );
	clearerr( (FILE*) ( m_outFd.m_handlePtr ) );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f002 f92b 	bl	8006c84 <clearerr>
	return result;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <_ZN3Cpl2Io5Stdio7Output_5flushEv>:

void Output_::flush()
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
    // Ignore if the stream has been CLOSED!
    if ( m_outFd.m_handlePtr )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <_ZN3Cpl2Io5Stdio7Output_5flushEv+0x1a>
    {
        fflush( (FILE*) (m_outFd.m_handlePtr) );
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 fabf 	bl	8006fd0 <fflush>
    }
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_ZN3Cpl2Io5Stdio7Output_5isEosEv>:

bool Output_::isEos()
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
	return m_outEos;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7a1b      	ldrb	r3, [r3, #8]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <_ZN3Cpl2Io5Stdio7Output_5closeEv>:

void Output_::close()
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
    if ( m_outFd.m_handlePtr )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <_ZN3Cpl2Io5Stdio7Output_5closeEv+0x20>
    {
        fclose( (FILE*) (m_outFd.m_handlePtr) );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 f9a2 	bl	8006dd0 <fclose>
        m_outFd.m_handlePtr = 0;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
    }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_ZTv0_n12_N3Cpl2Io5Stdio7Output_5closeEv>:

	/// See Cpl::Io::IsEos
	bool isEos();
	
	/// See Cpl::Io::Output
    void close();
 8004a9a:	f8d0 c000 	ldr.w	ip, [r0]
 8004a9e:	f1ac 0c0c 	sub.w	ip, ip, #12
 8004aa2:	f8dc c000 	ldr.w	ip, [ip]
 8004aa6:	4460      	add	r0, ip
 8004aa8:	f7ff bfe3 	b.w	8004a72 <_ZN3Cpl2Io5Stdio7Output_5closeEv>

08004aac <_Z41__static_initialization_and_destruction_0ii>:
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d102      	bne.n	8004acc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004ac6:	4809      	ldr	r0, [pc, #36]	; (8004aec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004ac8:	f7fc fe08 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d102      	bne.n	8004ae2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004adc:	4803      	ldr	r0, [pc, #12]	; (8004aec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004ade:	f7fc fe08 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2000aa58 	.word	0x2000aa58

08004af0 <_GLOBAL__sub_I__ZN3Cpl2Io5Stdio7Output_C2Ei>:
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004af8:	2001      	movs	r0, #1
 8004afa:	f7ff ffd7 	bl	8004aac <_Z41__static_initialization_and_destruction_0ii>
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_GLOBAL__sub_D__ZN3Cpl2Io5Stdio7Output_C2Ei>:
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7ff ffcf 	bl	8004aac <_Z41__static_initialization_and_destruction_0ii>
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN3Cpl2Io5Stdio6StdOutC1Ev>:
#include "Cpl/Io/Stdio/StdOut.h"

//
using namespace Cpl::Io::Stdio;

StdOut::StdOut()
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
    :Output_( stdout )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fea5 	bl	800486c <_ZN3Cpl2Io5CloseC1Ev>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff feb5 	bl	8004894 <_ZN3Cpl2Io5IsEosC1Ev>
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	490a      	ldr	r1, [pc, #40]	; (8004b58 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x48>)
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x4c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	461a      	mov	r2, r3
 8004b36:	f7ff fee1 	bl	80048fc <_ZN3Cpl2Io5Stdio7Output_C2EPv>
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x50>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	330c      	adds	r3, #12
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x54>)
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <_ZN3Cpl2Io5Stdio6StdOutC1Ev+0x50>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
{
}
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08008f48 	.word	0x08008f48
 8004b5c:	20000010 	.word	0x20000010
 8004b60:	08008ef8 	.word	0x08008ef8
 8004b64:	08008f38 	.word	0x08008f38

08004b68 <_ZN3Cpl2Io5Stdio6StdOut5closeEv>:

void StdOut::close()
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
    // Close the internal class handle/fd - but don't actually close the native stream
    if ( m_outFd.m_handlePtr )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <_ZN3Cpl2Io5Stdio6StdOut5closeEv+0x16>
    {
        m_outFd.m_handlePtr = 0;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	605a      	str	r2, [r3, #4]
    }
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_ZTv0_n12_N3Cpl2Io5Stdio6StdOut5closeEv>:

public:
    /** Overriding inherited behavior so as to NOT close the actual native
        stream. In general closing stdin/stdout/stderr is bad thing.
     */
    void close();
 8004b8a:	f8d0 c000 	ldr.w	ip, [r0]
 8004b8e:	f1ac 0c0c 	sub.w	ip, ip, #12
 8004b92:	f8dc c000 	ldr.w	ip, [ip]
 8004b96:	4460      	add	r0, ip
 8004b98:	f7ff bfe6 	b.w	8004b68 <_ZN3Cpl2Io5Stdio6StdOut5closeEv>

08004b9c <_ZN3Cpl2Io5Stdio6StdOutD0Ev>:
class StdOut : public Output_
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fdc3 	bl	8004730 <_ZN3Cpl2Io5Stdio6StdOutD1Ev>
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f003 fccf 	bl	800854e <_ZdlPv>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_ZTv0_n16_N3Cpl2Io5Stdio6StdOutD0Ev>:
 8004bba:	f8d0 c000 	ldr.w	ip, [r0]
 8004bbe:	f1ac 0c10 	sub.w	ip, ip, #16
 8004bc2:	f8dc c000 	ldr.w	ip, [ip]
 8004bc6:	4460      	add	r0, ip
 8004bc8:	e7e8      	b.n	8004b9c <_ZN3Cpl2Io5Stdio6StdOutD0Ev>
	...

08004bcc <_Z41__static_initialization_and_destruction_0ii>:
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d107      	bne.n	8004bec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d102      	bne.n	8004bec <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004be6:	4809      	ldr	r0, [pc, #36]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004be8:	f7fc fd78 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d107      	bne.n	8004c02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d102      	bne.n	8004c02 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bfc:	4803      	ldr	r0, [pc, #12]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004bfe:	f7fc fd78 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000aa5c 	.word	0x2000aa5c

08004c10 <_GLOBAL__sub_I__ZN3Cpl2Io5Stdio6StdOutC2Ev>:
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f7ff ffd7 	bl	8004bcc <_Z41__static_initialization_and_destruction_0ii>
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_GLOBAL__sub_D__ZN3Cpl2Io5Stdio6StdOutC2Ev>:
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7ff ffcf 	bl	8004bcc <_Z41__static_initialization_and_destruction_0ii>
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <_ZN3Cpl9Container4Item7insert_EPv>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
bool Item::insert_( void* newContainerPtr )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <_ZN3Cpl9Container4Item7insert_EPv+0x24>
    {
        FatalError::logf( "Container Error: Double Insert. item=%p, prev container=%p, new container=%p", this, m_inListPtr_, newContainerPtr );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4806      	ldr	r0, [pc, #24]	; (8004c64 <_ZN3Cpl9Container4Item7insert_EPv+0x34>)
 8004c4c:	f7ff fc7e 	bl	800454c <_ZN3Cpl6System10FatalError4logfEPKcz>
        return false;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e003      	b.n	8004c5c <_ZN3Cpl9Container4Item7insert_EPv+0x2c>
    }
    else
    {
        m_inListPtr_ = newContainerPtr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	605a      	str	r2, [r3, #4]
        return true;
 8004c5a:	2301      	movs	r3, #1
    }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	08008998 	.word	0x08008998

08004c68 <_ZNK3Cpl9Container4Item14isInContainer_EPKv>:

bool Item::isInContainer_( const void* containerPtr ) const noexcept
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
    if ( m_inListPtr_ != containerPtr )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x18>
    {
        return false;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <_ZNK3Cpl9Container4Item14isInContainer_EPKv+0x1a>
    }
    return true;
 8004c80:	2301      	movs	r3, #1
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <_ZN3Cpl9Container4Item7remove_EPS1_>:

void Item::remove_( Item* itemPtr ) noexcept
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
    if ( itemPtr )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <_ZN3Cpl9Container4Item7remove_EPS1_+0x14>
    {
        itemPtr->m_inListPtr_ = 0;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	605a      	str	r2, [r3, #4]
    }
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <_Z41__static_initialization_and_destruction_0ii>:


const char* Cpl::Text::sizetToStr( size_t num, char* dstString, size_t maxChars, unsigned base, char padChar )
{
	return convert_( num, dstString, maxChars, base, padChar, false );
}
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d102      	bne.n	8004cd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004cca:	4809      	ldr	r0, [pc, #36]	; (8004cf0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004ccc:	f7fc fd06 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004ce0:	4803      	ldr	r0, [pc, #12]	; (8004cf0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004ce2:	f7fc fd06 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	2000aa60 	.word	0x2000aa60

08004cf4 <_GLOBAL__sub_I__ZN3Cpl4Text9longToStrElPcjjc>:
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7ff ffd7 	bl	8004cb0 <_Z41__static_initialization_and_destruction_0ii>
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_GLOBAL__sub_D__ZN3Cpl4Text9longToStrElPcjjc>:
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7ff ffcf 	bl	8004cb0 <_Z41__static_initialization_and_destruction_0ii>
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <_ZL6my_minii>:
//
char FString_::m_noMemory[1] = { '\0' };


// 'ole basic min/max methods
inline static int my_min( int a, int b ) { return a < b ? a : b; }
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	da01      	bge.n	8004d2a <_ZL6my_minii+0x16>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	e000      	b.n	8004d2c <_ZL6my_minii+0x18>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_ZN3Cpl4Text8FString_C1EPKcPci>:
//inline static int max(int a, int b) { return a>b? a:b;}


///////////////////////////////
FString_::FString_( const char* string, char* internalString, int maxLen )
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
	:String_( internalString ),
	m_internalMaxlen( maxLen )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa74 	bl	8005238 <_ZN3Cpl4Text7String_C1EPc>
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <_ZN3Cpl4Text8FString_C1EPKcPci+0x88>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
{
	// Handle failed memory alloc from DFString
	if ( !internalString )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <_ZN3Cpl4Text8FString_C1EPKcPci+0x3e>
	{
		m_strPtr         = m_noMemory;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <_ZN3Cpl4Text8FString_C1EPKcPci+0x8c>)
 8004d66:	609a      	str	r2, [r3, #8]
		m_internalMaxlen = 0;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	60da      	str	r2, [r3, #12]
		m_truncated      = true;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	711a      	strb	r2, [r3, #4]
 8004d74:	e01f      	b.n	8004db6 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else if ( !string )      // trap the case of a NULL initializer string
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <_ZN3Cpl4Text8FString_C1EPKcPci+0x4c>
	{
		internalString[0] = '\0';
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e018      	b.n	8004db6 <_ZN3Cpl4Text8FString_C1EPKcPci+0x7e>
	}
	else
	{
		int inStrLen = (int) strlen( string );
 8004d84:	68b8      	ldr	r0, [r7, #8]
 8004d86:	f7fb fa55 	bl	8000234 <strlen>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	617b      	str	r3, [r7, #20]
		m_truncated  = inStrLen <= maxLen ? false : true;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bfcc      	ite	gt
 8004d96:	2301      	movgt	r3, #1
 8004d98:	2300      	movle	r3, #0
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	711a      	strb	r2, [r3, #4]
		strncpy( internalString, string, maxLen );
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f002 fd2d 	bl	8007806 <strncpy>
		internalString[maxLen] = '\0';
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
	}
}
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08009034 	.word	0x08009034
 8004dc4:	2000aa68 	.word	0x2000aa68

08004dc8 <_ZN3Cpl4Text8FString_6copyInEPKci>:


///////////////////////////////
void
FString_::copyIn( const char* src, int len )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
	// Trap null pointer for 'src' string
	if (!src)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <_ZN3Cpl4Text8FString_6copyInEPKci+0x22>
	{
		m_truncated = true;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	711a      	strb	r2, [r3, #4]
		m_strPtr[0] = '\0';
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
		m_truncated = len <= m_internalMaxlen ? false : true;
		len = my_min(m_internalMaxlen, len);
		strncpy(m_strPtr, src, len);
		m_strPtr[len] = '\0';
	}
}
 8004de8:	e01d      	b.n	8004e26 <_ZN3Cpl4Text8FString_6copyInEPKci+0x5e>
		m_truncated = len <= m_internalMaxlen ? false : true;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bfcc      	ite	gt
 8004df4:	2301      	movgt	r3, #1
 8004df6:	2300      	movle	r3, #0
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	711a      	strb	r2, [r3, #4]
		len = my_min(m_internalMaxlen, len);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff85 	bl	8004d14 <_ZL6my_minii>
 8004e0a:	6078      	str	r0, [r7, #4]
		strncpy(m_strPtr, src, len);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fcf6 	bl	8007806 <strncpy>
		m_strPtr[len] = '\0';
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZN3Cpl4Text8FString_8appendToEPKci>:

void
FString_::appendTo( const char* string, int len )
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
	// Note: Do NOTHING if null string pointer is passed
	if (string)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d028      	beq.n	8004e92 <_ZN3Cpl4Text8FString_8appendToEPKci+0x64>
	{
		int   curlen = strlen(m_strPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb f9f5 	bl	8000234 <strlen>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	61fb      	str	r3, [r7, #28]
		int   avail = m_internalMaxlen - curlen;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	61bb      	str	r3, [r7, #24]
		int   copylen = my_min(len, avail);
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ff5a 	bl	8004d14 <_ZL6my_minii>
 8004e60:	6178      	str	r0, [r7, #20]
		m_truncated = copylen == len ? false : true;
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	711a      	strb	r2, [r3, #4]
		strncat(m_strPtr, string, copylen);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f002 fc9b 	bl	80077b8 <strncat>
		m_strPtr[curlen + copylen] = '\0';
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	69f9      	ldr	r1, [r7, #28]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
	}
}
 8004e92:	bf00      	nop
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZN3Cpl4Text8FString_8insertAtEiPKc>:


void
FString_::insertAt( int insertOffset, const char* stringToInsert )
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b08c      	sub	sp, #48	; 0x30
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
	// Insure offset is NOT negative
	if ( insertOffset < 0 )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da01      	bge.n	8004eb0 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x16>
	{
		insertOffset = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
	}

	// If insertOffset is past the '\0', then simply append stringToInsert
	int curlen    = strlen( m_strPtr );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fb f9bd 	bl	8000234 <strlen>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int insertlen = strlen( stringToInsert );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb f9b8 	bl	8000234 <strlen>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	if ( insertOffset >= curlen )
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	db08      	blt.n	8004ee2 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0x48>
	{
		appendTo( stringToInsert, insertlen );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3364      	adds	r3, #100	; 0x64
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	4798      	blx	r3
		return;
 8004ee0:	e04e      	b.n	8004f80 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xe6>
	}

	// Valid insertOffset
	int avail        = m_internalMaxlen - insertOffset;     // Amount left in the buffer starting with from insertOffset
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
	int copylen      = my_min( insertlen, avail );          // Amount of stringToInsert that can be copied in
 8004eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef0:	f7ff ff10 	bl	8004d14 <_ZL6my_minii>
 8004ef4:	6238      	str	r0, [r7, #32]
	int remainderlen = avail - copylen;                     // Amount of room left after stringToInsert has been copied in
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	61fb      	str	r3, [r7, #28]
	int shiftlen     = curlen - insertOffset;               // Amount of characters needing to be shifted
 8004efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	61bb      	str	r3, [r7, #24]
	int movelen      = my_min( shiftlen, remainderlen );    // Amount of characters that can be SAFELY shifted
 8004f06:	69f9      	ldr	r1, [r7, #28]
 8004f08:	69b8      	ldr	r0, [r7, #24]
 8004f0a:	f7ff ff03 	bl	8004d14 <_ZL6my_minii>
 8004f0e:	6178      	str	r0, [r7, #20]
	if ( movelen > 0 )
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dd17      	ble.n	8004f46 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xac>
	{
		memmove( m_strPtr + insertOffset + copylen, m_strPtr + insertOffset, movelen );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	440b      	add	r3, r1
 8004f20:	18d0      	adds	r0, r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4413      	add	r3, r2
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f002 fa03 	bl	8007338 <memmove>
		m_strPtr[insertOffset + copylen + movelen] = '\0';
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	6a3a      	ldr	r2, [r7, #32]
 8004f3a:	4411      	add	r1, r2
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	440a      	add	r2, r1
 8004f40:	4413      	add	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
	}
	memmove( m_strPtr + insertOffset, stringToInsert, copylen );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	6a3a      	ldr	r2, [r7, #32]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f9f0 	bl	8007338 <memmove>
	m_truncated = movelen != shiftlen || copylen != insertlen ? true : false;
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d103      	bne.n	8004f68 <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xce>
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd2>
 8004f68:	2201      	movs	r2, #1
 8004f6a:	e000      	b.n	8004f6e <_ZN3Cpl4Text8FString_8insertAtEiPKc+0xd4>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	711a      	strb	r2, [r3, #4]
	m_strPtr[m_internalMaxlen] = '\0';
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	68d2      	ldr	r2, [r2, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
}
 8004f80:	3730      	adds	r7, #48	; 0x30
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZNK3Cpl4Text8FString_9maxLengthEv>:

int
FString_::maxLength() const
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	return m_internalMaxlen;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <_ZN3Cpl4Text8FString_aSEi>:



////////////////////////////
Cpl::Text::String& FString_::operator=( int num ) { format( "%d", num ); return *this; }
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	33cc      	adds	r3, #204	; 0xcc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <_ZN3Cpl4Text8FString_aSEi+0x24>)
 8004fb8:	4798      	blx	r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	080089e8 	.word	0x080089e8

08004fc8 <_ZN3Cpl4Text8FString_aSEj>:
Cpl::Text::String& FString_::operator=( unsigned int num ) { format( "%u", num ); return *this; }
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	33cc      	adds	r3, #204	; 0xcc
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4903      	ldr	r1, [pc, #12]	; (8004fec <_ZN3Cpl4Text8FString_aSEj+0x24>)
 8004fe0:	4798      	blx	r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	080089ec 	.word	0x080089ec

08004ff0 <_ZN3Cpl4Text8FString_aSEl>:
Cpl::Text::String& FString_::operator=( long num ) { format( "%ld", num ); return *this; }
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	33cc      	adds	r3, #204	; 0xcc
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	4903      	ldr	r1, [pc, #12]	; (8005014 <_ZN3Cpl4Text8FString_aSEl+0x24>)
 8005008:	4798      	blx	r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	080089f0 	.word	0x080089f0

08005018 <_ZN3Cpl4Text8FString_aSEx>:
Cpl::Text::String& FString_::operator=( long long num ) { format( "%lld", num ); return *this; }
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	e9c7 2300 	strd	r2, r3, [r7]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	33cc      	adds	r3, #204	; 0xcc
 800502c:	681c      	ldr	r4, [r3, #0]
 800502e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005032:	4903      	ldr	r1, [pc, #12]	; (8005040 <_ZN3Cpl4Text8FString_aSEx+0x28>)
 8005034:	47a0      	blx	r4
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}
 8005040:	080089f4 	.word	0x080089f4

08005044 <_ZN3Cpl4Text8FString_aSEm>:
Cpl::Text::String& FString_::operator=( unsigned long num ) { format( "%lu", num ); return *this; }
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	33cc      	adds	r3, #204	; 0xcc
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	4903      	ldr	r1, [pc, #12]	; (8005068 <_ZN3Cpl4Text8FString_aSEm+0x24>)
 800505c:	4798      	blx	r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	080089fc 	.word	0x080089fc

0800506c <_ZN3Cpl4Text8FString_aSEy>:
Cpl::Text::String& FString_::operator=( unsigned long long num ) { format( "%llu", num ); return *this; }
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	e9c7 2300 	strd	r2, r3, [r7]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	33cc      	adds	r3, #204	; 0xcc
 8005080:	681c      	ldr	r4, [r3, #0]
 8005082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005086:	4903      	ldr	r1, [pc, #12]	; (8005094 <_ZN3Cpl4Text8FString_aSEy+0x28>)
 8005088:	47a0      	blx	r4
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	bd90      	pop	{r4, r7, pc}
 8005094:	08008a00 	.word	0x08008a00

08005098 <_ZN3Cpl4Text8FString_pLEi>:
Cpl::Text::String& FString_::operator +=( int num ) { formatAppend( "%d", num ); return *this; }
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	33d0      	adds	r3, #208	; 0xd0
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	4903      	ldr	r1, [pc, #12]	; (80050bc <_ZN3Cpl4Text8FString_pLEi+0x24>)
 80050b0:	4798      	blx	r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	080089e8 	.word	0x080089e8

080050c0 <_ZN3Cpl4Text8FString_pLEj>:
Cpl::Text::String& FString_::operator +=( unsigned int num ) { formatAppend( "%u", num ); return *this; }
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	33d0      	adds	r3, #208	; 0xd0
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	4903      	ldr	r1, [pc, #12]	; (80050e4 <_ZN3Cpl4Text8FString_pLEj+0x24>)
 80050d8:	4798      	blx	r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	080089ec 	.word	0x080089ec

080050e8 <_ZN3Cpl4Text8FString_pLEl>:
Cpl::Text::String& FString_::operator +=( long num ) { formatAppend( "%ld", num ); return *this; }
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	33d0      	adds	r3, #208	; 0xd0
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	4903      	ldr	r1, [pc, #12]	; (800510c <_ZN3Cpl4Text8FString_pLEl+0x24>)
 8005100:	4798      	blx	r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	080089f0 	.word	0x080089f0

08005110 <_ZN3Cpl4Text8FString_pLEx>:
Cpl::Text::String& FString_::operator +=( long long num ) { formatAppend( "%lld", num ); return *this; }
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	e9c7 2300 	strd	r2, r3, [r7]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	33d0      	adds	r3, #208	; 0xd0
 8005124:	681c      	ldr	r4, [r3, #0]
 8005126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512a:	4903      	ldr	r1, [pc, #12]	; (8005138 <_ZN3Cpl4Text8FString_pLEx+0x28>)
 800512c:	47a0      	blx	r4
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bd90      	pop	{r4, r7, pc}
 8005138:	080089f4 	.word	0x080089f4

0800513c <_ZN3Cpl4Text8FString_pLEm>:
Cpl::Text::String& FString_::operator +=( unsigned long num ) { formatAppend( "%lu", num ); return *this; }
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	33d0      	adds	r3, #208	; 0xd0
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	4903      	ldr	r1, [pc, #12]	; (8005160 <_ZN3Cpl4Text8FString_pLEm+0x24>)
 8005154:	4798      	blx	r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	080089fc 	.word	0x080089fc

08005164 <_ZN3Cpl4Text8FString_pLEy>:
Cpl::Text::String& FString_::operator +=( unsigned long long num ) { formatAppend( "%llu", num ); return *this; }
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	e9c7 2300 	strd	r2, r3, [r7]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	33d0      	adds	r3, #208	; 0xd0
 8005178:	681c      	ldr	r4, [r3, #0]
 800517a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800517e:	4903      	ldr	r1, [pc, #12]	; (800518c <_ZN3Cpl4Text8FString_pLEy+0x28>)
 8005180:	47a0      	blx	r4
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bd90      	pop	{r4, r7, pc}
 800518c:	08008a00 	.word	0x08008a00

08005190 <_Z41__static_initialization_and_destruction_0ii>:
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d107      	bne.n	80051b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d102      	bne.n	80051b0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80051aa:	4809      	ldr	r0, [pc, #36]	; (80051d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80051ac:	f7fc fa96 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051bc:	4293      	cmp	r3, r2
 80051be:	d102      	bne.n	80051c6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80051c0:	4803      	ldr	r0, [pc, #12]	; (80051d0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80051c2:	f7fc fa96 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	2000aa64 	.word	0x2000aa64

080051d4 <_GLOBAL__sub_I__ZN3Cpl4Text8FString_10m_noMemoryE>:
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051dc:	2001      	movs	r0, #1
 80051de:	f7ff ffd7 	bl	8005190 <_Z41__static_initialization_and_destruction_0ii>
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_GLOBAL__sub_D__ZN3Cpl4Text8FString_10m_noMemoryE>:
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7ff ffcf 	bl	8005190 <_Z41__static_initialization_and_destruction_0ii>
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_ZN3Cpl9Container3KeyC1Ev>:
class Key
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	4a04      	ldr	r2, [pc, #16]	; (8005210 <_ZN3Cpl9Container3KeyC1Ev+0x1c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	08008d38 	.word	0x08008d38

08005214 <_ZN3Cpl4Text6StringC1Ev>:
class String : public Cpl::Container::Key
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ffe8 	bl	80051f4 <_ZN3Cpl9Container3KeyC1Ev>
 8005224:	4a03      	ldr	r2, [pc, #12]	; (8005234 <_ZN3Cpl4Text6StringC1Ev+0x20>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08008c20 	.word	0x08008c20

08005238 <_ZN3Cpl4Text7String_C1EPc>:
//
using namespace Cpl::Text;


///////////////////////////////
String_::String_( char* internalString )
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	:m_truncated( false ),
	m_strPtr( internalString )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff ffe5 	bl	8005214 <_ZN3Cpl4Text6StringC1Ev>
 800524a:	4a07      	ldr	r2, [pc, #28]	; (8005268 <_ZN3Cpl4Text7String_C1EPc+0x30>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	711a      	strb	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	609a      	str	r2, [r3, #8]
{
}
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	0800914c 	.word	0x0800914c

0800526c <_ZN3Cpl4Text7String_5clearEv>:

///////////////////////////////
void
String_::clear()
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	m_strPtr[0] = '\0';
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
	m_truncated = false;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	711a      	strb	r2, [r3, #4]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_ZNK3Cpl4Text7String_cvcEv>:

String_::operator char() const
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	return m_strPtr[0];
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_ZNK3Cpl4Text7String_6lengthEv>:

int
String_::length() const
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	return strlen( m_strPtr );
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fa ffbd 	bl	8000234 <strlen>
 80052ba:	4603      	mov	r3, r0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <_ZNK3Cpl4Text7String_7isEmptyEv>:

bool
String_::isEmpty() const
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	return *( m_strPtr ) == '\0';
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <_ZNK3Cpl4Text7String_9truncatedEv>:

bool String_::truncated() const
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	return m_truncated;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	791b      	ldrb	r3, [r3, #4]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <_ZNK3Cpl4Text7String_eqEPKc>:

bool
String_::operator ==( const char* string ) const
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) == 0 : false;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fa ff82 	bl	8000220 <strcmp>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <_ZNK3Cpl4Text7String_eqEPKc+0x26>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <_ZNK3Cpl4Text7String_eqEPKc+0x28>
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <_ZNK3Cpl4Text7String_eqERKNS0_6StringE>:

bool
String_::operator ==( const String& string ) const
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) == 0;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689c      	ldr	r4, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	336c      	adds	r3, #108	; 0x6c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	4798      	blx	r3
 800534a:	4603      	mov	r3, r0
 800534c:	4619      	mov	r1, r3
 800534e:	4620      	mov	r0, r4
 8005350:	f7fa ff66 	bl	8000220 <strcmp>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bd90      	pop	{r4, r7, pc}

08005368 <_ZNK3Cpl4Text7String_neEPKc>:

bool
String_::operator !=( const char* string ) const
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) != 0 : true;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <_ZNK3Cpl4Text7String_neEPKc+0x22>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fa ff4e 	bl	8000220 <strcmp>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <_ZNK3Cpl4Text7String_neEPKc+0x26>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <_ZNK3Cpl4Text7String_neEPKc+0x28>
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZNK3Cpl4Text7String_neERKNS0_6StringE>:

bool
String_::operator !=( const String& string ) const
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
	return strcmp( m_strPtr, string.getString() ) != 0;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689c      	ldr	r4, [r3, #8]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	336c      	adds	r3, #108	; 0x6c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6838      	ldr	r0, [r7, #0]
 80053b0:	4798      	blx	r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	4619      	mov	r1, r3
 80053b6:	4620      	mov	r0, r4
 80053b8:	f7fa ff32 	bl	8000220 <strcmp>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}

080053d0 <_ZNK3Cpl4Text7String_7compareEPKc>:

int String_::compare( const char* string ) const
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	return string ? strcmp( m_strPtr, string ) : -1;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <_ZNK3Cpl4Text7String_7compareEPKc+0x20>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fa ff1a 	bl	8000220 <strcmp>
 80053ec:	4603      	mov	r3, r0
 80053ee:	e001      	b.n	80053f4 <_ZNK3Cpl4Text7String_7compareEPKc+0x24>
 80053f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc>:

int String_::compareIgnoreCase( const char* string ) const
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) : -1;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x20>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f002 f974 	bl	8007700 <strcasecmp>
 8005418:	4603      	mov	r3, r0
 800541a:	e001      	b.n	8005420 <_ZNK3Cpl4Text7String_17compareIgnoreCaseEPKc+0x24>
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc>:


bool
String_::isEqualIgnoreCase( const char* string ) const
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	return string ? strcasecmp( m_strPtr, string ) == 0 : false;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f002 f95e 	bl	8007700 <strcasecmp>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x26>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <_ZNK3Cpl4Text7String_17isEqualIgnoreCaseEPKc+0x28>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc>:

bool
String_::isEqualSubstring( int startpos, int endpos, const char* string ) const
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
	if ( !string )
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x18>
	{
		return false;
 800546c:	2300      	movs	r3, #0
 800546e:	e031      	b.n	80054d4 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fa fedd 	bl	8000234 <strlen>
 800547a:	4603      	mov	r3, r0
 800547c:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da01      	bge.n	8005488 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x30>
	{
		startpos = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	db02      	blt.n	8005496 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x3e>
	{
		startpos = len - 1;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3b01      	subs	r3, #1
 8005494:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	db02      	blt.n	80054a4 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x4c>
	{
		endpos   = len - 1;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	da01      	bge.n	80054b0 <_ZNK3Cpl4Text7String_16isEqualSubstringEiiPKc+0x58>
	{
		endpos   = startpos;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	607b      	str	r3, [r7, #4]
	}
	return strncmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	18d0      	adds	r0, r2, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	461a      	mov	r2, r3
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	f002 f98b 	bl	80077de <strncmp>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc>:

bool
String_::isEqualSubstringIgnoreCase( int startpos, int endpos, const char* string ) const
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
	if ( !string )
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x18>
	{
		return false;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e031      	b.n	8005558 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x7c>
	}

	int len = strlen( m_strPtr );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fa fe9b 	bl	8000234 <strlen>
 80054fe:	4603      	mov	r3, r0
 8005500:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	da01      	bge.n	800550c <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x30>
	{
		startpos = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
	}
	if ( startpos >= len )
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	429a      	cmp	r2, r3
 8005512:	db02      	blt.n	800551a <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x3e>
	{
		startpos = len - 1;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3b01      	subs	r3, #1
 8005518:	60bb      	str	r3, [r7, #8]
	}
	if ( endpos >= len )
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	429a      	cmp	r2, r3
 8005520:	db02      	blt.n	8005528 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x4c>
	{
		endpos   = len - 1;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3b01      	subs	r3, #1
 8005526:	607b      	str	r3, [r7, #4]
	}
	if ( endpos < startpos )
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	da01      	bge.n	8005534 <_ZNK3Cpl4Text7String_26isEqualSubstringIgnoreCaseEiiPKc+0x58>
	{
		endpos   = startpos;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	607b      	str	r3, [r7, #4]
	}

	return strncasecmp( m_strPtr + startpos, string, endpos - startpos + 1 ) == 0;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	18d0      	adds	r0, r2, r3
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	3301      	adds	r3, #1
 8005544:	461a      	mov	r2, r3
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	f002 f914 	bl	8007774 <strncasecmp>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_ZNK3Cpl4Text7String_eqEc>:

bool
String_::operator ==( const char c ) const
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
	return c == m_strPtr[0];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <_ZNK3Cpl4Text7String_10startsWithEPKc>:

bool
String_::startsWith( const char* string ) const
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
	return String_::startsWith( string, 0 );
 8005594:	2200      	movs	r2, #0
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f805 	bl	80055a8 <_ZNK3Cpl4Text7String_10startsWithEPKci>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <_ZNK3Cpl4Text7String_10startsWithEPKci>:

bool
String_::startsWith( const char* string, int startOffset ) const
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
	if ( !string )
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <_ZNK3Cpl4Text7String_10startsWithEPKci+0x16>
	{
		return false;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e028      	b.n	8005610 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	int len  = strlen( m_strPtr );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fa fe36 	bl	8000234 <strlen>
 80055c8:	4603      	mov	r3, r0
 80055ca:	617b      	str	r3, [r7, #20]
	int len2 = strlen( string );
 80055cc:	68b8      	ldr	r0, [r7, #8]
 80055ce:	f7fa fe31 	bl	8000234 <strlen>
 80055d2:	4603      	mov	r3, r0
 80055d4:	613b      	str	r3, [r7, #16]
	if ( startOffset < 0 || ( startOffset + len2 ) > len || len2 == 0 )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	db08      	blt.n	80055ee <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	db02      	blt.n	80055ee <_ZNK3Cpl4Text7String_10startsWithEPKci+0x46>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x4a>
	{
		return false;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e00e      	b.n	8005610 <_ZNK3Cpl4Text7String_10startsWithEPKci+0x68>
	}

	return strncmp( m_strPtr + startOffset, string, len2 ) == 0;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 f8ed 	bl	80077de <strncmp>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_ZNK3Cpl4Text7String_8endsWithEPKc>:

bool
String_::endsWith( const char* string ) const
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	if ( !string )
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <_ZNK3Cpl4Text7String_8endsWithEPKc+0x14>
	{
		return false;
 8005628:	2300      	movs	r3, #0
 800562a:	e025      	b.n	8005678 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	int len  = strlen( m_strPtr );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fa fdff 	bl	8000234 <strlen>
 8005636:	4603      	mov	r3, r0
 8005638:	60fb      	str	r3, [r7, #12]
	int len2 = strlen( string );
 800563a:	6838      	ldr	r0, [r7, #0]
 800563c:	f7fa fdfa 	bl	8000234 <strlen>
 8005640:	4603      	mov	r3, r0
 8005642:	60bb      	str	r3, [r7, #8]
	if ( len2 > len || len2 == 0 )
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	429a      	cmp	r2, r3
 800564a:	dc02      	bgt.n	8005652 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3a>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x3e>
	{
		return false;
 8005652:	2300      	movs	r3, #0
 8005654:	e010      	b.n	8005678 <_ZNK3Cpl4Text7String_8endsWithEPKc+0x60>
	}

	return strncmp( m_strPtr + len - len2, string, len2 ) == 0;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	1acb      	subs	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f002 f8b9 	bl	80077de <strncmp>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZN3Cpl4Text7String_6formatEPKcz>:


void
String_::format( const char* format, ... )
{
 8005680:	b40e      	push	{r1, r2, r3}
 8005682:	b580      	push	{r7, lr}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
	if ( !format )
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <_ZN3Cpl4Text7String_6formatEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8005690:	f107 0320 	add.w	r3, r7, #32
 8005694:	60fb      	str	r3, [r7, #12]
	vformat( format, ap );
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	33d8      	adds	r3, #216	; 0xd8
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
 80056a6:	e000      	b.n	80056aa <_ZN3Cpl4Text7String_6formatEPKcz+0x2a>
		return;
 80056a8:	bf00      	nop
	va_end( ap );
}
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b2:	b003      	add	sp, #12
 80056b4:	4770      	bx	lr

080056b6 <_ZN3Cpl4Text7String_12formatAppendEPKcz>:

void
String_::formatAppend( const char* format, ... )
{
 80056b6:	b40e      	push	{r1, r2, r3}
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	if ( !format )
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x28>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 80056c6:	f107 0320 	add.w	r3, r7, #32
 80056ca:	60fb      	str	r3, [r7, #12]
	vformatAppend( format, ap );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	33dc      	adds	r3, #220	; 0xdc
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
 80056dc:	e000      	b.n	80056e0 <_ZN3Cpl4Text7String_12formatAppendEPKcz+0x2a>
		return;
 80056de:	bf00      	nop
	va_end( ap );
}
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e8:	b003      	add	sp, #12
 80056ea:	4770      	bx	lr

080056ec <_ZN3Cpl4Text7String_9formatOptEbPKcz>:

void
String_::formatOpt( bool appendFlag, const char* format, ... )
{
 80056ec:	b40c      	push	{r2, r3}
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	460b      	mov	r3, r1
 80056f8:	70fb      	strb	r3, [r7, #3]
	if ( !format )
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x44>
	{
		return;
	}

	va_list ap;
	va_start( ap, format );
 8005700:	f107 031c 	add.w	r3, r7, #28
 8005704:	60fb      	str	r3, [r7, #12]
	if ( appendFlag )
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x32>
	{
		vformatAppend( format, ap );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	33dc      	adds	r3, #220	; 0xdc
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	69b9      	ldr	r1, [r7, #24]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
 800571c:	e009      	b.n	8005732 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
	}
	else
	{
		vformat( format, ap );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	33d8      	adds	r3, #216	; 0xd8
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	69b9      	ldr	r1, [r7, #24]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
 800572e:	e000      	b.n	8005732 <_ZN3Cpl4Text7String_9formatOptEbPKcz+0x46>
		return;
 8005730:	bf00      	nop
	}

	va_end( ap );
}
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800573a:	b002      	add	sp, #8
 800573c:	4770      	bx	lr

0800573e <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list>:

void
String_::vformat( const char* format, va_list ap )
{
 800573e:	b590      	push	{r4, r7, lr}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
	if ( !format )
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d027      	beq.n	80057a0 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x62>
	{
		return;
	}

	int flen = vsnprintf( m_strPtr, maxLength() + 1, format, ap );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689c      	ldr	r4, [r3, #8]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3374      	adds	r3, #116	; 0x74
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4610      	mov	r0, r2
 8005760:	4798      	blx	r3
 8005762:	4603      	mov	r3, r0
 8005764:	3301      	adds	r3, #1
 8005766:	4619      	mov	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	4620      	mov	r0, r4
 800576e:	f002 f8c5 	bl	80078fc <vsniprintf>
 8005772:	6178      	str	r0, [r7, #20]
	validateSizeAfterFormat( maxLength(), flen, maxLength() );
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3374      	adds	r3, #116	; 0x74
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4610      	mov	r0, r2
 8005780:	4798      	blx	r3
 8005782:	4604      	mov	r4, r0
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3374      	adds	r3, #116	; 0x74
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
 8005792:	4603      	mov	r3, r0
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4621      	mov	r1, r4
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 faef 	bl	8005d7c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 800579e:	e000      	b.n	80057a2 <_ZN3Cpl4Text7String_7vformatEPKcSt9__va_list+0x64>
		return;
 80057a0:	bf00      	nop
}
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}

080057a8 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list>:

void
String_::vformatAppend( const char* format, va_list ap )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	if ( !format )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02d      	beq.n	8005816 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x6e>
	{
		return;
	}

	int   len   = strlen( m_strPtr );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fd38 	bl	8000234 <strlen>
 80057c4:	4603      	mov	r3, r0
 80057c6:	61fb      	str	r3, [r7, #28]
	int   avail = maxLength() - len;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3374      	adds	r3, #116	; 0x74
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4610      	mov	r0, r2
 80057d4:	4798      	blx	r3
 80057d6:	4602      	mov	r2, r0
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	61bb      	str	r3, [r7, #24]
	char* ptr   = m_strPtr + len;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
	int   flen  = vsnprintf( ptr, avail + 1, format, ap );
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4619      	mov	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f002 f882 	bl	80078fc <vsniprintf>
 80057f8:	6138      	str	r0, [r7, #16]
	validateSizeAfterFormat( avail, flen, maxLength() );
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3374      	adds	r3, #116	; 0x74
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
 8005808:	4603      	mov	r3, r0
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fab4 	bl	8005d7c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>
 8005814:	e000      	b.n	8005818 <_ZN3Cpl4Text7String_13vformatAppendEPKcSt9__va_list+0x70>
		return;
 8005816:	bf00      	nop
}
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list>:

void
String_::vformatOpt( bool appendFlag, const char* format, va_list ap )
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	460b      	mov	r3, r1
 800582c:	72fb      	strb	r3, [r7, #11]
	if ( !format )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d014      	beq.n	800585e <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x40>
	{
		return;
	}

	if ( appendFlag )
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x2e>
	{
		vformatAppend( format, ap );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	33dc      	adds	r3, #220	; 0xdc
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	4798      	blx	r3
 800584a:	e009      	b.n	8005860 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
	}
	else
	{
		vformat( format, ap );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	33d8      	adds	r3, #216	; 0xd8
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	4798      	blx	r3
 800585c:	e000      	b.n	8005860 <_ZN3Cpl4Text7String_10vformatOptEbPKcSt9__va_list+0x42>
		return;
 800585e:	bf00      	nop
	}
}
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <_ZN3Cpl4Text7String_7toUpperEv>:


const char*
String_::toUpper()
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
	strupr( m_strPtr );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f002 f804 	bl	8007880 <strupr>
	return m_strPtr;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <_ZN3Cpl4Text7String_7toLowerEv>:

const char*
String_::toLower()
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	strlwr( m_strPtr );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f001 ff5d 	bl	8007750 <strlwr>
	return m_strPtr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv>:

void
String_::removeLeadingSpaces()
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
	m_truncated   = false;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripSpace( m_strPtr );
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fb70 	bl	8005f9a <_ZN3Cpl4Text10stripSpaceEPKc>
 80058ba:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading spaces
	if ( p == m_strPtr )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d01c      	beq.n	8005900 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x5e>
	{
		return;
	}

	// else re-adjust the string to remove the spaces
	size_t i = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7fa fcb2 	bl	8000234 <strlen>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d20c      	bcs.n	80058f2 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x50>
	{
		m_strPtr[i] = p[i];
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	440b      	add	r3, r1
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e7eb      	b.n	80058ca <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x28>
	}

	m_strPtr[i] = '\0';
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e000      	b.n	8005902 <_ZN3Cpl4Text7String_19removeLeadingSpacesEv+0x60>
		return;
 8005900:	bf00      	nop
}
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <_ZN3Cpl4Text7String_20removeTrailingSpacesEv>:

void
String_::removeTrailingSpaces()
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	m_truncated = false;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingSpace( m_strPtr );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fb87 	bl	800602e <_ZN3Cpl4Text19removeTrailingSpaceEPc>
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc>:

void
String_::removeLeadingChars( const char* charsSet )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	m_truncated   = false;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	711a      	strb	r2, [r3, #4]
	const char* p = Cpl::Text::stripChars( m_strPtr, charsSet );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fb95 	bl	800606e <_ZN3Cpl4Text10stripCharsEPKcS2_>
 8005944:	60b8      	str	r0, [r7, #8]

	// do nothing if there is no leading chars
	if ( p == m_strPtr )
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	429a      	cmp	r2, r3
 800594e:	d01c      	beq.n	800598a <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x62>
	{
		return;
	}

	// else re-adjust the string to remove the chars
	size_t i = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
	for ( ; i < strlen( p ); i++ )
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	f7fa fc6d 	bl	8000234 <strlen>
 800595a:	4602      	mov	r2, r0
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4293      	cmp	r3, r2
 8005960:	d20c      	bcs.n	800597c <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x54>
	{
		m_strPtr[i] = p[i];
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6899      	ldr	r1, [r3, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	440b      	add	r3, r1
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	701a      	strb	r2, [r3, #0]
	for ( ; i < strlen( p ); i++ )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e7eb      	b.n	8005954 <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x2c>
	}

	m_strPtr[i] = '\0';
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e000      	b.n	800598c <_ZN3Cpl4Text7String_18removeLeadingCharsEPKc+0x64>
		return;
 800598a:	bf00      	nop
}
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZN3Cpl4Text7String_19removeTrailingCharsEPKc>:

void
String_::removeTrailingChars( const char* charsSet )
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	711a      	strb	r2, [r3, #4]
	Cpl::Text::removeTrailingChars( m_strPtr, charsSet );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fbc2 	bl	8006132 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <_ZNK3Cpl4Text7String_7indexOfEc>:

int
String_::indexOf( char c ) const
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	70fb      	strb	r3, [r7, #3]
	return String_::indexOf( c, 0 );
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	2200      	movs	r2, #0
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f805 	bl	80059d8 <_ZNK3Cpl4Text7String_7indexOfEci>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_ZNK3Cpl4Text7String_7indexOfEci>:

int
String_::indexOf( char c, int startpos ) const
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	460b      	mov	r3, r1
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	72fb      	strb	r3, [r7, #11]
	int len = strlen( m_strPtr );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fa fc22 	bl	8000234 <strlen>
 80059f0:	4603      	mov	r3, r0
 80059f2:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db03      	blt.n	8005a02 <_ZNK3Cpl4Text7String_7indexOfEci+0x2a>
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	db02      	blt.n	8005a08 <_ZNK3Cpl4Text7String_7indexOfEci+0x30>
	{
		return -1;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	e013      	b.n	8005a30 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	char* ptr = strchr( m_strPtr + startpos, c );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	7afa      	ldrb	r2, [r7, #11]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fe8d 	bl	8007734 <strchr>
 8005a1a:	6138      	str	r0, [r7, #16]
	if ( ptr )
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <_ZNK3Cpl4Text7String_7indexOfEci+0x54>
	{
		return ptr - m_strPtr;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	e001      	b.n	8005a30 <_ZNK3Cpl4Text7String_7indexOfEci+0x58>
	}

	return -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_ZNK3Cpl4Text7String_7indexOfEPKc>:

int
String_::indexOf( const char* str ) const
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
	return String_::indexOf( str, 0 );
 8005a42:	2200      	movs	r2, #0
 8005a44:	6839      	ldr	r1, [r7, #0]
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f805 	bl	8005a56 <_ZNK3Cpl4Text7String_7indexOfEPKci>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZNK3Cpl4Text7String_7indexOfEPKci>:

int
String_::indexOf( const char* str, int startpos ) const
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
	int len = strlen( m_strPtr );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fa fbe4 	bl	8000234 <strlen>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos >= len || !str )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	db06      	blt.n	8005a84 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	da02      	bge.n	8005a84 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x2e>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <_ZNK3Cpl4Text7String_7indexOfEPKci+0x34>
	{
		return -1;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	e012      	b.n	8005ab0 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	char* ptr = strstr( m_strPtr + startpos, str );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 fedd 	bl	8007854 <strstr>
 8005a9a:	6138      	str	r0, [r7, #16]
	if ( ptr )
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <_ZNK3Cpl4Text7String_7indexOfEPKci+0x56>
	{
		return ptr - m_strPtr;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	e001      	b.n	8005ab0 <_ZNK3Cpl4Text7String_7indexOfEPKci+0x5a>
	}

	return -1;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <_ZNK3Cpl4Text7String_11lastIndexOfEc>:
int
String_::lastIndexOf( char c ) const
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
	char* ptr = strrchr( m_strPtr, c );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fead 	bl	800782c <strrchr>
 8005ad2:	60f8      	str	r0, [r7, #12]
	if ( ptr )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x2c>
	{
		return ptr - m_strPtr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	e001      	b.n	8005ae8 <_ZNK3Cpl4Text7String_11lastIndexOfEc+0x30>
	}

	return -1;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <_ZNK3Cpl4Text7String_5countEc>:

int
String_::count( char c ) const
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
	int   count = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
	char* ptr   = m_strPtr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f001 fe12 	bl	8007734 <strchr>
 8005b10:	60b8      	str	r0, [r7, #8]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d006      	beq.n	8005b30 <_ZNK3Cpl4Text7String_5countEc+0x40>
	{
		count++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
		ptr++;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60bb      	str	r3, [r7, #8]
	while ( ( ptr=strchr( ptr, c ) ) )
 8005b2e:	e7ea      	b.n	8005b06 <_ZNK3Cpl4Text7String_5countEc+0x16>
	}

	return count;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <_ZN3Cpl4Text7String_3cutEii>:

void
String_::cut( int startpos, int endpos )
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
	m_truncated = false;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fa fb6f 	bl	8000234 <strlen>
 8005b56:	4603      	mov	r3, r0
 8005b58:	617b      	str	r3, [r7, #20]
	if ( startpos < 0 || startpos > endpos || startpos >= len || endpos >= len )
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	db37      	blt.n	8005bd0 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	dc33      	bgt.n	8005bd0 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	da2f      	bge.n	8005bd0 <_ZN3Cpl4Text7String_3cutEii+0x96>
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	da2b      	bge.n	8005bd0 <_ZN3Cpl4Text7String_3cutEii+0x96>
	{
		return;
	}

	if ( endpos + 1 >= len )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	dc0b      	bgt.n	8005b9a <_ZN3Cpl4Text7String_3cutEii+0x60>
	{
		trimRight( len - startpos );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	1a8a      	subs	r2, r1, r2
 8005b92:	4611      	mov	r1, r2
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	4798      	blx	r3
		return;
 8005b98:	e01b      	b.n	8005bd2 <_ZN3Cpl4Text7String_3cutEii+0x98>
	}
	int movelen = len - ( endpos + 1 );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	613b      	str	r3, [r7, #16]
	memmove( m_strPtr + startpos, m_strPtr + endpos + 1, movelen );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	18d0      	adds	r0, r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4413      	add	r3, r2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	f001 fbbd 	bl	8007338 <memmove>
	m_strPtr[startpos + movelen] = '\0';
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	4413      	add	r3, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e000      	b.n	8005bd2 <_ZN3Cpl4Text7String_3cutEii+0x98>
		return;
 8005bd0:	bf00      	nop
}
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZN3Cpl4Text7String_9trimRightEi>:

void
String_::trimRight( int n )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	m_truncated = false;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fa fb21 	bl	8000234 <strlen>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	60fb      	str	r3, [r7, #12]
	int index   = len - n;
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
	if ( index < 0 || n < 0 )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db09      	blt.n	8005c18 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	db06      	blt.n	8005c18 <_ZN3Cpl4Text7String_9trimRightEi+0x40>
	{
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
	}
	else
	{
		m_strPtr[index] = '\0';
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4413      	add	r3, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e000      	b.n	8005c1a <_ZN3Cpl4Text7String_9trimRightEi+0x42>
		return; // Do nothing -->error case: 'n' is greater than the length of the string OR 'n' is negative
 8005c18:	bf00      	nop
	}

}
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_ZN3Cpl4Text7String_7setCharEic>:

void String_::setChar( int atPosition, char newchar )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	71fb      	strb	r3, [r7, #7]
	m_truncated = false;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	711a      	strb	r2, [r3, #4]
	int len     = strlen( m_strPtr );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fafb 	bl	8000234 <strlen>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	617b      	str	r3, [r7, #20]
	if ( atPosition < 0 || atPosition >= len )
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	db0a      	blt.n	8005c5e <_ZN3Cpl4Text7String_7setCharEic+0x3e>
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	da06      	bge.n	8005c5e <_ZN3Cpl4Text7String_7setCharEic+0x3e>
	{
		return;
	}

	m_strPtr[atPosition] = newchar;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e000      	b.n	8005c60 <_ZN3Cpl4Text7String_7setCharEic+0x40>
		return;
 8005c5e:	bf00      	nop
}
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_ZN3Cpl4Text7String_7replaceEcc>:

int
String_::replace( char targetChar, char newChar )
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
 8005c72:	4613      	mov	r3, r2
 8005c74:	70bb      	strb	r3, [r7, #2]
	int replaceCount = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
	if ( targetChar != newChar )
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	78bb      	ldrb	r3, [r7, #2]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d015      	beq.n	8005cae <_ZN3Cpl4Text7String_7replaceEcc+0x48>
	{
		char* ptr 	     = m_strPtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <_ZN3Cpl4Text7String_7replaceEcc+0x48>
		{
			if ( *ptr == targetChar )
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d105      	bne.n	8005ca6 <_ZN3Cpl4Text7String_7replaceEcc+0x40>
			{
				*ptr = newChar;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	78ba      	ldrb	r2, [r7, #2]
 8005c9e:	701a      	strb	r2, [r3, #0]
				replaceCount++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
			}
			ptr++;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60bb      	str	r3, [r7, #8]
		while ( *ptr )
 8005cac:	e7ec      	b.n	8005c88 <_ZN3Cpl4Text7String_7replaceEcc+0x22>
		}
	}

	m_truncated = false;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	711a      	strb	r2, [r3, #4]
	return replaceCount;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <_ZNK3Cpl4Text7String_9getStringEv>:

const char*
String_::getString() const
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
	return m_strPtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <_ZN3Cpl4Text7String_9getBufferERi>:

char *
String_::getBuffer( int& maxAllowedLength )
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
	m_truncated      = false;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	711a      	strb	r2, [r3, #4]
	maxAllowedLength = maxLength();
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3374      	adds	r3, #116	; 0x74
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	601a      	str	r2, [r3, #0]
	return m_strPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZNK3Cpl4Text7String_10compareKeyERKNS_9Container3KeyE>:


////////////////////////////////////
int String_::compareKey( const Key& key ) const
{
 8005d0a:	b590      	push	{r4, r7, lr}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
	unsigned    otherLen = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]
	const char* otherPtr = (const char*) key.getRawKey( &otherLen );
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	4611      	mov	r1, r2
 8005d26:	6838      	ldr	r0, [r7, #0]
 8005d28:	4798      	blx	r3
 8005d2a:	60f8      	str	r0, [r7, #12]
	return Cpl::Container::KeyStringBuffer::compare( m_strPtr, strlen( m_strPtr ), otherPtr, otherLen );
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689c      	ldr	r4, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fa fa7d 	bl	8000234 <strlen>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe89 	bl	8006a58 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}

08005d50 <_ZNK3Cpl4Text7String_9getRawKeyEPj>:

const void* String_::getRawKey( unsigned* returnRawKeyLenPtr ) const
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	if ( returnRawKeyLenPtr )
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <_ZNK3Cpl4Text7String_9getRawKeyEPj+0x20>
	{
		*returnRawKeyLenPtr = strlen( m_strPtr );
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fa65 	bl	8000234 <strlen>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	601a      	str	r2, [r3, #0]
	}

	return m_strPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii>:


////////////////////////////////////
void String_::validateSizeAfterFormat( int availableLen, int formattedLen, int maxlen )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
	if ( formattedLen <= availableLen && formattedLen >= 0 )
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	dc06      	bgt.n	8005da0 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	db03      	blt.n	8005da0 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x24>
	{
		m_truncated = false;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	711a      	strb	r2, [r3, #4]
 8005d9e:	e009      	b.n	8005db4 <_ZN3Cpl4Text7String_23validateSizeAfterFormatEiii+0x38>
	}
	else
	{
		m_truncated      = true;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	711a      	strb	r2, [r3, #4]
		m_strPtr[maxlen] = '\0';    // ENSURE the string is terminated
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
	}
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <_ZN3Cpl4Text7String_aSERKNS0_6StringE>:

////////////////////////////////////
Cpl::Text::String& String_::operator=( const String& string ) { copyIn( string, string.length() ); return *this; }
 8005dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
 8005dca:	687d      	ldr	r5, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3334      	adds	r3, #52	; 0x34
 8005dd2:	681c      	ldr	r4, [r3, #0]
 8005dd4:	6838      	ldr	r0, [r7, #0]
 8005dd6:	f7fb f93a 	bl	800104e <_ZNK3Cpl4Text6StringcvPKcEv>
 8005dda:	4606      	mov	r6, r0
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3370      	adds	r3, #112	; 0x70
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6838      	ldr	r0, [r7, #0]
 8005de6:	4798      	blx	r3
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47a0      	blx	r4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dfc <_ZN3Cpl4Text7String_aSEPKc>:
Cpl::Text::String& String_::operator=( const char* string ) { copyIn( string, string ? strlen( string ) : 0 ); return *this; }
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
 8005e06:	687d      	ldr	r5, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3334      	adds	r3, #52	; 0x34
 8005e0e:	681c      	ldr	r4, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <_ZN3Cpl4Text7String_aSEPKc+0x24>
 8005e16:	6838      	ldr	r0, [r7, #0]
 8005e18:	f7fa fa0c 	bl	8000234 <strlen>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	e000      	b.n	8005e22 <_ZN3Cpl4Text7String_aSEPKc+0x26>
 8005e20:	2300      	movs	r3, #0
 8005e22:	461a      	mov	r2, r3
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	4628      	mov	r0, r5
 8005e28:	47a0      	blx	r4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bdb0      	pop	{r4, r5, r7, pc}

08005e34 <_ZN3Cpl4Text7String_aSEc>:
Cpl::Text::String& String_::operator=( char c ) { copyIn( &c, 1 ); return *this; }
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3334      	adds	r3, #52	; 0x34
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1cf9      	adds	r1, r7, #3
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	4798      	blx	r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZN3Cpl4Text7String_pLERKNS0_6StringE>:
Cpl::Text::String& String_::operator +=( const String& string ) { appendTo( string, string.length() ); return *this; }
 8005e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
 8005e64:	687d      	ldr	r5, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3364      	adds	r3, #100	; 0x64
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	6838      	ldr	r0, [r7, #0]
 8005e70:	f7fb f8ed 	bl	800104e <_ZNK3Cpl4Text6StringcvPKcEv>
 8005e74:	4606      	mov	r6, r0
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3370      	adds	r3, #112	; 0x70
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6838      	ldr	r0, [r7, #0]
 8005e80:	4798      	blx	r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47a0      	blx	r4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e96 <_ZN3Cpl4Text7String_pLEPKc>:
Cpl::Text::String& String_::operator +=( const char* string ) { appendTo( string, string ? strlen( string ) : 0 ); return *this; }
 8005e96:	b5b0      	push	{r4, r5, r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
 8005ea0:	687d      	ldr	r5, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3364      	adds	r3, #100	; 0x64
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <_ZN3Cpl4Text7String_pLEPKc+0x24>
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f7fa f9bf 	bl	8000234 <strlen>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	e000      	b.n	8005ebc <_ZN3Cpl4Text7String_pLEPKc+0x26>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47a0      	blx	r4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bdb0      	pop	{r4, r5, r7, pc}

08005ece <_ZN3Cpl4Text7String_pLEc>:
Cpl::Text::String& String_::operator +=( char c ) { appendTo( &c, 1 ); return *this; }
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3364      	adds	r3, #100	; 0x64
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1cf9      	adds	r1, r7, #3
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4798      	blx	r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <_Z41__static_initialization_and_destruction_0ii>:
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d102      	bne.n	8005f14 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005f0e:	4809      	ldr	r0, [pc, #36]	; (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005f10:	f7fb fbe4 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d102      	bne.n	8005f2a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005f24:	4803      	ldr	r0, [pc, #12]	; (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005f26:	f7fb fbe4 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	2000aa6c 	.word	0x2000aa6c

08005f38 <_GLOBAL__sub_I__ZN3Cpl4Text7String_C2EPc>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7ff ffd7 	bl	8005ef4 <_Z41__static_initialization_and_destruction_0ii>
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <_GLOBAL__sub_D__ZN3Cpl4Text7String_C2EPc>:
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7ff ffcf 	bl	8005ef4 <_Z41__static_initialization_and_destruction_0ii>
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZN3Cpl4Text14isCharInStringEPKcc>:
#include <ctype.h>


////////////////
bool Cpl::Text::isCharInString( const char* charsSet, const char c )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 8005f64:	2300      	movs	r3, #0
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fa f963 	bl	8000234 <strlen>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d20c      	bcs.n	8005f90 <_ZN3Cpl4Text14isCharInStringEPKcc+0x38>
	{
		if ( c == charsSet[i] )
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d101      	bne.n	8005f88 <_ZN3Cpl4Text14isCharInStringEPKcc+0x30>
		{
			return true;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e004      	b.n	8005f92 <_ZN3Cpl4Text14isCharInStringEPKcc+0x3a>
	for ( size_t i=0; i < strlen( charsSet ); i++ )
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e7eb      	b.n	8005f68 <_ZN3Cpl4Text14isCharInStringEPKcc+0x10>
		}
	}
	return false;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <_ZN3Cpl4Text10stripSpaceEPKc>:


////////////////
const char* Cpl::Text::stripSpace( const char *s )
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
	if ( !s )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	{
		return 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e010      	b.n	8005fce <_ZN3Cpl4Text10stripSpaceEPKc+0x34>
	}

	while ( *s && isspace( (int) *s ) )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f9a3 	bl	8007304 <isspace>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <_ZN3Cpl4Text10stripSpaceEPKc+0x32>
	{
		s++;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	607b      	str	r3, [r7, #4]
	while ( *s && isspace( (int) *s ) )
 8005fca:	e7ef      	b.n	8005fac <_ZN3Cpl4Text10stripSpaceEPKc+0x12>
	}
	return s;
 8005fcc:	687b      	ldr	r3, [r7, #4]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>:
	return s;
}


const char* Cpl::Text::stripTrailingSpace( const char *s )
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
	if ( !s )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x12>
	{
		return 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e01e      	b.n	8006026 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fa f923 	bl	8000234 <strlen>
 8005fee:	60b8      	str	r0, [r7, #8]
	if ( !len )
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x24>
	{
		return s;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	e015      	b.n	8006026 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x50>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d00b      	beq.n	8006024 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f001 f977 	bl	8007304 <isspace>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x4e>
	{
		p--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b01      	subs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
	while ( p != s && isspace( (int) *p ) )
 8006022:	e7ef      	b.n	8006004 <_ZN3Cpl4Text18stripTrailingSpaceEPKc+0x2e>
	}
	return p;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <_ZN3Cpl4Text19removeTrailingSpaceEPc>:


void Cpl::Text::removeTrailingSpace( char* s )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
	if ( !s )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d014      	beq.n	8006066 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x38>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingSpace( s );
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff ffca 	bl	8005fd6 <_ZN3Cpl4Text18stripTrailingSpaceEPKc>
 8006042:	60f8      	str	r0, [r7, #12]
	if ( isspace( (int) *ptr ) )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f001 f95b 	bl	8007304 <isspace>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x2e>
	{
		*ptr = '\0';
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e005      	b.n	8006068 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e000      	b.n	8006068 <_ZN3Cpl4Text19removeTrailingSpaceEPc+0x3a>
		return;
 8006066:	bf00      	nop
	}
}
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <_ZN3Cpl4Text10stripCharsEPKcS2_>:


//////////////////////	
const char* Cpl::Text::stripChars( const char *s, const char* charsSet )
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
	if ( !s )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x14>
	{
		return 0;
 800607e:	2300      	movs	r3, #0
 8006080:	e01b      	b.n	80060ba <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	if ( !charsSet )
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	{
		return s;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	e016      	b.n	80060ba <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4c>
	}

	while ( *s && isCharInString( charsSet, *s ) )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	4619      	mov	r1, r3
 800609a:	6838      	ldr	r0, [r7, #0]
 800609c:	f7ff ff5c 	bl	8005f58 <_ZN3Cpl4Text14isCharInStringEPKcc>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3c>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <_ZN3Cpl4Text10stripCharsEPKcS2_+0x3e>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <_ZN3Cpl4Text10stripCharsEPKcS2_+0x4a>
	{
		s++;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3301      	adds	r3, #1
 80060b4:	607b      	str	r3, [r7, #4]
	while ( *s && isCharInString( charsSet, *s ) )
 80060b6:	e7e9      	b.n	800608c <_ZN3Cpl4Text10stripCharsEPKcS2_+0x1e>
	}
	return s;
 80060b8:	687b      	ldr	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>:
	return s;
}


const char* Cpl::Text::stripTrailingChars( const char *s, const char* charsSet )
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
	if ( !s )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x14>
	{
		return 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e029      	b.n	800612a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	if ( !charsSet )
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x1e>
	{
		return s;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	e024      	b.n	800612a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// do nothing if empty string
	size_t len = strlen( s );
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fa f8a7 	bl	8000234 <strlen>
 80060e6:	60b8      	str	r0, [r7, #8]
	if ( !len )
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x30>
	{
		return s;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	e01b      	b.n	800612a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x68>
	}

	// Walk the string right to left
	const char* p = s + len - 1;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d00a      	beq.n	800611a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	4619      	mov	r1, r3
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f7ff ff24 	bl	8005f58 <_ZN3Cpl4Text14isCharInStringEPKcc>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x58>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x5a>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x66>
	{
		p--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3b01      	subs	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
	while ( p != s && isCharInString( charsSet, *p ) )
 8006126:	e7e9      	b.n	80060fc <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_+0x3a>
	}
	return p;
 8006128:	68fb      	ldr	r3, [r7, #12]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc>:


void Cpl::Text::removeTrailingChars( char* s, const char* charsSet )
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
	if ( !s || !charsSet )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d019      	beq.n	8006176 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x44>
	{
		return;
	}

	char* ptr = (char*) Cpl::Text::stripTrailingChars( (const char*) s, charsSet );
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ffb9 	bl	80060c2 <_ZN3Cpl4Text18stripTrailingCharsEPKcS2_>
 8006150:	60f8      	str	r0, [r7, #12]
	if ( isCharInString( charsSet, *ptr ) )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	6838      	ldr	r0, [r7, #0]
 800615a:	f7ff fefd 	bl	8005f58 <_ZN3Cpl4Text14isCharInStringEPKcc>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x3a>
	{
		*ptr = '\0';        // trap the case of string is ALL spaces
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e005      	b.n	8006178 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
	}
	else
	{
		*( ptr + 1 ) = '\0';
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e000      	b.n	8006178 <_ZN3Cpl4Text19removeTrailingCharsEPcPKc+0x46>
		return;
 8006176:	bf00      	nop
	}
}
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_ZNK3Cpl4Text6StringclEv>:

	/// Returns a Read-only pointer to the "raw" (short-hand for getString())
	inline const char* operator()() const { return getString(); }
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	336c      	adds	r3, #108	; 0x6c
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <_ZN3Cpl2Io6Output5writeEc>:
using namespace Cpl::Io;


//////////////////////
bool Output::write( char c )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
    return write( (const void*) &c, sizeof( c ) );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3320      	adds	r3, #32
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1cf9      	adds	r1, r7, #3
 80061b2:	2201      	movs	r2, #1
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZN3Cpl2Io6Output5writeEPKc>:


bool Output::write( const char* string )
{
 80061c2:	b590      	push	{r4, r7, lr}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
    return write( string, strlen( string ) );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3320      	adds	r3, #32
 80061d2:	681c      	ldr	r4, [r3, #0]
 80061d4:	6838      	ldr	r0, [r7, #0]
 80061d6:	f7fa f82d 	bl	8000234 <strlen>
 80061da:	4603      	mov	r3, r0
 80061dc:	461a      	mov	r2, r3
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	47a0      	blx	r4
 80061e4:	4603      	mov	r3, r0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}

080061ee <_ZN3Cpl2Io6Output5writeERKNS_4Text6StringE>:


bool Output::write( const Cpl::Text::String& string )
{
 80061ee:	b5b0      	push	{r4, r5, r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
    return write( string(), string.length() );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3320      	adds	r3, #32
 80061fe:	681c      	ldr	r4, [r3, #0]
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f7ff ffbc 	bl	800617e <_ZNK3Cpl4Text6StringclEv>
 8006206:	4605      	mov	r5, r0
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3370      	adds	r3, #112	; 0x70
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	4798      	blx	r3
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	4629      	mov	r1, r5
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	47a0      	blx	r4
 800621e:	4603      	mov	r3, r0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bdb0      	pop	{r4, r5, r7, pc}

08006228 <_ZN3Cpl2Io6Output5writeERNS_4Text6StringEPKcz>:


bool Output::write( Cpl::Text::String& formatBuffer, const char* format, ... )
{
 8006228:	b40c      	push	{r2, r3}
 800622a:	b590      	push	{r4, r7, lr}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start( ap, format );
 8006234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006238:	60bb      	str	r3, [r7, #8]
    bool result = vwrite( formatBuffer, format, ap );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	331c      	adds	r3, #28
 8006240:	681c      	ldr	r4, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	47a0      	blx	r4
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
    va_end( ap );
    return result;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800625c:	b002      	add	sp, #8
 800625e:	4770      	bx	lr

08006260 <_ZN3Cpl2Io6Output6vwriteERNS_4Text6StringEPKcSt9__va_list>:


bool Output::vwrite( Cpl::Text::String& formatBuffer, const char* format, va_list ap )
{
 8006260:	b5b0      	push	{r4, r5, r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
    formatBuffer.vformat( format, ap );
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	33d8      	adds	r3, #216	; 0xd8
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	68b8      	ldr	r0, [r7, #8]
 800627c:	4798      	blx	r3
    return write( formatBuffer(), formatBuffer.length() );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3320      	adds	r3, #32
 8006284:	681c      	ldr	r4, [r3, #0]
 8006286:	68b8      	ldr	r0, [r7, #8]
 8006288:	f7ff ff79 	bl	800617e <_ZNK3Cpl4Text6StringclEv>
 800628c:	4605      	mov	r5, r0
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3370      	adds	r3, #112	; 0x70
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b8      	ldr	r0, [r7, #8]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	4629      	mov	r1, r5
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	47a0      	blx	r4
 80062a4:	4603      	mov	r3, r0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bdb0      	pop	{r4, r5, r7, pc}

080062ae <_ZN3Cpl2Io6Output5writeEPKvi>:


bool Output::write( const void* buffer, int numBytes )
{
 80062ae:	b590      	push	{r4, r7, lr}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
    int  written       = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
    const uint8_t* ptr = (const uint8_t*) buffer;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	617b      	str	r3, [r7, #20]

    // Loop until all data is written
    while ( numBytes )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <_ZN3Cpl2Io6Output5writeEPKvi+0x52>
    {
        if ( !write( ptr, numBytes, written ) )
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3324      	adds	r3, #36	; 0x24
 80062ce:	681c      	ldr	r4, [r3, #0]
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6979      	ldr	r1, [r7, #20]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	47a0      	blx	r4
 80062dc:	4603      	mov	r3, r0
 80062de:	f083 0301 	eor.w	r3, r3, #1
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <_ZN3Cpl2Io6Output5writeEPKvi+0x3e>
        {
            return false;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e00a      	b.n	8006302 <_ZN3Cpl2Io6Output5writeEPKvi+0x54>
        }
        numBytes -= written;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	607b      	str	r3, [r7, #4]
        ptr      += written;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	461a      	mov	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    while ( numBytes )
 80062fe:	e7e0      	b.n	80062c2 <_ZN3Cpl2Io6Output5writeEPKvi+0x14>
    }

    // If I get here, all data has been written
    return true;
 8006300:	2301      	movs	r3, #1
}
 8006302:	4618      	mov	r0, r3
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd90      	pop	{r4, r7, pc}
	...

0800630c <_Z41__static_initialization_and_destruction_0ii>:
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006322:	4293      	cmp	r3, r2
 8006324:	d102      	bne.n	800632c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006326:	4809      	ldr	r0, [pc, #36]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006328:	f7fb f9d8 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006338:	4293      	cmp	r3, r2
 800633a:	d102      	bne.n	8006342 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800633c:	4803      	ldr	r0, [pc, #12]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800633e:	f7fb f9d8 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	2000aa70 	.word	0x2000aa70

08006350 <_GLOBAL__sub_I__ZN3Cpl2Io6Output5writeEc>:
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
 8006354:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006358:	2001      	movs	r0, #1
 800635a:	f7ff ffd7 	bl	800630c <_Z41__static_initialization_and_destruction_0ii>
 800635e:	bd80      	pop	{r7, pc}

08006360 <_GLOBAL__sub_D__ZN3Cpl2Io6Output5writeEc>:
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
 8006364:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006368:	2000      	movs	r0, #0
 800636a:	f7ff ffcf 	bl	800630c <_Z41__static_initialization_and_destruction_0ii>
 800636e:	bd80      	pop	{r7, pc}

08006370 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>:
//#define CPL_IO_FILE_MAX_NAME_MAP                PATH_MAX


/// Mapping
inline unsigned long CplSystemElapsedTime_getTimeInMilliseconds_MAP()
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
    return xTaskGetTickCount() / portTICK_PERIOD_MS;
 8006374:	f7fd f868 	bl	8003448 <xTaskGetTickCount>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <_ZN3Cpl6System12StartupHook_D1Ev>:
     */
    StartupHook_( InitLevel_T myInitLevel );

public:
    /// Ensure the destructor is virtual
    virtual ~StartupHook_() {}
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	4a04      	ldr	r2, [pc, #16]	; (800639c <_ZN3Cpl6System12StartupHook_D1Ev+0x1c>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	08009278 	.word	0x08009278

080063a0 <_ZN3Cpl6System12StartupHook_D0Ev>:
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ffe9 	bl	8006380 <_ZN3Cpl6System12StartupHook_D1Ev>
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 f8cd 	bl	800854e <_ZdlPv>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>:
/// This class is to 'zero' the elapsed to the start of the application
class RegisterInitHandler_ : public Cpl::System::StartupHook_
{
public:
    ///
    RegisterInitHandler_():StartupHook_( eSYSTEM ) {}
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f8cd 	bl	800656c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev+0x24>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	08009264 	.word	0x08009264

080063e8 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE>:


protected:
    ///
    void notify( InitLevel_T init_level )
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
    {
        elapsedMsec_  = 0;
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x30>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
        elapsedSec_   = 0;
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x34>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
        sumDeltaMs_   = 0;
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x38>)
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
        lastMsec_     = CplSystemElapsedTime_getTimeInMilliseconds();
 8006406:	f7ff ffb3 	bl	8006370 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 800640a:	4603      	mov	r3, r0
 800640c:	4a05      	ldr	r2, [pc, #20]	; (8006424 <_ZN12_GLOBAL__N_120RegisterInitHandler_6notifyEN3Cpl6System12StartupHook_11InitLevel_TE+0x3c>)
 800640e:	6013      	str	r3, [r2, #0]
    }
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2000aa78 	.word	0x2000aa78
 800641c:	2000aa7c 	.word	0x2000aa7c
 8006420:	2000aa84 	.word	0x2000aa84
 8006424:	2000aa80 	.word	0x2000aa80

08006428 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
static RegisterInitHandler_ autoRegister_systemInit_hook_;


///////////////////////////////////////////////////////////////
unsigned long ElapsedTime::millisecondsInRealTime( void ) noexcept
{
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 800642e:	f7fa fcbf 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8006432:	4602      	mov	r2, r0
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7fa fe17 	bl	800106c <_ZN3Cpl6System5Mutex10ScopeBlockC1ERS1_>

    unsigned long newTime = CplSystemElapsedTime_getTimeInMilliseconds();
 800643e:	f7ff ff97 	bl	8006370 <_Z46CplSystemElapsedTime_getTimeInMilliseconds_MAPv>
 8006442:	60f8      	str	r0, [r7, #12]
    unsigned long delta   = newTime - lastMsec_;
 8006444:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	60bb      	str	r3, [r7, #8]
    lastMsec_             = newTime;
 800644e:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x7c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]
    elapsedMsec_         += delta;
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4413      	add	r3, r2
 800645c:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 800645e:	6013      	str	r3, [r2, #0]
    sumDeltaMs_          += delta;
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4413      	add	r3, r2
 8006468:	4a10      	ldr	r2, [pc, #64]	; (80064ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 800646a:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006474:	d30b      	bcc.n	800648e <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x66>
    {
        elapsedSec_++;
 8006476:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x88>)
 800647e:	6013      	str	r3, [r2, #0]
        sumDeltaMs_ -= 1000L;
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006488:	4a08      	ldr	r2, [pc, #32]	; (80064ac <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x84>)
 800648a:	6013      	str	r3, [r2, #0]
    while ( sumDeltaMs_ >= 1000L )
 800648c:	e7ee      	b.n	800646c <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x44>
    }
    

    return elapsedMsec_;
 800648e:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <_ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv+0x80>)
 8006490:	681c      	ldr	r4, [r3, #0]
    Cpl::System::Mutex::ScopeBlock lock( Cpl::System::Locks_::system() );
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fa fdfb 	bl	8001090 <_ZN3Cpl6System5Mutex10ScopeBlockD1Ev>
    return elapsedMsec_;
 800649a:	4623      	mov	r3, r4
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd90      	pop	{r4, r7, pc}
 80064a4:	2000aa80 	.word	0x2000aa80
 80064a8:	2000aa78 	.word	0x2000aa78
 80064ac:	2000aa84 	.word	0x2000aa84
 80064b0:	2000aa7c 	.word	0x2000aa7c

080064b4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>:
class RegisterInitHandler_ : public Cpl::System::StartupHook_
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev+0x20>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff ff5b 	bl	8006380 <_ZN3Cpl6System12StartupHook_D1Ev>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08009264 	.word	0x08009264

080064d8 <_ZN12_GLOBAL__N_120RegisterInitHandler_D0Ev>:
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ffe7 	bl	80064b4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 f831 	bl	800854e <_ZdlPv>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <_Z41__static_initialization_and_destruction_0ii>:
    // Convert to my Precision format
    Precision_T now;
    now.m_seconds      = elapsedSec_;
    now.m_thousandths  = elapsedMsec_ % 1000L;
    return now;
}
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10a      	bne.n	800651e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800650e:	4293      	cmp	r3, r2
 8006510:	d105      	bne.n	800651e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8006512:	480c      	ldr	r0, [pc, #48]	; (8006544 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006514:	f7fb f8e2 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static RegisterInitHandler_ autoRegister_systemInit_hook_;
 8006518:	480b      	ldr	r0, [pc, #44]	; (8006548 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800651a:	f7ff ff51 	bl	80063c0 <_ZN12_GLOBAL__N_120RegisterInitHandler_C1Ev>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652a:	4293      	cmp	r3, r2
 800652c:	d105      	bne.n	800653a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800652e:	4806      	ldr	r0, [pc, #24]	; (8006548 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006530:	f7ff ffc0 	bl	80064b4 <_ZN12_GLOBAL__N_120RegisterInitHandler_D1Ev>
 8006534:	4803      	ldr	r0, [pc, #12]	; (8006544 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006536:	f7fb f8dc 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000aa74 	.word	0x2000aa74
 8006548:	2000aa88 	.word	0x2000aa88

0800654c <_GLOBAL__sub_I__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
 8006550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006554:	2001      	movs	r0, #1
 8006556:	f7ff ffcf 	bl	80064f8 <_Z41__static_initialization_and_destruction_0ii>
 800655a:	bd80      	pop	{r7, pc}

0800655c <_GLOBAL__sub_D__ZN3Cpl6System11ElapsedTime22millisecondsInRealTimeEv>:
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
 8006560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006564:	2000      	movs	r0, #0
 8006566:	f7ff ffc7 	bl	80064f8 <_Z41__static_initialization_and_destruction_0ii>
 800656a:	bd80      	pop	{r7, pc}

0800656c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE>:
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );



////////////////////////////////////////////////////////////////////////////////
StartupHook_::StartupHook_( InitLevel_T myInitLevel )
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fa fcd1 	bl	8000f24 <_ZN3Cpl9Container4ItemC1Ev>
 8006582:	4a06      	ldr	r2, [pc, #24]	; (800659c <_ZN3Cpl6System12StartupHook_C1ENS1_11InitLevel_TE+0x30>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
{
    registerHook( *this, myInitLevel );
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f807 	bl	80065a0 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>
}
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	08009278 	.word	0x08009278

080065a0 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE>:


void StartupHook_::registerHook( StartupHook_& callbackInstance, InitLevel_T initOrder )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
    // NOTE: The assumption is that sub-system register at the time of when
    //       constructor for static object execute - which is before main()
    //       is enter so there should be only one thread.
    if ( initOrder == StartupHook_::eTEST_INFRA )
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x1c>
    {
        levelTest_.put( callbackInstance );
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	480d      	ldr	r0, [pc, #52]	; (80065ec <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x4c>)
 80065b6:	f000 f885 	bl	80066c4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
    }
    else
    {
        levelApplication_.put( callbackInstance );
    }
}
 80065ba:	e013      	b.n	80065e4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eSYSTEM )
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d104      	bne.n	80065cc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x2c>
        levelSystem_.put( callbackInstance );
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	480a      	ldr	r0, [pc, #40]	; (80065f0 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x50>)
 80065c6:	f000 f87d 	bl	80066c4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80065ca:	e00b      	b.n	80065e4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
    else if ( initOrder == StartupHook_::eMIDDLE_WARE )
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d104      	bne.n	80065dc <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x3c>
        levelMiddleWare_.put( callbackInstance );
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4807      	ldr	r0, [pc, #28]	; (80065f4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x54>)
 80065d6:	f000 f875 	bl	80066c4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80065da:	e003      	b.n	80065e4 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x44>
        levelApplication_.put( callbackInstance );
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4806      	ldr	r0, [pc, #24]	; (80065f8 <_ZN3Cpl6System12StartupHook_12registerHookERS1_NS1_11InitLevel_TE+0x58>)
 80065e0:	f000 f870 	bl	80066c4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	2000aa98 	.word	0x2000aa98
 80065f0:	2000aaa0 	.word	0x2000aaa0
 80065f4:	2000aaa8 	.word	0x2000aaa8
 80065f8:	2000aab0 	.word	0x2000aab0

080065fc <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv>:

void StartupHook_::notifyStartupClients( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
    // NOTE: The assumption is that no thread protection is required since
    //       there should only be one caller to the initialize() method.

    // Do eTEST_INFRA level first
    StartupHook_* ptr = levelTest_.get();
 8006602:	4826      	ldr	r0, [pc, #152]	; (800669c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 8006604:	f000 f882 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8006608:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x2a>
    {
        ptr->notify( eTEST_INFRA );
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
        ptr = levelTest_.get();
 800661c:	481f      	ldr	r0, [pc, #124]	; (800669c <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa0>)
 800661e:	f000 f875 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8006622:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8006624:	e7f1      	b.n	800660a <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xe>
    }

    // Do eSYSTEM level next
    ptr = levelSystem_.get();
 8006626:	481e      	ldr	r0, [pc, #120]	; (80066a0 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8006628:	f000 f870 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800662c:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x4e>
    {
        ptr->notify( eSYSTEM );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2101      	movs	r1, #1
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
        ptr = levelSystem_.get();
 8006640:	4817      	ldr	r0, [pc, #92]	; (80066a0 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa4>)
 8006642:	f000 f863 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8006646:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8006648:	e7f1      	b.n	800662e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x32>
    }

    // Do eMIDDLE_WARE level next
    ptr = levelMiddleWare_.get();
 800664a:	4816      	ldr	r0, [pc, #88]	; (80066a4 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 800664c:	f000 f85e 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8006650:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x72>
    {
        ptr->notify( eMIDDLE_WARE );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2102      	movs	r1, #2
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
        ptr = levelMiddleWare_.get();
 8006664:	480f      	ldr	r0, [pc, #60]	; (80066a4 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xa8>)
 8006666:	f000 f851 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800666a:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 800666c:	e7f1      	b.n	8006652 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x56>
    }

    // Do eAPPLICATION level last
    ptr = levelApplication_.get();
 800666e:	480e      	ldr	r0, [pc, #56]	; (80066a8 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 8006670:	f000 f84c 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 8006674:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x96>
    {
        ptr->notify( eAPPLICATION );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2103      	movs	r1, #3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
        ptr = levelApplication_.get();
 8006688:	4807      	ldr	r0, [pc, #28]	; (80066a8 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0xac>)
 800668a:	f000 f83f 	bl	800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>
 800668e:	6078      	str	r0, [r7, #4]
    while ( ptr != 0 )
 8006690:	e7f1      	b.n	8006676 <_ZN3Cpl6System12StartupHook_20notifyStartupClientsEv+0x7a>
    }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	2000aa98 	.word	0x2000aa98
 80066a0:	2000aaa0 	.word	0x2000aaa0
 80066a4:	2000aaa8 	.word	0x2000aaa8
 80066a8:	2000aab0 	.word	0x2000aab0

080066ac <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
}
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_>:
inline void SList<ITEM>::put( ITEM& item ) noexcept
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
    if ( item.insert_( this ) )
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe faab 	bl	8004c30 <_ZN3Cpl9Container4Item7insert_EPv>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x40>
        if ( m_headPtr )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x2e>
            m_tailPtr->m_nextPtr_ = &item;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	e002      	b.n	80066f8 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3putERS3_+0x34>
            m_headPtr = &item;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]
        item.m_nextPtr_ = 0;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
        m_tailPtr       = &item;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	605a      	str	r2, [r3, #4]
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00f      	beq.n	800674a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x3e>
            m_tailPtr = 0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3304      	adds	r3, #4
 8006754:	e000      	b.n	8006758 <_ZN3Cpl9Container5SListINS_6System12StartupHook_EE3getEv+0x4c>
 8006756:	2300      	movs	r3, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fa98 	bl	8004c8e <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <_Z41__static_initialization_and_destruction_0ii>:
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d117      	bne.n	80067a8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800677e:	4293      	cmp	r3, r2
 8006780:	d112      	bne.n	80067a8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006782:	4811      	ldr	r0, [pc, #68]	; (80067c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8006784:	f7fa ffaa 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<StartupHook_> levelTest_( "invoke_special_static_constructor" );
 8006788:	4910      	ldr	r1, [pc, #64]	; (80067cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800678a:	4811      	ldr	r0, [pc, #68]	; (80067d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800678c:	f7ff ff8e 	bl	80066ac <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelSystem_( "invoke_special_static_constructor" );
 8006790:	490e      	ldr	r1, [pc, #56]	; (80067cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8006792:	4810      	ldr	r0, [pc, #64]	; (80067d4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8006794:	f7ff ff8a 	bl	80066ac <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelMiddleWare_( "invoke_special_static_constructor" );
 8006798:	490c      	ldr	r1, [pc, #48]	; (80067cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800679a:	480f      	ldr	r0, [pc, #60]	; (80067d8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800679c:	f7ff ff86 	bl	80066ac <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
static Cpl::Container::SList<StartupHook_> levelApplication_( "invoke_special_static_constructor" );
 80067a0:	490a      	ldr	r1, [pc, #40]	; (80067cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80067a2:	480e      	ldr	r0, [pc, #56]	; (80067dc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80067a4:	f7ff ff82 	bl	80066ac <_ZN3Cpl9Container5SListINS_6System12StartupHook_EEC1EPKc>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d107      	bne.n	80067be <_Z41__static_initialization_and_destruction_0ii+0x56>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d102      	bne.n	80067be <_Z41__static_initialization_and_destruction_0ii+0x56>
 80067b8:	4803      	ldr	r0, [pc, #12]	; (80067c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80067ba:	f7fa ff9a 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	2000aa94 	.word	0x2000aa94
 80067cc:	08008a08 	.word	0x08008a08
 80067d0:	2000aa98 	.word	0x2000aa98
 80067d4:	2000aaa0 	.word	0x2000aaa0
 80067d8:	2000aaa8 	.word	0x2000aaa8
 80067dc:	2000aab0 	.word	0x2000aab0

080067e0 <_GLOBAL__sub_I__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067e8:	2001      	movs	r0, #1
 80067ea:	f7ff ffbd 	bl	8006768 <_Z41__static_initialization_and_destruction_0ii>
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_GLOBAL__sub_D__ZN3Cpl6System12StartupHook_C2ENS1_11InitLevel_TE>:
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067f8:	2000      	movs	r0, #0
 80067fa:	f7ff ffb5 	bl	8006768 <_Z41__static_initialization_and_destruction_0ii>
 80067fe:	bd80      	pop	{r7, pc}

08006800 <_ZN3Cpl4Text7FStringILi63EEC1EPKc>:
	FString( const char* string="" ) :FString_( string, m_strMem, S ) {}
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f103 0210 	add.w	r2, r3, #16
 8006812:	233f      	movs	r3, #63	; 0x3f
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	f7fe fa8f 	bl	8004d38 <_ZN3Cpl4Text8FString_C1EPKcPci>
 800681a:	4a04      	ldr	r2, [pc, #16]	; (800682c <_ZN3Cpl4Text7FStringILi63EEC1EPKc+0x2c>)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	080093a4 	.word	0x080093a4

08006830 <_ZN3Cpl4Text7FStringILi511EEC1EPKc>:
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 0210 	add.w	r2, r3, #16
 8006842:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	f7fe fa76 	bl	8004d38 <_ZN3Cpl4Text8FString_C1EPKcPci>
 800684c:	4a03      	ldr	r2, [pc, #12]	; (800685c <_ZN3Cpl4Text7FStringILi511EEC1EPKc+0x2c>)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	0800928c 	.word	0x0800928c

08006860 <_ZN3Cpl4Text7FStringILi511EED1Ev>:
class FString : public FString_
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	4a05      	ldr	r2, [pc, #20]	; (8006880 <_ZN3Cpl4Text7FStringILi511EED1Ev+0x20>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	f7fa fe01 	bl	8001478 <_ZN3Cpl4Text8FString_D1Ev>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0800928c 	.word	0x0800928c

08006884 <_ZN3Cpl4Text7FStringILi511EED0Ev>:
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ffe7 	bl	8006860 <_ZN3Cpl4Text7FStringILi511EED1Ev>
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fe5b 	bl	800854e <_ZdlPv>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <_ZN3Cpl4Text7FStringILi63EED1Ev>:
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <_ZN3Cpl4Text7FStringILi63EED1Ev+0x20>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fa fddf 	bl	8001478 <_ZN3Cpl4Text8FString_D1Ev>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	080093a4 	.word	0x080093a4

080068c8 <_ZN3Cpl4Text7FStringILi63EED0Ev>:
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ffe7 	bl	80068a4 <_ZN3Cpl4Text7FStringILi63EED1Ev>
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fe39 	bl	800854e <_ZdlPv>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <_Z41__static_initialization_and_destruction_0ii>:
        }
    }

    Locks_::tracing().unlock();
    return count;
}
 80068e8:	b5b0      	push	{r4, r5, r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d117      	bne.n	8006928 <_Z41__static_initialization_and_destruction_0ii+0x40>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068fe:	4293      	cmp	r3, r2
 8006900:	d112      	bne.n	8006928 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006902:	4817      	ldr	r0, [pc, #92]	; (8006960 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006904:	f7fa feea 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Section_T          activeSections_[OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS];
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800690a:	2407      	movs	r4, #7
 800690c:	461d      	mov	r5, r3
 800690e:	2c00      	cmp	r4, #0
 8006910:	db06      	blt.n	8006920 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006912:	4915      	ldr	r1, [pc, #84]	; (8006968 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff ff73 	bl	8006800 <_ZN3Cpl4Text7FStringILi63EEC1EPKc>
 800691a:	3550      	adds	r5, #80	; 0x50
 800691c:	3c01      	subs	r4, #1
 800691e:	e7f6      	b.n	800690e <_Z41__static_initialization_and_destruction_0ii+0x26>
static Cpl::Text::FString<OPTION_CPL_SYSTEM_TRACE_MAX_BUFFER> buffer_;
 8006920:	4911      	ldr	r1, [pc, #68]	; (8006968 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006922:	4812      	ldr	r0, [pc, #72]	; (800696c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006924:	f7ff ff84 	bl	8006830 <_ZN3Cpl4Text7FStringILi511EEC1EPKc>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d114      	bne.n	8006958 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006934:	4293      	cmp	r3, r2
 8006936:	d10f      	bne.n	8006958 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8006938:	480c      	ldr	r0, [pc, #48]	; (800696c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800693a:	f7ff ff91 	bl	8006860 <_ZN3Cpl4Text7FStringILi511EED1Ev>
static Section_T          activeSections_[OPTION_CPL_SYSTEM_TRACE_MAX_SECTIONS];
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006940:	4b08      	ldr	r3, [pc, #32]	; (8006964 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006942:	429c      	cmp	r4, r3
 8006944:	d005      	beq.n	8006952 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8006946:	3c50      	subs	r4, #80	; 0x50
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4620      	mov	r0, r4
 800694e:	4798      	blx	r3
 8006950:	e7f6      	b.n	8006940 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8006952:	4803      	ldr	r0, [pc, #12]	; (8006960 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006954:	f7fa fecd 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bdb0      	pop	{r4, r5, r7, pc}
 8006960:	2000aab8 	.word	0x2000aab8
 8006964:	2000aabc 	.word	0x2000aabc
 8006968:	08008a4c 	.word	0x08008a4c
 800696c:	2000ad3c 	.word	0x2000ad3c
 8006970:	2000ad3c 	.word	0x2000ad3c

08006974 <_GLOBAL__sub_I__ZN3Cpl6System5TraceC2EPKciS3_S3_S3_>:
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
 8006978:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800697c:	2001      	movs	r0, #1
 800697e:	f7ff ffb3 	bl	80068e8 <_Z41__static_initialization_and_destruction_0ii>
 8006982:	bd80      	pop	{r7, pc}

08006984 <_GLOBAL__sub_D__ZN3Cpl6System5TraceC2EPKciS3_S3_S3_>:
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
 8006988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800698c:	2000      	movs	r0, #0
 800698e:	f7ff ffab 	bl	80068e8 <_Z41__static_initialization_and_destruction_0ii>
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZL21shutdown_application_i>:
using namespace Cpl::System;


////////////////////////////////////////////////////////////////////////////////
static int shutdown_application_( int exit_code )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    // Check if the scheduler has even started (or is still running)
    if ( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800699c:	f7fc ffc4 	bl	8003928 <xTaskGetSchedulerState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <_ZL21shutdown_application_i+0x22>
    {
        vTaskEndScheduler(); // Note: This only works a very few platforms (at this time only x86 Real Mode PC)!
 80069b0:	f7fc fd32 	bl	8003418 <vTaskEndScheduler>
 80069b4:	e002      	b.n	80069bc <_ZL21shutdown_application_i+0x28>
    }

    // If the scheduler is not running (typical case is it hasn't been started) -->then lock up in forever loop
    else
    {
        Bsp_Api_disableIrqs();
 80069b6:	f7fd fc87 	bl	80042c8 <vPortEnterCritical>
        for ( ;;);
 80069ba:	e7fe      	b.n	80069ba <_ZL21shutdown_application_i+0x26>
    }

    return exit_code;
 80069bc:	687b      	ldr	r3, [r7, #4]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <_ZN3Cpl6System8Shutdown7failureEi>:
{
    return shutdown_application_( notifyShutdownHandlers_( OPTION_CPL_SYSTEM_SHUTDOWN_SUCCESS_ERROR_CODE ) );
}

int Shutdown::failure( int exit_code )
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
    return shutdown_application_( notifyShutdownHandlers_( exit_code ) );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8a2 	bl	8006b18 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>
 80069d4:	4603      	mov	r3, r0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ffdc 	bl	8006994 <_ZL21shutdown_application_i>
 80069dc:	4603      	mov	r3, r0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <_Z41__static_initialization_and_destruction_0ii>:
                    dst += "} ";
                }
            }
        }
    }
}
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d10c      	bne.n	8006a12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d107      	bne.n	8006a12 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8006a02:	480b      	ldr	r0, [pc, #44]	; (8006a30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006a04:	f7fa fe6a 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Io::Output* activePtr_ = Trace::getDefaultOutputStream_();
 8006a08:	f7fd fe88 	bl	800471c <_ZN3Cpl6System5Trace23getDefaultOutputStream_Ev>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d107      	bne.n	8006a28 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d102      	bne.n	8006a28 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8006a22:	4803      	ldr	r0, [pc, #12]	; (8006a30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006a24:	f7fa fe65 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2000af4c 	.word	0x2000af4c
 8006a34:	2000af50 	.word	0x2000af50

08006a38 <_GLOBAL__sub_I__ZN3Cpl6System5Trace9redirect_ERNS_2Io6OutputE>:
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a40:	2001      	movs	r0, #1
 8006a42:	f7ff ffd1 	bl	80069e8 <_Z41__static_initialization_and_destruction_0ii>
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_GLOBAL__sub_D__ZN3Cpl6System5Trace9redirect_ERNS_2Io6OutputE>:
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a50:	2000      	movs	r0, #0
 8006a52:	f7ff ffc9 	bl	80069e8 <_Z41__static_initialization_and_destruction_0ii>
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j>:

    return m_stringKeyPtr;
}

int KeyStringBuffer::compare( const char* myString, unsigned myLen, const char* otherString, unsigned otherLen )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
    if ( otherString )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01d      	beq.n	8006aa8 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
    {
        if ( myString )
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01a      	beq.n	8006aa8 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x50>
        {
            unsigned cmpLen      = myLen > otherLen ? otherLen : myLen;
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d901      	bls.n	8006a7e <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x26>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	e000      	b.n	8006a80 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x28>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	617b      	str	r3, [r7, #20]
            int      comparision = strncmp( myString, otherString, cmpLen );
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fea9 	bl	80077de <strncmp>
 8006a8c:	6138      	str	r0, [r7, #16]

            if ( comparision == 0 && myLen != otherLen )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d003      	beq.n	8006aa4 <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x4c>
            {
                return myLen - (int) otherLen;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	e003      	b.n	8006aac <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
            }

            return comparision;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	e001      	b.n	8006aac <_ZN3Cpl9Container15KeyStringBuffer7compareEPKcjS3_j+0x54>
        }
    }

    return -1;
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <_Z41__static_initialization_and_destruction_0ii>:
			buffer.formatAppend( "%02llu:%02u:%02u", hh, (unsigned) mm, (unsigned) ss );
		}
	}

	return !buffer.truncated();
}
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d102      	bne.n	8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006ace:	4809      	ldr	r0, [pc, #36]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006ad0:	f7fa fe04 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d107      	bne.n	8006aea <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d102      	bne.n	8006aea <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006ae4:	4803      	ldr	r0, [pc, #12]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006ae6:	f7fa fe04 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	2000af54 	.word	0x2000af54

08006af8 <_GLOBAL__sub_I__ZN3Cpl4Text14bufferToStringEPKviRNS0_6StringEb>:
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b00:	2001      	movs	r0, #1
 8006b02:	f7ff ffd7 	bl	8006ab4 <_Z41__static_initialization_and_destruction_0ii>
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <_GLOBAL__sub_D__ZN3Cpl4Text14bufferToStringEPKviRNS0_6StringEb>:
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b10:	2000      	movs	r0, #0
 8006b12:	f7ff ffcf 	bl	8006ab4 <_Z41__static_initialization_and_destruction_0ii>
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei>:
}


////////////////////////////////////////////////////////////////////////////////
int Shutdown::notifyShutdownHandlers_( int exit_code )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
    Locks_::system().lock();
 8006b20:	f7fa f946 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fa f9d6 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
    Shutdown::Handler* ptr = callbacks_.get();
 8006b2c:	4814      	ldr	r0, [pc, #80]	; (8006b80 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 8006b2e:	f000 f835 	bl	8006b9c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 8006b32:	60f8      	str	r0, [r7, #12]
    Locks_::system().unlock();
 8006b34:	f7fa f93c 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fa f9e0 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>

    while ( ptr )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x5e>
    {
        exit_code = ptr->notify( exit_code );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
 8006b52:	6078      	str	r0, [r7, #4]

        Locks_::system().lock();
 8006b54:	f7fa f92c 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fa f9bc 	bl	8000ed8 <_ZN3Cpl6System5Mutex4lockEv>
        ptr = callbacks_.pop();
 8006b60:	4807      	ldr	r0, [pc, #28]	; (8006b80 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x68>)
 8006b62:	f000 f849 	bl	8006bf8 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>
 8006b66:	60f8      	str	r0, [r7, #12]
        Locks_::system().unlock();
 8006b68:	f7fa f922 	bl	8000db0 <_ZN3Cpl6System6Locks_6systemEv>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fa f9c6 	bl	8000f00 <_ZN3Cpl6System5Mutex6unlockEv>
    while ( ptr )
 8006b74:	e7e4      	b.n	8006b40 <_ZN3Cpl6System8Shutdown23notifyShutdownHandlers_Ei+0x28>
    }

    return exit_code;
 8006b76:	687b      	ldr	r3, [r7, #4]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	2000af5c 	.word	0x2000af5c

08006b84 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>:
SList<ITEM>::SList( const char* notUsed ) noexcept
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
}
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>:
inline ITEM* SList<ITEM>::get( void ) noexcept
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
    if ( (nextPtr=m_headPtr) )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00f      	beq.n	8006bda <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
        if ( !(m_headPtr=(ITEM*) (nextPtr->m_nextPtr_)) )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x3e>
            m_tailPtr = 0;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
    Item::remove_( nextPtr );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4a>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3304      	adds	r3, #4
 8006be4:	e000      	b.n	8006be8 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv+0x4c>
 8006be6:	2300      	movs	r3, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe f850 	bl	8004c8e <_ZN3Cpl9Container4Item7remove_EPS1_>
    return nextPtr;
 8006bee:	68fb      	ldr	r3, [r7, #12]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3popEv>:
{
    putFirst( item );
}

template <class ITEM>
inline ITEM* SList<ITEM>::pop( void ) noexcept
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
{
    return get();
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ffcb 	bl	8006b9c <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEE3getEv>
 8006c06:	4603      	mov	r3, r0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <_Z41__static_initialization_and_destruction_0ii>:
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10b      	bne.n	8006c38 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d106      	bne.n	8006c38 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8006c2a:	480b      	ldr	r0, [pc, #44]	; (8006c58 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006c2c:	f7fa fd56 	bl	80016dc <_ZNSt8ios_base4InitC1Ev>
static Cpl::Container::SList<Shutdown::Handler> callbacks_( "invoke_special_static_constructor" );
 8006c30:	490a      	ldr	r1, [pc, #40]	; (8006c5c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006c32:	480b      	ldr	r0, [pc, #44]	; (8006c60 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006c34:	f7ff ffa6 	bl	8006b84 <_ZN3Cpl9Container5SListINS_6System8Shutdown7HandlerEEC1EPKc>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d102      	bne.n	8006c4e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8006c48:	4803      	ldr	r0, [pc, #12]	; (8006c58 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006c4a:	f7fa fd52 	bl	80016f2 <_ZNSt8ios_base4InitD1Ev>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	2000af58 	.word	0x2000af58
 8006c5c:	08008a50 	.word	0x08008a50
 8006c60:	2000af5c 	.word	0x2000af5c

08006c64 <_GLOBAL__sub_I__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	f7ff ffcf 	bl	8006c10 <_Z41__static_initialization_and_destruction_0ii>
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_GLOBAL__sub_D__ZN3Cpl6System8Shutdown15registerHandlerERNS1_7HandlerE>:
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f7ff ffc7 	bl	8006c10 <_Z41__static_initialization_and_destruction_0ii>
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <clearerr>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <clearerr+0x64>)
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b125      	cbz	r5, 8006c98 <clearerr+0x14>
 8006c8e:	69ab      	ldr	r3, [r5, #24]
 8006c90:	b913      	cbnz	r3, 8006c98 <clearerr+0x14>
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 fa06 	bl	80070a4 <__sinit>
 8006c98:	4b14      	ldr	r3, [pc, #80]	; (8006cec <clearerr+0x68>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	d118      	bne.n	8006cd0 <clearerr+0x4c>
 8006c9e:	686c      	ldr	r4, [r5, #4]
 8006ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca2:	07d8      	lsls	r0, r3, #31
 8006ca4:	d405      	bmi.n	8006cb2 <clearerr+0x2e>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	0599      	lsls	r1, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <clearerr+0x2e>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f000 fb33 	bl	8007318 <__retarget_lock_acquire_recursive>
 8006cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006cbc:	07d2      	lsls	r2, r2, #31
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	d410      	bmi.n	8006ce4 <clearerr+0x60>
 8006cc2:	059b      	lsls	r3, r3, #22
 8006cc4:	d40e      	bmi.n	8006ce4 <clearerr+0x60>
 8006cc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ccc:	f000 bb25 	b.w	800731a <__retarget_lock_release_recursive>
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <clearerr+0x6c>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <clearerr+0x56>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7e2      	b.n	8006ca0 <clearerr+0x1c>
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <clearerr+0x70>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7dd      	b.n	8006ca0 <clearerr+0x1c>
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000010 	.word	0x20000010
 8006cec:	080094d4 	.word	0x080094d4
 8006cf0:	080094f4 	.word	0x080094f4
 8006cf4:	080094b4 	.word	0x080094b4

08006cf8 <_fclose_r>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	b911      	cbnz	r1, 8006d06 <_fclose_r+0xe>
 8006d00:	2600      	movs	r6, #0
 8006d02:	4630      	mov	r0, r6
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	b118      	cbz	r0, 8006d10 <_fclose_r+0x18>
 8006d08:	6983      	ldr	r3, [r0, #24]
 8006d0a:	b90b      	cbnz	r3, 8006d10 <_fclose_r+0x18>
 8006d0c:	f000 f9ca 	bl	80070a4 <__sinit>
 8006d10:	4b2c      	ldr	r3, [pc, #176]	; (8006dc4 <_fclose_r+0xcc>)
 8006d12:	429c      	cmp	r4, r3
 8006d14:	d114      	bne.n	8006d40 <_fclose_r+0x48>
 8006d16:	686c      	ldr	r4, [r5, #4]
 8006d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d1a:	07d8      	lsls	r0, r3, #31
 8006d1c:	d405      	bmi.n	8006d2a <_fclose_r+0x32>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	0599      	lsls	r1, r3, #22
 8006d22:	d402      	bmi.n	8006d2a <_fclose_r+0x32>
 8006d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d26:	f000 faf7 	bl	8007318 <__retarget_lock_acquire_recursive>
 8006d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2e:	b98b      	cbnz	r3, 8006d54 <_fclose_r+0x5c>
 8006d30:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006d32:	f016 0601 	ands.w	r6, r6, #1
 8006d36:	d1e3      	bne.n	8006d00 <_fclose_r+0x8>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f000 faee 	bl	800731a <__retarget_lock_release_recursive>
 8006d3e:	e7e0      	b.n	8006d02 <_fclose_r+0xa>
 8006d40:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <_fclose_r+0xd0>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <_fclose_r+0x52>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7e6      	b.n	8006d18 <_fclose_r+0x20>
 8006d4a:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <_fclose_r+0xd4>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7e1      	b.n	8006d18 <_fclose_r+0x20>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f878 	bl	8006e4c <__sflush_r>
 8006d5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d5e:	4606      	mov	r6, r0
 8006d60:	b133      	cbz	r3, 8006d70 <_fclose_r+0x78>
 8006d62:	6a21      	ldr	r1, [r4, #32]
 8006d64:	4628      	mov	r0, r5
 8006d66:	4798      	blx	r3
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	bfb8      	it	lt
 8006d6c:	f04f 36ff 	movlt.w	r6, #4294967295
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	061a      	lsls	r2, r3, #24
 8006d74:	d503      	bpl.n	8006d7e <_fclose_r+0x86>
 8006d76:	6921      	ldr	r1, [r4, #16]
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f000 faff 	bl	800737c <_free_r>
 8006d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d80:	b141      	cbz	r1, 8006d94 <_fclose_r+0x9c>
 8006d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d86:	4299      	cmp	r1, r3
 8006d88:	d002      	beq.n	8006d90 <_fclose_r+0x98>
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 faf6 	bl	800737c <_free_r>
 8006d90:	2300      	movs	r3, #0
 8006d92:	6363      	str	r3, [r4, #52]	; 0x34
 8006d94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d96:	b121      	cbz	r1, 8006da2 <_fclose_r+0xaa>
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 faef 	bl	800737c <_free_r>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	64a3      	str	r3, [r4, #72]	; 0x48
 8006da2:	f000 f967 	bl	8007074 <__sfp_lock_acquire>
 8006da6:	2300      	movs	r3, #0
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dac:	07db      	lsls	r3, r3, #31
 8006dae:	d402      	bmi.n	8006db6 <_fclose_r+0xbe>
 8006db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db2:	f000 fab2 	bl	800731a <__retarget_lock_release_recursive>
 8006db6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db8:	f000 faad 	bl	8007316 <__retarget_lock_close_recursive>
 8006dbc:	f000 f960 	bl	8007080 <__sfp_lock_release>
 8006dc0:	e79f      	b.n	8006d02 <_fclose_r+0xa>
 8006dc2:	bf00      	nop
 8006dc4:	080094d4 	.word	0x080094d4
 8006dc8:	080094f4 	.word	0x080094f4
 8006dcc:	080094b4 	.word	0x080094b4

08006dd0 <fclose>:
 8006dd0:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <fclose+0xc>)
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	f7ff bf8f 	b.w	8006cf8 <_fclose_r>
 8006dda:	bf00      	nop
 8006ddc:	20000010 	.word	0x20000010

08006de0 <feof>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <feof+0x5c>)
 8006de4:	681d      	ldr	r5, [r3, #0]
 8006de6:	4604      	mov	r4, r0
 8006de8:	b125      	cbz	r5, 8006df4 <feof+0x14>
 8006dea:	69ab      	ldr	r3, [r5, #24]
 8006dec:	b913      	cbnz	r3, 8006df4 <feof+0x14>
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f958 	bl	80070a4 <__sinit>
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <feof+0x60>)
 8006df6:	429c      	cmp	r4, r3
 8006df8:	d116      	bne.n	8006e28 <feof+0x48>
 8006dfa:	686c      	ldr	r4, [r5, #4]
 8006dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dfe:	07d8      	lsls	r0, r3, #31
 8006e00:	d405      	bmi.n	8006e0e <feof+0x2e>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	0599      	lsls	r1, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <feof+0x2e>
 8006e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0a:	f000 fa85 	bl	8007318 <__retarget_lock_acquire_recursive>
 8006e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	07d2      	lsls	r2, r2, #31
 8006e14:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8006e18:	d404      	bmi.n	8006e24 <feof+0x44>
 8006e1a:	059b      	lsls	r3, r3, #22
 8006e1c:	d402      	bmi.n	8006e24 <feof+0x44>
 8006e1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e20:	f000 fa7b 	bl	800731a <__retarget_lock_release_recursive>
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <feof+0x64>)
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d101      	bne.n	8006e32 <feof+0x52>
 8006e2e:	68ac      	ldr	r4, [r5, #8]
 8006e30:	e7e4      	b.n	8006dfc <feof+0x1c>
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <feof+0x68>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	bf08      	it	eq
 8006e38:	68ec      	ldreq	r4, [r5, #12]
 8006e3a:	e7df      	b.n	8006dfc <feof+0x1c>
 8006e3c:	20000010 	.word	0x20000010
 8006e40:	080094d4 	.word	0x080094d4
 8006e44:	080094f4 	.word	0x080094f4
 8006e48:	080094b4 	.word	0x080094b4

08006e4c <__sflush_r>:
 8006e4c:	898a      	ldrh	r2, [r1, #12]
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	4605      	mov	r5, r0
 8006e54:	0710      	lsls	r0, r2, #28
 8006e56:	460c      	mov	r4, r1
 8006e58:	d458      	bmi.n	8006f0c <__sflush_r+0xc0>
 8006e5a:	684b      	ldr	r3, [r1, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc05      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc02      	bgt.n	8006e6c <__sflush_r+0x20>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d0f9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e78:	682f      	ldr	r7, [r5, #0]
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	d032      	beq.n	8006ee4 <__sflush_r+0x98>
 8006e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	075a      	lsls	r2, r3, #29
 8006e84:	d505      	bpl.n	8006e92 <__sflush_r+0x46>
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	1ac0      	subs	r0, r0, r3
 8006e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e8c:	b10b      	cbz	r3, 8006e92 <__sflush_r+0x46>
 8006e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e90:	1ac0      	subs	r0, r0, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	4602      	mov	r2, r0
 8006e96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b0      	blx	r6
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	d106      	bne.n	8006eb2 <__sflush_r+0x66>
 8006ea4:	6829      	ldr	r1, [r5, #0]
 8006ea6:	291d      	cmp	r1, #29
 8006ea8:	d82c      	bhi.n	8006f04 <__sflush_r+0xb8>
 8006eaa:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <__sflush_r+0x108>)
 8006eac:	40ca      	lsrs	r2, r1
 8006eae:	07d6      	lsls	r6, r2, #31
 8006eb0:	d528      	bpl.n	8006f04 <__sflush_r+0xb8>
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	6062      	str	r2, [r4, #4]
 8006eb6:	04d9      	lsls	r1, r3, #19
 8006eb8:	6922      	ldr	r2, [r4, #16]
 8006eba:	6022      	str	r2, [r4, #0]
 8006ebc:	d504      	bpl.n	8006ec8 <__sflush_r+0x7c>
 8006ebe:	1c42      	adds	r2, r0, #1
 8006ec0:	d101      	bne.n	8006ec6 <__sflush_r+0x7a>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	b903      	cbnz	r3, 8006ec8 <__sflush_r+0x7c>
 8006ec6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eca:	602f      	str	r7, [r5, #0]
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d0ca      	beq.n	8006e66 <__sflush_r+0x1a>
 8006ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d002      	beq.n	8006ede <__sflush_r+0x92>
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f000 fa4f 	bl	800737c <_free_r>
 8006ede:	2000      	movs	r0, #0
 8006ee0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ee2:	e7c1      	b.n	8006e68 <__sflush_r+0x1c>
 8006ee4:	6a21      	ldr	r1, [r4, #32]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b0      	blx	r6
 8006eec:	1c41      	adds	r1, r0, #1
 8006eee:	d1c7      	bne.n	8006e80 <__sflush_r+0x34>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0c4      	beq.n	8006e80 <__sflush_r+0x34>
 8006ef6:	2b1d      	cmp	r3, #29
 8006ef8:	d001      	beq.n	8006efe <__sflush_r+0xb2>
 8006efa:	2b16      	cmp	r3, #22
 8006efc:	d101      	bne.n	8006f02 <__sflush_r+0xb6>
 8006efe:	602f      	str	r7, [r5, #0]
 8006f00:	e7b1      	b.n	8006e66 <__sflush_r+0x1a>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	e7ad      	b.n	8006e68 <__sflush_r+0x1c>
 8006f0c:	690f      	ldr	r7, [r1, #16]
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	d0a9      	beq.n	8006e66 <__sflush_r+0x1a>
 8006f12:	0793      	lsls	r3, r2, #30
 8006f14:	680e      	ldr	r6, [r1, #0]
 8006f16:	bf08      	it	eq
 8006f18:	694b      	ldreq	r3, [r1, #20]
 8006f1a:	600f      	str	r7, [r1, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	2300      	movne	r3, #0
 8006f20:	eba6 0807 	sub.w	r8, r6, r7
 8006f24:	608b      	str	r3, [r1, #8]
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	dd9c      	ble.n	8006e66 <__sflush_r+0x1a>
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f30:	4643      	mov	r3, r8
 8006f32:	463a      	mov	r2, r7
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b0      	blx	r6
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc06      	bgt.n	8006f4a <__sflush_r+0xfe>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	e78e      	b.n	8006e68 <__sflush_r+0x1c>
 8006f4a:	4407      	add	r7, r0
 8006f4c:	eba8 0800 	sub.w	r8, r8, r0
 8006f50:	e7e9      	b.n	8006f26 <__sflush_r+0xda>
 8006f52:	bf00      	nop
 8006f54:	20400001 	.word	0x20400001

08006f58 <_fflush_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b913      	cbnz	r3, 8006f68 <_fflush_r+0x10>
 8006f62:	2500      	movs	r5, #0
 8006f64:	4628      	mov	r0, r5
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	b118      	cbz	r0, 8006f72 <_fflush_r+0x1a>
 8006f6a:	6983      	ldr	r3, [r0, #24]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <_fflush_r+0x1a>
 8006f6e:	f000 f899 	bl	80070a4 <__sinit>
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <_fflush_r+0x6c>)
 8006f74:	429c      	cmp	r4, r3
 8006f76:	d11b      	bne.n	8006fb0 <_fflush_r+0x58>
 8006f78:	686c      	ldr	r4, [r5, #4]
 8006f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0ef      	beq.n	8006f62 <_fflush_r+0xa>
 8006f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f84:	07d0      	lsls	r0, r2, #31
 8006f86:	d404      	bmi.n	8006f92 <_fflush_r+0x3a>
 8006f88:	0599      	lsls	r1, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_fflush_r+0x3a>
 8006f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f8e:	f000 f9c3 	bl	8007318 <__retarget_lock_acquire_recursive>
 8006f92:	4628      	mov	r0, r5
 8006f94:	4621      	mov	r1, r4
 8006f96:	f7ff ff59 	bl	8006e4c <__sflush_r>
 8006f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f9c:	07da      	lsls	r2, r3, #31
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	d4e0      	bmi.n	8006f64 <_fflush_r+0xc>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	059b      	lsls	r3, r3, #22
 8006fa6:	d4dd      	bmi.n	8006f64 <_fflush_r+0xc>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f000 f9b6 	bl	800731a <__retarget_lock_release_recursive>
 8006fae:	e7d9      	b.n	8006f64 <_fflush_r+0xc>
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <_fflush_r+0x70>)
 8006fb2:	429c      	cmp	r4, r3
 8006fb4:	d101      	bne.n	8006fba <_fflush_r+0x62>
 8006fb6:	68ac      	ldr	r4, [r5, #8]
 8006fb8:	e7df      	b.n	8006f7a <_fflush_r+0x22>
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <_fflush_r+0x74>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	bf08      	it	eq
 8006fc0:	68ec      	ldreq	r4, [r5, #12]
 8006fc2:	e7da      	b.n	8006f7a <_fflush_r+0x22>
 8006fc4:	080094d4 	.word	0x080094d4
 8006fc8:	080094f4 	.word	0x080094f4
 8006fcc:	080094b4 	.word	0x080094b4

08006fd0 <fflush>:
 8006fd0:	4601      	mov	r1, r0
 8006fd2:	b920      	cbnz	r0, 8006fde <fflush+0xe>
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <fflush+0x18>)
 8006fd6:	4905      	ldr	r1, [pc, #20]	; (8006fec <fflush+0x1c>)
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 b8e1 	b.w	80071a0 <_fwalk_reent>
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <fflush+0x20>)
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	f7ff bfb9 	b.w	8006f58 <_fflush_r>
 8006fe6:	bf00      	nop
 8006fe8:	08009514 	.word	0x08009514
 8006fec:	08006f59 	.word	0x08006f59
 8006ff0:	20000010 	.word	0x20000010

08006ff4 <std>:
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8006ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007002:	6083      	str	r3, [r0, #8]
 8007004:	8181      	strh	r1, [r0, #12]
 8007006:	6643      	str	r3, [r0, #100]	; 0x64
 8007008:	81c2      	strh	r2, [r0, #14]
 800700a:	6183      	str	r3, [r0, #24]
 800700c:	4619      	mov	r1, r3
 800700e:	2208      	movs	r2, #8
 8007010:	305c      	adds	r0, #92	; 0x5c
 8007012:	f000 f9ab 	bl	800736c <memset>
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <std+0x38>)
 8007018:	6263      	str	r3, [r4, #36]	; 0x24
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <std+0x3c>)
 800701c:	62a3      	str	r3, [r4, #40]	; 0x28
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <std+0x40>)
 8007020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <std+0x44>)
 8007024:	6224      	str	r4, [r4, #32]
 8007026:	6323      	str	r3, [r4, #48]	; 0x30
 8007028:	bd10      	pop	{r4, pc}
 800702a:	bf00      	nop
 800702c:	08007679 	.word	0x08007679
 8007030:	0800769b 	.word	0x0800769b
 8007034:	080076d3 	.word	0x080076d3
 8007038:	080076f7 	.word	0x080076f7

0800703c <_cleanup_r>:
 800703c:	4901      	ldr	r1, [pc, #4]	; (8007044 <_cleanup_r+0x8>)
 800703e:	f000 b8af 	b.w	80071a0 <_fwalk_reent>
 8007042:	bf00      	nop
 8007044:	08006f59 	.word	0x08006f59

08007048 <__sfmoreglue>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	2268      	movs	r2, #104	; 0x68
 800704c:	1e4d      	subs	r5, r1, #1
 800704e:	4355      	muls	r5, r2
 8007050:	460e      	mov	r6, r1
 8007052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007056:	f000 f9fd 	bl	8007454 <_malloc_r>
 800705a:	4604      	mov	r4, r0
 800705c:	b140      	cbz	r0, 8007070 <__sfmoreglue+0x28>
 800705e:	2100      	movs	r1, #0
 8007060:	e9c0 1600 	strd	r1, r6, [r0]
 8007064:	300c      	adds	r0, #12
 8007066:	60a0      	str	r0, [r4, #8]
 8007068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800706c:	f000 f97e 	bl	800736c <memset>
 8007070:	4620      	mov	r0, r4
 8007072:	bd70      	pop	{r4, r5, r6, pc}

08007074 <__sfp_lock_acquire>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__sfp_lock_acquire+0x8>)
 8007076:	f000 b94f 	b.w	8007318 <__retarget_lock_acquire_recursive>
 800707a:	bf00      	nop
 800707c:	2000af65 	.word	0x2000af65

08007080 <__sfp_lock_release>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__sfp_lock_release+0x8>)
 8007082:	f000 b94a 	b.w	800731a <__retarget_lock_release_recursive>
 8007086:	bf00      	nop
 8007088:	2000af65 	.word	0x2000af65

0800708c <__sinit_lock_acquire>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__sinit_lock_acquire+0x8>)
 800708e:	f000 b943 	b.w	8007318 <__retarget_lock_acquire_recursive>
 8007092:	bf00      	nop
 8007094:	2000af66 	.word	0x2000af66

08007098 <__sinit_lock_release>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__sinit_lock_release+0x8>)
 800709a:	f000 b93e 	b.w	800731a <__retarget_lock_release_recursive>
 800709e:	bf00      	nop
 80070a0:	2000af66 	.word	0x2000af66

080070a4 <__sinit>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4604      	mov	r4, r0
 80070a8:	f7ff fff0 	bl	800708c <__sinit_lock_acquire>
 80070ac:	69a3      	ldr	r3, [r4, #24]
 80070ae:	b11b      	cbz	r3, 80070b8 <__sinit+0x14>
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f7ff bff0 	b.w	8007098 <__sinit_lock_release>
 80070b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070bc:	6523      	str	r3, [r4, #80]	; 0x50
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <__sinit+0x68>)
 80070c0:	4a13      	ldr	r2, [pc, #76]	; (8007110 <__sinit+0x6c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	bf04      	itt	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	61a3      	streq	r3, [r4, #24]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 f820 	bl	8007114 <__sfp>
 80070d4:	6060      	str	r0, [r4, #4]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f81c 	bl	8007114 <__sfp>
 80070dc:	60a0      	str	r0, [r4, #8]
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 f818 	bl	8007114 <__sfp>
 80070e4:	2200      	movs	r2, #0
 80070e6:	60e0      	str	r0, [r4, #12]
 80070e8:	2104      	movs	r1, #4
 80070ea:	6860      	ldr	r0, [r4, #4]
 80070ec:	f7ff ff82 	bl	8006ff4 <std>
 80070f0:	68a0      	ldr	r0, [r4, #8]
 80070f2:	2201      	movs	r2, #1
 80070f4:	2109      	movs	r1, #9
 80070f6:	f7ff ff7d 	bl	8006ff4 <std>
 80070fa:	68e0      	ldr	r0, [r4, #12]
 80070fc:	2202      	movs	r2, #2
 80070fe:	2112      	movs	r1, #18
 8007100:	f7ff ff78 	bl	8006ff4 <std>
 8007104:	2301      	movs	r3, #1
 8007106:	61a3      	str	r3, [r4, #24]
 8007108:	e7d2      	b.n	80070b0 <__sinit+0xc>
 800710a:	bf00      	nop
 800710c:	08009514 	.word	0x08009514
 8007110:	0800703d 	.word	0x0800703d

08007114 <__sfp>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	4607      	mov	r7, r0
 8007118:	f7ff ffac 	bl	8007074 <__sfp_lock_acquire>
 800711c:	4b1e      	ldr	r3, [pc, #120]	; (8007198 <__sfp+0x84>)
 800711e:	681e      	ldr	r6, [r3, #0]
 8007120:	69b3      	ldr	r3, [r6, #24]
 8007122:	b913      	cbnz	r3, 800712a <__sfp+0x16>
 8007124:	4630      	mov	r0, r6
 8007126:	f7ff ffbd 	bl	80070a4 <__sinit>
 800712a:	3648      	adds	r6, #72	; 0x48
 800712c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	d503      	bpl.n	800713c <__sfp+0x28>
 8007134:	6833      	ldr	r3, [r6, #0]
 8007136:	b30b      	cbz	r3, 800717c <__sfp+0x68>
 8007138:	6836      	ldr	r6, [r6, #0]
 800713a:	e7f7      	b.n	800712c <__sfp+0x18>
 800713c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007140:	b9d5      	cbnz	r5, 8007178 <__sfp+0x64>
 8007142:	4b16      	ldr	r3, [pc, #88]	; (800719c <__sfp+0x88>)
 8007144:	60e3      	str	r3, [r4, #12]
 8007146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800714a:	6665      	str	r5, [r4, #100]	; 0x64
 800714c:	f000 f8e2 	bl	8007314 <__retarget_lock_init_recursive>
 8007150:	f7ff ff96 	bl	8007080 <__sfp_lock_release>
 8007154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800715c:	6025      	str	r5, [r4, #0]
 800715e:	61a5      	str	r5, [r4, #24]
 8007160:	2208      	movs	r2, #8
 8007162:	4629      	mov	r1, r5
 8007164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007168:	f000 f900 	bl	800736c <memset>
 800716c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007174:	4620      	mov	r0, r4
 8007176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007178:	3468      	adds	r4, #104	; 0x68
 800717a:	e7d9      	b.n	8007130 <__sfp+0x1c>
 800717c:	2104      	movs	r1, #4
 800717e:	4638      	mov	r0, r7
 8007180:	f7ff ff62 	bl	8007048 <__sfmoreglue>
 8007184:	4604      	mov	r4, r0
 8007186:	6030      	str	r0, [r6, #0]
 8007188:	2800      	cmp	r0, #0
 800718a:	d1d5      	bne.n	8007138 <__sfp+0x24>
 800718c:	f7ff ff78 	bl	8007080 <__sfp_lock_release>
 8007190:	230c      	movs	r3, #12
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	e7ee      	b.n	8007174 <__sfp+0x60>
 8007196:	bf00      	nop
 8007198:	08009514 	.word	0x08009514
 800719c:	ffff0001 	.word	0xffff0001

080071a0 <_fwalk_reent>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	4606      	mov	r6, r0
 80071a6:	4688      	mov	r8, r1
 80071a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071ac:	2700      	movs	r7, #0
 80071ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b2:	f1b9 0901 	subs.w	r9, r9, #1
 80071b6:	d505      	bpl.n	80071c4 <_fwalk_reent+0x24>
 80071b8:	6824      	ldr	r4, [r4, #0]
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	d1f7      	bne.n	80071ae <_fwalk_reent+0xe>
 80071be:	4638      	mov	r0, r7
 80071c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d907      	bls.n	80071da <_fwalk_reent+0x3a>
 80071ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ce:	3301      	adds	r3, #1
 80071d0:	d003      	beq.n	80071da <_fwalk_reent+0x3a>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	47c0      	blx	r8
 80071d8:	4307      	orrs	r7, r0
 80071da:	3568      	adds	r5, #104	; 0x68
 80071dc:	e7e9      	b.n	80071b2 <_fwalk_reent+0x12>
	...

080071e0 <_fwrite_r>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	9c08      	ldr	r4, [sp, #32]
 80071e6:	468a      	mov	sl, r1
 80071e8:	4690      	mov	r8, r2
 80071ea:	fb02 f903 	mul.w	r9, r2, r3
 80071ee:	4605      	mov	r5, r0
 80071f0:	b118      	cbz	r0, 80071fa <_fwrite_r+0x1a>
 80071f2:	6983      	ldr	r3, [r0, #24]
 80071f4:	b90b      	cbnz	r3, 80071fa <_fwrite_r+0x1a>
 80071f6:	f7ff ff55 	bl	80070a4 <__sinit>
 80071fa:	4b26      	ldr	r3, [pc, #152]	; (8007294 <_fwrite_r+0xb4>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d123      	bne.n	8007248 <_fwrite_r+0x68>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007204:	07de      	lsls	r6, r3, #31
 8007206:	d405      	bmi.n	8007214 <_fwrite_r+0x34>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	0598      	lsls	r0, r3, #22
 800720c:	d402      	bmi.n	8007214 <_fwrite_r+0x34>
 800720e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007210:	f000 f882 	bl	8007318 <__retarget_lock_acquire_recursive>
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	0719      	lsls	r1, r3, #28
 8007218:	d520      	bpl.n	800725c <_fwrite_r+0x7c>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	b1f3      	cbz	r3, 800725c <_fwrite_r+0x7c>
 800721e:	2600      	movs	r6, #0
 8007220:	454e      	cmp	r6, r9
 8007222:	d029      	beq.n	8007278 <_fwrite_r+0x98>
 8007224:	68a7      	ldr	r7, [r4, #8]
 8007226:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800722a:	3f01      	subs	r7, #1
 800722c:	2f00      	cmp	r7, #0
 800722e:	60a7      	str	r7, [r4, #8]
 8007230:	da04      	bge.n	800723c <_fwrite_r+0x5c>
 8007232:	69a3      	ldr	r3, [r4, #24]
 8007234:	429f      	cmp	r7, r3
 8007236:	db19      	blt.n	800726c <_fwrite_r+0x8c>
 8007238:	290a      	cmp	r1, #10
 800723a:	d017      	beq.n	800726c <_fwrite_r+0x8c>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	6022      	str	r2, [r4, #0]
 8007242:	7019      	strb	r1, [r3, #0]
 8007244:	3601      	adds	r6, #1
 8007246:	e7eb      	b.n	8007220 <_fwrite_r+0x40>
 8007248:	4b13      	ldr	r3, [pc, #76]	; (8007298 <_fwrite_r+0xb8>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d101      	bne.n	8007252 <_fwrite_r+0x72>
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	e7d7      	b.n	8007202 <_fwrite_r+0x22>
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <_fwrite_r+0xbc>)
 8007254:	429c      	cmp	r4, r3
 8007256:	bf08      	it	eq
 8007258:	68ec      	ldreq	r4, [r5, #12]
 800725a:	e7d2      	b.n	8007202 <_fwrite_r+0x22>
 800725c:	4621      	mov	r1, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fbbe 	bl	80079e0 <__swsetup_r>
 8007264:	2800      	cmp	r0, #0
 8007266:	d0da      	beq.n	800721e <_fwrite_r+0x3e>
 8007268:	2600      	movs	r6, #0
 800726a:	e005      	b.n	8007278 <_fwrite_r+0x98>
 800726c:	4622      	mov	r2, r4
 800726e:	4628      	mov	r0, r5
 8007270:	f000 fb52 	bl	8007918 <__swbuf_r>
 8007274:	3001      	adds	r0, #1
 8007276:	d1e5      	bne.n	8007244 <_fwrite_r+0x64>
 8007278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d405      	bmi.n	800728a <_fwrite_r+0xaa>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	d402      	bmi.n	800728a <_fwrite_r+0xaa>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f000 f848 	bl	800731a <__retarget_lock_release_recursive>
 800728a:	fbb6 f0f8 	udiv	r0, r6, r8
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	bf00      	nop
 8007294:	080094d4 	.word	0x080094d4
 8007298:	080094f4 	.word	0x080094f4
 800729c:	080094b4 	.word	0x080094b4

080072a0 <fwrite>:
 80072a0:	b507      	push	{r0, r1, r2, lr}
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	460a      	mov	r2, r1
 80072a8:	4601      	mov	r1, r0
 80072aa:	4803      	ldr	r0, [pc, #12]	; (80072b8 <fwrite+0x18>)
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f7ff ff97 	bl	80071e0 <_fwrite_r>
 80072b2:	b003      	add	sp, #12
 80072b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b8:	20000010 	.word	0x20000010

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4d0d      	ldr	r5, [pc, #52]	; (80072f4 <__libc_init_array+0x38>)
 80072c0:	4c0d      	ldr	r4, [pc, #52]	; (80072f8 <__libc_init_array+0x3c>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	2600      	movs	r6, #0
 80072c8:	42a6      	cmp	r6, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	4d0b      	ldr	r5, [pc, #44]	; (80072fc <__libc_init_array+0x40>)
 80072ce:	4c0c      	ldr	r4, [pc, #48]	; (8007300 <__libc_init_array+0x44>)
 80072d0:	f001 fa32 	bl	8008738 <_init>
 80072d4:	1b64      	subs	r4, r4, r5
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	2600      	movs	r6, #0
 80072da:	42a6      	cmp	r6, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e4:	4798      	blx	r3
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ee:	4798      	blx	r3
 80072f0:	3601      	adds	r6, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	08009654 	.word	0x08009654
 80072f8:	08009654 	.word	0x08009654
 80072fc:	08009654 	.word	0x08009654
 8007300:	080096a0 	.word	0x080096a0

08007304 <isspace>:
 8007304:	4b02      	ldr	r3, [pc, #8]	; (8007310 <isspace+0xc>)
 8007306:	4418      	add	r0, r3
 8007308:	7840      	ldrb	r0, [r0, #1]
 800730a:	f000 0008 	and.w	r0, r0, #8
 800730e:	4770      	bx	lr
 8007310:	08009518 	.word	0x08009518

08007314 <__retarget_lock_init_recursive>:
 8007314:	4770      	bx	lr

08007316 <__retarget_lock_close_recursive>:
 8007316:	4770      	bx	lr

08007318 <__retarget_lock_acquire_recursive>:
 8007318:	4770      	bx	lr

0800731a <__retarget_lock_release_recursive>:
 800731a:	4770      	bx	lr

0800731c <memcpy>:
 800731c:	440a      	add	r2, r1
 800731e:	4291      	cmp	r1, r2
 8007320:	f100 33ff 	add.w	r3, r0, #4294967295
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	4770      	bx	lr
 8007328:	b510      	push	{r4, lr}
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007332:	4291      	cmp	r1, r2
 8007334:	d1f9      	bne.n	800732a <memcpy+0xe>
 8007336:	bd10      	pop	{r4, pc}

08007338 <memmove>:
 8007338:	4288      	cmp	r0, r1
 800733a:	b510      	push	{r4, lr}
 800733c:	eb01 0402 	add.w	r4, r1, r2
 8007340:	d902      	bls.n	8007348 <memmove+0x10>
 8007342:	4284      	cmp	r4, r0
 8007344:	4623      	mov	r3, r4
 8007346:	d807      	bhi.n	8007358 <memmove+0x20>
 8007348:	1e43      	subs	r3, r0, #1
 800734a:	42a1      	cmp	r1, r4
 800734c:	d008      	beq.n	8007360 <memmove+0x28>
 800734e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007356:	e7f8      	b.n	800734a <memmove+0x12>
 8007358:	4402      	add	r2, r0
 800735a:	4601      	mov	r1, r0
 800735c:	428a      	cmp	r2, r1
 800735e:	d100      	bne.n	8007362 <memmove+0x2a>
 8007360:	bd10      	pop	{r4, pc}
 8007362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800736a:	e7f7      	b.n	800735c <memmove+0x24>

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <_free_r>:
 800737c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800737e:	2900      	cmp	r1, #0
 8007380:	d044      	beq.n	800740c <_free_r+0x90>
 8007382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007386:	9001      	str	r0, [sp, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f1a1 0404 	sub.w	r4, r1, #4
 800738e:	bfb8      	it	lt
 8007390:	18e4      	addlt	r4, r4, r3
 8007392:	f000 fc1b 	bl	8007bcc <__malloc_lock>
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <_free_r+0x94>)
 8007398:	9801      	ldr	r0, [sp, #4]
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	b933      	cbnz	r3, 80073ac <_free_r+0x30>
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	6014      	str	r4, [r2, #0]
 80073a2:	b003      	add	sp, #12
 80073a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073a8:	f000 bc16 	b.w	8007bd8 <__malloc_unlock>
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	d908      	bls.n	80073c2 <_free_r+0x46>
 80073b0:	6825      	ldr	r5, [r4, #0]
 80073b2:	1961      	adds	r1, r4, r5
 80073b4:	428b      	cmp	r3, r1
 80073b6:	bf01      	itttt	eq
 80073b8:	6819      	ldreq	r1, [r3, #0]
 80073ba:	685b      	ldreq	r3, [r3, #4]
 80073bc:	1949      	addeq	r1, r1, r5
 80073be:	6021      	streq	r1, [r4, #0]
 80073c0:	e7ed      	b.n	800739e <_free_r+0x22>
 80073c2:	461a      	mov	r2, r3
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b10b      	cbz	r3, 80073cc <_free_r+0x50>
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d9fa      	bls.n	80073c2 <_free_r+0x46>
 80073cc:	6811      	ldr	r1, [r2, #0]
 80073ce:	1855      	adds	r5, r2, r1
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	d10b      	bne.n	80073ec <_free_r+0x70>
 80073d4:	6824      	ldr	r4, [r4, #0]
 80073d6:	4421      	add	r1, r4
 80073d8:	1854      	adds	r4, r2, r1
 80073da:	42a3      	cmp	r3, r4
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	d1e0      	bne.n	80073a2 <_free_r+0x26>
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6053      	str	r3, [r2, #4]
 80073e6:	4421      	add	r1, r4
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	e7da      	b.n	80073a2 <_free_r+0x26>
 80073ec:	d902      	bls.n	80073f4 <_free_r+0x78>
 80073ee:	230c      	movs	r3, #12
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	e7d6      	b.n	80073a2 <_free_r+0x26>
 80073f4:	6825      	ldr	r5, [r4, #0]
 80073f6:	1961      	adds	r1, r4, r5
 80073f8:	428b      	cmp	r3, r1
 80073fa:	bf04      	itt	eq
 80073fc:	6819      	ldreq	r1, [r3, #0]
 80073fe:	685b      	ldreq	r3, [r3, #4]
 8007400:	6063      	str	r3, [r4, #4]
 8007402:	bf04      	itt	eq
 8007404:	1949      	addeq	r1, r1, r5
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	6054      	str	r4, [r2, #4]
 800740a:	e7ca      	b.n	80073a2 <_free_r+0x26>
 800740c:	b003      	add	sp, #12
 800740e:	bd30      	pop	{r4, r5, pc}
 8007410:	2000af68 	.word	0x2000af68

08007414 <sbrk_aligned>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	4e0e      	ldr	r6, [pc, #56]	; (8007450 <sbrk_aligned+0x3c>)
 8007418:	460c      	mov	r4, r1
 800741a:	6831      	ldr	r1, [r6, #0]
 800741c:	4605      	mov	r5, r0
 800741e:	b911      	cbnz	r1, 8007426 <sbrk_aligned+0x12>
 8007420:	f000 f91a 	bl	8007658 <_sbrk_r>
 8007424:	6030      	str	r0, [r6, #0]
 8007426:	4621      	mov	r1, r4
 8007428:	4628      	mov	r0, r5
 800742a:	f000 f915 	bl	8007658 <_sbrk_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d00a      	beq.n	8007448 <sbrk_aligned+0x34>
 8007432:	1cc4      	adds	r4, r0, #3
 8007434:	f024 0403 	bic.w	r4, r4, #3
 8007438:	42a0      	cmp	r0, r4
 800743a:	d007      	beq.n	800744c <sbrk_aligned+0x38>
 800743c:	1a21      	subs	r1, r4, r0
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f90a 	bl	8007658 <_sbrk_r>
 8007444:	3001      	adds	r0, #1
 8007446:	d101      	bne.n	800744c <sbrk_aligned+0x38>
 8007448:	f04f 34ff 	mov.w	r4, #4294967295
 800744c:	4620      	mov	r0, r4
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	2000af6c 	.word	0x2000af6c

08007454 <_malloc_r>:
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	1ccd      	adds	r5, r1, #3
 800745a:	f025 0503 	bic.w	r5, r5, #3
 800745e:	3508      	adds	r5, #8
 8007460:	2d0c      	cmp	r5, #12
 8007462:	bf38      	it	cc
 8007464:	250c      	movcc	r5, #12
 8007466:	2d00      	cmp	r5, #0
 8007468:	4607      	mov	r7, r0
 800746a:	db01      	blt.n	8007470 <_malloc_r+0x1c>
 800746c:	42a9      	cmp	r1, r5
 800746e:	d905      	bls.n	800747c <_malloc_r+0x28>
 8007470:	230c      	movs	r3, #12
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	2600      	movs	r6, #0
 8007476:	4630      	mov	r0, r6
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	4e2e      	ldr	r6, [pc, #184]	; (8007538 <_malloc_r+0xe4>)
 800747e:	f000 fba5 	bl	8007bcc <__malloc_lock>
 8007482:	6833      	ldr	r3, [r6, #0]
 8007484:	461c      	mov	r4, r3
 8007486:	bb34      	cbnz	r4, 80074d6 <_malloc_r+0x82>
 8007488:	4629      	mov	r1, r5
 800748a:	4638      	mov	r0, r7
 800748c:	f7ff ffc2 	bl	8007414 <sbrk_aligned>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	4604      	mov	r4, r0
 8007494:	d14d      	bne.n	8007532 <_malloc_r+0xde>
 8007496:	6834      	ldr	r4, [r6, #0]
 8007498:	4626      	mov	r6, r4
 800749a:	2e00      	cmp	r6, #0
 800749c:	d140      	bne.n	8007520 <_malloc_r+0xcc>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4631      	mov	r1, r6
 80074a2:	4638      	mov	r0, r7
 80074a4:	eb04 0803 	add.w	r8, r4, r3
 80074a8:	f000 f8d6 	bl	8007658 <_sbrk_r>
 80074ac:	4580      	cmp	r8, r0
 80074ae:	d13a      	bne.n	8007526 <_malloc_r+0xd2>
 80074b0:	6821      	ldr	r1, [r4, #0]
 80074b2:	3503      	adds	r5, #3
 80074b4:	1a6d      	subs	r5, r5, r1
 80074b6:	f025 0503 	bic.w	r5, r5, #3
 80074ba:	3508      	adds	r5, #8
 80074bc:	2d0c      	cmp	r5, #12
 80074be:	bf38      	it	cc
 80074c0:	250c      	movcc	r5, #12
 80074c2:	4629      	mov	r1, r5
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff ffa5 	bl	8007414 <sbrk_aligned>
 80074ca:	3001      	adds	r0, #1
 80074cc:	d02b      	beq.n	8007526 <_malloc_r+0xd2>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	442b      	add	r3, r5
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	e00e      	b.n	80074f4 <_malloc_r+0xa0>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	1b52      	subs	r2, r2, r5
 80074da:	d41e      	bmi.n	800751a <_malloc_r+0xc6>
 80074dc:	2a0b      	cmp	r2, #11
 80074de:	d916      	bls.n	800750e <_malloc_r+0xba>
 80074e0:	1961      	adds	r1, r4, r5
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	6025      	str	r5, [r4, #0]
 80074e6:	bf18      	it	ne
 80074e8:	6059      	strne	r1, [r3, #4]
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	bf08      	it	eq
 80074ee:	6031      	streq	r1, [r6, #0]
 80074f0:	5162      	str	r2, [r4, r5]
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	4638      	mov	r0, r7
 80074f6:	f104 060b 	add.w	r6, r4, #11
 80074fa:	f000 fb6d 	bl	8007bd8 <__malloc_unlock>
 80074fe:	f026 0607 	bic.w	r6, r6, #7
 8007502:	1d23      	adds	r3, r4, #4
 8007504:	1af2      	subs	r2, r6, r3
 8007506:	d0b6      	beq.n	8007476 <_malloc_r+0x22>
 8007508:	1b9b      	subs	r3, r3, r6
 800750a:	50a3      	str	r3, [r4, r2]
 800750c:	e7b3      	b.n	8007476 <_malloc_r+0x22>
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	42a3      	cmp	r3, r4
 8007512:	bf0c      	ite	eq
 8007514:	6032      	streq	r2, [r6, #0]
 8007516:	605a      	strne	r2, [r3, #4]
 8007518:	e7ec      	b.n	80074f4 <_malloc_r+0xa0>
 800751a:	4623      	mov	r3, r4
 800751c:	6864      	ldr	r4, [r4, #4]
 800751e:	e7b2      	b.n	8007486 <_malloc_r+0x32>
 8007520:	4634      	mov	r4, r6
 8007522:	6876      	ldr	r6, [r6, #4]
 8007524:	e7b9      	b.n	800749a <_malloc_r+0x46>
 8007526:	230c      	movs	r3, #12
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	4638      	mov	r0, r7
 800752c:	f000 fb54 	bl	8007bd8 <__malloc_unlock>
 8007530:	e7a1      	b.n	8007476 <_malloc_r+0x22>
 8007532:	6025      	str	r5, [r4, #0]
 8007534:	e7de      	b.n	80074f4 <_malloc_r+0xa0>
 8007536:	bf00      	nop
 8007538:	2000af68 	.word	0x2000af68

0800753c <iprintf>:
 800753c:	b40f      	push	{r0, r1, r2, r3}
 800753e:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <iprintf+0x2c>)
 8007540:	b513      	push	{r0, r1, r4, lr}
 8007542:	681c      	ldr	r4, [r3, #0]
 8007544:	b124      	cbz	r4, 8007550 <iprintf+0x14>
 8007546:	69a3      	ldr	r3, [r4, #24]
 8007548:	b913      	cbnz	r3, 8007550 <iprintf+0x14>
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fdaa 	bl	80070a4 <__sinit>
 8007550:	ab05      	add	r3, sp, #20
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	68a1      	ldr	r1, [r4, #8]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fcc9 	bl	8007ef0 <_vfiprintf_r>
 800755e:	b002      	add	sp, #8
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007564:	b004      	add	sp, #16
 8007566:	4770      	bx	lr
 8007568:	20000010 	.word	0x20000010

0800756c <_puts_r>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	460e      	mov	r6, r1
 8007570:	4605      	mov	r5, r0
 8007572:	b118      	cbz	r0, 800757c <_puts_r+0x10>
 8007574:	6983      	ldr	r3, [r0, #24]
 8007576:	b90b      	cbnz	r3, 800757c <_puts_r+0x10>
 8007578:	f7ff fd94 	bl	80070a4 <__sinit>
 800757c:	69ab      	ldr	r3, [r5, #24]
 800757e:	68ac      	ldr	r4, [r5, #8]
 8007580:	b913      	cbnz	r3, 8007588 <_puts_r+0x1c>
 8007582:	4628      	mov	r0, r5
 8007584:	f7ff fd8e 	bl	80070a4 <__sinit>
 8007588:	4b2c      	ldr	r3, [pc, #176]	; (800763c <_puts_r+0xd0>)
 800758a:	429c      	cmp	r4, r3
 800758c:	d120      	bne.n	80075d0 <_puts_r+0x64>
 800758e:	686c      	ldr	r4, [r5, #4]
 8007590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d405      	bmi.n	80075a2 <_puts_r+0x36>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	0598      	lsls	r0, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_puts_r+0x36>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f7ff febb 	bl	8007318 <__retarget_lock_acquire_recursive>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	0719      	lsls	r1, r3, #28
 80075a6:	d51d      	bpl.n	80075e4 <_puts_r+0x78>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	b1db      	cbz	r3, 80075e4 <_puts_r+0x78>
 80075ac:	3e01      	subs	r6, #1
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075b4:	3b01      	subs	r3, #1
 80075b6:	60a3      	str	r3, [r4, #8]
 80075b8:	bb39      	cbnz	r1, 800760a <_puts_r+0x9e>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da38      	bge.n	8007630 <_puts_r+0xc4>
 80075be:	4622      	mov	r2, r4
 80075c0:	210a      	movs	r1, #10
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f9a8 	bl	8007918 <__swbuf_r>
 80075c8:	3001      	adds	r0, #1
 80075ca:	d011      	beq.n	80075f0 <_puts_r+0x84>
 80075cc:	250a      	movs	r5, #10
 80075ce:	e011      	b.n	80075f4 <_puts_r+0x88>
 80075d0:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <_puts_r+0xd4>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <_puts_r+0x6e>
 80075d6:	68ac      	ldr	r4, [r5, #8]
 80075d8:	e7da      	b.n	8007590 <_puts_r+0x24>
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <_puts_r+0xd8>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	bf08      	it	eq
 80075e0:	68ec      	ldreq	r4, [r5, #12]
 80075e2:	e7d5      	b.n	8007590 <_puts_r+0x24>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f9fa 	bl	80079e0 <__swsetup_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0dd      	beq.n	80075ac <_puts_r+0x40>
 80075f0:	f04f 35ff 	mov.w	r5, #4294967295
 80075f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f6:	07da      	lsls	r2, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_puts_r+0x9a>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	059b      	lsls	r3, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_puts_r+0x9a>
 8007600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007602:	f7ff fe8a 	bl	800731a <__retarget_lock_release_recursive>
 8007606:	4628      	mov	r0, r5
 8007608:	bd70      	pop	{r4, r5, r6, pc}
 800760a:	2b00      	cmp	r3, #0
 800760c:	da04      	bge.n	8007618 <_puts_r+0xac>
 800760e:	69a2      	ldr	r2, [r4, #24]
 8007610:	429a      	cmp	r2, r3
 8007612:	dc06      	bgt.n	8007622 <_puts_r+0xb6>
 8007614:	290a      	cmp	r1, #10
 8007616:	d004      	beq.n	8007622 <_puts_r+0xb6>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	6022      	str	r2, [r4, #0]
 800761e:	7019      	strb	r1, [r3, #0]
 8007620:	e7c5      	b.n	80075ae <_puts_r+0x42>
 8007622:	4622      	mov	r2, r4
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f977 	bl	8007918 <__swbuf_r>
 800762a:	3001      	adds	r0, #1
 800762c:	d1bf      	bne.n	80075ae <_puts_r+0x42>
 800762e:	e7df      	b.n	80075f0 <_puts_r+0x84>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	250a      	movs	r5, #10
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	6022      	str	r2, [r4, #0]
 8007638:	701d      	strb	r5, [r3, #0]
 800763a:	e7db      	b.n	80075f4 <_puts_r+0x88>
 800763c:	080094d4 	.word	0x080094d4
 8007640:	080094f4 	.word	0x080094f4
 8007644:	080094b4 	.word	0x080094b4

08007648 <puts>:
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <puts+0xc>)
 800764a:	4601      	mov	r1, r0
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	f7ff bf8d 	b.w	800756c <_puts_r>
 8007652:	bf00      	nop
 8007654:	20000010 	.word	0x20000010

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f001 f83c 	bl	80086e0 <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	2000af70 	.word	0x2000af70

08007678 <__sread>:
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007680:	f000 fefa 	bl	8008478 <_read_r>
 8007684:	2800      	cmp	r0, #0
 8007686:	bfab      	itete	ge
 8007688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800768a:	89a3      	ldrhlt	r3, [r4, #12]
 800768c:	181b      	addge	r3, r3, r0
 800768e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007692:	bfac      	ite	ge
 8007694:	6563      	strge	r3, [r4, #84]	; 0x54
 8007696:	81a3      	strhlt	r3, [r4, #12]
 8007698:	bd10      	pop	{r4, pc}

0800769a <__swrite>:
 800769a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	461f      	mov	r7, r3
 80076a0:	898b      	ldrh	r3, [r1, #12]
 80076a2:	05db      	lsls	r3, r3, #23
 80076a4:	4605      	mov	r5, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	4616      	mov	r6, r2
 80076aa:	d505      	bpl.n	80076b8 <__swrite+0x1e>
 80076ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b0:	2302      	movs	r3, #2
 80076b2:	2200      	movs	r2, #0
 80076b4:	f000 fa12 	bl	8007adc <_lseek_r>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	4632      	mov	r2, r6
 80076c6:	463b      	mov	r3, r7
 80076c8:	4628      	mov	r0, r5
 80076ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	f000 b975 	b.w	80079bc <_write_r>

080076d2 <__sseek>:
 80076d2:	b510      	push	{r4, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076da:	f000 f9ff 	bl	8007adc <_lseek_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	bf15      	itete	ne
 80076e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076ee:	81a3      	strheq	r3, [r4, #12]
 80076f0:	bf18      	it	ne
 80076f2:	81a3      	strhne	r3, [r4, #12]
 80076f4:	bd10      	pop	{r4, pc}

080076f6 <__sclose>:
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f000 b9df 	b.w	8007abc <_close_r>
	...

08007700 <strcasecmp>:
 8007700:	b530      	push	{r4, r5, lr}
 8007702:	4d0b      	ldr	r5, [pc, #44]	; (8007730 <strcasecmp+0x30>)
 8007704:	4604      	mov	r4, r0
 8007706:	f814 3b01 	ldrb.w	r3, [r4], #1
 800770a:	5d5a      	ldrb	r2, [r3, r5]
 800770c:	f002 0203 	and.w	r2, r2, #3
 8007710:	2a01      	cmp	r2, #1
 8007712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007716:	5ca8      	ldrb	r0, [r5, r2]
 8007718:	f000 0003 	and.w	r0, r0, #3
 800771c:	bf08      	it	eq
 800771e:	3320      	addeq	r3, #32
 8007720:	2801      	cmp	r0, #1
 8007722:	bf08      	it	eq
 8007724:	3220      	addeq	r2, #32
 8007726:	1a98      	subs	r0, r3, r2
 8007728:	d101      	bne.n	800772e <strcasecmp+0x2e>
 800772a:	2a00      	cmp	r2, #0
 800772c:	d1eb      	bne.n	8007706 <strcasecmp+0x6>
 800772e:	bd30      	pop	{r4, r5, pc}
 8007730:	08009519 	.word	0x08009519

08007734 <strchr>:
 8007734:	b2c9      	uxtb	r1, r1
 8007736:	4603      	mov	r3, r0
 8007738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773c:	b11a      	cbz	r2, 8007746 <strchr+0x12>
 800773e:	428a      	cmp	r2, r1
 8007740:	d1f9      	bne.n	8007736 <strchr+0x2>
 8007742:	4618      	mov	r0, r3
 8007744:	4770      	bx	lr
 8007746:	2900      	cmp	r1, #0
 8007748:	bf18      	it	ne
 800774a:	2300      	movne	r3, #0
 800774c:	e7f9      	b.n	8007742 <strchr+0xe>
	...

08007750 <strlwr>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4c07      	ldr	r4, [pc, #28]	; (8007770 <strlwr+0x20>)
 8007754:	1e42      	subs	r2, r0, #1
 8007756:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800775a:	b903      	cbnz	r3, 800775e <strlwr+0xe>
 800775c:	bd10      	pop	{r4, pc}
 800775e:	5ce1      	ldrb	r1, [r4, r3]
 8007760:	f001 0103 	and.w	r1, r1, #3
 8007764:	2901      	cmp	r1, #1
 8007766:	bf08      	it	eq
 8007768:	3320      	addeq	r3, #32
 800776a:	7013      	strb	r3, [r2, #0]
 800776c:	e7f3      	b.n	8007756 <strlwr+0x6>
 800776e:	bf00      	nop
 8007770:	08009519 	.word	0x08009519

08007774 <strncasecmp>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4e0f      	ldr	r6, [pc, #60]	; (80077b4 <strncasecmp+0x40>)
 8007778:	4604      	mov	r4, r0
 800777a:	440a      	add	r2, r1
 800777c:	428a      	cmp	r2, r1
 800777e:	d101      	bne.n	8007784 <strncasecmp+0x10>
 8007780:	2000      	movs	r0, #0
 8007782:	e013      	b.n	80077ac <strncasecmp+0x38>
 8007784:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007788:	5d98      	ldrb	r0, [r3, r6]
 800778a:	f000 0003 	and.w	r0, r0, #3
 800778e:	2801      	cmp	r0, #1
 8007790:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007794:	5c35      	ldrb	r5, [r6, r0]
 8007796:	f005 0503 	and.w	r5, r5, #3
 800779a:	bf08      	it	eq
 800779c:	3320      	addeq	r3, #32
 800779e:	2d01      	cmp	r5, #1
 80077a0:	bf08      	it	eq
 80077a2:	3020      	addeq	r0, #32
 80077a4:	1a1b      	subs	r3, r3, r0
 80077a6:	d102      	bne.n	80077ae <strncasecmp+0x3a>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d1e7      	bne.n	800777c <strncasecmp+0x8>
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
 80077ae:	4618      	mov	r0, r3
 80077b0:	e7fc      	b.n	80077ac <strncasecmp+0x38>
 80077b2:	bf00      	nop
 80077b4:	08009519 	.word	0x08009519

080077b8 <strncat>:
 80077b8:	b530      	push	{r4, r5, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	7825      	ldrb	r5, [r4, #0]
 80077be:	4623      	mov	r3, r4
 80077c0:	3401      	adds	r4, #1
 80077c2:	2d00      	cmp	r5, #0
 80077c4:	d1fa      	bne.n	80077bc <strncat+0x4>
 80077c6:	3a01      	subs	r2, #1
 80077c8:	d304      	bcc.n	80077d4 <strncat+0x1c>
 80077ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ce:	f803 4b01 	strb.w	r4, [r3], #1
 80077d2:	b904      	cbnz	r4, 80077d6 <strncat+0x1e>
 80077d4:	bd30      	pop	{r4, r5, pc}
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d1f5      	bne.n	80077c6 <strncat+0xe>
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e7f3      	b.n	80077c6 <strncat+0xe>

080077de <strncmp>:
 80077de:	b510      	push	{r4, lr}
 80077e0:	b17a      	cbz	r2, 8007802 <strncmp+0x24>
 80077e2:	4603      	mov	r3, r0
 80077e4:	3901      	subs	r1, #1
 80077e6:	1884      	adds	r4, r0, r2
 80077e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077f0:	4290      	cmp	r0, r2
 80077f2:	d101      	bne.n	80077f8 <strncmp+0x1a>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d101      	bne.n	80077fc <strncmp+0x1e>
 80077f8:	1a80      	subs	r0, r0, r2
 80077fa:	bd10      	pop	{r4, pc}
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d1f3      	bne.n	80077e8 <strncmp+0xa>
 8007800:	e7fa      	b.n	80077f8 <strncmp+0x1a>
 8007802:	4610      	mov	r0, r2
 8007804:	e7f9      	b.n	80077fa <strncmp+0x1c>

08007806 <strncpy>:
 8007806:	b510      	push	{r4, lr}
 8007808:	3901      	subs	r1, #1
 800780a:	4603      	mov	r3, r0
 800780c:	b132      	cbz	r2, 800781c <strncpy+0x16>
 800780e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007812:	f803 4b01 	strb.w	r4, [r3], #1
 8007816:	3a01      	subs	r2, #1
 8007818:	2c00      	cmp	r4, #0
 800781a:	d1f7      	bne.n	800780c <strncpy+0x6>
 800781c:	441a      	add	r2, r3
 800781e:	2100      	movs	r1, #0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <strncpy+0x20>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <strncpy+0x1a>

0800782c <strrchr>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4603      	mov	r3, r0
 8007830:	460c      	mov	r4, r1
 8007832:	b969      	cbnz	r1, 8007850 <strrchr+0x24>
 8007834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007838:	f7ff bf7c 	b.w	8007734 <strchr>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	4605      	mov	r5, r0
 8007840:	4621      	mov	r1, r4
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff ff76 	bl	8007734 <strchr>
 8007848:	2800      	cmp	r0, #0
 800784a:	d1f7      	bne.n	800783c <strrchr+0x10>
 800784c:	4628      	mov	r0, r5
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	2500      	movs	r5, #0
 8007852:	e7f5      	b.n	8007840 <strrchr+0x14>

08007854 <strstr>:
 8007854:	780a      	ldrb	r2, [r1, #0]
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	b96a      	cbnz	r2, 8007876 <strstr+0x22>
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	429a      	cmp	r2, r3
 800785e:	d109      	bne.n	8007874 <strstr+0x20>
 8007860:	460c      	mov	r4, r1
 8007862:	4605      	mov	r5, r0
 8007864:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0f6      	beq.n	800785a <strstr+0x6>
 800786c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007870:	429e      	cmp	r6, r3
 8007872:	d0f7      	beq.n	8007864 <strstr+0x10>
 8007874:	3001      	adds	r0, #1
 8007876:	7803      	ldrb	r3, [r0, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1ef      	bne.n	800785c <strstr+0x8>
 800787c:	4618      	mov	r0, r3
 800787e:	e7ec      	b.n	800785a <strstr+0x6>

08007880 <strupr>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4c07      	ldr	r4, [pc, #28]	; (80078a0 <strupr+0x20>)
 8007884:	1e42      	subs	r2, r0, #1
 8007886:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800788a:	b903      	cbnz	r3, 800788e <strupr+0xe>
 800788c:	bd10      	pop	{r4, pc}
 800788e:	5ce1      	ldrb	r1, [r4, r3]
 8007890:	f001 0103 	and.w	r1, r1, #3
 8007894:	2902      	cmp	r1, #2
 8007896:	bf08      	it	eq
 8007898:	3b20      	subeq	r3, #32
 800789a:	7013      	strb	r3, [r2, #0]
 800789c:	e7f3      	b.n	8007886 <strupr+0x6>
 800789e:	bf00      	nop
 80078a0:	08009519 	.word	0x08009519

080078a4 <_vsniprintf_r>:
 80078a4:	b530      	push	{r4, r5, lr}
 80078a6:	4614      	mov	r4, r2
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	b09b      	sub	sp, #108	; 0x6c
 80078ac:	4605      	mov	r5, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	da05      	bge.n	80078be <_vsniprintf_r+0x1a>
 80078b2:	238b      	movs	r3, #139	; 0x8b
 80078b4:	6003      	str	r3, [r0, #0]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	b01b      	add	sp, #108	; 0x6c
 80078bc:	bd30      	pop	{r4, r5, pc}
 80078be:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80078c6:	bf14      	ite	ne
 80078c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078cc:	4623      	moveq	r3, r4
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078d6:	9100      	str	r1, [sp, #0]
 80078d8:	9104      	str	r1, [sp, #16]
 80078da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80078de:	4669      	mov	r1, sp
 80078e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078e2:	f000 f9db 	bl	8007c9c <_svfiprintf_r>
 80078e6:	1c43      	adds	r3, r0, #1
 80078e8:	bfbc      	itt	lt
 80078ea:	238b      	movlt	r3, #139	; 0x8b
 80078ec:	602b      	strlt	r3, [r5, #0]
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	d0e3      	beq.n	80078ba <_vsniprintf_r+0x16>
 80078f2:	9b00      	ldr	r3, [sp, #0]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e7df      	b.n	80078ba <_vsniprintf_r+0x16>
	...

080078fc <vsniprintf>:
 80078fc:	b507      	push	{r0, r1, r2, lr}
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	460a      	mov	r2, r1
 8007904:	4601      	mov	r1, r0
 8007906:	4803      	ldr	r0, [pc, #12]	; (8007914 <vsniprintf+0x18>)
 8007908:	6800      	ldr	r0, [r0, #0]
 800790a:	f7ff ffcb 	bl	80078a4 <_vsniprintf_r>
 800790e:	b003      	add	sp, #12
 8007910:	f85d fb04 	ldr.w	pc, [sp], #4
 8007914:	20000010 	.word	0x20000010

08007918 <__swbuf_r>:
 8007918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791a:	460e      	mov	r6, r1
 800791c:	4614      	mov	r4, r2
 800791e:	4605      	mov	r5, r0
 8007920:	b118      	cbz	r0, 800792a <__swbuf_r+0x12>
 8007922:	6983      	ldr	r3, [r0, #24]
 8007924:	b90b      	cbnz	r3, 800792a <__swbuf_r+0x12>
 8007926:	f7ff fbbd 	bl	80070a4 <__sinit>
 800792a:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <__swbuf_r+0x98>)
 800792c:	429c      	cmp	r4, r3
 800792e:	d12b      	bne.n	8007988 <__swbuf_r+0x70>
 8007930:	686c      	ldr	r4, [r5, #4]
 8007932:	69a3      	ldr	r3, [r4, #24]
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	071a      	lsls	r2, r3, #28
 800793a:	d52f      	bpl.n	800799c <__swbuf_r+0x84>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	b36b      	cbz	r3, 800799c <__swbuf_r+0x84>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	6820      	ldr	r0, [r4, #0]
 8007944:	1ac0      	subs	r0, r0, r3
 8007946:	6963      	ldr	r3, [r4, #20]
 8007948:	b2f6      	uxtb	r6, r6
 800794a:	4283      	cmp	r3, r0
 800794c:	4637      	mov	r7, r6
 800794e:	dc04      	bgt.n	800795a <__swbuf_r+0x42>
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff fb00 	bl	8006f58 <_fflush_r>
 8007958:	bb30      	cbnz	r0, 80079a8 <__swbuf_r+0x90>
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	3b01      	subs	r3, #1
 800795e:	60a3      	str	r3, [r4, #8]
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	701e      	strb	r6, [r3, #0]
 8007968:	6963      	ldr	r3, [r4, #20]
 800796a:	3001      	adds	r0, #1
 800796c:	4283      	cmp	r3, r0
 800796e:	d004      	beq.n	800797a <__swbuf_r+0x62>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d506      	bpl.n	8007984 <__swbuf_r+0x6c>
 8007976:	2e0a      	cmp	r6, #10
 8007978:	d104      	bne.n	8007984 <__swbuf_r+0x6c>
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f7ff faeb 	bl	8006f58 <_fflush_r>
 8007982:	b988      	cbnz	r0, 80079a8 <__swbuf_r+0x90>
 8007984:	4638      	mov	r0, r7
 8007986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <__swbuf_r+0x9c>)
 800798a:	429c      	cmp	r4, r3
 800798c:	d101      	bne.n	8007992 <__swbuf_r+0x7a>
 800798e:	68ac      	ldr	r4, [r5, #8]
 8007990:	e7cf      	b.n	8007932 <__swbuf_r+0x1a>
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <__swbuf_r+0xa0>)
 8007994:	429c      	cmp	r4, r3
 8007996:	bf08      	it	eq
 8007998:	68ec      	ldreq	r4, [r5, #12]
 800799a:	e7ca      	b.n	8007932 <__swbuf_r+0x1a>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f81e 	bl	80079e0 <__swsetup_r>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d0cb      	beq.n	8007940 <__swbuf_r+0x28>
 80079a8:	f04f 37ff 	mov.w	r7, #4294967295
 80079ac:	e7ea      	b.n	8007984 <__swbuf_r+0x6c>
 80079ae:	bf00      	nop
 80079b0:	080094d4 	.word	0x080094d4
 80079b4:	080094f4 	.word	0x080094f4
 80079b8:	080094b4 	.word	0x080094b4

080079bc <_write_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d07      	ldr	r5, [pc, #28]	; (80079dc <_write_r+0x20>)
 80079c0:	4604      	mov	r4, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	4611      	mov	r1, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f000 fe7a 	bl	80086c4 <_write>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_write_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_write_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	2000af70 	.word	0x2000af70

080079e0 <__swsetup_r>:
 80079e0:	4b32      	ldr	r3, [pc, #200]	; (8007aac <__swsetup_r+0xcc>)
 80079e2:	b570      	push	{r4, r5, r6, lr}
 80079e4:	681d      	ldr	r5, [r3, #0]
 80079e6:	4606      	mov	r6, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	b125      	cbz	r5, 80079f6 <__swsetup_r+0x16>
 80079ec:	69ab      	ldr	r3, [r5, #24]
 80079ee:	b913      	cbnz	r3, 80079f6 <__swsetup_r+0x16>
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7ff fb57 	bl	80070a4 <__sinit>
 80079f6:	4b2e      	ldr	r3, [pc, #184]	; (8007ab0 <__swsetup_r+0xd0>)
 80079f8:	429c      	cmp	r4, r3
 80079fa:	d10f      	bne.n	8007a1c <__swsetup_r+0x3c>
 80079fc:	686c      	ldr	r4, [r5, #4]
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a04:	0719      	lsls	r1, r3, #28
 8007a06:	d42c      	bmi.n	8007a62 <__swsetup_r+0x82>
 8007a08:	06dd      	lsls	r5, r3, #27
 8007a0a:	d411      	bmi.n	8007a30 <__swsetup_r+0x50>
 8007a0c:	2309      	movs	r3, #9
 8007a0e:	6033      	str	r3, [r6, #0]
 8007a10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a14:	81a3      	strh	r3, [r4, #12]
 8007a16:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1a:	e03e      	b.n	8007a9a <__swsetup_r+0xba>
 8007a1c:	4b25      	ldr	r3, [pc, #148]	; (8007ab4 <__swsetup_r+0xd4>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d101      	bne.n	8007a26 <__swsetup_r+0x46>
 8007a22:	68ac      	ldr	r4, [r5, #8]
 8007a24:	e7eb      	b.n	80079fe <__swsetup_r+0x1e>
 8007a26:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <__swsetup_r+0xd8>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	bf08      	it	eq
 8007a2c:	68ec      	ldreq	r4, [r5, #12]
 8007a2e:	e7e6      	b.n	80079fe <__swsetup_r+0x1e>
 8007a30:	0758      	lsls	r0, r3, #29
 8007a32:	d512      	bpl.n	8007a5a <__swsetup_r+0x7a>
 8007a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a36:	b141      	cbz	r1, 8007a4a <__swsetup_r+0x6a>
 8007a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a3c:	4299      	cmp	r1, r3
 8007a3e:	d002      	beq.n	8007a46 <__swsetup_r+0x66>
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7ff fc9b 	bl	800737c <_free_r>
 8007a46:	2300      	movs	r3, #0
 8007a48:	6363      	str	r3, [r4, #52]	; 0x34
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	2300      	movs	r3, #0
 8007a54:	6063      	str	r3, [r4, #4]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f043 0308 	orr.w	r3, r3, #8
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	b94b      	cbnz	r3, 8007a7a <__swsetup_r+0x9a>
 8007a66:	89a3      	ldrh	r3, [r4, #12]
 8007a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a70:	d003      	beq.n	8007a7a <__swsetup_r+0x9a>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4630      	mov	r0, r6
 8007a76:	f000 f869 	bl	8007b4c <__smakebuf_r>
 8007a7a:	89a0      	ldrh	r0, [r4, #12]
 8007a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a80:	f010 0301 	ands.w	r3, r0, #1
 8007a84:	d00a      	beq.n	8007a9c <__swsetup_r+0xbc>
 8007a86:	2300      	movs	r3, #0
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	425b      	negs	r3, r3
 8007a8e:	61a3      	str	r3, [r4, #24]
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	b943      	cbnz	r3, 8007aa6 <__swsetup_r+0xc6>
 8007a94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a98:	d1ba      	bne.n	8007a10 <__swsetup_r+0x30>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	0781      	lsls	r1, r0, #30
 8007a9e:	bf58      	it	pl
 8007aa0:	6963      	ldrpl	r3, [r4, #20]
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	e7f4      	b.n	8007a90 <__swsetup_r+0xb0>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e7f7      	b.n	8007a9a <__swsetup_r+0xba>
 8007aaa:	bf00      	nop
 8007aac:	20000010 	.word	0x20000010
 8007ab0:	080094d4 	.word	0x080094d4
 8007ab4:	080094f4 	.word	0x080094f4
 8007ab8:	080094b4 	.word	0x080094b4

08007abc <_close_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	; (8007ad8 <_close_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f000 fe24 	bl	8008714 <_close>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_close_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_close_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	2000af70 	.word	0x2000af70

08007adc <_lseek_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	; (8007afc <_lseek_r+0x20>)
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f000 fe1c 	bl	8008728 <_lseek>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_lseek_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_lseek_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	2000af70 	.word	0x2000af70

08007b00 <__swhatbuf_r>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	460e      	mov	r6, r1
 8007b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	b096      	sub	sp, #88	; 0x58
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	461d      	mov	r5, r3
 8007b10:	da08      	bge.n	8007b24 <__swhatbuf_r+0x24>
 8007b12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	061a      	lsls	r2, r3, #24
 8007b1c:	d410      	bmi.n	8007b40 <__swhatbuf_r+0x40>
 8007b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b22:	e00e      	b.n	8007b42 <__swhatbuf_r+0x42>
 8007b24:	466a      	mov	r2, sp
 8007b26:	f000 fcb9 	bl	800849c <_fstat_r>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	dbf1      	blt.n	8007b12 <__swhatbuf_r+0x12>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b38:	425a      	negs	r2, r3
 8007b3a:	415a      	adcs	r2, r3
 8007b3c:	602a      	str	r2, [r5, #0]
 8007b3e:	e7ee      	b.n	8007b1e <__swhatbuf_r+0x1e>
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	2000      	movs	r0, #0
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	b016      	add	sp, #88	; 0x58
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b4c <__smakebuf_r>:
 8007b4c:	898b      	ldrh	r3, [r1, #12]
 8007b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b50:	079d      	lsls	r5, r3, #30
 8007b52:	4606      	mov	r6, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	d507      	bpl.n	8007b68 <__smakebuf_r+0x1c>
 8007b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	6123      	str	r3, [r4, #16]
 8007b60:	2301      	movs	r3, #1
 8007b62:	6163      	str	r3, [r4, #20]
 8007b64:	b002      	add	sp, #8
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	ab01      	add	r3, sp, #4
 8007b6a:	466a      	mov	r2, sp
 8007b6c:	f7ff ffc8 	bl	8007b00 <__swhatbuf_r>
 8007b70:	9900      	ldr	r1, [sp, #0]
 8007b72:	4605      	mov	r5, r0
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff fc6d 	bl	8007454 <_malloc_r>
 8007b7a:	b948      	cbnz	r0, 8007b90 <__smakebuf_r+0x44>
 8007b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b80:	059a      	lsls	r2, r3, #22
 8007b82:	d4ef      	bmi.n	8007b64 <__smakebuf_r+0x18>
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	f043 0302 	orr.w	r3, r3, #2
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	e7e3      	b.n	8007b58 <__smakebuf_r+0xc>
 8007b90:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <__smakebuf_r+0x7c>)
 8007b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	6163      	str	r3, [r4, #20]
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	6120      	str	r0, [r4, #16]
 8007ba6:	b15b      	cbz	r3, 8007bc0 <__smakebuf_r+0x74>
 8007ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 fc87 	bl	80084c0 <_isatty_r>
 8007bb2:	b128      	cbz	r0, 8007bc0 <__smakebuf_r+0x74>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	f043 0301 	orr.w	r3, r3, #1
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	89a0      	ldrh	r0, [r4, #12]
 8007bc2:	4305      	orrs	r5, r0
 8007bc4:	81a5      	strh	r5, [r4, #12]
 8007bc6:	e7cd      	b.n	8007b64 <__smakebuf_r+0x18>
 8007bc8:	0800703d 	.word	0x0800703d

08007bcc <__malloc_lock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_lock+0x8>)
 8007bce:	f7ff bba3 	b.w	8007318 <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	2000af64 	.word	0x2000af64

08007bd8 <__malloc_unlock>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__malloc_unlock+0x8>)
 8007bda:	f7ff bb9e 	b.w	800731a <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	2000af64 	.word	0x2000af64

08007be4 <__ssputs_r>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	688e      	ldr	r6, [r1, #8]
 8007bea:	429e      	cmp	r6, r3
 8007bec:	4682      	mov	sl, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4690      	mov	r8, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	d838      	bhi.n	8007c68 <__ssputs_r+0x84>
 8007bf6:	898a      	ldrh	r2, [r1, #12]
 8007bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bfc:	d032      	beq.n	8007c64 <__ssputs_r+0x80>
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	6909      	ldr	r1, [r1, #16]
 8007c02:	eba5 0901 	sub.w	r9, r5, r1
 8007c06:	6965      	ldr	r5, [r4, #20]
 8007c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c10:	3301      	adds	r3, #1
 8007c12:	444b      	add	r3, r9
 8007c14:	106d      	asrs	r5, r5, #1
 8007c16:	429d      	cmp	r5, r3
 8007c18:	bf38      	it	cc
 8007c1a:	461d      	movcc	r5, r3
 8007c1c:	0553      	lsls	r3, r2, #21
 8007c1e:	d531      	bpl.n	8007c84 <__ssputs_r+0xa0>
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7ff fc17 	bl	8007454 <_malloc_r>
 8007c26:	4606      	mov	r6, r0
 8007c28:	b950      	cbnz	r0, 8007c40 <__ssputs_r+0x5c>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	f8ca 3000 	str.w	r3, [sl]
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c40:	6921      	ldr	r1, [r4, #16]
 8007c42:	464a      	mov	r2, r9
 8007c44:	f7ff fb6a 	bl	800731c <memcpy>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	6126      	str	r6, [r4, #16]
 8007c56:	6165      	str	r5, [r4, #20]
 8007c58:	444e      	add	r6, r9
 8007c5a:	eba5 0509 	sub.w	r5, r5, r9
 8007c5e:	6026      	str	r6, [r4, #0]
 8007c60:	60a5      	str	r5, [r4, #8]
 8007c62:	463e      	mov	r6, r7
 8007c64:	42be      	cmp	r6, r7
 8007c66:	d900      	bls.n	8007c6a <__ssputs_r+0x86>
 8007c68:	463e      	mov	r6, r7
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4641      	mov	r1, r8
 8007c70:	f7ff fb62 	bl	8007338 <memmove>
 8007c74:	68a3      	ldr	r3, [r4, #8]
 8007c76:	1b9b      	subs	r3, r3, r6
 8007c78:	60a3      	str	r3, [r4, #8]
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	4433      	add	r3, r6
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	2000      	movs	r0, #0
 8007c82:	e7db      	b.n	8007c3c <__ssputs_r+0x58>
 8007c84:	462a      	mov	r2, r5
 8007c86:	f000 fc2b 	bl	80084e0 <_realloc_r>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1e1      	bne.n	8007c54 <__ssputs_r+0x70>
 8007c90:	6921      	ldr	r1, [r4, #16]
 8007c92:	4650      	mov	r0, sl
 8007c94:	f7ff fb72 	bl	800737c <_free_r>
 8007c98:	e7c7      	b.n	8007c2a <__ssputs_r+0x46>
	...

08007c9c <_svfiprintf_r>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	4698      	mov	r8, r3
 8007ca2:	898b      	ldrh	r3, [r1, #12]
 8007ca4:	061b      	lsls	r3, r3, #24
 8007ca6:	b09d      	sub	sp, #116	; 0x74
 8007ca8:	4607      	mov	r7, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	d50e      	bpl.n	8007cce <_svfiprintf_r+0x32>
 8007cb0:	690b      	ldr	r3, [r1, #16]
 8007cb2:	b963      	cbnz	r3, 8007cce <_svfiprintf_r+0x32>
 8007cb4:	2140      	movs	r1, #64	; 0x40
 8007cb6:	f7ff fbcd 	bl	8007454 <_malloc_r>
 8007cba:	6028      	str	r0, [r5, #0]
 8007cbc:	6128      	str	r0, [r5, #16]
 8007cbe:	b920      	cbnz	r0, 8007cca <_svfiprintf_r+0x2e>
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	e0d1      	b.n	8007e6e <_svfiprintf_r+0x1d2>
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	616b      	str	r3, [r5, #20]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd2:	2320      	movs	r3, #32
 8007cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cdc:	2330      	movs	r3, #48	; 0x30
 8007cde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e88 <_svfiprintf_r+0x1ec>
 8007ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce6:	f04f 0901 	mov.w	r9, #1
 8007cea:	4623      	mov	r3, r4
 8007cec:	469a      	mov	sl, r3
 8007cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf2:	b10a      	cbz	r2, 8007cf8 <_svfiprintf_r+0x5c>
 8007cf4:	2a25      	cmp	r2, #37	; 0x25
 8007cf6:	d1f9      	bne.n	8007cec <_svfiprintf_r+0x50>
 8007cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfc:	d00b      	beq.n	8007d16 <_svfiprintf_r+0x7a>
 8007cfe:	465b      	mov	r3, fp
 8007d00:	4622      	mov	r2, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ff6d 	bl	8007be4 <__ssputs_r>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f000 80aa 	beq.w	8007e64 <_svfiprintf_r+0x1c8>
 8007d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d12:	445a      	add	r2, fp
 8007d14:	9209      	str	r2, [sp, #36]	; 0x24
 8007d16:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80a2 	beq.w	8007e64 <_svfiprintf_r+0x1c8>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295
 8007d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2a:	f10a 0a01 	add.w	sl, sl, #1
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d36:	931a      	str	r3, [sp, #104]	; 0x68
 8007d38:	4654      	mov	r4, sl
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d40:	4851      	ldr	r0, [pc, #324]	; (8007e88 <_svfiprintf_r+0x1ec>)
 8007d42:	f7f8 fa85 	bl	8000250 <memchr>
 8007d46:	9a04      	ldr	r2, [sp, #16]
 8007d48:	b9d8      	cbnz	r0, 8007d82 <_svfiprintf_r+0xe6>
 8007d4a:	06d0      	lsls	r0, r2, #27
 8007d4c:	bf44      	itt	mi
 8007d4e:	2320      	movmi	r3, #32
 8007d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d54:	0711      	lsls	r1, r2, #28
 8007d56:	bf44      	itt	mi
 8007d58:	232b      	movmi	r3, #43	; 0x2b
 8007d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d62:	2b2a      	cmp	r3, #42	; 0x2a
 8007d64:	d015      	beq.n	8007d92 <_svfiprintf_r+0xf6>
 8007d66:	9a07      	ldr	r2, [sp, #28]
 8007d68:	4654      	mov	r4, sl
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f04f 0c0a 	mov.w	ip, #10
 8007d70:	4621      	mov	r1, r4
 8007d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d76:	3b30      	subs	r3, #48	; 0x30
 8007d78:	2b09      	cmp	r3, #9
 8007d7a:	d94e      	bls.n	8007e1a <_svfiprintf_r+0x17e>
 8007d7c:	b1b0      	cbz	r0, 8007dac <_svfiprintf_r+0x110>
 8007d7e:	9207      	str	r2, [sp, #28]
 8007d80:	e014      	b.n	8007dac <_svfiprintf_r+0x110>
 8007d82:	eba0 0308 	sub.w	r3, r0, r8
 8007d86:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	e7d2      	b.n	8007d38 <_svfiprintf_r+0x9c>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	1d19      	adds	r1, r3, #4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	9103      	str	r1, [sp, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfbb      	ittet	lt
 8007d9e:	425b      	neglt	r3, r3
 8007da0:	f042 0202 	orrlt.w	r2, r2, #2
 8007da4:	9307      	strge	r3, [sp, #28]
 8007da6:	9307      	strlt	r3, [sp, #28]
 8007da8:	bfb8      	it	lt
 8007daa:	9204      	strlt	r2, [sp, #16]
 8007dac:	7823      	ldrb	r3, [r4, #0]
 8007dae:	2b2e      	cmp	r3, #46	; 0x2e
 8007db0:	d10c      	bne.n	8007dcc <_svfiprintf_r+0x130>
 8007db2:	7863      	ldrb	r3, [r4, #1]
 8007db4:	2b2a      	cmp	r3, #42	; 0x2a
 8007db6:	d135      	bne.n	8007e24 <_svfiprintf_r+0x188>
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	1d1a      	adds	r2, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	9203      	str	r2, [sp, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfb8      	it	lt
 8007dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc8:	3402      	adds	r4, #2
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e98 <_svfiprintf_r+0x1fc>
 8007dd0:	7821      	ldrb	r1, [r4, #0]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	f7f8 fa3b 	bl	8000250 <memchr>
 8007dda:	b140      	cbz	r0, 8007dee <_svfiprintf_r+0x152>
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	eba0 000a 	sub.w	r0, r0, sl
 8007de2:	fa03 f000 	lsl.w	r0, r3, r0
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	4303      	orrs	r3, r0
 8007dea:	3401      	adds	r4, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	4826      	ldr	r0, [pc, #152]	; (8007e8c <_svfiprintf_r+0x1f0>)
 8007df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df8:	2206      	movs	r2, #6
 8007dfa:	f7f8 fa29 	bl	8000250 <memchr>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d038      	beq.n	8007e74 <_svfiprintf_r+0x1d8>
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <_svfiprintf_r+0x1f4>)
 8007e04:	bb1b      	cbnz	r3, 8007e4e <_svfiprintf_r+0x1b2>
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	3307      	adds	r3, #7
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	3308      	adds	r3, #8
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	4433      	add	r3, r6
 8007e16:	9309      	str	r3, [sp, #36]	; 0x24
 8007e18:	e767      	b.n	8007cea <_svfiprintf_r+0x4e>
 8007e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2001      	movs	r0, #1
 8007e22:	e7a5      	b.n	8007d70 <_svfiprintf_r+0xd4>
 8007e24:	2300      	movs	r3, #0
 8007e26:	3401      	adds	r4, #1
 8007e28:	9305      	str	r3, [sp, #20]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	f04f 0c0a 	mov.w	ip, #10
 8007e30:	4620      	mov	r0, r4
 8007e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e36:	3a30      	subs	r2, #48	; 0x30
 8007e38:	2a09      	cmp	r2, #9
 8007e3a:	d903      	bls.n	8007e44 <_svfiprintf_r+0x1a8>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0c5      	beq.n	8007dcc <_svfiprintf_r+0x130>
 8007e40:	9105      	str	r1, [sp, #20]
 8007e42:	e7c3      	b.n	8007dcc <_svfiprintf_r+0x130>
 8007e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e7f0      	b.n	8007e30 <_svfiprintf_r+0x194>
 8007e4e:	ab03      	add	r3, sp, #12
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	462a      	mov	r2, r5
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <_svfiprintf_r+0x1f8>)
 8007e56:	a904      	add	r1, sp, #16
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f3af 8000 	nop.w
 8007e5e:	1c42      	adds	r2, r0, #1
 8007e60:	4606      	mov	r6, r0
 8007e62:	d1d6      	bne.n	8007e12 <_svfiprintf_r+0x176>
 8007e64:	89ab      	ldrh	r3, [r5, #12]
 8007e66:	065b      	lsls	r3, r3, #25
 8007e68:	f53f af2c 	bmi.w	8007cc4 <_svfiprintf_r+0x28>
 8007e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e6e:	b01d      	add	sp, #116	; 0x74
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <_svfiprintf_r+0x1f8>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f000 f9d4 	bl	800822c <_printf_i>
 8007e84:	e7eb      	b.n	8007e5e <_svfiprintf_r+0x1c2>
 8007e86:	bf00      	nop
 8007e88:	08009619 	.word	0x08009619
 8007e8c:	08009623 	.word	0x08009623
 8007e90:	00000000 	.word	0x00000000
 8007e94:	08007be5 	.word	0x08007be5
 8007e98:	0800961f 	.word	0x0800961f

08007e9c <__sfputc_r>:
 8007e9c:	6893      	ldr	r3, [r2, #8]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	b410      	push	{r4}
 8007ea4:	6093      	str	r3, [r2, #8]
 8007ea6:	da08      	bge.n	8007eba <__sfputc_r+0x1e>
 8007ea8:	6994      	ldr	r4, [r2, #24]
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	db01      	blt.n	8007eb2 <__sfputc_r+0x16>
 8007eae:	290a      	cmp	r1, #10
 8007eb0:	d103      	bne.n	8007eba <__sfputc_r+0x1e>
 8007eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb6:	f7ff bd2f 	b.w	8007918 <__swbuf_r>
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	1c58      	adds	r0, r3, #1
 8007ebe:	6010      	str	r0, [r2, #0]
 8007ec0:	7019      	strb	r1, [r3, #0]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <__sfputs_r>:
 8007eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	18d5      	adds	r5, r2, r3
 8007ed4:	42ac      	cmp	r4, r5
 8007ed6:	d101      	bne.n	8007edc <__sfputs_r+0x12>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e007      	b.n	8007eec <__sfputs_r+0x22>
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	463a      	mov	r2, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffda 	bl	8007e9c <__sfputc_r>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d1f3      	bne.n	8007ed4 <__sfputs_r+0xa>
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ef0 <_vfiprintf_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	b09d      	sub	sp, #116	; 0x74
 8007ef8:	4614      	mov	r4, r2
 8007efa:	4698      	mov	r8, r3
 8007efc:	4606      	mov	r6, r0
 8007efe:	b118      	cbz	r0, 8007f08 <_vfiprintf_r+0x18>
 8007f00:	6983      	ldr	r3, [r0, #24]
 8007f02:	b90b      	cbnz	r3, 8007f08 <_vfiprintf_r+0x18>
 8007f04:	f7ff f8ce 	bl	80070a4 <__sinit>
 8007f08:	4b89      	ldr	r3, [pc, #548]	; (8008130 <_vfiprintf_r+0x240>)
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	d11b      	bne.n	8007f46 <_vfiprintf_r+0x56>
 8007f0e:	6875      	ldr	r5, [r6, #4]
 8007f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	059a      	lsls	r2, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1e:	f7ff f9fb 	bl	8007318 <__retarget_lock_acquire_recursive>
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	d501      	bpl.n	8007f2c <_vfiprintf_r+0x3c>
 8007f28:	692b      	ldr	r3, [r5, #16]
 8007f2a:	b9eb      	cbnz	r3, 8007f68 <_vfiprintf_r+0x78>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff fd56 	bl	80079e0 <__swsetup_r>
 8007f34:	b1c0      	cbz	r0, 8007f68 <_vfiprintf_r+0x78>
 8007f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f38:	07dc      	lsls	r4, r3, #31
 8007f3a:	d50e      	bpl.n	8007f5a <_vfiprintf_r+0x6a>
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <_vfiprintf_r+0x244>)
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	d101      	bne.n	8007f50 <_vfiprintf_r+0x60>
 8007f4c:	68b5      	ldr	r5, [r6, #8]
 8007f4e:	e7df      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f50:	4b79      	ldr	r3, [pc, #484]	; (8008138 <_vfiprintf_r+0x248>)
 8007f52:	429d      	cmp	r5, r3
 8007f54:	bf08      	it	eq
 8007f56:	68f5      	ldreq	r5, [r6, #12]
 8007f58:	e7da      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	0598      	lsls	r0, r3, #22
 8007f5e:	d4ed      	bmi.n	8007f3c <_vfiprintf_r+0x4c>
 8007f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f62:	f7ff f9da 	bl	800731a <__retarget_lock_release_recursive>
 8007f66:	e7e9      	b.n	8007f3c <_vfiprintf_r+0x4c>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800813c <_vfiprintf_r+0x24c>
 8007f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f80:	f04f 0901 	mov.w	r9, #1
 8007f84:	4623      	mov	r3, r4
 8007f86:	469a      	mov	sl, r3
 8007f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_vfiprintf_r+0xa2>
 8007f8e:	2a25      	cmp	r2, #37	; 0x25
 8007f90:	d1f9      	bne.n	8007f86 <_vfiprintf_r+0x96>
 8007f92:	ebba 0b04 	subs.w	fp, sl, r4
 8007f96:	d00b      	beq.n	8007fb0 <_vfiprintf_r+0xc0>
 8007f98:	465b      	mov	r3, fp
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ff93 	bl	8007eca <__sfputs_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f000 80aa 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fac:	445a      	add	r2, fp
 8007fae:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80a2 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4858      	ldr	r0, [pc, #352]	; (800813c <_vfiprintf_r+0x24c>)
 8007fdc:	f7f8 f938 	bl	8000250 <memchr>
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	b9d8      	cbnz	r0, 800801c <_vfiprintf_r+0x12c>
 8007fe4:	06d1      	lsls	r1, r2, #27
 8007fe6:	bf44      	itt	mi
 8007fe8:	2320      	movmi	r3, #32
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	0713      	lsls	r3, r2, #28
 8007ff0:	bf44      	itt	mi
 8007ff2:	232b      	movmi	r3, #43	; 0x2b
 8007ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d015      	beq.n	800802c <_vfiprintf_r+0x13c>
 8008000:	9a07      	ldr	r2, [sp, #28]
 8008002:	4654      	mov	r4, sl
 8008004:	2000      	movs	r0, #0
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	4621      	mov	r1, r4
 800800c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008010:	3b30      	subs	r3, #48	; 0x30
 8008012:	2b09      	cmp	r3, #9
 8008014:	d94e      	bls.n	80080b4 <_vfiprintf_r+0x1c4>
 8008016:	b1b0      	cbz	r0, 8008046 <_vfiprintf_r+0x156>
 8008018:	9207      	str	r2, [sp, #28]
 800801a:	e014      	b.n	8008046 <_vfiprintf_r+0x156>
 800801c:	eba0 0308 	sub.w	r3, r0, r8
 8008020:	fa09 f303 	lsl.w	r3, r9, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	46a2      	mov	sl, r4
 800802a:	e7d2      	b.n	8007fd2 <_vfiprintf_r+0xe2>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d19      	adds	r1, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9103      	str	r1, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbb      	ittet	lt
 8008038:	425b      	neglt	r3, r3
 800803a:	f042 0202 	orrlt.w	r2, r2, #2
 800803e:	9307      	strge	r3, [sp, #28]
 8008040:	9307      	strlt	r3, [sp, #28]
 8008042:	bfb8      	it	lt
 8008044:	9204      	strlt	r2, [sp, #16]
 8008046:	7823      	ldrb	r3, [r4, #0]
 8008048:	2b2e      	cmp	r3, #46	; 0x2e
 800804a:	d10c      	bne.n	8008066 <_vfiprintf_r+0x176>
 800804c:	7863      	ldrb	r3, [r4, #1]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d135      	bne.n	80080be <_vfiprintf_r+0x1ce>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	9203      	str	r2, [sp, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	bfb8      	it	lt
 800805e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008062:	3402      	adds	r4, #2
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800814c <_vfiprintf_r+0x25c>
 800806a:	7821      	ldrb	r1, [r4, #0]
 800806c:	2203      	movs	r2, #3
 800806e:	4650      	mov	r0, sl
 8008070:	f7f8 f8ee 	bl	8000250 <memchr>
 8008074:	b140      	cbz	r0, 8008088 <_vfiprintf_r+0x198>
 8008076:	2340      	movs	r3, #64	; 0x40
 8008078:	eba0 000a 	sub.w	r0, r0, sl
 800807c:	fa03 f000 	lsl.w	r0, r3, r0
 8008080:	9b04      	ldr	r3, [sp, #16]
 8008082:	4303      	orrs	r3, r0
 8008084:	3401      	adds	r4, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808c:	482c      	ldr	r0, [pc, #176]	; (8008140 <_vfiprintf_r+0x250>)
 800808e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008092:	2206      	movs	r2, #6
 8008094:	f7f8 f8dc 	bl	8000250 <memchr>
 8008098:	2800      	cmp	r0, #0
 800809a:	d03f      	beq.n	800811c <_vfiprintf_r+0x22c>
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <_vfiprintf_r+0x254>)
 800809e:	bb1b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x1f8>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	3307      	adds	r3, #7
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	3308      	adds	r3, #8
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	443b      	add	r3, r7
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	e767      	b.n	8007f84 <_vfiprintf_r+0x94>
 80080b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b8:	460c      	mov	r4, r1
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7a5      	b.n	800800a <_vfiprintf_r+0x11a>
 80080be:	2300      	movs	r3, #0
 80080c0:	3401      	adds	r4, #1
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f04f 0c0a 	mov.w	ip, #10
 80080ca:	4620      	mov	r0, r4
 80080cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d0:	3a30      	subs	r2, #48	; 0x30
 80080d2:	2a09      	cmp	r2, #9
 80080d4:	d903      	bls.n	80080de <_vfiprintf_r+0x1ee>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0c5      	beq.n	8008066 <_vfiprintf_r+0x176>
 80080da:	9105      	str	r1, [sp, #20]
 80080dc:	e7c3      	b.n	8008066 <_vfiprintf_r+0x176>
 80080de:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e2:	4604      	mov	r4, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	e7f0      	b.n	80080ca <_vfiprintf_r+0x1da>
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4b16      	ldr	r3, [pc, #88]	; (8008148 <_vfiprintf_r+0x258>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4630      	mov	r0, r6
 80080f4:	f3af 8000 	nop.w
 80080f8:	4607      	mov	r7, r0
 80080fa:	1c78      	adds	r0, r7, #1
 80080fc:	d1d6      	bne.n	80080ac <_vfiprintf_r+0x1bc>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d405      	bmi.n	8008110 <_vfiprintf_r+0x220>
 8008104:	89ab      	ldrh	r3, [r5, #12]
 8008106:	059a      	lsls	r2, r3, #22
 8008108:	d402      	bmi.n	8008110 <_vfiprintf_r+0x220>
 800810a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810c:	f7ff f905 	bl	800731a <__retarget_lock_release_recursive>
 8008110:	89ab      	ldrh	r3, [r5, #12]
 8008112:	065b      	lsls	r3, r3, #25
 8008114:	f53f af12 	bmi.w	8007f3c <_vfiprintf_r+0x4c>
 8008118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811a:	e711      	b.n	8007f40 <_vfiprintf_r+0x50>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <_vfiprintf_r+0x258>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f880 	bl	800822c <_printf_i>
 800812c:	e7e4      	b.n	80080f8 <_vfiprintf_r+0x208>
 800812e:	bf00      	nop
 8008130:	080094d4 	.word	0x080094d4
 8008134:	080094f4 	.word	0x080094f4
 8008138:	080094b4 	.word	0x080094b4
 800813c:	08009619 	.word	0x08009619
 8008140:	08009623 	.word	0x08009623
 8008144:	00000000 	.word	0x00000000
 8008148:	08007ecb 	.word	0x08007ecb
 800814c:	0800961f 	.word	0x0800961f

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4616      	mov	r6, r2
 8008156:	4699      	mov	r9, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800816c:	4607      	mov	r7, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b10a      	cbz	r2, 8008176 <_printf_common+0x26>
 8008172:	3301      	adds	r3, #1
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0699      	lsls	r1, r3, #26
 800817a:	bf42      	ittt	mi
 800817c:	6833      	ldrmi	r3, [r6, #0]
 800817e:	3302      	addmi	r3, #2
 8008180:	6033      	strmi	r3, [r6, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	f015 0506 	ands.w	r5, r5, #6
 8008188:	d106      	bne.n	8008198 <_printf_common+0x48>
 800818a:	f104 0a19 	add.w	sl, r4, #25
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	6832      	ldr	r2, [r6, #0]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc26      	bgt.n	80081e6 <_printf_common+0x96>
 8008198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800819c:	1e13      	subs	r3, r2, #0
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	bf18      	it	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	0692      	lsls	r2, r2, #26
 80081a6:	d42b      	bmi.n	8008200 <_printf_common+0xb0>
 80081a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ac:	4649      	mov	r1, r9
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d01e      	beq.n	80081f4 <_printf_common+0xa4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	68e5      	ldr	r5, [r4, #12]
 80081ba:	6832      	ldr	r2, [r6, #0]
 80081bc:	f003 0306 	and.w	r3, r3, #6
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	bf08      	it	eq
 80081c4:	1aad      	subeq	r5, r5, r2
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	bf0c      	ite	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	2500      	movne	r5, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfc4      	itt	gt
 80081d6:	1a9b      	subgt	r3, r3, r2
 80081d8:	18ed      	addgt	r5, r5, r3
 80081da:	2600      	movs	r6, #0
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xc8>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xa8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4649      	mov	r1, r9
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xac>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c6      	b.n	800818e <_printf_common+0x3e>
 8008200:	18e1      	adds	r1, r4, r3
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	2030      	movs	r0, #48	; 0x30
 8008206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800820a:	4422      	add	r2, r4
 800820c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008214:	3302      	adds	r3, #2
 8008216:	e7c7      	b.n	80081a8 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa4>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x8e>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	7e0f      	ldrb	r7, [r1, #24]
 8008232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008234:	2f78      	cmp	r7, #120	; 0x78
 8008236:	4691      	mov	r9, r2
 8008238:	4680      	mov	r8, r0
 800823a:	460c      	mov	r4, r1
 800823c:	469a      	mov	sl, r3
 800823e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	; 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d8 	beq.w	80083fe <_printf_i+0x1d2>
 800824e:	2f58      	cmp	r7, #88	; 0x58
 8008250:	f000 80a3 	beq.w	800839a <_printf_i+0x16e>
 8008254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a101      	add	r1, pc, #4	; (adr r1, 800826c <_printf_i+0x40>)
 8008268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083e5 	.word	0x080083e5
 800829c:	08008309 	.word	0x08008309
 80082a0:	080083c7 	.word	0x080083c7
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	08008407 	.word	0x08008407
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	080083cf 	.word	0x080083cf
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0a3      	b.n	8008420 <_printf_i+0x1f4>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	6829      	ldr	r1, [r5, #0]
 80082dc:	0606      	lsls	r6, r0, #24
 80082de:	f101 0304 	add.w	r3, r1, #4
 80082e2:	d50a      	bpl.n	80082fa <_printf_i+0xce>
 80082e4:	680e      	ldr	r6, [r1, #0]
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xc8>
 80082ec:	232d      	movs	r3, #45	; 0x2d
 80082ee:	4276      	negs	r6, r6
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	485e      	ldr	r0, [pc, #376]	; (8008470 <_printf_i+0x244>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e019      	b.n	800832e <_printf_i+0x102>
 80082fa:	680e      	ldr	r6, [r1, #0]
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008302:	bf18      	it	ne
 8008304:	b236      	sxthne	r6, r6
 8008306:	e7ef      	b.n	80082e8 <_printf_i+0xbc>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6029      	str	r1, [r5, #0]
 8008310:	0601      	lsls	r1, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xec>
 8008314:	681e      	ldr	r6, [r3, #0]
 8008316:	e002      	b.n	800831e <_printf_i+0xf2>
 8008318:	0646      	lsls	r6, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xe8>
 800831c:	881e      	ldrh	r6, [r3, #0]
 800831e:	4854      	ldr	r0, [pc, #336]	; (8008470 <_printf_i+0x244>)
 8008320:	2f6f      	cmp	r7, #111	; 0x6f
 8008322:	bf0c      	ite	eq
 8008324:	2308      	moveq	r3, #8
 8008326:	230a      	movne	r3, #10
 8008328:	2100      	movs	r1, #0
 800832a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832e:	6865      	ldr	r5, [r4, #4]
 8008330:	60a5      	str	r5, [r4, #8]
 8008332:	2d00      	cmp	r5, #0
 8008334:	bfa2      	ittt	ge
 8008336:	6821      	ldrge	r1, [r4, #0]
 8008338:	f021 0104 	bicge.w	r1, r1, #4
 800833c:	6021      	strge	r1, [r4, #0]
 800833e:	b90e      	cbnz	r6, 8008344 <_printf_i+0x118>
 8008340:	2d00      	cmp	r5, #0
 8008342:	d04d      	beq.n	80083e0 <_printf_i+0x1b4>
 8008344:	4615      	mov	r5, r2
 8008346:	fbb6 f1f3 	udiv	r1, r6, r3
 800834a:	fb03 6711 	mls	r7, r3, r1, r6
 800834e:	5dc7      	ldrb	r7, [r0, r7]
 8008350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008354:	4637      	mov	r7, r6
 8008356:	42bb      	cmp	r3, r7
 8008358:	460e      	mov	r6, r1
 800835a:	d9f4      	bls.n	8008346 <_printf_i+0x11a>
 800835c:	2b08      	cmp	r3, #8
 800835e:	d10b      	bne.n	8008378 <_printf_i+0x14c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	07de      	lsls	r6, r3, #31
 8008364:	d508      	bpl.n	8008378 <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6861      	ldr	r1, [r4, #4]
 800836a:	4299      	cmp	r1, r3
 800836c:	bfde      	ittt	le
 800836e:	2330      	movle	r3, #48	; 0x30
 8008370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008378:	1b52      	subs	r2, r2, r5
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	f8cd a000 	str.w	sl, [sp]
 8008380:	464b      	mov	r3, r9
 8008382:	aa03      	add	r2, sp, #12
 8008384:	4621      	mov	r1, r4
 8008386:	4640      	mov	r0, r8
 8008388:	f7ff fee2 	bl	8008150 <_printf_common>
 800838c:	3001      	adds	r0, #1
 800838e:	d14c      	bne.n	800842a <_printf_i+0x1fe>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	b004      	add	sp, #16
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	4835      	ldr	r0, [pc, #212]	; (8008470 <_printf_i+0x244>)
 800839c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083a0:	6829      	ldr	r1, [r5, #0]
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80083a8:	6029      	str	r1, [r5, #0]
 80083aa:	061d      	lsls	r5, r3, #24
 80083ac:	d514      	bpl.n	80083d8 <_printf_i+0x1ac>
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b91e      	cbnz	r6, 80083c2 <_printf_i+0x196>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f023 0320 	bic.w	r3, r3, #32
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	2310      	movs	r3, #16
 80083c4:	e7b0      	b.n	8008328 <_printf_i+0xfc>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	2378      	movs	r3, #120	; 0x78
 80083d0:	4828      	ldr	r0, [pc, #160]	; (8008474 <_printf_i+0x248>)
 80083d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d6:	e7e3      	b.n	80083a0 <_printf_i+0x174>
 80083d8:	0659      	lsls	r1, r3, #25
 80083da:	bf48      	it	mi
 80083dc:	b2b6      	uxthmi	r6, r6
 80083de:	e7e6      	b.n	80083ae <_printf_i+0x182>
 80083e0:	4615      	mov	r5, r2
 80083e2:	e7bb      	b.n	800835c <_printf_i+0x130>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	6826      	ldr	r6, [r4, #0]
 80083e8:	6961      	ldr	r1, [r4, #20]
 80083ea:	1d18      	adds	r0, r3, #4
 80083ec:	6028      	str	r0, [r5, #0]
 80083ee:	0635      	lsls	r5, r6, #24
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0x1cc>
 80083f4:	6019      	str	r1, [r3, #0]
 80083f6:	e002      	b.n	80083fe <_printf_i+0x1d2>
 80083f8:	0670      	lsls	r0, r6, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0x1c8>
 80083fc:	8019      	strh	r1, [r3, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	4615      	mov	r5, r2
 8008404:	e7ba      	b.n	800837c <_printf_i+0x150>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	681d      	ldr	r5, [r3, #0]
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	2100      	movs	r1, #0
 8008412:	4628      	mov	r0, r5
 8008414:	f7f7 ff1c 	bl	8000250 <memchr>
 8008418:	b108      	cbz	r0, 800841e <_printf_i+0x1f2>
 800841a:	1b40      	subs	r0, r0, r5
 800841c:	6060      	str	r0, [r4, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	2300      	movs	r3, #0
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	e7a8      	b.n	800837c <_printf_i+0x150>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	462a      	mov	r2, r5
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	47d0      	blx	sl
 8008434:	3001      	adds	r0, #1
 8008436:	d0ab      	beq.n	8008390 <_printf_i+0x164>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	079b      	lsls	r3, r3, #30
 800843c:	d413      	bmi.n	8008466 <_printf_i+0x23a>
 800843e:	68e0      	ldr	r0, [r4, #12]
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	4298      	cmp	r0, r3
 8008444:	bfb8      	it	lt
 8008446:	4618      	movlt	r0, r3
 8008448:	e7a4      	b.n	8008394 <_printf_i+0x168>
 800844a:	2301      	movs	r3, #1
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	47d0      	blx	sl
 8008454:	3001      	adds	r0, #1
 8008456:	d09b      	beq.n	8008390 <_printf_i+0x164>
 8008458:	3501      	adds	r5, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	42ab      	cmp	r3, r5
 8008462:	dcf2      	bgt.n	800844a <_printf_i+0x21e>
 8008464:	e7eb      	b.n	800843e <_printf_i+0x212>
 8008466:	2500      	movs	r5, #0
 8008468:	f104 0619 	add.w	r6, r4, #25
 800846c:	e7f5      	b.n	800845a <_printf_i+0x22e>
 800846e:	bf00      	nop
 8008470:	0800962a 	.word	0x0800962a
 8008474:	0800963b 	.word	0x0800963b

08008478 <_read_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d07      	ldr	r5, [pc, #28]	; (8008498 <_read_r+0x20>)
 800847c:	4604      	mov	r4, r0
 800847e:	4608      	mov	r0, r1
 8008480:	4611      	mov	r1, r2
 8008482:	2200      	movs	r2, #0
 8008484:	602a      	str	r2, [r5, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	f000 f90e 	bl	80086a8 <_read>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_read_r+0x1e>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_read_r+0x1e>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	2000af70 	.word	0x2000af70

0800849c <_fstat_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_fstat_r+0x20>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	f000 f936 	bl	800871a <_fstat>
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	d102      	bne.n	80084b8 <_fstat_r+0x1c>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	b103      	cbz	r3, 80084b8 <_fstat_r+0x1c>
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
 80084ba:	bf00      	nop
 80084bc:	2000af70 	.word	0x2000af70

080084c0 <_isatty_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d06      	ldr	r5, [pc, #24]	; (80084dc <_isatty_r+0x1c>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4604      	mov	r4, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	f000 f92a 	bl	8008724 <_isatty>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_isatty_r+0x1a>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_isatty_r+0x1a>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	2000af70 	.word	0x2000af70

080084e0 <_realloc_r>:
 80084e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e4:	4680      	mov	r8, r0
 80084e6:	4614      	mov	r4, r2
 80084e8:	460e      	mov	r6, r1
 80084ea:	b921      	cbnz	r1, 80084f6 <_realloc_r+0x16>
 80084ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	4611      	mov	r1, r2
 80084f2:	f7fe bfaf 	b.w	8007454 <_malloc_r>
 80084f6:	b92a      	cbnz	r2, 8008504 <_realloc_r+0x24>
 80084f8:	f7fe ff40 	bl	800737c <_free_r>
 80084fc:	4625      	mov	r5, r4
 80084fe:	4628      	mov	r0, r5
 8008500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008504:	f000 f81b 	bl	800853e <_malloc_usable_size_r>
 8008508:	4284      	cmp	r4, r0
 800850a:	4607      	mov	r7, r0
 800850c:	d802      	bhi.n	8008514 <_realloc_r+0x34>
 800850e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008512:	d812      	bhi.n	800853a <_realloc_r+0x5a>
 8008514:	4621      	mov	r1, r4
 8008516:	4640      	mov	r0, r8
 8008518:	f7fe ff9c 	bl	8007454 <_malloc_r>
 800851c:	4605      	mov	r5, r0
 800851e:	2800      	cmp	r0, #0
 8008520:	d0ed      	beq.n	80084fe <_realloc_r+0x1e>
 8008522:	42bc      	cmp	r4, r7
 8008524:	4622      	mov	r2, r4
 8008526:	4631      	mov	r1, r6
 8008528:	bf28      	it	cs
 800852a:	463a      	movcs	r2, r7
 800852c:	f7fe fef6 	bl	800731c <memcpy>
 8008530:	4631      	mov	r1, r6
 8008532:	4640      	mov	r0, r8
 8008534:	f7fe ff22 	bl	800737c <_free_r>
 8008538:	e7e1      	b.n	80084fe <_realloc_r+0x1e>
 800853a:	4635      	mov	r5, r6
 800853c:	e7df      	b.n	80084fe <_realloc_r+0x1e>

0800853e <_malloc_usable_size_r>:
 800853e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008542:	1f18      	subs	r0, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfbc      	itt	lt
 8008548:	580b      	ldrlt	r3, [r1, r0]
 800854a:	18c0      	addlt	r0, r0, r3
 800854c:	4770      	bx	lr

0800854e <_ZdlPv>:
 800854e:	f000 b83f 	b.w	80085d0 <free>

08008552 <_Znwj>:
 8008552:	2801      	cmp	r0, #1
 8008554:	bf38      	it	cc
 8008556:	2001      	movcc	r0, #1
 8008558:	b510      	push	{r4, lr}
 800855a:	4604      	mov	r4, r0
 800855c:	4620      	mov	r0, r4
 800855e:	f000 f82f 	bl	80085c0 <malloc>
 8008562:	b930      	cbnz	r0, 8008572 <_Znwj+0x20>
 8008564:	f000 f81c 	bl	80085a0 <_ZSt15get_new_handlerv>
 8008568:	b908      	cbnz	r0, 800856e <_Znwj+0x1c>
 800856a:	f000 f821 	bl	80085b0 <abort>
 800856e:	4780      	blx	r0
 8008570:	e7f4      	b.n	800855c <_Znwj+0xa>
 8008572:	bd10      	pop	{r4, pc}

08008574 <__cxa_pure_virtual>:
 8008574:	b508      	push	{r3, lr}
 8008576:	f000 f80d 	bl	8008594 <_ZSt9terminatev>

0800857a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800857a:	b508      	push	{r3, lr}
 800857c:	4780      	blx	r0
 800857e:	f000 f817 	bl	80085b0 <abort>
	...

08008584 <_ZSt13get_terminatev>:
 8008584:	4b02      	ldr	r3, [pc, #8]	; (8008590 <_ZSt13get_terminatev+0xc>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	f3bf 8f5b 	dmb	ish
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000074 	.word	0x20000074

08008594 <_ZSt9terminatev>:
 8008594:	b508      	push	{r3, lr}
 8008596:	f7ff fff5 	bl	8008584 <_ZSt13get_terminatev>
 800859a:	f7ff ffee 	bl	800857a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080085a0 <_ZSt15get_new_handlerv>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <_ZSt15get_new_handlerv+0xc>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f3bf 8f5b 	dmb	ish
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	2000af74 	.word	0x2000af74

080085b0 <abort>:
 80085b0:	b508      	push	{r3, lr}
 80085b2:	2006      	movs	r0, #6
 80085b4:	f000 f83c 	bl	8008630 <raise>
 80085b8:	2001      	movs	r0, #1
 80085ba:	f000 f86f 	bl	800869c <_exit>
	...

080085c0 <malloc>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <malloc+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f7fe bf45 	b.w	8007454 <_malloc_r>
 80085ca:	bf00      	nop
 80085cc:	20000010 	.word	0x20000010

080085d0 <free>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <free+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f7fe bed1 	b.w	800737c <_free_r>
 80085da:	bf00      	nop
 80085dc:	20000010 	.word	0x20000010

080085e0 <_raise_r>:
 80085e0:	291f      	cmp	r1, #31
 80085e2:	b538      	push	{r3, r4, r5, lr}
 80085e4:	4604      	mov	r4, r0
 80085e6:	460d      	mov	r5, r1
 80085e8:	d904      	bls.n	80085f4 <_raise_r+0x14>
 80085ea:	2316      	movs	r3, #22
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085f6:	b112      	cbz	r2, 80085fe <_raise_r+0x1e>
 80085f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085fc:	b94b      	cbnz	r3, 8008612 <_raise_r+0x32>
 80085fe:	4620      	mov	r0, r4
 8008600:	f000 f830 	bl	8008664 <_getpid_r>
 8008604:	462a      	mov	r2, r5
 8008606:	4601      	mov	r1, r0
 8008608:	4620      	mov	r0, r4
 800860a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860e:	f000 b817 	b.w	8008640 <_kill_r>
 8008612:	2b01      	cmp	r3, #1
 8008614:	d00a      	beq.n	800862c <_raise_r+0x4c>
 8008616:	1c59      	adds	r1, r3, #1
 8008618:	d103      	bne.n	8008622 <_raise_r+0x42>
 800861a:	2316      	movs	r3, #22
 800861c:	6003      	str	r3, [r0, #0]
 800861e:	2001      	movs	r0, #1
 8008620:	e7e7      	b.n	80085f2 <_raise_r+0x12>
 8008622:	2400      	movs	r4, #0
 8008624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008628:	4628      	mov	r0, r5
 800862a:	4798      	blx	r3
 800862c:	2000      	movs	r0, #0
 800862e:	e7e0      	b.n	80085f2 <_raise_r+0x12>

08008630 <raise>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <raise+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f7ff bfd3 	b.w	80085e0 <_raise_r>
 800863a:	bf00      	nop
 800863c:	20000010 	.word	0x20000010

08008640 <_kill_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d07      	ldr	r5, [pc, #28]	; (8008660 <_kill_r+0x20>)
 8008644:	2300      	movs	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	f000 f81d 	bl	800868c <_kill>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d102      	bne.n	800865c <_kill_r+0x1c>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b103      	cbz	r3, 800865c <_kill_r+0x1c>
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	2000af70 	.word	0x2000af70

08008664 <_getpid_r>:
 8008664:	f000 b810 	b.w	8008688 <_getpid>

08008668 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 8008668:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800866a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800866e:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8008670:	2201      	movs	r2, #1
 8008672:	a901      	add	r1, sp, #4
 8008674:	4803      	ldr	r0, [pc, #12]	; (8008684 <__io_putchar+0x1c>)
 8008676:	f7f9 fda1 	bl	80021bc <HAL_UART_Transmit>
  return ch;
}
 800867a:	9801      	ldr	r0, [sp, #4]
 800867c:	b003      	add	sp, #12
 800867e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008682:	bf00      	nop
 8008684:	20002554 	.word	0x20002554

08008688 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008688:	2001      	movs	r0, #1
 800868a:	4770      	bx	lr

0800868c <_kill>:

int _kill(int pid, int sig)
{
 800868c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800868e:	f000 f84d 	bl	800872c <__errno>
 8008692:	2316      	movs	r3, #22
 8008694:	6003      	str	r3, [r0, #0]
	return -1;
}
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	bd08      	pop	{r3, pc}

0800869c <_exit>:

void _exit (int status)
{
 800869c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800869e:	f000 f845 	bl	800872c <__errno>
 80086a2:	2316      	movs	r3, #22
 80086a4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80086a6:	e7fe      	b.n	80086a6 <_exit+0xa>

080086a8 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	460d      	mov	r5, r1
 80086ac:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086ae:	460e      	mov	r6, r1
 80086b0:	1b73      	subs	r3, r6, r5
 80086b2:	429c      	cmp	r4, r3
 80086b4:	dc01      	bgt.n	80086ba <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80086ba:	f3af 8000 	nop.w
 80086be:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086c2:	e7f5      	b.n	80086b0 <_read+0x8>

080086c4 <_write>:

int _write(int file, char *ptr, int len)
{
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	460d      	mov	r5, r1
 80086c8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086ca:	460e      	mov	r6, r1
 80086cc:	1b73      	subs	r3, r6, r5
 80086ce:	429c      	cmp	r4, r3
 80086d0:	dc01      	bgt.n	80086d6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80086d2:	4620      	mov	r0, r4
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80086d6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80086da:	f7ff ffc5 	bl	8008668 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086de:	e7f5      	b.n	80086cc <_write+0x8>

080086e0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80086e0:	4a0a      	ldr	r2, [pc, #40]	; (800870c <_sbrk+0x2c>)
 80086e2:	6811      	ldr	r1, [r2, #0]
{
 80086e4:	b508      	push	{r3, lr}
 80086e6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80086e8:	b909      	cbnz	r1, 80086ee <_sbrk+0xe>
		heap_end = &end;
 80086ea:	4909      	ldr	r1, [pc, #36]	; (8008710 <_sbrk+0x30>)
 80086ec:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80086ee:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80086f0:	4669      	mov	r1, sp
 80086f2:	4403      	add	r3, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	d906      	bls.n	8008706 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80086f8:	f000 f818 	bl	800872c <__errno>
 80086fc:	230c      	movs	r3, #12
 80086fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8008704:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8008706:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8008708:	e7fc      	b.n	8008704 <_sbrk+0x24>
 800870a:	bf00      	nop
 800870c:	2000af78 	.word	0x2000af78
 8008710:	2000af80 	.word	0x2000af80

08008714 <_close>:

int _close(int file)
{
	return -1;
}
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	4770      	bx	lr

0800871a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800871a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800871e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr

08008724 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008724:	2001      	movs	r0, #1
 8008726:	4770      	bx	lr

08008728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008728:	2000      	movs	r0, #0
 800872a:	4770      	bx	lr

0800872c <__errno>:
 800872c:	4b01      	ldr	r3, [pc, #4]	; (8008734 <__errno+0x8>)
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000010 	.word	0x20000010

08008738 <_init>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr

08008744 <_fini>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	bf00      	nop
 8008748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874a:	bc08      	pop	{r3}
 800874c:	469e      	mov	lr, r3
 800874e:	4770      	bx	lr
